try {
	document.write('<script type="text/javascript" src="../../../swordweb/domain.js"><\/script>');
	document.close()
} catch (e) {}

var swordCfg = {
	frametab : {
		maxTabNum : 10
	},
	swordPopUpBox : {
		flag : true,
		number : 0,
		topMask : false
	},
	SwordClientTiming : true
};
function maskDialog() {
	this.hide = function () {
		var a = $("div_Mask");
		if (a) {
			a.setStyle("display", "none")
		}
	};
	this.show = function () {
		var a = document.documentElement.clientHeight;
		document.writeln('<div id="div_Mask" style=" width:100%;position:absolute; z-index:99999; top:0; left:0; background:white; height:' + a + 'px;"><div style="z-index:99999;width:200px;height:100px;font-size:12px;position:absolute;top:30%;left:40%; border:1px #AAAAAA solid; background-color: white; font-family:Verdana; font-size:9pt; filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#FFFFFF, endColorstr=#EEEEEE) progid:DXImageTransform.Microsoft.Alpha(opacity=90); -moz-opacity: 0.90;"><img width="43px" height="43px" src="../../swordweb/styles/gt3new/SwordCss/images/pageloading.gif"  style="position:absolute;top:20%;left:36%"><p style="position: absolute;top:63%;left:33%">正在加载......</p></div></div>');
		document.close();
		return this
	}
}
var MaskDialog = new maskDialog().show();
var importCss = "";
$SwordLoader = (function () {
	function isServer() {
		return true
	}
	function isIE() {
		return (navigator.userAgent.toLowerCase().indexOf("msie") != -1)
	}
	function writeLocalJs(type, source) {
		var oHead = document.getElementsByTagName("HEAD").item(0);
		var oScript = document.createElement("script");
		oScript.language = "javascript";
		oScript.type = "text/javascript";
		oScript.defer = true;
		oScript[type] = source;
		oHead.appendChild(oScript);
		return oScript
	}
	function importJs(path) {
		this.writeServerJs(path)
	}
	function writeServerJs(path) {
		var xReq = null;
		if (window.XMLHttpRequest) {
			xReq = new XMLHttpRequest()
		} else {
			if (window.ActiveXObject) {
				xReq = new ActiveXObject("MsXml2.XmlHttp")
			}
		}
		xReq.open("get", path, false);
		xReq.setRequestHeader("Content-Type", "text/plain;charset=gb2312");
		xReq.send(null);
		if (xReq.readyState == 4) {
			if (xReq.status == 200) {
				if (this.isIE) {
					execScript(xReq.responseText)
				} else {
					window.eval(xReq.responseText)
				}
			}
		}
	}
	function ChargeAndGetRootPath() {
		var imObj = document.getElementsByTagName("script")[0];
		var imObjSrc = imObj.src;
		var indexPath = imObj.getAttribute("indexpath");
		if (imObjSrc.lastIndexOf("Sword.js") < 0 || imObjSrc.lastIndexOf("swordweb/core/jsimport/Sword.js") < 0) {
			if (imObjSrc.lastIndexOf("Sword_opt.js") < 0 || imObjSrc.lastIndexOf("swordweb/core/jsimport/Sword_opt.js") < 0) {
				if (indexPath != null) {
					if (imObj.outerHTML.indexOf("importCss") > 0) {
						importCss = false
					} else {
						importCss = true
					}
					return imObjSrc.replace(indexPath, "")
				} else {
					alert("Error,启动SwordWeb框架失败,Sword.js的script节点必须放在页面引用的第一个script节点上!");
					return null
				}
			} else {
				if (imObj.outerHTML.indexOf("importCss") > 0) {
					importCss = false
				} else {
					importCss = true
				}
				return imObjSrc.replace("swordweb/core/jsimport/Sword_opt.js", "")
			}
		} else {
			if (imObj.outerHTML.indexOf("importCss") > 0) {
				importCss = false
			} else {
				importCss = true
			}
			return imObjSrc.replace("swordweb/core/jsimport/Sword.js", "")
		}
	}
	function writeCSS(path) {
		var oHead = document.getElementsByTagName("HEAD").item(0);
		var link = document.createElement("link");
		link.href = path;
		link.type = "text/css";
		link.rel = "stylesheet";
		oHead.appendChild(link)
	}
	return {
		server : isServer(),
		writeLocalJs : writeLocalJs,
		writeServerJs : writeServerJs,
		importJs : importJs,
		writeCSS : writeCSS,
		isIE : isIE(),
		rootPath : ChargeAndGetRootPath()
	}
})();
if (importCss != false) {
	$SwordLoader.writeCSS($SwordLoader.rootPath + "swordweb/styles/gt3new/SwordCss/sword_min.css")
}
var jsR = (function () {
	return {
		isIE : $SwordLoader.isIE,
		rootPath : $SwordLoader.rootPath,
		config : swordCfg,
		server : function () {
			return $SwordLoader.server
		},
		doIm : function () {}

	}
})();
var MooTools = {
	version : "1.2.1",
	build : "0d4845aab3d9a4fdee2f0d4a6dd59210e4b697cf"
};
var Native = function (n) {
	n = n || {};
	var a = n.name;
	var l = n.legacy;
	var b = n.protect;
	var c = n.implement;
	var k = n.generics;
	var g = n.initialize;
	var h = n.afterImplement || function () {};
	var d = g || l;
	k = k !== false;
	d.constructor = Native;
	d.$family = {
		name : "native"
	};
	if (l && g) {
		d.prototype = l.prototype
	}
	d.prototype.constructor = d;
	if (a) {
		var f = a.toLowerCase();
		d.prototype.$family = {
			name : f
		};
		Native.typize(d, f)
	}
	var m = function (r, p, s, q) {
		if (!b || q || !r.prototype[p]) {
			r.prototype[p] = s
		}
		if (k) {
			Native.genericize(r, p, b)
		}
		h.call(r, p, s);
		return r
	};
	d.alias = function (r, p, s) {
		if (typeof r == "string") {
			if ((r = this.prototype[r])) {
				return m(this, p, r, s)
			}
		}
		for (var q in r) {
			this.alias(q, r[q], p)
		}
		return this
	};
	d.implement = function (r, q, t) {
		if (typeof r == "string") {
			return m(this, r, q, t)
		}
		for (var s in r) {
			m(this, s, r[s], q)
		}
		return this
	};
	if (c) {
		d.implement(c)
	}
	return d
};
Native.genericize = function (b, c, a) {
	if ((!a || !b[c]) && typeof b.prototype[c] == "function") {
		b[c] = function () {
			var d = Array.prototype.slice.call(arguments);
			return b.prototype[c].apply(d.shift(), d)
		}
	}
};
Native.implement = function (d, c) {
	for (var b = 0, a = d.length; b < a; b++) {
		d[b].implement(c)
	}
};
Native.typize = function (a, b) {
	if (!a.type) {
		a.type = function (c) {
			return ($type(c) === b)
		}
	}
};
(function () {
	var a = {
		Array : Array,
		Date : Date,
		Function : Function,
		Number : Number,
		RegExp : RegExp,
		String : String
	};
	for (var k in a) {
		new Native({
			name : k,
			initialize : a[k],
			protect : true
		})
	}
	var d = {
		"boolean" : Boolean,
		"native" : Native,
		object : Object
	};
	for (var c in d) {
		Native.typize(d[c], c)
	}
	var h = {
		Array : ["concat", "indexOf", "join", "lastIndexOf", "pop", "push", "reverse", "shift", "slice", "sort", "splice", "toString", "unshift", "valueOf"],
		String : ["charAt", "charCodeAt", "concat", "indexOf", "lastIndexOf", "match", "replace", "search", "slice", "split", "substr", "substring", "toLowerCase", "toUpperCase", "valueOf"]
	};
	for (var f in h) {
		for (var b = h[f].length; b--; ) {
			Native.genericize(window[f], h[f][b], true)
		}
	}
})();
var Hash = new Native({
		name : "Hash",
		initialize : function (a) {
			if ($type(a) == "hash") {
				a = $unlink(a.getClean())
			}
			for (var b in a) {
				this[b] = a[b]
			}
			return this
		}
	});
Hash.implement({
	forEach : function (b, c) {
		for (var a in this) {
			if (this.hasOwnProperty(a)) {
				b.call(c, this[a], a, this)
			}
		}
	},
	getClean : function () {
		var b = {};
		for (var a in this) {
			if (this.hasOwnProperty(a)) {
				b[a] = this[a]
			}
		}
		return b
	},
	getLength : function () {
		var b = 0;
		for (var a in this) {
			if (this.hasOwnProperty(a)) {
				b++
			}
		}
		return b
	}
});
Hash.alias("forEach", "each");
Array.implement({
	forEach : function (c, d) {
		for (var b = 0, a = this.length; b < a; b++) {
			c.call(d, this[b], b, this)
		}
	}
});
Array.alias("forEach", "each");
function $A(c) {
	if (c.item) {
		var d = [];
		for (var b = 0, a = c.length; b < a; b++) {
			d[b] = c[b]
		}
		return d
	}
	return Array.prototype.slice.call(c)
}
function $arguments(a) {
	return function () {
		return arguments[a]
	}
}
function $chk(a) {
	return !!(a || a === 0)
}
function $clear(a) {
	clearTimeout(a);
	clearInterval(a);
	return null
}
function $defined(a) {
	return (a != undefined)
}
function $each(c, b, d) {
	var a = $type(c);
	((a == "arguments" || a == "collection" || a == "array") ? Array : Hash).each(c, b, d)
}
function $empty() {}

function $extend(c, a) {
	for (var b in(a || {})) {
		c[b] = a[b]
	}
	return c
}
function $H(a) {
	return new Hash(a)
}
function $lambda(a) {
	return (typeof a == "function") ? a : function () {
		return a
	}
}
function $merge() {
	var f = {};
	for (var d = 0, a = arguments.length; d < a; d++) {
		var b = arguments[d];
		if ($type(b) != "object") {
			continue
		}
		for (var c in b) {
			var h = b[c],
			g = f[c];
			f[c] = (g && $type(h) == "object" && $type(g) == "object") ? $merge(g, h) : $unlink(h)
		}
	}
	return f
}
function $pick() {
	for (var b = 0, a = arguments.length; b < a; b++) {
		if (arguments[b] != undefined) {
			return arguments[b]
		}
	}
	return null
}
function $random(b, a) {
	return Math.floor(Math.random() * (a - b + 1) + b)
}
function $splat(b) {
	var a = $type(b);
	return (a) ? ((a != "array" && a != "arguments") ? [b] : b) : []
}
var $time = Date.now || function () {
	return +new Date
};
function $try() {
	for (var b = 0, a = arguments.length; b < a; b++) {
		try {
			return arguments[b]()
		} catch (c) {}

	}
	return null
}
function $type(a) {
	if (a == undefined) {
		return false
	}
	if (a.$family) {
		return (a.$family.name == "number" && !isFinite(a)) ? false : a.$family.name
	}
	if (a.nodeName) {
		switch (a.nodeType) {
		case 1:
			return "element";
		case 3:
			return (/\S/).test(a.nodeValue) ? "textnode" : "whitespace"
		}
	} else {
		if (typeof a.length == "number") {
			if (a.callee) {
				return "arguments"
			} else {
				if (a.item) {
					return "collection"
				}
			}
		}
	}
	return typeof a
}
function $unlink(c) {
	var b;
	switch ($type(c)) {
	case "object":
		b = {};
		for (var f in c) {
			b[f] = $unlink(c[f])
		}
		break;
	case "hash":
		b = new Hash(c);
		break;
	case "array":
		b = [];
		for (var d = 0, a = c.length; d < a; d++) {
			b[d] = $unlink(c[d])
		}
		break;
	default:
		return c
	}
	return b
}
var Browser = $merge({
		Engine : {
			name : "unknown",
			version : 0
		},
		Platform : {
			name : (window.orientation != undefined) ? "ipod" : (navigator.platform.match(/mac|win|linux/i) || ["other"])[0].toLowerCase()
		},
		Features : {
			xpath : !!(document.evaluate),
			air : !!(window.runtime),
			query : !!(document.querySelector)
		},
		Plugins : {},
		Engines : {
			presto : function () {
				return (!window.opera) ? false : ((arguments.callee.caller) ? 960 : ((document.getElementsByClassName) ? 950 : 925))
			},
			trident : function () {
				return (!window.ActiveXObject) ? false : ((window.XMLHttpRequest) ? ((navigator.appVersion.match(/10./i) == "10.") ? 8 : ((navigator.appVersion.match(/9./i) == "9.") ? 7 : ((document.querySelectorAll) ? 6 : 5))) : (navigator.appVersion.indexOf("MSIE 8.0") != -1 ? 6 : 4))
			},
			webkit : function () {
				return (navigator.taintEnabled) ? false : ((Browser.Features.xpath) ? ((Browser.Features.query) ? 525 : 420) : 419)
			},
			gecko : function () {
				return (!document.getBoxObjectFor && window.mozInnerScreenX == null) ? false : ((document.getElementsByClassName) ? 19 : 18)
			}
		}
	}, Browser || {});
Browser.Platform[Browser.Platform.name] = true;
Browser.detect = function () {
	for (var b in this.Engines) {
		var a = this.Engines[b]();
		if (a) {
			this.Engine = {
				name : b,
				version : a
			};
			this.Engine[b] = this.Engine[b + a] = true;
			break
		}
	}
	return {
		name : b,
		version : a
	}
};
Browser.detect();
Browser.Request = function () {
	return $try(function () {
		return new XMLHttpRequest()
	}, function () {
		return new ActiveXObject("MSXML2.XMLHTTP")
	}, function () {
		return new ActiveXObject("Microsoft.XMLHTTP")
	})
};
Browser.Features.xhr = !!(Browser.Request());
Browser.Plugins.Flash = (function () {
	var a = ($try(function () {
			return navigator.plugins["Shockwave Flash"].description
		}, function () {
			return new ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable("$version")
		}) || "0 r0").match(/\d+/g);
	return {
		version : parseInt(a[0] || 0 + "." + a[1], 10) || 0,
		build : parseInt(a[2], 10) || 0
	}
})();
function $exec(b) {
	if (!b) {
		return b
	}
	if (window.execScript) {
		window.execScript(b)
	} else {
		var a = document.createElement("script");
		a.setAttribute("type", "text/javascript");
		a[(Browser.Engine.webkit && Browser.Engine.version < 420) ? "innerText" : "text"] = b;
		document.head.appendChild(a);
		document.head.removeChild(a)
	}
	return b
}
Native.UID = 1;
var $uid = (Browser.Engine.trident) ? function (a) {
	return (a.uid || (a.uid = [Native.UID++]))[0]
}
 : function (a) {
	return a.uid || (a.uid = Native.UID++)
};
var Window = new Native({
		name : "Window",
		legacy : (Browser.Engine.trident) ? null : window.Window,
		initialize : function (a) {
			$uid(a);
			if (!a.Element) {
				a.Element = $empty;
				if (Browser.Engine.webkit) {
					a.document.createElement("iframe")
				}
				a.Element.prototype = (Browser.Engine.webkit) ? window["[[DOMElement.prototype]]"] : {}

			}
			a.document.window = a;
			return $extend(a, Window.Prototype)
		},
		afterImplement : function (b, a) {
			window[b] = Window.Prototype[b] = a
		}
	});
Window.Prototype = {
	$family : {
		name : "window"
	}
};
new Window(window);
var Document = new Native({
		name : "Document",
		legacy : (Browser.Engine.trident) ? null : window.Document,
		initialize : function (a) {
			$uid(a);
			a.head = a.getElementsByTagName("head")[0];
			a.html = a.getElementsByTagName("html")[0];
			if (Browser.Engine.trident && Browser.Engine.version <= 4) {
				$try(function () {
					a.execCommand("BackgroundImageCache", false, true)
				})
			}
			if (Browser.Engine.trident) {
				a.window.attachEvent("onunload", function () {
					a.window.detachEvent("onunload", arguments.callee);
					a.head = a.html = a.window = null
				})
			}
			return $extend(a, Document.Prototype)
		},
		afterImplement : function (b, a) {
			document[b] = Document.Prototype[b] = a
		}
	});
Document.Prototype = {
	$family : {
		name : "document"
	}
};
new Document(document);
Array.implement({
	every : function (c, d) {
		for (var b = 0, a = this.length; b < a; b++) {
			if (!c.call(d, this[b], b, this)) {
				return false
			}
		}
		return true
	},
	filter : function (d, f) {
		var c = [];
		for (var b = 0, a = this.length; b < a; b++) {
			if (d.call(f, this[b], b, this)) {
				c.push(this[b])
			}
		}
		return c
	},
	clean : function () {
		return this.filter($defined)
	},
	indexOf : function (c, d) {
		var a = this.length;
		for (var b = (d < 0) ? Math.max(0, a + d) : d || 0; b < a; b++) {
			if (this[b] === c) {
				return b
			}
		}
		return -1
	},
	map : function (d, f) {
		var c = [];
		for (var b = 0, a = this.length; b < a; b++) {
			c[b] = d.call(f, this[b], b, this)
		}
		return c
	},
	some : function (c, d) {
		for (var b = 0, a = this.length; b < a; b++) {
			if (c.call(d, this[b], b, this)) {
				return true
			}
		}
		return false
	},
	associate : function (c) {
		var d = {},
		b = Math.min(this.length, c.length);
		for (var a = 0; a < b; a++) {
			d[c[a]] = this[a]
		}
		return d
	},
	link : function (c) {
		var a = {};
		for (var f = 0, b = this.length; f < b; f++) {
			for (var d in c) {
				if (c[d](this[f])) {
					a[d] = this[f];
					delete c[d];
					break
				}
			}
		}
		return a
	},
	contains : function (a, b) {
		return this.indexOf(a, b) != -1
	},
	extend : function (c) {
		for (var b = 0, a = c.length; b < a; b++) {
			this.push(c[b])
		}
		return this
	},
	getLast : function () {
		return (this.length) ? this[this.length - 1] : null
	},
	getRandom : function () {
		return (this.length) ? this[$random(0, this.length - 1)] : null
	},
	include : function (a) {
		if (!this.contains(a)) {
			this.push(a)
		}
		return this
	},
	combine : function (c) {
		for (var b = 0, a = c.length; b < a; b++) {
			this.include(c[b])
		}
		return this
	},
	erase : function (b) {
		for (var a = this.length; a--; a) {
			if (this[a] === b) {
				this.splice(a, 1)
			}
		}
		return this
	},
	empty : function () {
		this.length = 0;
		return this
	},
	flatten : function () {
		var d = [];
		for (var b = 0, a = this.length; b < a; b++) {
			var c = $type(this[b]);
			if (!c) {
				continue
			}
			d = d.concat((c == "array" || c == "collection" || c == "arguments") ? Array.flatten(this[b]) : this[b])
		}
		return d
	},
	hexToRgb : function (b) {
		if (this.length != 3) {
			return null
		}
		var a = this.map(function (c) {
				if (c.length == 1) {
					c += c
				}
				return c.toInt(16)
			});
		return (b) ? a : "rgb(" + a + ")"
	},
	rgbToHex : function (d) {
		if (this.length < 3) {
			return null
		}
		if (this.length == 4 && this[3] == 0 && !d) {
			return "transparent"
		}
		var b = [];
		for (var a = 0; a < 3; a++) {
			var c = (this[a] - 0).toString(16);
			b.push((c.length == 1) ? "0" + c : c)
		}
		return (d) ? b : "#" + b.join("")
	}
});
Function.implement({
	extend : function (a) {
		for (var b in a) {
			this[b] = a[b]
		}
		return this
	},
	create : function (b) {
		var a = this;
		b = b || {};
		return function (d) {
			var c = b.arguments;
			c = (c != undefined) ? $splat(c) : Array.slice(arguments, (b.event) ? 1 : 0);
			if (b.event) {
				c = [d || window.event].extend(c)
			}
			var f = function () {
				return a.apply(b.bind || null, c)
			};
			if (b.delay) {
				return setTimeout(f, b.delay)
			}
			if (b.periodical) {
				return setInterval(f, b.periodical)
			}
			if (b.attempt) {
				return $try(f)
			}
			return f()
		}
	},
	run : function (a, b) {
		return this.apply(b, $splat(a))
	},
	pass : function (a, b) {
		return this.create({
			bind : b,
			arguments : a
		})
	},
	bindWithEvent : function (b, a) {
		return this.create({
			bind : b,
			arguments : a,
			event : true
		})
	},
	attempt : function (a, b) {
		return this.create({
			bind : b,
			arguments : a,
			attempt : true
		})()
	},
	delay : function (b, c, a) {
		return this.create({
			bind : c,
			arguments : a,
			delay : b
		})()
	},
	periodical : function (c, b, a) {
		return this.create({
			bind : b,
			arguments : a,
			periodical : c
		})()
	}
});
Function.prototype.bind = function (b, a) {
	return this.create({
		bind : b,
		arguments : a
	})
};
Number.implement({
	limit : function (b, a) {
		return Math.min(a, Math.max(b, this))
	},
	round : function (a) {
		a = Math.pow(10, a || 0);
		return Math.round(this * a) / a
	},
	times : function (b, c) {
		for (var a = 0; a < this; a++) {
			b.call(c, a, this)
		}
	},
	toFloat : function () {
		return parseFloat(this)
	},
	toInt : function (a) {
		return parseInt(this, a || 10)
	}
});
Number.alias("times", "each");
(function (b) {
	var a = {};
	b.each(function (c) {
		if (!Number[c]) {
			a[c] = function () {
				return Math[c].apply(null, [this].concat($A(arguments)))
			}
		}
	});
	Number.implement(a)
})(["abs", "acos", "asin", "atan", "atan2", "ceil", "cos", "exp", "floor", "log", "max", "min", "pow", "sin", "sqrt", "tan"]);
String.implement({
	test : function (a, b) {
		return ((typeof a == "string") ? new RegExp(a, b) : a).test(this)
	},
	contains : function (a, b) {
		return (b) ? (b + this + b).indexOf(b + a + b) > -1 : this.indexOf(a) > -1
	},
	trim : function () {
		return this.replace(/^\s+|\s+$/g, "")
	},
	clean : function () {
		return this.replace(/\s+/g, " ").trim()
	},
	camelCase : function () {
		return this.replace(/-\D/g, function (a) {
			return a.charAt(1).toUpperCase()
		})
	},
	hyphenate : function () {
		return this.replace(/[A-Z]/g, function (a) {
			return ("-" + a.charAt(0).toLowerCase())
		})
	},
	capitalize : function () {
		return this.replace(/\b[a-z]/g, function (a) {
			return a.toUpperCase()
		})
	},
	escapeRegExp : function () {
		return this.replace(/([-.*+?^${}()|[\]\/\\])/g, "\\$1")
	},
	toInt : function (a) {
		return parseInt(this, a || 10)
	},
	toFloat : function () {
		return parseFloat(this)
	},
	hexToRgb : function (b) {
		var a = this.match(/^#?(\w{1,2})(\w{1,2})(\w{1,2})$/);
		return (a) ? a.slice(1).hexToRgb(b) : null
	},
	rgbToHex : function (b) {
		var a = this.match(/\d{1,3}/g);
		return (a) ? a.rgbToHex(b) : null
	},
	stripScripts : function (b) {
		var a = "";
		var c = this.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi, function () {
				a += arguments[1] + "\n";
				return ""
			});
		if (b === true) {
			$exec(a)
		} else {
			if ($type(b) == "function") {
				b(a, c)
			}
		}
		return c
	},
	substitute : function (a, b) {
		return this.replace(b || (/\\?\{([^{}]+)\}/g), function (d, c) {
			if (d.charAt(0) == "\\") {
				return d.slice(1)
			}
			return (a[c] != undefined) ? a[c] : ""
		})
	}
});
Hash.implement({
	has : Object.prototype.hasOwnProperty,
	keyOf : function (b) {
		for (var a in this) {
			if (this.hasOwnProperty(a) && this[a] === b) {
				return a
			}
		}
		return null
	},
	hasValue : function (a) {
		return (Hash.keyOf(this, a) !== null)
	},
	extend : function (a) {
		Hash.each(a, function (c, b) {
			Hash.set(this, b, c)
		}, this);
		return this
	},
	combine : function (a) {
		Hash.each(a, function (c, b) {
			Hash.include(this, b, c)
		}, this);
		return this
	},
	erase : function (a) {
		if (this.hasOwnProperty(a)) {
			delete this[a]
		}
		return this
	},
	get : function (a) {
		return (this.hasOwnProperty(a)) ? this[a] : null
	},
	set : function (a, b) {
		if (!this[a] || this.hasOwnProperty(a)) {
			this[a] = b
		}
		return this
	},
	empty : function () {
		Hash.each(this, function (b, a) {
			delete this[a]
		}, this);
		return this
	},
	include : function (b, c) {
		var a = this[b];
		if (a == undefined) {
			this[b] = c
		}
		return this
	},
	map : function (b, c) {
		var a = new Hash;
		Hash.each(this, function (f, d) {
			a.set(d, b.call(c, f, d, this))
		}, this);
		return a
	},
	filter : function (b, c) {
		var a = new Hash;
		Hash.each(this, function (f, d) {
			if (b.call(c, f, d, this)) {
				a.set(d, f)
			}
		}, this);
		return a
	},
	every : function (b, c) {
		for (var a in this) {
			if (this.hasOwnProperty(a) && !b.call(c, this[a], a)) {
				return false
			}
		}
		return true
	},
	some : function (b, c) {
		for (var a in this) {
			if (this.hasOwnProperty(a) && b.call(c, this[a], a)) {
				return true
			}
		}
		return false
	},
	getKeys : function () {
		var a = [];
		Hash.each(this, function (c, b) {
			a.push(b)
		});
		return a
	},
	getValues : function () {
		var a = [];
		Hash.each(this, function (b) {
			a.push(b)
		});
		return a
	},
	toQueryString : function (a) {
		var b = [];
		Hash.each(this, function (g, f) {
			if (a) {
				f = a + "[" + f + "]"
			}
			var d;
			switch ($type(g)) {
			case "object":
				d = Hash.toQueryString(g, f);
				break;
			case "array":
				var c = {};
				g.each(function (k, h) {
					c[h] = k
				});
				d = Hash.toQueryString(c, f);
				break;
			default:
				d = f + "=" + encodeURIComponent(g)
			}
			if (g != undefined) {
				b.push(d)
			}
		});
		return b.join("&")
	}
});
Hash.alias({
	keyOf : "indexOf",
	hasValue : "contains"
});
var Event = new Native({
		name : "Event",
		initialize : function (a, g) {
			g = g || window;
			var n = g.document;
			a = a || g.event;
			if (!a) {
				return
			}
			if (a.$extended) {
				return a
			}
			this.$extended = true;
			var m = a.type;
			var h = a.target || a.srcElement;
			while (h && h.nodeType == 3) {
				h = h.parentNode
			}
			if (m.test(/key/)) {
				var b = a.which || a.keyCode;
				var q = Event.Keys.keyOf(b);
				if (m == "keydown") {
					var d = b - 111;
					if (d > 0 && d < 13) {
						q = "f" + d
					}
				}
				q = q || String.fromCharCode(b).toLowerCase()
			} else {
				if (m.match(/(click|mouse|menu)/i)) {
					n = (!n.compatMode || n.compatMode == "CSS1Compat") ? n.html : n.body;
					var l = {
						x : a.pageX || a.clientX + n.scrollLeft,
						y : a.pageY || a.clientY + n.scrollTop
					};
					var c = {
						x : (a.pageX) ? a.pageX - g.pageXOffset : a.clientX,
						y : (a.pageY) ? a.pageY - g.pageYOffset : a.clientY
					};
					if (m.match(/DOMMouseScroll|mousewheel/)) {
						var k = (a.wheelDelta) ? a.wheelDelta / 120 :  - (a.detail || 0) / 3
					}
					var f = (a.which == 3) || (a.button == 2);
					var p = null;
					if (m.match(/over|out/)) {
						switch (m) {
						case "mouseover":
							p = a.relatedTarget || a.fromElement;
							break;
						case "mouseout":
							p = a.relatedTarget || a.toElement
						}
						if (!(function () {
								while (p && p.nodeType == 3) {
									p = p.parentNode
								}
								return true
							}).create({
								attempt : Browser.Engine.gecko
							})()) {
							p = false
						}
					}
				}
			}
			return $extend(this, {
				event : a,
				type : m,
				page : l,
				client : c,
				rightClick : f,
				wheel : k,
				relatedTarget : p,
				target : h,
				code : b,
				key : q,
				shift : a.shiftKey,
				control : a.ctrlKey,
				alt : a.altKey,
				meta : a.metaKey
			})
		}
	});
Event.Keys = new Hash({
		enter : 13,
		up : 38,
		down : 40,
		left : 37,
		right : 39,
		esc : 27,
		space : 32,
		backspace : 8,
		tab : 9,
		"delete" : 46
	});
Event.implement({
	stop : function () {
		return this.stopPropagation().preventDefault()
	},
	stopPropagation : function () {
		if (this.event.stopPropagation) {
			this.event.stopPropagation()
		} else {
			this.event.cancelBubble = true
		}
		return this
	},
	preventDefault : function () {
		if (this.event.preventDefault) {
			this.event.preventDefault()
		} else {
			this.event.returnValue = false
		}
		return this
	}
});
var Class = new Native({
		name : "Class",
		initialize : function (b) {
			b = b || {};
			var a = function () {
				for (var f in this) {
					if ($type(this[f]) != "function") {
						this[f] = $unlink(this[f])
					}
				}
				this.constructor = a;
				if (Class.prototyping) {
					return this
				}
				var d = (this.initialize) ? this.initialize.apply(this, arguments) : this;
				if (this.options && this.options.initialize) {
					this.options.initialize.call(this)
				}
				return d
			};
			for (var c in Class.Mutators) {
				if (!b[c]) {
					continue
				}
				b = Class.Mutators[c](b, b[c]);
				delete b[c]
			}
			$extend(a, this);
			a.constructor = Class;
			a.prototype = b;
			return a
		}
	});
Class.Mutators = {
	Extends : function (c, a) {
		Class.prototyping = a.prototype;
		var b = new a;
		delete b.parent;
		b = Class.inherit(b, c);
		delete Class.prototyping;
		return b
	},
	Implements : function (a, b) {
		$splat(b).each(function (c) {
			Class.prototying = c;
			$extend(a, ($type(c) == "class") ? new c : c);
			delete Class.prototyping
		});
		return a
	}
};
Class.extend({
	inherit : function (b, f) {
		var a = arguments.callee.caller;
		for (var d in f) {
			var c = f[d];
			var h = b[d];
			var g = $type(c);
			if (h && g == "function") {
				if (c != h) {
					if (a) {
						c.__parent = h;
						b[d] = c
					} else {
						Class.override(b, d, c)
					}
				}
			} else {
				if (g == "object") {
					b[d] = $merge(h, c)
				} else {
					b[d] = c
				}
			}
		}
		if (a) {
			b.parent = function () {
				return arguments.callee.caller.__parent.apply(this, arguments)
			}
		}
		return b
	},
	override : function (b, a, f) {
		var d = Class.prototyping;
		if (d && b[a] != d[a]) {
			d = null
		}
		var c = function () {
			var g = this.parent;
			this.parent = d ? d[a] : b[a];
			var h = f.apply(this, arguments);
			this.parent = g;
			return h
		};
		b[a] = c
	}
});
Class.implement({
	implement : function () {
		var a = this.prototype;
		$each(arguments, function (b) {
			Class.inherit(a, b)
		});
		return this
	}
});
var Chain = new Class({
		$chain : [],
		chain : function () {
			this.$chain.extend(Array.flatten(arguments));
			return this
		},
		callChain : function () {
			return (this.$chain.length) ? this.$chain.shift().apply(this, arguments) : false
		},
		clearChain : function () {
			this.$chain.empty();
			return this
		}
	});
var Events = new Class({
		$events : {},
		addEvent : function (c, b, a) {
			c = Events.removeOn(c);
			if (b != $empty) {
				this.$events[c] = this.$events[c] || [];
				this.$events[c].include(b);
				if (a) {
					b.internal = true
				}
			}
			return this
		},
		addEvents : function (a) {
			for (var b in a) {
				this.addEvent(b, a[b])
			}
			return this
		},
		fireEvent : function (c, b, a) {
			c = Events.removeOn(c);
			if (!this.$events || !this.$events[c]) {
				return this
			}
			this.$events[c].each(function (d) {
				d.create({
					bind : this,
					delay : a,
					"arguments" : b
				})()
			}, this);
			return this
		},
		removeEvent : function (b, a) {
			b = Events.removeOn(b);
			if (!this.$events[b]) {
				return this
			}
			if (!a.internal) {
				this.$events[b].erase(a)
			}
			return this
		},
		removeEvents : function (c) {
			if ($type(c) == "object") {
				for (var d in c) {
					this.removeEvent(d, c[d])
				}
				return this
			}
			if (c) {
				c = Events.removeOn(c)
			}
			for (var d in this.$events) {
				if (c && c != d) {
					continue
				}
				var b = this.$events[d];
				for (var a = b.length; a--; a) {
					this.removeEvent(d, b[a])
				}
			}
			return this
		}
	});
Events.removeOn = function (a) {
	return a.replace(/^on([A-Z])/, function (b, c) {
		return c.toLowerCase()
	})
};
var Options = new Class({
		setOptions : function () {
			this.options = $merge.run([this.options].extend(arguments));
			if (!this.addEvent) {
				return this
			}
			for (var a in this.options) {
				if ($type(this.options[a]) != "function" || !(/^on[A-Z]/).test(a)) {
					continue
				}
				this.addEvent(a, this.options[a]);
				delete this.options[a]
			}
			return this
		}
	});
var Element = new Native({
		name : "Element",
		legacy : window.Element,
		initialize : function (a, b) {
			var c = Element.Constructors.get(a);
			if (c) {
				return c(b)
			}
			if (typeof a == "string") {
				return document.newElement(a, b)
			}
			return $(a).set(b)
		},
		afterImplement : function (a, b) {
			Element.Prototype[a] = b;
			if (Array[a]) {
				return
			}
			Elements.implement(a, function () {
				var c = [],
				h = true;
				for (var f = 0, d = this.length; f < d; f++) {
					var g = this[f][a].apply(this[f], arguments);
					c.push(g);
					if (h) {
						h = ($type(g) == "element")
					}
				}
				return (h) ? new Elements(c) : c
			})
		}
	});
Element.Prototype = {
	$family : {
		name : "element"
	}
};
Element.Constructors = new Hash;
var IFrame = new Native({
		name : "IFrame",
		generics : false,
		initialize : function () {
			var f = Array.link(arguments, {
					properties : Object.type,
					iframe : $defined
				});
			var c = f.properties || {};
			var b = $(f.iframe) || false;
			var d = c.onload || $empty;
			delete c.onload;
			c.id = c.name = $pick(c.id, c.name, b.id, b.name, "IFrame_" + $time());
			b = new Element(b || "iframe", c);
			var a = function () {
				var g = $try(function () {
						return b.contentWindow.location.host
					});
				if (g && g == window.location.host) {
					var h = new Window(b.contentWindow);
					new Document(b.contentWindow.document);
					$extend(h.Element.prototype, Element.Prototype)
				}
				d.call(b.contentWindow, b.contentWindow.document)
			};
			(window.frames[c.id]) ? a() : b.addListener("load", a);
			return b
		}
	});
var Elements = new Native({
		initialize : function (g, b) {
			b = $extend({
					ddup : true,
					cash : true
				}, b);
			g = g || [];
			if (b.ddup || b.cash) {
				var h = {},
				f = [];
				for (var c = 0, a = g.length; c < a; c++) {
					var d = $.element(g[c], !b.cash);
					if (b.ddup) {
						if (h[d.uid]) {
							continue
						}
						h[d.uid] = true
					}
					f.push(d)
				}
				g = f
			}
			return (b.cash) ? $extend(g, this) : g
		}
	});
Elements.implement({
	filter : function (a, b) {
		if (!a) {
			return this
		}
		return new Elements(Array.filter(this, (typeof a == "string") ? function (c) {
				return c.match(a)
			}
				 : a, b))
	}
});
Document.implement({
	newElement : function (a, b) {
		if (Browser.Engine.trident && Browser.Engines.trident() < 7 && b) {
			["name", "type", "checked"].each(function (c) {
				if (!b[c]) {
					return
				}
				a += " " + c + '="' + b[c] + '"';
				if (c != "checked") {
					delete b[c]
				}
			});
			a = "<" + a + ">"
		}
		return $.element(this.createElement(a)).set(b)
	},
	newTextNode : function (a) {
		return this.createTextNode(a)
	},
	getDocument : function () {
		return this
	},
	getWindow : function () {
		return this.window
	}
});
Window.implement({
	$ : function (b, c) {
		if (b && b.$family && b.uid) {
			return b
		}
		var a = $type(b);
		return ($[a]) ? $[a](b, c, this.document) : null
	},
	$$ : function (a) {
		if (arguments.length == 1 && typeof a == "string") {
			return this.document.getElements(a)
		}
		var h = [],
		k = this.document;
		var c = Array.flatten(arguments);
		for (var d = 0, b = c.length; d < b; d++) {
			var g = c[d],
			f = $type(g);
			if (f == "element") {
				h.push(g)
			} else {
				if (f == "string") {
					h.extend(k.getElements(g, true))
				}
			}
		}
		return new Elements(h)
	},
	getDocument : function () {
		return this.document
	},
	getWindow : function () {
		return this
	}
});
$.string = function (c, b, a) {
	c = a.getElementById(c);
	return (c) ? $.element(c, b) : null
};
$.element = function (a, d) {
	$uid(a);
	if (!d && !a.$family && !(/^object|embed$/i).test(a.tagName)) {
		var b = Element.Prototype;
		for (var c in b) {
			a[c] = b[c]
		}
	}
	return a
};
$.object = function (b, c, a) {
	if (b.toElement) {
		return $.element(b.toElement(a), c)
	}
	return null
};
$.textnode = $.whitespace = $.window = $.document = $arguments(0);
Native.implement([Element, Document], {
	getElement : function (a, b) {
		return $(this.getElements(a, true)[0] || null, b)
	},
	getElements : function (a, d) {
		a = a.split(",");
		var c = [];
		var b = (a.length > 1);
		a.each(function (f) {
			var g = this.getElementsByTagName(f.trim());
			(b) ? c.extend(g) : c = g
		}, this);
		return new Elements(c, {
			ddup : b,
			cash : !d
		})
	}
});
(function () {
	var k = {},
	g = {};
	var l = {
		input : "checked",
		option : "selected",
		textarea : (Browser.Engine.webkit && Browser.Engine.version < 420) ? "innerHTML" : "value"
	};
	var c = function (p) {
		return (g[p] || (g[p] = {}))
	};
	var h = function (s, q) {
		if (!s) {
			return
		}
		var r = s.uid;
		if (Browser.Engine.trident) {
			if (s.clearAttributes) {
				var u = q && s.cloneNode(false);
				s.clearAttributes();
				if (u) {
					s.mergeAttributes(u)
				}
			} else {
				if (s.removeEvents) {
					s.removeEvents()
				}
			}
			if ((/object/i).test(s.tagName)) {
				for (var t in s) {
					if (typeof s[t] == "function") {
						s[t] = $empty
					}
				}
				Element.dispose(s)
			}
		}
		if (!r) {
			return
		}
		k[r] = g[r] = null
	};
	var d = function () {
		Hash.each(k, h);
		if (Browser.Engine.trident) {
			$A(document.getElementsByTagName("object")).each(h)
		}
		if (window.CollectGarbage) {
			CollectGarbage()
		}
		k = g = null
	};
	var m = function (r, p, w, q, t, v) {
		var s = r[w || p];
		var u = [];
		while (s) {
			if (s.nodeType == 1 && (!q || Element.match(s, q))) {
				if (!t) {
					return $(s, v)
				}
				u.push(s)
			}
			s = s[p]
		}
		return (t) ? new Elements(u, {
			ddup : false,
			cash : !v
		}) : null
	};
	var f = {
		html : "innerHTML",
		"class" : "className",
		"for" : "htmlFor",
		text : (Browser.Engine.trident || (Browser.Engine.webkit && Browser.Engine.version < 420)) ? "innerText" : "textContent"
	};
	var b = ["compact", "nowrap", "ismap", "declare", "noshade", "checked", "disabled", "readonly", "multiple", "selected", "noresize", "defer"];
	var n = ["value", "accessKey", "cellPadding", "cellSpacing", "colSpan", "frameBorder", "maxLength", "readOnly", "rowSpan", "tabIndex", "useMap"];
	Hash.extend(f, b.associate(b));
	Hash.extend(f, n.associate(n.map(String.toLowerCase)));
	var a = {
		before : function (q, p) {
			if (p.parentNode) {
				p.parentNode.insertBefore(q, p)
			}
		},
		after : function (q, p) {
			if (!p.parentNode) {
				return
			}
			var r = p.nextSibling;
			(r) ? p.parentNode.insertBefore(q, r) : p.parentNode.appendChild(q)
		},
		bottom : function (q, p) {
			p.appendChild(q)
		},
		top : function (q, p) {
			var r = p.firstChild;
			(r) ? p.insertBefore(q, r) : p.appendChild(q)
		}
	};
	a.inside = a.bottom;
	Hash.each(a, function (p, q) {
		q = q.capitalize();
		Element.implement("inject" + q, function (r) {
			p(this, $(r, true));
			return this
		});
		Element.implement("grab" + q, function (r) {
			p($(r, true), this);
			return this
		})
	});
	Element.implement({
		set : function (t, r) {
			switch ($type(t)) {
			case "object":
				for (var s in t) {
					this.set(s, t[s])
				}
				break;
			case "string":
				var q = Element.Properties.get(t);
				(q && q.set) ? q.set.apply(this, Array.slice(arguments, 1)) : this.setProperty(t, r)
			}
			return this
		},
		get : function (q) {
			var p = Element.Properties.get(q);
			return (p && p.get) ? p.get.apply(this, Array.slice(arguments, 1)) : this.getProperty(q)
		},
		erase : function (q) {
			var p = Element.Properties.get(q);
			(p && p.erase) ? p.erase.apply(this) : this.removeProperty(q);
			return this
		},
		setProperty : function (q, r) {
			var p = f[q];
			if (r == undefined) {
				return this.removeProperty(q)
			}
			if (p && b[q]) {
				r = !!r
			}
			(p) ? this[p] = r : this.setAttribute(q, "" + r);
			return this
		},
		setProperties : function (p) {
			for (var q in p) {
				this.setProperty(q, p[q])
			}
			return this
		},
		getProperty : function (q) {
			var p = f[q];
			var r = (p) ? this[p] : this.getAttribute(q, 2);
			return (b[q]) ? !!r : (p) ? r : r || null
		},
		getProperties : function () {
			var p = $A(arguments);
			return p.map(this.getProperty, this).associate(p)
		},
		removeProperty : function (q) {
			var p = f[q];
			(p) ? this[p] = (p && b[q]) ? false : "" : this.removeAttribute(q);
			return this
		},
		removeProperties : function () {
			Array.each(arguments, this.removeProperty, this);
			return this
		},
		hasClass : function (p) {
			return this.className.contains(p, " ")
		},
		addClass : function (p) {
			if (!this.hasClass(p)) {
				this.className = (this.className + " " + p).clean()
			}
			return this
		},
		removeClass : function (p) {
			this.className = this.className.replace(new RegExp("(^|\\s)" + p + "(?:\\s|$)"), "$1");
			return this
		},
		toggleClass : function (p) {
			return this.hasClass(p) ? this.removeClass(p) : this.addClass(p)
		},
		adopt : function () {
			Array.flatten(arguments).each(function (p) {
				p = $(p, true);
				if (p) {
					this.appendChild(p)
				}
			}, this);
			return this
		},
		appendText : function (q, p) {
			return this.grab(this.getDocument().newTextNode(q), p)
		},
		grab : function (q, p) {
			a[p || "bottom"]($(q, true), this);
			return this
		},
		inject : function (q, p) {
			a[p || "bottom"](this, $(q, true));
			return this
		},
		replaces : function (p) {
			p = $(p, true);
			p.parentNode.replaceChild(this, p);
			return this
		},
		wraps : function (q, p) {
			q = $(q, true);
			return this.replaces(q).grab(q, p)
		},
		getPrevious : function (p, q) {
			return m(this, "previousSibling", null, p, false, q)
		},
		getAllPrevious : function (p, q) {
			return m(this, "previousSibling", null, p, true, q)
		},
		getNext : function (p, q) {
			return m(this, "nextSibling", null, p, false, q)
		},
		getAllNext : function (p, q) {
			return m(this, "nextSibling", null, p, true, q)
		},
		getFirst : function (p, q) {
			return m(this, "nextSibling", "firstChild", p, false, q)
		},
		getLast : function (p, q) {
			return m(this, "previousSibling", "lastChild", p, false, q)
		},
		getParent : function (p, q) {
			return m(this, "parentNode", null, p, false, q)
		},
		getParents : function (p, q) {
			return m(this, "parentNode", null, p, true, q)
		},
		getChildren : function (p, q) {
			return m(this, "nextSibling", "firstChild", p, true, q)
		},
		getWindow : function () {
			return this.ownerDocument.window
		},
		getDocument : function () {
			return this.ownerDocument
		},
		getElementById : function (s, r) {
			var q = this.ownerDocument.getElementById(s);
			if (!q) {
				return null
			}
			for (var p = q.parentNode; p != this; p = p.parentNode) {
				if (!p) {
					return null
				}
			}
			return $.element(q, r)
		},
		getSelected : function () {
			return new Elements($A(this.options).filter(function (p) {
					return p.selected
				}))
		},
		getComputedStyle : function (q) {
			if (this.currentStyle) {
				return this.currentStyle[q.camelCase()]
			}
			var p = (this.getDocument().defaultView) ? this.getDocument().defaultView.getComputedStyle(this, null) : null;
			return (p) ? p.getPropertyValue([q.hyphenate()]) : null
		},
		toQueryString : function () {
			var p = [];
			this.getElements("input, select, textarea", true).each(function (q) {
				if (!q.name || q.disabled) {
					return
				}
				var r = (q.tagName.toLowerCase() == "select") ? Element.getSelected(q).map(function (s) {
					return s.value
				}) : ((q.type == "radio" || q.type == "checkbox") && !q.checked) ? null : q.value;
				$splat(r).each(function (s) {
					if (typeof s != "undefined") {
						p.push(q.name + "=" + encodeURIComponent(s))
					}
				})
			});
			return p.join("&")
		},
		clone : function (s, p) {
			s = s !== false;
			var v = this.cloneNode(s);
			var r = function (z, y) {
				if (!p) {
					z.removeAttribute("id")
				}
				if (Browser.Engine.trident) {
					z.clearAttributes();
					z.mergeAttributes(y);
					z.removeAttribute("uid");
					if (z.options) {
						var A = z.options,
						w = y.options;
						for (var x = A.length; x--; ) {
							A[x].selected = w[x].selected
						}
					}
				}
				var B = l[y.tagName.toLowerCase()];
				if (B && y[B]) {
					z[B] = y[B]
				}
			};
			if (s) {
				var t = v.getElementsByTagName("*"),
				u = this.getElementsByTagName("*");
				for (var q = t.length; q--; ) {
					r(t[q], u[q])
				}
			}
			r(v, this);
			return $(v)
		},
		destroy : function () {
			Element.empty(this);
			Element.dispose(this);
			h(this, true);
			return null
		},
		empty : function () {
			$A(this.childNodes).each(function (r) {
				Element.destroy(r)
			});
			if (/iframe/i.test(this.tagName) && this.contentWindow) {
				try {
					var q = this.contentWindow.document;
					if (q) {
						q.write("");
						q.close()
					}
				} catch (p) {}

			}
			return this
		},
		dispose : function () {
			return (this.parentNode) ? this.parentNode.removeChild(this) : this
		},
		hasChild : function (p) {
			p = $(p, true);
			if (!p) {
				return false
			}
			if (Browser.Engine.webkit && Browser.Engine.version < 420) {
				return $A(this.getElementsByTagName(p.tagName)).contains(p)
			}
			return (this.contains) ? (this != p && this.contains(p)) : !!(this.compareDocumentPosition(p) & 16)
		},
		match : function (p) {
			return (!p || (p == this) || (Element.get(this, "tag") == p))
		}
	});
	Native.implement([Element, Window, Document], {
		addListener : function (s, r) {
			if (s == "unload") {
				var p = r,
				q = this;
				r = function () {
					q.removeListener("unload", r);
					p()
				}
			} else {
				k[this.uid] = this
			}
			if (this.addEventListener) {
				this.addEventListener(s, r, false)
			} else {
				this.attachEvent("on" + s, r)
			}
			return this
		},
		removeListener : function (q, p) {
			if (this.removeEventListener) {
				this.removeEventListener(q, p, false)
			} else {
				this.detachEvent("on" + q, p)
			}
			return this
		},
		retrieve : function (q, p) {
			var s = c(this.uid),
			r = s[q];
			if (p != undefined && r == undefined) {
				r = s[q] = p
			}
			return $pick(r)
		},
		store : function (q, p) {
			var r = c(this.uid);
			r[q] = p;
			return this
		},
		eliminate : function (p) {
			var q = c(this.uid);
			delete q[p];
			return this
		}
	});
	window.addListener("unload", d)
})();
Element.Properties = new Hash;
Element.Properties.style = {
	set : function (a) {
		this.style.cssText = a
	},
	get : function () {
		return this.style.cssText
	},
	erase : function () {
		this.style.cssText = ""
	}
};
Element.Properties.tag = {
	get : function () {
		return this.tagName.toLowerCase()
	}
};
Element.Properties.html = (function () {
	var c = document.createElement("div");
	var a = {
		table : [1, "<table>", "</table>"],
		select : [1, "<select>", "</select>"],
		tbody : [2, "<table><tbody>", "</tbody></table>"],
		tr : [3, "<table><tbody><tr>", "</tr></tbody></table>"]
	};
	a.thead = a.tfoot = a.tbody;
	var b = {
		set : function () {
			var f = Array.flatten(arguments).join("");
			var g = Browser.Engine.trident && a[this.get("tag")];
			if (g) {
				var h = c;
				h.innerHTML = g[1] + f + g[2];
				for (var d = g[0]; d--; ) {
					h = h.firstChild
				}
				this.empty().adopt(h.childNodes)
			} else {
				this.innerHTML = f
			}
		}
	};
	b.erase = b.set;
	return b
})();
if (Browser.Engine.webkit && Browser.Engine.version < 420) {
	Element.Properties.text = {
		get : function () {
			if (this.innerText) {
				return this.innerText
			}
			var a = this.ownerDocument.newElement("div", {
					html : this.innerHTML
				}).inject(this.ownerDocument.body);
			var b = a.innerText;
			a.destroy();
			return b
		}
	}
}
Element.Properties.events = {
	set : function (a) {
		this.addEvents(a)
	}
};
Native.implement([Element, Window, Document], {
	addEvent : function (f, h) {
		var k = this.retrieve("events", {});
		k[f] = k[f] || {
			keys : [],
			values : []
		};
		if (k[f].keys.contains(h)) {
			return this
		}
		k[f].keys.push(h);
		var g = f,
		a = Element.Events.get(f),
		c = h,
		l = this;
		if (a) {
			if (a.onAdd) {
				a.onAdd.call(this, h)
			}
			if (a.condition) {
				c = function (m) {
					if (a.condition.call(this, m)) {
						return h.call(this, m)
					}
					return true
				}
			}
			g = a.base || g
		}
		var d = function () {
			return h.call(l)
		};
		var b = Element.NativeEvents[g];
		if (b) {
			if (b == 2) {
				d = function (m) {
					m = new Event(m, l.getWindow());
					if (c.call(l, m) === false) {
						m.stop()
					}
				}
			}
			this.addListener(g, d)
		}
		k[f].values.push(d);
		return this
	},
	removeEvent : function (c, b) {
		var a = this.retrieve("events");
		if (!a || !a[c]) {
			return this
		}
		var g = a[c].keys.indexOf(b);
		if (g == -1) {
			return this
		}
		a[c].keys.splice(g, 1);
		var f = a[c].values.splice(g, 1)[0];
		var d = Element.Events.get(c);
		if (d) {
			if (d.onRemove) {
				d.onRemove.call(this, b)
			}
			c = d.base || c
		}
		return (Element.NativeEvents[c]) ? this.removeListener(c, f) : this
	},
	addEvents : function (a) {
		for (var b in a) {
			this.addEvent(b, a[b])
		}
		return this
	},
	removeEvents : function (a) {
		if ($type(a) == "object") {
			for (var c in a) {
				this.removeEvent(c, a[c])
			}
			return this
		}
		var b = this.retrieve("events");
		if (!b) {
			return this
		}
		if (!a) {
			for (var c in b) {
				this.removeEvents(c)
			}
			this.eliminate("events")
		} else {
			if (b[a]) {
				while (b[a].keys[0]) {
					this.removeEvent(a, b[a].keys[0])
				}
				b[a] = null
			}
		}
		return this
	},
	fireEvent : function (d, b, a) {
		var c = this.retrieve("events");
		if (!c || !c[d]) {
			return this
		}
		c[d].keys.each(function (f) {
			f.create({
				bind : this,
				delay : a,
				"arguments" : b
			})()
		}, this);
		return this
	},
	cloneEvents : function (d, a) {
		d = $(d);
		var c = d.retrieve("events");
		if (!c) {
			return this
		}
		if (!a) {
			for (var b in c) {
				this.cloneEvents(d, b)
			}
		} else {
			if (c[a]) {
				c[a].keys.each(function (f) {
					this.addEvent(a, f)
				}, this)
			}
		}
		return this
	}
});
Element.NativeEvents = {
	click : 2,
	dblclick : 2,
	mouseup : 2,
	mousedown : 2,
	contextmenu : 2,
	mousewheel : 2,
	DOMMouseScroll : 2,
	mouseover : 2,
	mouseout : 2,
	mousemove : 2,
	selectstart : 2,
	selectend : 2,
	keydown : 2,
	keypress : 2,
	keyup : 2,
	focus : 2,
	blur : 2,
	change : 2,
	reset : 2,
	select : 2,
	submit : 2,
	load : 1,
	unload : 1,
	beforeunload : 2,
	resize : 1,
	move : 1,
	DOMContentLoaded : 1,
	readystatechange : 1,
	error : 1,
	abort : 1,
	scroll : 1
};
(function () {
	var a = function (b) {
		var c = b.relatedTarget;
		if (c == undefined) {
			return true
		}
		if (c === false) {
			return false
		}
		return ($type(this) != "document" && c != this && c.prefix != "xul" && !this.hasChild(c))
	};
	Element.Events = new Hash({
			mouseenter : {
				base : "mouseover",
				condition : a
			},
			mouseleave : {
				base : "mouseout",
				condition : a
			},
			mousewheel : {
				base : (Browser.Engine.gecko) ? "DOMMouseScroll" : "mousewheel"
			}
		})
})();
Element.Properties.styles = {
	set : function (a) {
		this.setStyles(a)
	}
};
Element.Properties.opacity = {
	set : function (a, b) {
		if (!b) {
			if (a == 0) {
				if (this.style.visibility != "hidden") {
					this.style.visibility = "hidden"
				}
			} else {
				if (this.style.visibility != "visible") {
					this.style.visibility = "visible"
				}
			}
		}
		if (!this.currentStyle || !this.currentStyle.hasLayout) {
			this.style.zoom = 1
		}
		if (Browser.Engine.trident) {
			this.style.filter = (a == 1) ? "" : "alpha(opacity=" + a * 100 + ")"
		}
		this.style.opacity = a;
		this.store("opacity", a)
	},
	get : function () {
		return this.retrieve("opacity", 1)
	}
};
Element.implement({
	setOpacity : function (a) {
		return this.set("opacity", a, true)
	},
	getOpacity : function () {
		return this.get("opacity")
	},
	setStyle : function (b, a) {
		switch (b) {
		case "opacity":
			return this.set("opacity", parseFloat(a));
		case "float":
			b = (Browser.Engine.trident) ? "styleFloat" : "cssFloat"
		}
		b = b.camelCase();
		if ($type(a) != "string") {
			var c = (Element.Styles.get(b) || "@").split(" ");
			a = $splat(a).map(function (f, d) {
					if (!c[d]) {
						return ""
					}
					return ($type(f) == "number") ? c[d].replace("@", Math.round(f)) : f
				}).join(" ")
		} else {
			if (a == String(Number(a))) {
				a = Math.round(a)
			}
		}
		this.style[b] = a;
		return this
	},
	getStyle : function (h) {
		switch (h) {
		case "opacity":
			return this.get("opacity");
		case "float":
			h = (Browser.Engine.trident) ? "styleFloat" : "cssFloat"
		}
		h = h.camelCase();
		var a = this.style[h];
		if (!$chk(a)) {
			a = [];
			for (var g in Element.ShortStyles) {
				if (h != g) {
					continue
				}
				for (var f in Element.ShortStyles[g]) {
					a.push(this.getStyle(f))
				}
				return a.join(" ")
			}
			a = this.getComputedStyle(h)
		}
		if (a) {
			a = String(a);
			var c = a.match(/rgba?\([\d\s,]+\)/);
			if (c) {
				a = a.replace(c[0], c[0].rgbToHex())
			}
		}
		if (Browser.Engine.presto || (Browser.Engine.trident && !$chk(parseInt(a)))) {
			if (h.test(/^(height|width)$/)) {
				var b = (h == "width") ? ["left", "right"] : ["top", "bottom"],
				d = 0;
				b.each(function (k) {
					d += this.getStyle("border-" + k + "-width").toInt() + this.getStyle("padding-" + k).toInt()
				}, this);
				return this["offset" + h.capitalize()] - d + "px"
			}
			if ((Browser.Engine.presto) && String(a).test("px")) {
				return a
			}
			if (h.test(/(border(.+)Width|margin|padding)/)) {
				return "0px"
			}
		}
		return a
	},
	setStyles : function (b) {
		for (var a in b) {
			this.setStyle(a, b[a])
		}
		return this
	},
	getStyles : function () {
		var a = {};
		Array.each(arguments, function (b) {
			a[b] = this.getStyle(b)
		}, this);
		return a
	}
});
Element.Styles = new Hash({
		left : "@px",
		top : "@px",
		bottom : "@px",
		right : "@px",
		width : "@px",
		height : "@px",
		maxWidth : "@px",
		maxHeight : "@px",
		minWidth : "@px",
		minHeight : "@px",
		backgroundColor : "rgb(@, @, @)",
		backgroundPosition : "@px @px",
		color : "rgb(@, @, @)",
		fontSize : "@px",
		letterSpacing : "@px",
		lineHeight : "@px",
		clip : "rect(@px @px @px @px)",
		margin : "@px @px @px @px",
		padding : "@px @px @px @px",
		border : "@px @ rgb(@, @, @) @px @ rgb(@, @, @) @px @ rgb(@, @, @)",
		borderWidth : "@px @px @px @px",
		borderStyle : "@ @ @ @",
		borderColor : "rgb(@, @, @) rgb(@, @, @) rgb(@, @, @) rgb(@, @, @)",
		zIndex : "@",
		zoom : "@",
		fontWeight : "@",
		textIndent : "@px",
		opacity : "@"
	});
Element.ShortStyles = {
	margin : {},
	padding : {},
	border : {},
	borderWidth : {},
	borderStyle : {},
	borderColor : {}

};
["Top", "Right", "Bottom", "Left"].each(function (h) {
	var g = Element.ShortStyles;
	var b = Element.Styles;
	["margin", "padding"].each(function (k) {
		var l = k + h;
		g[k][l] = b[l] = "@px"
	});
	var f = "border" + h;
	g.border[f] = b[f] = "@px @ rgb(@, @, @)";
	var d = f + "Width",
	a = f + "Style",
	c = f + "Color";
	g[f] = {};
	g.borderWidth[d] = g[f][d] = b[d] = "@px";
	g.borderStyle[a] = g[f][a] = b[a] = "@";
	g.borderColor[c] = g[f][c] = b[c] = "rgb(@, @, @)"
});
var isVisible = function (a) {
	return !!(!a || a.offsetHeight || a.offsetWidth)
};
(function () {
	Element.implement({
		expose : function () {
			if (this.getStyle("display") != "none") {
				return function () {}

			}
			var k = this.style.cssText;
			this.setStyles({
				display : "block",
				position : "absolute",
				visibility : "hidden"
			});
			return function () {
				this.style.cssText = k
			}
			.bind(this)
		},
		measure : function (p) {
			if (isVisible(this)) {
				return p.call(this)
			}
			var n = this.getParent(),
			l = [];
			while (!isVisible(n) && n != document.body) {
				l.push(n.expose());
				n = n.getParent()
			}
			var m = this.expose(),
			k = p.call(this);
			m();
			l.each(function (q) {
				q()
			});
			return k
		},
		scrollTo : function (k, l) {
			if (b(this)) {
				this.getWindow().scrollTo(k, l)
			} else {
				this.scrollLeft = k;
				this.scrollTop = l
			}
			return this
		},
		getSize : function () {
			if (b(this)) {
				return this.getWindow().getSize()
			}
			return {
				x : this.offsetWidth,
				y : this.offsetHeight
			}
		},
		getScrollSize : function () {
			if (b(this)) {
				return this.getWindow().getScrollSize()
			}
			return {
				x : this.scrollWidth,
				y : this.scrollHeight
			}
		},
		getScroll : function () {
			if (b(this)) {
				return this.getWindow().getScroll()
			}
			return {
				x : this.scrollLeft,
				y : this.scrollTop
			}
		},
		getScrolls : function () {
			var l = this,
			k = {
				x : 0,
				y : 0
			};
			while (l && !b(l)) {
				k.x += l.scrollLeft;
				k.y += l.scrollTop;
				l = l.parentNode
			}
			return k
		},
		getOffsetParent : function () {
			var k = this;
			if (b(k)) {
				return null
			}
			if (!Browser.Engine.trident) {
				return k.offsetParent
			}
			while ((k = k.parentNode) && !b(k)) {
				if (d(k, "position") != "static") {
					return k
				}
			}
			return null
		},
		getOffsets : function () {
			if (Browser.Engine.trident) {
				var p = this.getBoundingClientRect(),
				m = this.getDocument().documentElement;
				return {
					x : p.left + m.scrollLeft - m.clientLeft,
					y : p.top + m.scrollTop - m.clientTop
				}
			}
			var l = this,
			k = {
				x : 0,
				y : 0
			};
			if (b(this)) {
				return k
			}
			while (l && !b(l)) {
				k.x += l.offsetLeft;
				k.y += l.offsetTop;
				if (Browser.Engine.gecko) {
					if (!g(l)) {
						k.x += c(l);
						k.y += h(l)
					}
					var n = l.parentNode;
					if (n && d(n, "overflow") != "visible") {
						k.x += c(n);
						k.y += h(n)
					}
				} else {
					if (l != this && Browser.Engine.webkit) {
						k.x += c(l);
						k.y += h(l)
					}
				}
				l = l.offsetParent
			}
			if (Browser.Engine.gecko && !g(this)) {
				k.x -= c(this);
				k.y -= h(this)
			}
			return k
		},
		getPosition : function (n) {
			if (b(this)) {
				return {
					x : 0,
					y : 0
				}
			}
			var p = this.getOffsets(),
			l = this.getScrolls();
			var k = {
				x : p.x - l.x,
				y : p.y - l.y
			};
			var m = (n && (n = $(n))) ? n.getPosition() : {
				x : 0,
				y : 0
			};
			return {
				x : k.x - m.x,
				y : k.y - m.y
			}
		},
		getCoordinates : function (m) {
			if (b(this)) {
				return this.getWindow().getCoordinates()
			}
			var k = this.getPosition(m),
			l = this.getSize();
			var n = {
				left : k.x,
				top : k.y,
				width : l.x,
				height : l.y
			};
			n.right = n.left + n.width;
			n.bottom = n.top + n.height;
			return n
		},
		computePosition : function (k) {
			return {
				left : k.x - f(this, "margin-left"),
				top : k.y - f(this, "margin-top")
			}
		},
		position : function (k) {
			return this.setStyles(this.computePosition(k))
		}
	});
	Native.implement([Document, Window], {
		getSize : function () {
			var l = this.getWindow();
			if (Browser.Engine.presto || Browser.Engine.webkit) {
				return {
					x : l.innerWidth,
					y : l.innerHeight
				}
			}
			var k = a(this);
			return {
				x : k.clientWidth,
				y : k.clientHeight
			}
		},
		getScroll : function () {
			var l = this.getWindow();
			var k = a(this);
			return {
				x : l.pageXOffset || k.scrollLeft,
				y : l.pageYOffset || k.scrollTop
			}
		},
		getScrollSize : function () {
			var l = a(this);
			var k = this.getSize();
			return {
				x : Math.max(l.scrollWidth, k.x),
				y : Math.max(l.scrollHeight, k.y)
			}
		},
		getPosition : function () {
			return {
				x : 0,
				y : 0
			}
		},
		getCoordinates : function () {
			var k = this.getSize();
			return {
				top : 0,
				left : 0,
				bottom : k.y,
				right : k.x,
				height : k.y,
				width : k.x
			}
		}
	});
	var d = Element.getComputedStyle;
	function f(k, l) {
		return d(k, l).toInt() || 0
	}
	function g(k) {
		return d(k, "-moz-box-sizing") == "border-box"
	}
	function h(k) {
		return f(k, "border-top-width")
	}
	function c(k) {
		return f(k, "border-left-width")
	}
	function b(k) {
		return (/^(?:body|html)$/i).test(k.tagName)
	}
	function a(k) {
		var l = k.getDocument();
		return (!l.compatMode || l.compatMode == "CSS1Compat") ? l.html : l.body
	}
})();
Native.implement([Window, Document, Element], {
	getHeight : function () {
		return this.getSize().y
	},
	getWidth : function () {
		return this.getSize().x
	},
	getScrollTop : function () {
		return this.getScroll().y
	},
	getScrollLeft : function () {
		return this.getScroll().x
	},
	getScrollHeight : function () {
		return this.getScrollSize().y
	},
	getScrollWidth : function () {
		return this.getScrollSize().x
	},
	getTop : function () {
		return this.getPosition().y
	},
	getLeft : function () {
		return this.getPosition().x
	}
});
Native.implement([Document, Element], {
	getElements : function (k, h) {
		k = k.split(",");
		var c,
		f = {};
		for (var d = 0, b = k.length; d < b; d++) {
			var a = k[d],
			g = Selectors.Utils.search(this, a, f);
			if (d != 0 && g.item) {
				g = $A(g)
			}
			c = (d == 0) ? g : (c.item) ? $A(c).concat(g) : c.concat(g)
		}
		return new Elements(c, {
			ddup : (k.length > 1),
			cash : !h
		})
	}
});
Element.implement({
	match : function (b) {
		if (!b || (b == this)) {
			return true
		}
		var d = Selectors.Utils.parseTagAndID(b);
		var a = d[0],
		f = d[1];
		if (!Selectors.Filters.byID(this, f) || !Selectors.Filters.byTag(this, a)) {
			return false
		}
		var c = Selectors.Utils.parseSelector(b);
		return (c) ? Selectors.Utils.filter(this, c, {}) : true
	}
});
var Selectors = {
	Cache : {
		nth : {},
		parsed : {}

	}
};
Selectors.RegExps = {
	id : (/#([\w-]+)/),
	tag : (/^(\w+|\*)/),
	quick : (/^(\w+|\*)$/),
	splitter : (/\s*([+>~\s])\s*([a-zA-Z#.*:\[])/g),
	combined : (/\.([\w-]+)|\[(\w+)(?:([!*^$~|]?=)(["']?)([^\4]*?)\4)?\]|:([\w-]+)(?:\(["']?(.*?)?["']?\)|$)/g)
};
Selectors.Utils = {
	chk : function (b, c) {
		if (!c) {
			return true
		}
		var a = $uid(b);
		if (!c[a]) {
			return c[a] = true
		}
		return false
	},
	parseNthArgument : function (k) {
		if (Selectors.Cache.nth[k]) {
			return Selectors.Cache.nth[k]
		}
		var f = k.match(/^([+-]?\d*)?([a-z]+)?([+-]?\d*)?$/);
		if (!f) {
			return false
		}
		var h = parseInt(f[1]);
		var d = (h || h === 0) ? h : 1;
		var g = f[2] || false;
		var c = parseInt(f[3]) || 0;
		if (d != 0) {
			c--;
			while (c < 1) {
				c += d
			}
			while (c >= d) {
				c -= d
			}
		} else {
			d = c;
			g = "index"
		}
		switch (g) {
		case "n":
			f = {
				a : d,
				b : c,
				special : "n"
			};
			break;
		case "odd":
			f = {
				a : 2,
				b : 0,
				special : "n"
			};
			break;
		case "even":
			f = {
				a : 2,
				b : 1,
				special : "n"
			};
			break;
		case "first":
			f = {
				a : 0,
				special : "index"
			};
			break;
		case "last":
			f = {
				special : "last-child"
			};
			break;
		case "only":
			f = {
				special : "only-child"
			};
			break;
		default:
			f = {
				a : (d - 1),
				special : "index"
			}
		}
		return Selectors.Cache.nth[k] = f
	},
	parseSelector : function (f) {
		if (Selectors.Cache.parsed[f]) {
			return Selectors.Cache.parsed[f]
		}
		var d,
		k = {
			classes : [],
			pseudos : [],
			attributes : []
		};
		while ((d = Selectors.RegExps.combined.exec(f))) {
			var l = d[1],
			h = d[2],
			g = d[3],
			b = d[5],
			c = d[6],
			n = d[7];
			if (l) {
				k.classes.push(l)
			} else {
				if (c) {
					var a = Selectors.Pseudo.get(c);
					if (a) {
						k.pseudos.push({
							parser : a,
							argument : n
						})
					} else {
						k.attributes.push({
							name : c,
							operator : "=",
							value : n
						})
					}
				} else {
					if (h) {
						k.attributes.push({
							name : h,
							operator : g,
							value : b
						})
					}
				}
			}
		}
		if (!k.classes.length) {
			delete k.classes
		}
		if (!k.attributes.length) {
			delete k.attributes
		}
		if (!k.pseudos.length) {
			delete k.pseudos
		}
		if (!k.classes && !k.attributes && !k.pseudos) {
			k = null
		}
		return Selectors.Cache.parsed[f] = k
	},
	parseTagAndID : function (b) {
		var a = b.match(Selectors.RegExps.tag);
		var c = b.match(Selectors.RegExps.id);
		return [(a) ? a[1] : "*", (c) ? c[1] : false]
	},
	filter : function (g, c, f) {
		var d;
		if (c.classes) {
			for (d = c.classes.length; d--; d) {
				var h = c.classes[d];
				if (!Selectors.Filters.byClass(g, h)) {
					return false
				}
			}
		}
		if (c.attributes) {
			for (d = c.attributes.length; d--; d) {
				var b = c.attributes[d];
				if (!Selectors.Filters.byAttribute(g, b.name, b.operator, b.value)) {
					return false
				}
			}
		}
		if (c.pseudos) {
			for (d = c.pseudos.length; d--; d) {
				var a = c.pseudos[d];
				if (!Selectors.Filters.byPseudo(g, a.parser, a.argument, f)) {
					return false
				}
			}
		}
		return true
	},
	getByTagAndID : function (b, a, d) {
		if (d) {
			var c = (b.getElementById) ? b.getElementById(d, true) : Element.getElementById(b, d, true);
			return (c && Selectors.Filters.byTag(c, a)) ? [c] : []
		} else {
			return b.getElementsByTagName(a)
		}
	},
	search : function (q, p, v) {
		var b = [];
		var c = p.trim().replace(Selectors.RegExps.splitter, function (m, l, k) {
				b.push(l);
				return ":)" + k
			}).split(":)");
		var r,
		f,
		C;
		for (var B = 0, x = c.length; B < x; B++) {
			var A = c[B];
			if (B == 0 && Selectors.RegExps.quick.test(A)) {
				r = q.getElementsByTagName(A);
				continue
			}
			var a = b[B - 1];
			var s = Selectors.Utils.parseTagAndID(A);
			var D = s[0],
			t = s[1];
			if (B == 0) {
				r = Selectors.Utils.getByTagAndID(q, D, t)
			} else {
				var d = {},
				h = [];
				for (var z = 0, y = r.length; z < y; z++) {
					h = Selectors.Getters[a](h, r[z], D, t, d)
				}
				r = h
			}
			var g = Selectors.Utils.parseSelector(A);
			if (g) {
				f = [];
				for (var w = 0, u = r.length; w < u; w++) {
					C = r[w];
					if (Selectors.Utils.filter(C, g, v)) {
						f.push(C)
					}
				}
				r = f
			}
		}
		return r
	}
};
Selectors.Getters = {
	" " : function (k, h, m, a, f) {
		var d = Selectors.Utils.getByTagAndID(h, m, a);
		for (var c = 0, b = d.length; c < b; c++) {
			var g = d[c];
			if (Selectors.Utils.chk(g, f)) {
				k.push(g)
			}
		}
		return k
	},
	">" : function (k, h, m, a, g) {
		var c = Selectors.Utils.getByTagAndID(h, m, a);
		for (var f = 0, d = c.length; f < d; f++) {
			var b = c[f];
			if (b.parentNode == h && Selectors.Utils.chk(b, g)) {
				k.push(b)
			}
		}
		return k
	},
	"+" : function (c, b, a, f, d) {
		while ((b = b.nextSibling)) {
			if (b.nodeType == 1) {
				if (Selectors.Utils.chk(b, d) && Selectors.Filters.byTag(b, a) && Selectors.Filters.byID(b, f)) {
					c.push(b)
				}
				break
			}
		}
		return c
	},
	"~" : function (c, b, a, f, d) {
		while ((b = b.nextSibling)) {
			if (b.nodeType == 1) {
				if (!Selectors.Utils.chk(b, d)) {
					break
				}
				if (Selectors.Filters.byTag(b, a) && Selectors.Filters.byID(b, f)) {
					c.push(b)
				}
			}
		}
		return c
	}
};
Selectors.Filters = {
	byTag : function (b, a) {
		return (a == "*" || (b.tagName && b.tagName.toLowerCase() == a))
	},
	byID : function (a, b) {
		return (!b || (a.id && a.id == b))
	},
	byClass : function (b, a) {
		return (b.className && b.className.contains(a, " "))
	},
	byPseudo : function (a, d, c, b) {
		return d.call(a, c, b)
	},
	byAttribute : function (c, d, b, f) {
		var a = Element.prototype.getProperty.call(c, d);
		if (!a) {
			return (b == "!=")
		}
		if (!b || f == undefined) {
			return true
		}
		switch (b) {
		case "=":
			return (a == f);
		case "*=":
			return (a.contains(f));
		case "^=":
			return (a.substr(0, f.length) == f);
		case "$=":
			return (a.substr(a.length - f.length) == f);
		case "!=":
			return (a != f);
		case "~=":
			return a.contains(f, " ");
		case "|=":
			return a.contains(f, "-")
		}
		return false
	}
};
Selectors.Pseudo = new Hash({
		checked : function () {
			return this.checked
		},
		empty : function () {
			return !(this.innerText || this.textContent || "").length
		},
		not : function (a) {
			return !Element.match(this, a)
		},
		contains : function (a) {
			return (this.innerText || this.textContent || "").contains(a)
		},
		"first-child" : function () {
			return Selectors.Pseudo.index.call(this, 0)
		},
		"last-child" : function () {
			var a = this;
			while ((a = a.nextSibling)) {
				if (a.nodeType == 1) {
					return false
				}
			}
			return true
		},
		"only-child" : function () {
			var b = this;
			while ((b = b.previousSibling)) {
				if (b.nodeType == 1) {
					return false
				}
			}
			var a = this;
			while ((a = a.nextSibling)) {
				if (a.nodeType == 1) {
					return false
				}
			}
			return true
		},
		"nth-child" : function (h, f) {
			h = (h == undefined) ? "n" : h;
			var c = Selectors.Utils.parseNthArgument(h);
			if (c.special != "n") {
				return Selectors.Pseudo[c.special].call(this, c.a, f)
			}
			var g = 0;
			f.positions = f.positions || {};
			var d = $uid(this);
			if (!f.positions[d]) {
				var b = this;
				while ((b = b.previousSibling)) {
					if (b.nodeType != 1) {
						continue
					}
					g++;
					var a = f.positions[$uid(b)];
					if (a != undefined) {
						g = a + g;
						break
					}
				}
				f.positions[d] = g
			}
			return (f.positions[d] % c.a == c.b)
		},
		index : function (a) {
			var b = this,
			c = 0;
			while ((b = b.previousSibling)) {
				if (b.nodeType == 1 && ++c > a) {
					return false
				}
			}
			return (c == a)
		},
		even : function (b, a) {
			return Selectors.Pseudo["nth-child"].call(this, "2n+1", a)
		},
		odd : function (b, a) {
			return Selectors.Pseudo["nth-child"].call(this, "2n", a)
		}
	});
Element.Events.domready = {
	onAdd : function (a) {
		if (Browser.loaded) {
			a.call(this)
		}
	}
};
(function () {
	var b = function () {
		if (Browser.loaded) {
			return
		}
		Browser.loaded = true;
		window.fireEvent("domready");
		document.fireEvent("domready")
	};
	if (Browser.Engine.trident) {
		var a = document.createElement("div");
		(function () {
			($try(function () {
					a.doScroll("left");
					return $(a).inject(document.body).set("html", "temp").dispose()
				})) ? b() : arguments.callee.delay(50)
		})()
	} else {
		if (Browser.Engine.webkit && Browser.Engine.version < 525) {
			(function () {
				(["loaded", "complete"].contains(document.readyState)) ? b() : arguments.callee.delay(50)
			})()
		} else {
			window.addEvent("load", b);
			document.addEvent("DOMContentLoaded", b)
		}
	}
})();
var JSON = new Hash({
		$specialChars : {
			"\b" : "\\b",
			"\t" : "\\t",
			"\n" : "\\n",
			"\f" : "\\f",
			"\r" : "\\r",
			'"' : '\\"',
			"\\" : "\\\\"
		},
		$replaceChars : function (a) {
			return JSON.$specialChars[a] || "\\u00" + Math.floor(a.charCodeAt() / 16).toString(16) + (a.charCodeAt() % 16).toString(16)
		},
		encode : function (b) {
			switch ($type(b)) {
			case "string":
				return '"' + b.replace(/[\x00-\x1f\\"]/g, JSON.$replaceChars) + '"';
			case "array":
				return "[" + String(b.map(JSON.encode).filter($defined)) + "]";
			case "object":
			case "hash":
				var a = [];
				Hash.each(b, function (f, d) {
					var c = JSON.encode(f);
					if (c) {
						a.push(JSON.encode(d) + ":" + c)
					}
				});
				return "{" + a + "}";
			case "number":
			case "boolean":
				return String(b);
			case false:
				return "null"
			}
			return null
		},
		decode : function (string, secure) {
			if ($type(string) != "string" || !string.length) {
				return null
			}
			if (secure && !(/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/).test(string.replace(/\\./g, "@").replace(/"[^"\\\n\r]*"/g, ""))) {
				return null
			}
			return eval("(" + string + ")")
		}
	});
Native.implement([Hash, Array, String, Number], {
	toJSON : function () {
		return JSON.encode(this)
	}
});
var Cookie = new Class({
		Implements : Options,
		options : {
			path : false,
			domain : false,
			duration : false,
			secure : false,
			document : document
		},
		initialize : function (b, a) {
			this.key = b;
			this.setOptions(a)
		},
		write : function (b) {
			b = encodeURIComponent(b);
			if (this.options.domain) {
				b += "; domain=" + this.options.domain
			}
			if (this.options.path) {
				b += "; path=" + this.options.path
			}
			if (this.options.duration) {
				var a = new Date();
				a.setTime(a.getTime() + this.options.duration * 24 * 60 * 60 * 1000);
				b += "; expires=" + a.toGMTString()
			}
			if (this.options.secure) {
				b += "; secure"
			}
			this.options.document.cookie = this.key + "=" + b;
			return this
		},
		read : function () {
			var a = this.options.document.cookie.match("(?:^|;)\\s*" + this.key.escapeRegExp() + "=([^;]*)");
			return (a) ? decodeURIComponent(a[1]) : null
		},
		dispose : function () {
			new Cookie(this.key, $merge(this.options, {
					duration : -1
				})).write("");
			return this
		}
	});
Cookie.write = function (b, c, a) {
	return new Cookie(b, a).write(c)
};
Cookie.read = function (a) {
	return new Cookie(a).read()
};
Cookie.dispose = function (b, a) {
	return new Cookie(b, a).dispose()
};
var Swiff = new Class({
		Implements : [Options],
		options : {
			id : null,
			height : 1,
			width : 1,
			container : null,
			properties : {},
			params : {
				quality : "high",
				allowScriptAccess : "always",
				wMode : "transparent",
				swLiveConnect : true
			},
			callBacks : {},
			vars : {}

		},
		toElement : function () {
			return this.object
		},
		initialize : function (p, q) {
			this.instance = "Swiff_" + $time();
			this.setOptions(q);
			q = this.options;
			var b = this.id = this.instance;
			var a = $(q.container);
			Swiff.CallBacks[this.instance] = {};
			var f = q.params,
			h = q.vars,
			g = q.callBacks;
			var k = $extend({
					height : q.height,
					width : q.width
				}, q.properties);
			var n = this;
			for (var d in g) {
				Swiff.CallBacks[this.instance][d] = (function (r) {
					return function () {
						return r.apply(n.object, arguments)
					}
				})(g[d]);
				h[d] = "Swiff.CallBacks." + this.instance + "." + d
			}
			f.flashVars = Hash.toQueryString(h);
			if (Browser.Engine.trident) {
				k.classid = "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000";
				f.movie = p
			} else {
				k.type = "application/x-shockwave-flash";
				k.data = p
			}
			var m = '<object id="' + b + '"';
			for (var l in k) {
				m += " " + l + '="' + k[l] + '"'
			}
			m += ">";
			for (var c in f) {
				if (f[c]) {
					m += '<param name="' + c + '" value="' + f[c] + '" />'
				}
			}
			m += "</object>";
			this.object = ((a) ? a.empty() : new Element("div")).set("html", m).firstChild
		},
		replaces : function (a) {
			a = $(a, true);
			a.parentNode.replaceChild(this.toElement(), a);
			return this
		},
		inject : function (a) {
			$(a, true).appendChild(this.toElement());
			return this
		},
		remote : function () {
			return Swiff.remote.apply(Swiff, [this.toElement()].extend(arguments))
		}
	});
Swiff.CallBacks = {};
Swiff.remote = function (obj, fn) {
	var rs = obj.CallFunction('<invoke name="' + fn + '" returntype="javascript">' + __flash__argumentsToXML(arguments, 2) + "</invoke>");
	return eval(rs)
};
var Fx = new Class({
		Implements : [Chain, Events, Options],
		options : {
			fps : 50,
			unit : false,
			duration : 500,
			link : "ignore"
		},
		initialize : function (a) {
			this.subject = this.subject || this;
			this.setOptions(a);
			this.options.duration = Fx.Durations[this.options.duration] || this.options.duration.toInt();
			var b = this.options.wait;
			if (b === false) {
				this.options.link = "cancel"
			}
		},
		getTransition : function () {
			return function (a) {
				return  - (Math.cos(Math.PI * a) - 1) / 2
			}
		},
		step : function () {
			var a = $time();
			if (a < this.time + this.options.duration) {
				var b = this.transition((a - this.time) / this.options.duration);
				this.set(this.compute(this.from, this.to, b))
			} else {
				this.set(this.compute(this.from, this.to, 1));
				this.complete()
			}
		},
		set : function (a) {
			return a
		},
		compute : function (c, b, a) {
			return Fx.compute(c, b, a)
		},
		check : function (a) {
			if (!this.timer) {
				return true
			}
			switch (this.options.link) {
			case "cancel":
				this.cancel();
				return true;
			case "chain":
				this.chain(a.bind(this, Array.slice(arguments, 1)));
				return false
			}
			return false
		},
		start : function (b, a) {
			if (!this.check(arguments.callee, b, a)) {
				return this
			}
			this.from = b;
			this.to = a;
			this.time = 0;
			this.transition = this.getTransition();
			this.startTimer();
			this.onStart();
			return this
		},
		complete : function () {
			if (this.stopTimer()) {
				this.onComplete()
			}
			return this
		},
		cancel : function () {
			if (this.stopTimer()) {
				this.onCancel()
			}
			return this
		},
		onStart : function () {
			this.fireEvent("start", this.subject)
		},
		onComplete : function () {
			this.fireEvent("complete", this.subject);
			if (!this.callChain()) {
				this.fireEvent("chainComplete", this.subject)
			}
		},
		onCancel : function () {
			this.fireEvent("cancel", this.subject).clearChain()
		},
		pause : function () {
			this.stopTimer();
			return this
		},
		resume : function () {
			this.startTimer();
			return this
		},
		stopTimer : function () {
			if (!this.timer) {
				return false
			}
			this.time = $time() - this.time;
			this.timer = $clear(this.timer);
			return true
		},
		startTimer : function () {
			if (this.timer) {
				return false
			}
			this.time = $time() - this.time;
			this.timer = this.step.periodical(Math.round(1000 / this.options.fps), this);
			return true
		}
	});
Fx.compute = function (c, b, a) {
	return (b - c) * a + c
};
Fx.Durations = {
	"short" : 250,
	normal : 500,
	"long" : 1000
};
Fx.CSS = new Class({
		Extends : Fx,
		prepare : function (d, f, b) {
			b = $splat(b);
			var c = b[1];
			if (!$chk(c)) {
				b[1] = b[0];
				b[0] = d.getStyle(f)
			}
			var a = b.map(this.parse);
			return {
				from : a[0],
				to : a[1]
			}
		},
		parse : function (a) {
			a = $lambda(a)();
			a = (typeof a == "string") ? a.split(" ") : $splat(a);
			return a.map(function (c) {
				c = String(c);
				var b = false;
				Fx.CSS.Parsers.each(function (g, f) {
					if (b) {
						return
					}
					var d = g.parse(c);
					if ($chk(d)) {
						b = {
							value : d,
							parser : g
						}
					}
				});
				b = b || {
					value : c,
					parser : Fx.CSS.Parsers.String
				};
				return b
			})
		},
		compute : function (d, c, b) {
			var a = [];
			(Math.min(d.length, c.length)).times(function (f) {
				a.push({
					value : d[f].parser.compute(d[f].value, c[f].value, b),
					parser : d[f].parser
				})
			});
			a.$family = {
				name : "fx:css:value"
			};
			return a
		},
		serve : function (c, b) {
			if ($type(c) != "fx:css:value") {
				c = this.parse(c)
			}
			var a = [];
			c.each(function (d) {
				a = a.concat(d.parser.serve(d.value, b))
			});
			return a
		},
		render : function (a, d, c, b) {
			a.setStyle(d, this.serve(c, b))
		},
		search : function (a) {
			if (Fx.CSS.Cache[a]) {
				return Fx.CSS.Cache[a]
			}
			var b = {};
			Array.each(document.styleSheets, function (f, d) {
				var c = f.href;
				if (c && c.contains("://") && !c.contains(document.domain)) {
					return
				}
				var g = f.rules || f.cssRules;
				Array.each(g, function (l, h) {
					if (!l.style) {
						return
					}
					var k = (l.selectorText) ? l.selectorText.replace(/^\w+/, function (n) {
						return n.toLowerCase()
					}) : null;
					if (!k || !k.test("^" + a + "$")) {
						return
					}
					Element.Styles.each(function (n, m) {
						if (!l.style[m] || Element.ShortStyles[m]) {
							return
						}
						n = String(l.style[m]);
						b[m] = (n.test(/^rgb/)) ? n.rgbToHex() : n
					})
				})
			});
			return Fx.CSS.Cache[a] = b
		}
	});
Fx.CSS.Cache = {};
Fx.CSS.Parsers = new Hash({
		Color : {
			parse : function (a) {
				if (a.match(/^#[0-9a-f]{3,6}$/i)) {
					return a.hexToRgb(true)
				}
				return ((a = a.match(/(\d+),\s*(\d+),\s*(\d+)/))) ? [a[1], a[2], a[3]] : false
			},
			compute : function (c, b, a) {
				return c.map(function (f, d) {
					return Math.round(Fx.compute(c[d], b[d], a))
				})
			},
			serve : function (a) {
				return a.map(Number)
			}
		},
		Number : {
			parse : parseFloat,
			compute : Fx.compute,
			serve : function (b, a) {
				return (a) ? b + a : b
			}
		},
		String : {
			parse : $lambda(false),
			compute : $arguments(1),
			serve : $arguments(0)
		}
	});
Fx.Tween = new Class({
		Extends : Fx.CSS,
		initialize : function (b, a) {
			this.element = this.subject = $(b);
			this.parent(a)
		},
		set : function (b, a) {
			if (arguments.length == 1) {
				a = b;
				b = this.property || this.options.property
			}
			this.render(this.element, b, a, this.options.unit);
			return this
		},
		start : function (c, f, d) {
			if (!this.check(arguments.callee, c, f, d)) {
				return this
			}
			var b = Array.flatten(arguments);
			this.property = this.options.property || b.shift();
			var a = this.prepare(this.element, this.property, b);
			return this.parent(a.from, a.to)
		}
	});
Element.Properties.tween = {
	set : function (a) {
		var b = this.retrieve("tween");
		if (b) {
			b.cancel()
		}
		return this.eliminate("tween").store("tween:options", $extend({
				link : "cancel"
			}, a))
	},
	get : function (a) {
		if (a || !this.retrieve("tween")) {
			if (a || !this.retrieve("tween:options")) {
				this.set("tween", a)
			}
			this.store("tween", new Fx.Tween(this, this.retrieve("tween:options")))
		}
		return this.retrieve("tween")
	}
};
Element.implement({
	tween : function (a, c, b) {
		this.get("tween").start(arguments);
		return this
	},
	fade : function (c) {
		var f = this.get("tween"),
		d = "opacity",
		a;
		c = $pick(c, "toggle");
		switch (c) {
		case "in":
			f.start(d, 1);
			break;
		case "out":
			f.start(d, 0);
			break;
		case "show":
			f.set(d, 1);
			break;
		case "hide":
			f.set(d, 0);
			break;
		case "toggle":
			var b = this.retrieve("fade:flag", this.get("opacity") == 1);
			f.start(d, (b) ? 0 : 1);
			this.store("fade:flag", !b);
			a = true;
			break;
		default:
			f.start(d, arguments)
		}
		if (!a) {
			this.eliminate("fade:flag")
		}
		return this
	},
	highlight : function (c, a) {
		if (!a) {
			a = this.retrieve("highlight:original", this.getStyle("background-color"));
			a = (a == "transparent") ? "#fff" : a
		}
		var b = this.get("tween");
		b.start("background-color", c || "#ffff88", a).chain(function () {
			this.setStyle("background-color", this.retrieve("highlight:original"));
			b.callChain()
		}
			.bind(this));
		return this
	}
});
Fx.Morph = new Class({
		Extends : Fx.CSS,
		initialize : function (b, a) {
			this.element = this.subject = $(b);
			this.parent(a)
		},
		set : function (a) {
			if (typeof a == "string") {
				a = this.search(a)
			}
			for (var b in a) {
				this.render(this.element, b, a[b], this.options.unit)
			}
			return this
		},
		compute : function (f, d, c) {
			var a = {};
			for (var b in f) {
				a[b] = this.parent(f[b], d[b], c)
			}
			return a
		},
		start : function (b) {
			if (!this.check(arguments.callee, b)) {
				return this
			}
			if (typeof b == "string") {
				b = this.search(b)
			}
			var f = {},
			d = {};
			for (var c in b) {
				var a = this.prepare(this.element, c, b[c]);
				f[c] = a.from;
				d[c] = a.to
			}
			return this.parent(f, d)
		}
	});
Element.Properties.morph = {
	set : function (a) {
		var b = this.retrieve("morph");
		if (b) {
			b.cancel()
		}
		return this.eliminate("morph").store("morph:options", $extend({
				link : "cancel"
			}, a))
	},
	get : function (a) {
		if (a || !this.retrieve("morph")) {
			if (a || !this.retrieve("morph:options")) {
				this.set("morph", a)
			}
			this.store("morph", new Fx.Morph(this, this.retrieve("morph:options")))
		}
		return this.retrieve("morph")
	}
};
Element.implement({
	morph : function (a) {
		this.get("morph").start(a);
		return this
	}
});
Fx.implement({
	getTransition : function () {
		var a = this.options.transition || Fx.Transitions.Sine.easeInOut;
		if (typeof a == "string") {
			var b = a.split(":");
			a = Fx.Transitions;
			a = a[b[0]] || a[b[0].capitalize()];
			if (b[1]) {
				a = a["ease" + b[1].capitalize() + (b[2] ? b[2].capitalize() : "")]
			}
		}
		return a
	}
});
Fx.Transition = function (b, a) {
	a = $splat(a);
	return $extend(b, {
		easeIn : function (c) {
			return b(c, a)
		},
		easeOut : function (c) {
			return 1 - b(1 - c, a)
		},
		easeInOut : function (c) {
			return (c <= 0.5) ? b(2 * c, a) / 2 : (2 - b(2 * (1 - c), a)) / 2
		}
	})
};
Fx.Transitions = new Hash({
		linear : $arguments(0)
	});
Fx.Transitions.extend = function (a) {
	for (var b in a) {
		Fx.Transitions[b] = new Fx.Transition(a[b])
	}
};
Fx.Transitions.extend({
	Pow : function (b, a) {
		return Math.pow(b, a[0] || 6)
	},
	Expo : function (a) {
		return Math.pow(2, 8 * (a - 1))
	},
	Circ : function (a) {
		return 1 - Math.sin(Math.acos(a))
	},
	Sine : function (a) {
		return 1 - Math.sin((1 - a) * Math.PI / 2)
	},
	Back : function (b, a) {
		a = a[0] || 1.618;
		return Math.pow(b, 2) * ((a + 1) * b - a)
	},
	Bounce : function (g) {
		var f;
		for (var d = 0, c = 1; 1; d += c, c /= 2) {
			if (g >= (7 - 4 * d) / 11) {
				f = c * c - Math.pow((11 - 6 * d - 11 * g) / 4, 2);
				break
			}
		}
		return f
	},
	Elastic : function (b, a) {
		return Math.pow(2, 10 * --b) * Math.cos(20 * b * Math.PI * (a[0] || 1) / 3)
	}
});
["Quad", "Cubic", "Quart", "Quint"].each(function (b, a) {
	Fx.Transitions[b] = new Fx.Transition(function (c) {
			return Math.pow(c, [a + 2])
		})
});
var Request = new Class({
		Implements : [Chain, Events, Options],
		options : {
			url : "",
			data : "",
			headers : {
				"X-Requested-With" : "XMLHttpRequest",
				Accept : "text/javascript, text/html, application/xml, text/xml, */*"
			},
			async : true,
			format : false,
			method : "post",
			link : "ignore",
			isSuccess : null,
			emulation : true,
			urlEncoded : true,
			encoding : "utf-8",
			evalScripts : false,
			evalResponse : false
		},
		initialize : function (a) {
			this.xhr = new Browser.Request();
			this.setOptions(a);
			this.options.isSuccess = this.options.isSuccess || this.isSuccess;
			this.headers = new Hash(this.options.headers)
		},
		onStateChange : function () {
			if (this.xhr.readyState != 4 || !this.running) {
				return
			}
			this.running = false;
			this.status = 0;
			$try(function () {
				this.status = this.xhr.status
			}
				.bind(this));
			if (this.options.isSuccess.call(this, this.status)) {
				this.response = {
					text : this.xhr.responseText,
					xml : this.xhr.responseXML
				};
				this.success(this.response.text, this.response.xml)
			} else {
				this.response = {
					text : null,
					xml : null
				};
				this.failure()
			}
			this.xhr.onreadystatechange = $empty
		},
		isSuccess : function () {
			return ((this.status >= 200) && (this.status < 300))
		},
		processScripts : function (a) {
			if (this.options.evalResponse || (/(ecma|java)script/).test(this.getHeader("Content-type"))) {
				return $exec(a)
			}
			return a.stripScripts(this.options.evalScripts)
		},
		success : function (b, a) {
			this.onSuccess(this.processScripts(b), a)
		},
		onSuccess : function () {
			this.fireEvent("complete", arguments).fireEvent("success", arguments).callChain()
		},
		failure : function () {
			this.onFailure()
		},
		onFailure : function () {
			this.fireEvent("complete").fireEvent("failure", this.xhr)
		},
		setHeader : function (a, b) {
			this.headers.set(a, b);
			return this
		},
		getHeader : function (a) {
			return $try(function () {
				return this.xhr.getResponseHeader(a)
			}
				.bind(this))
		},
		check : function (a) {
			if (!this.running) {
				return true
			}
			switch (this.options.link) {
			case "cancel":
				this.cancel();
				return true;
			case "chain":
				this.chain(a.bind(this, Array.slice(arguments, 1)));
				return false
			}
			return false
		},
		send : function (l) {
			if (!this.check(arguments.callee, l)) {
				return this
			}
			this.running = true;
			var h = $type(l);
			if (h == "string" || h == "element") {
				l = {
					data : l
				}
			}
			var d = this.options;
			l = $extend({
					data : d.data,
					url : d.url,
					method : d.method
				}, l);
			var f = l.data,
			b = l.url,
			a = l.method;
			switch ($type(f)) {
			case "element":
				f = $(f).toQueryString();
				break;
			case "object":
			case "hash":
				f = Hash.toQueryString(f)
			}
			if (this.options.format) {
				var k = "format=" + this.options.format;
				f = (f) ? k + "&" + f : k
			}
			if (this.options.emulation && ["put", "delete"].contains(a)) {
				var g = "_method=" + a;
				f = (f) ? g + "&" + f : g;
				a = "post"
			}
			if (this.options.urlEncoded && a == "post") {
				var c = (this.options.encoding) ? "; charset=" + this.options.encoding : "";
				this.headers.set("Content-type", "application/x-www-form-urlencoded" + c)
			}
			if (f && a == "get") {
				b = b + (b.contains("?") ? "&" : "?") + f;
				f = null
			}
			this.xhr.open(a.toUpperCase(), b, this.options.async);
			this.xhr.onreadystatechange = this.onStateChange.bind(this);
			this.headers.each(function (n, m) {
				try {
					this.xhr.setRequestHeader(m, n)
				} catch (p) {
					this.fireEvent("exception", [m, n])
				}
			}, this);
			this.fireEvent("request");
			this.xhr.send(f);
			if (!this.options.async) {
				this.onStateChange()
			}
			return this
		},
		cancel : function () {
			if (!this.running) {
				return this
			}
			this.running = false;
			this.xhr.abort();
			this.xhr.onreadystatechange = $empty;
			this.xhr = new Browser.Request();
			this.fireEvent("cancel");
			return this
		}
	});
Request.JSONP = new Class({
		Implements : [Chain, Events, Options],
		options : {
			onRequest : function (a) {
				if (this.options.log && window.console && console.log) {
					console.log("JSONP retrieving script with url:" + a)
				}
			},
			onError : function (a) {
				if (this.options.log && window.console && console.warn) {
					console.warn("JSONP " + a + " will fail in Internet Explorer, which enforces a 2083 bytes length limit on URIs")
				}
			},
			url : "",
			callbackKey : "jsoncallback",
			injectScript : document.head,
			data : "",
			link : "ignore",
			timeout : 0,
			log : false
		},
		initialize : function (a) {
			this.setOptions(a)
		},
		send : function (c) {
			if (!Request.prototype.check.call(this, c)) {
				return this
			}
			this.running = true;
			var d = typeof(c);
			if (d == "string" || d == "element") {
				c = {
					data : c
				}
			}
			c = this.options,
			c || {};
			var f = c.data;
			switch ($type(f)) {
			case "element":
				f = $(f).toQueryString();
				break;
			case "object":
			case "hash":
				f = Hash.toQueryString(f)
			}
			var b = this.index = Request.JSONP.counter++;
			var g = c.url + (c.url.test("\\?") ? "&" : "?") + (c.callbackKey) + "=Request.JSONP.request_map.request_" + b + (f ? "&" + f : "");
			if (g.length > 2083) {
				this.fireEvent("error", g)
			}
			Request.JSONP.request_map["request_" + b] = function () {
				this.success(arguments, b)
			}
			.bind(this);
			var a = this.getScript(g).inject(c.injectScript);
			this.fireEvent("request", [g, a]);
			if (c.timeout) {
				this.timeout.delay(c.timeout, this)
			}
			return this
		},
		getScript : function (a) {
			if (!this.script) {
				this.script = new Element("script", {
						type : "text/javascript",
						async : true,
						src : a
					})
			}
			return this.script
		},
		success : function (b, a) {
			if (!this.running) {
				return
			}
			this.clear().fireEvent("complete", b).fireEvent("success", b).callChain()
		},
		cancel : function () {
			if (this.running) {
				this.clear().fireEvent("cancel")
			}
			return this
		},
		isRunning : function () {
			return !!this.running
		},
		clear : function () {
			this.running = false;
			if (this.script) {
				this.script.destroy();
				this.script = null
			}
			return this
		},
		timeout : function () {
			if (this.running) {
				this.running = false;
				this.fireEvent("timeout", [this.script.get("src"), this.script]).fireEvent("failure").cancel()
			}
			return this
		}
	});
Request.JSONP.counter = 0;
Request.JSONP.request_map = {};
(function () {
	var a = {};
	["get", "post", "put", "delete", "GET", "POST", "PUT", "DELETE"].each(function (b) {
		a[b] = function () {
			var c = Array.link(arguments, {
					url : String.type,
					data : $defined
				});
			return this.send($extend(c, {
					method : b.toLowerCase()
				}))
		}
	});
	Request.implement(a)
})();
Element.Properties.send = {
	set : function (a) {
		var b = this.retrieve("send");
		if (b) {
			b.cancel()
		}
		return this.eliminate("send").store("send:options", $extend({
				data : this,
				link : "cancel",
				method : this.get("method") || "post",
				url : this.get("action")
			}, a))
	},
	get : function (a) {
		if (a || !this.retrieve("send")) {
			if (a || !this.retrieve("send:options")) {
				this.set("send", a)
			}
			this.store("send", new Request(this.retrieve("send:options")))
		}
		return this.retrieve("send")
	}
};
Element.implement({
	send : function (a) {
		var b = this.get("send");
		b.send({
			data : this,
			url : a || b.options.url
		});
		return this
	}
});
Request.HTML = new Class({
		Extends : Request,
		options : {
			update : false,
			evalScripts : true,
			filter : false
		},
		processHTML : function (c) {
			var b = c.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
			c = (b) ? b[1] : c;
			var a = new Element("div");
			return $try(function () {
				var d = "<root>" + c + "</root>",
				h;
				if (Browser.Engine.trident) {
					h = new ActiveXObject("Microsoft.XMLDOM");
					h.async = false;
					h.loadXML(d)
				} else {
					h = new DOMParser().parseFromString(d, "text/xml")
				}
				d = h.getElementsByTagName("root")[0];
				for (var g = 0, f = d.childNodes.length; g < f; g++) {
					var l = Element.clone(d.childNodes[g], true, true);
					if (l) {
						a.grab(l)
					}
				}
				return a
			}) || a.set("html", c)
		},
		success : function (d) {
			var c = this.options,
			b = this.response;
			b.html = d.stripScripts(function (f) {
					b.javascript = f
				});
			var a = this.processHTML(b.html);
			b.tree = a.childNodes;
			b.elements = a.getElements("*");
			if (c.filter) {
				b.tree = b.elements.filter(c.filter)
			}
			if (c.update) {
				$(c.update).empty().set("html", b.html)
			}
			if (c.evalScripts) {
				$exec(b.javascript)
			}
			this.onSuccess(b.tree, b.elements, b.html, b.javascript)
		}
	});
Element.Properties.load = {
	set : function (a) {
		var b = this.retrieve("load");
		if (b) {
			b.cancel()
		}
		return this.eliminate("load").store("load:options", $extend({
				data : this,
				link : "cancel",
				update : this,
				method : "get"
			}, a))
	},
	get : function (a) {
		if (a || !this.retrieve("load")) {
			if (a || !this.retrieve("load:options")) {
				this.set("load", a)
			}
			this.store("load", new Request.HTML(this.retrieve("load:options")))
		}
		return this.retrieve("load")
	}
};
Element.implement({
	load : function () {
		this.get("load").send(Array.link(arguments, {
				data : Object.type,
				url : String.type
			}));
		return this
	}
});
Request.JSON = new Class({
		Extends : Request,
		options : {
			secure : true
		},
		initialize : function (a) {
			this.parent(a);
			this.headers.extend({
				Accept : "application/json",
				"X-Request" : "JSON"
			})
		},
		success : function (a) {
			this.response.json = JSON.decode(a, this.options.secure);
			this.onSuccess(this.response.json, a)
		}
	});
Fx.Slide = new Class({
		Extends : Fx,
		options : {
			mode : "vertical"
		},
		initialize : function (b, a) {
			this.addEvent("complete", function () {
				this.open = (this.wrapper["offset" + this.layout.capitalize()] != 0);
				if (this.open && Browser.Engine.webkit419) {
					this.element.dispose().inject(this.wrapper)
				}
			}, true);
			this.element = this.subject = $(b);
			this.parent(a);
			var c = this.element.retrieve("wrapper");
			this.wrapper = c || new Element("div", {
					styles : $extend(this.element.getStyles("margin", "position"), {
						overflow : "hidden"
					})
				}).wraps(this.element);
			this.element.store("wrapper", this.wrapper).setStyle("margin", 0);
			this.now = [];
			this.open = true
		},
		vertical : function () {
			this.margin = "margin-top";
			this.layout = "height";
			this.offset = this.element.offsetHeight
		},
		horizontal : function () {
			this.margin = "margin-left";
			this.layout = "width";
			this.offset = this.element.offsetWidth
		},
		set : function (a) {
			this.element.setStyle(this.margin, a[0]);
			this.wrapper.setStyle(this.layout, a[1]);
			return this
		},
		compute : function (f, d, c) {
			var b = [];
			var a = 2;
			a.times(function (g) {
				b[g] = Fx.compute(f[g], d[g], c)
			});
			return b
		},
		start : function (b, f) {
			if (!this.check(arguments.callee, b, f)) {
				return this
			}
			this[f || this.options.mode]();
			var d = this.element.getStyle(this.margin).toInt();
			var c = this.wrapper.getStyle(this.layout).toInt();
			var a = [[d, c], [0, this.offset]];
			var h = [[d, c], [-this.offset, 0]];
			var g;
			switch (b) {
			case "in":
				g = a;
				break;
			case "out":
				g = h;
				break;
			case "toggle":
				g = (this.wrapper["offset" + this.layout.capitalize()] == 0) ? a : h
			}
			return this.parent(g[0], g[1])
		},
		slideIn : function (a) {
			return this.start("in", a)
		},
		slideOut : function (a) {
			return this.start("out", a)
		},
		hide : function (a) {
			this[a || this.options.mode]();
			this.open = false;
			return this.set([-this.offset, 0])
		},
		show : function (a) {
			this[a || this.options.mode]();
			this.open = true;
			return this.set([0, this.offset])
		},
		toggle : function (a) {
			return this.start("toggle", a)
		}
	});
Element.Properties.slide = {
	set : function (b) {
		var a = this.retrieve("slide");
		if (a) {
			a.cancel()
		}
		return this.eliminate("slide").store("slide:options", $extend({
				link : "cancel"
			}, b))
	},
	get : function (a) {
		if (a || !this.retrieve("slide")) {
			if (a || !this.retrieve("slide:options")) {
				this.set("slide", a)
			}
			this.store("slide", new Fx.Slide(this, this.retrieve("slide:options")))
		}
		return this.retrieve("slide")
	}
};
Element.implement({
	slide : function (d, f) {
		d = d || "toggle";
		var b = this.get("slide"),
		a;
		switch (d) {
		case "hide":
			b.hide(f);
			break;
		case "show":
			b.show(f);
			break;
		case "toggle":
			var c = this.retrieve("slide:flag", b.open);
			b[(c) ? "slideOut" : "slideIn"](f);
			this.store("slide:flag", !c);
			a = true;
			break;
		default:
			b.start(d, f)
		}
		if (!a) {
			this.eliminate("slide:flag")
		}
		return this
	}
});
Fx.Scroll = new Class({
		Extends : Fx,
		options : {
			offset : {
				x : 0,
				y : 0
			},
			wheelStops : true
		},
		initialize : function (b, a) {
			this.element = this.subject = $(b);
			this.parent(a);
			var d = this.cancel.bind(this, false);
			if ($type(this.element) != "element") {
				this.element = $(this.element.getDocument().body)
			}
			var c = this.element;
			if (this.options.wheelStops) {
				this.addEvent("start", function () {
					c.addEvent("mousewheel", d)
				}, true);
				this.addEvent("complete", function () {
					c.removeEvent("mousewheel", d)
				}, true)
			}
		},
		set : function () {
			var a = Array.flatten(arguments);
			this.element.scrollTo(a[0], a[1])
		},
		compute : function (f, d, c) {
			var b = [];
			var a = 2;
			a.times(function (g) {
				b.push(Fx.compute(f[g], d[g], c))
			});
			return b
		},
		start : function (c, k) {
			if (!this.check(arguments.callee, c, k)) {
				return this
			}
			var f = this.element.getSize(),
			g = this.element.getScrollSize();
			var b = this.element.getScroll(),
			d = {
				x : c,
				y : k
			};
			for (var h in d) {
				var a = g[h] - f[h];
				if ($chk(d[h])) {
					d[h] = ($type(d[h]) == "number") ? d[h].limit(0, a) : a
				} else {
					d[h] = b[h]
				}
				d[h] += this.options.offset[h]
			}
			return this.parent([b.x, b.y], [d.x, d.y])
		},
		toTop : function () {
			return this.start(false, 0)
		},
		toLeft : function () {
			return this.start(0, false)
		},
		toRight : function () {
			return this.start("right", false)
		},
		toBottom : function () {
			return this.start(false, "bottom")
		},
		calculateScroll : function (g, f) {
			var c = this.element,
			a = c.getScrollSize(),
			h = c.getScroll(),
			l = c.getSize(),
			b = this.options.offset,
			k = {
				x : g,
				y : f
			};
			for (var d in k) {
				if (!k[d] && k[d] !== 0) {
					k[d] = h[d]
				}
				if ($type(k[d]) != "number") {
					k[d] = a[d] - l[d]
				}
				k[d] += b[d]
			}
			return [k.x, k.y]
		},
		toElement : function (f, g) {
			g = g ? $splat(g) : ["x", "y"];
			var b = $(f).getPosition(this.element);
			var c = (/^(?:body|html)$/i).test(this.element.tagName);
			var a = c ? {
				x : 0,
				y : 0
			}
			 : this.element.getScroll();
			var d = new Hash(b).each(function (l, k) {
					b[k] = g.contains(k) ? l + a[k] : false
				});
			var h = this.calculateScroll(b.x, b.y);
			return this.start.apply(this, h)
		}
	});
Fx.Elements = new Class({
		Extends : Fx.CSS,
		initialize : function (b, a) {
			this.elements = this.subject = $$(b);
			this.parent(a)
		},
		compute : function (h, k, l) {
			var c = {};
			for (var d in h) {
				var a = h[d],
				f = k[d],
				g = c[d] = {};
				for (var b in a) {
					g[b] = this.parent(a[b], f[b], l)
				}
			}
			return c
		},
		set : function (b) {
			for (var c in b) {
				var a = b[c];
				for (var d in a) {
					this.render(this.elements[c], d, a[d], this.options.unit)
				}
			}
			return this
		},
		start : function (c) {
			if (!this.check(arguments.callee, c)) {
				return this
			}
			var k = {},
			l = {};
			for (var d in c) {
				var g = c[d],
				a = k[d] = {},
				h = l[d] = {};
				for (var b in g) {
					var f = this.prepare(this.elements[d], b, g[b]);
					a[b] = f.from;
					h[b] = f.to
				}
			}
			return this.parent(k, l)
		}
	});
var Drag = new Class({
		Implements : [Events, Options],
		options : {
			snap : 6,
			unit : "px",
			grid : false,
			style : true,
			limit : false,
			handle : false,
			invert : false,
			preventDefault : false,
			modifiers : {
				x : "left",
				y : "top"
			}
		},
		initialize : function () {
			var b = Array.link(arguments, {
					options : Object.type,
					element : $defined
				});
			this.element = $(b.element);
			this.document = this.element.getDocument();
			this.setOptions(b.options || {});
			var a = $type(this.options.handle);
			this.handles = (a == "array" || a == "collection") ? $$(this.options.handle) : $(this.options.handle) || this.element;
			this.mouse = {
				now : {},
				pos : {}

			};
			this.value = {
				start : {},
				now : {}

			};
			this.selection = (Browser.Engine.trident) ? "selectstart" : "mousedown";
			this.bound = {
				start : this.start.bind(this),
				check : this.check.bind(this),
				drag : this.drag.bind(this),
				stop : this.stop.bind(this),
				cancel : this.cancel.bind(this),
				eventStop : $lambda(false)
			};
			this.attach()
		},
		attach : function () {
			this.handles.addEvent("mousedown", this.bound.start);
			return this
		},
		detach : function () {
			this.handles.removeEvent("mousedown", this.bound.start);
			return this
		},
		start : function (c) {
			if (this.options.preventDefault) {
				c.preventDefault()
			}
			this.fireEvent("beforeStart", this.element);
			this.mouse.start = c.page;
			var a = this.options.limit;
			this.limit = {
				x : [],
				y : []
			};
			for (var d in this.options.modifiers) {
				if (!this.options.modifiers[d]) {
					continue
				}
				if (this.options.style) {
					this.value.now[d] = this.element.getStyle(this.options.modifiers[d]).toInt()
				} else {
					this.value.now[d] = this.element[this.options.modifiers[d]]
				}
				if (this.options.invert) {
					this.value.now[d] *= -1
				}
				this.mouse.pos[d] = c.page[d] - this.value.now[d];
				if (a && a[d]) {
					for (var b = 2; b--; b) {
						if ($chk(a[d][b])) {
							this.limit[d][b] = $lambda(a[d][b])()
						}
					}
				}
			}
			if ($type(this.options.grid) == "number") {
				this.options.grid = {
					x : this.options.grid,
					y : this.options.grid
				}
			}
			this.document.addEvents({
				mousemove : this.bound.check,
				mouseup : this.bound.cancel
			});
			this.document.addEvent(this.selection, this.bound.eventStop)
		},
		check : function (a) {
			if (this.options.preventDefault) {
				a.preventDefault()
			}
			var b = Math.round(Math.sqrt(Math.pow(a.page.x - this.mouse.start.x, 2) + Math.pow(a.page.y - this.mouse.start.y, 2)));
			if (b > this.options.snap) {
				this.cancel();
				this.document.addEvents({
					mousemove : this.bound.drag,
					mouseup : this.bound.stop
				});
				this.fireEvent("start", this.element).fireEvent("snap", this.element)
			}
		},
		drag : function (a) {
			if (this.options.preventDefault) {
				a.preventDefault()
			}
			this.mouse.now = a.page;
			for (var b in this.options.modifiers) {
				if (!this.options.modifiers[b]) {
					continue
				}
				this.value.now[b] = this.mouse.now[b] - this.mouse.pos[b];
				if (this.options.invert) {
					this.value.now[b] *= -1
				}
				if (this.options.limit && this.limit[b]) {
					if ($chk(this.limit[b][1]) && (this.value.now[b] > this.limit[b][1])) {
						this.value.now[b] = this.limit[b][1]
					} else {
						if ($chk(this.limit[b][0]) && (this.value.now[b] < this.limit[b][0])) {
							this.value.now[b] = this.limit[b][0]
						}
					}
				}
				if (this.options.grid[b]) {
					this.value.now[b] -= (this.value.now[b] % this.options.grid[b])
				}
				if (this.options.style) {
					this.element.setStyle(this.options.modifiers[b], this.value.now[b] + this.options.unit)
				} else {
					this.element[this.options.modifiers[b]] = this.value.now[b]
				}
			}
			this.fireEvent("drag", this.element)
		},
		cancel : function (a) {
			this.document.removeEvent("mousemove", this.bound.check);
			this.document.removeEvent("mouseup", this.bound.cancel);
			if (a) {
				this.document.removeEvent(this.selection, this.bound.eventStop);
				this.fireEvent("cancel", this.element)
			}
		},
		stop : function (a) {
			this.document.removeEvent(this.selection, this.bound.eventStop);
			this.document.removeEvent("mousemove", this.bound.drag);
			this.document.removeEvent("mouseup", this.bound.stop);
			if (a) {
				this.fireEvent("complete", this.element)
			}
		}
	});
Element.implement({
	makeResizable : function (a) {
		return new Drag(this, $merge({
				modifiers : {
					x : "width",
					y : "height"
				}
			}, a))
	}
});
Drag.Move = new Class({
		Extends : Drag,
		options : {
			droppables : [],
			container : false
		},
		initialize : function (c, b) {
			this.parent(c, b);
			this.droppables = $$(this.options.droppables);
			this.container = $(this.options.container);
			if (this.container && $type(this.container) != "element") {
				this.container = $(this.container.getDocument().body)
			}
			c = this.element;
			var d = c.getStyle("position");
			var a = (d != "static") ? d : "absolute";
			if (c.getStyle("left") == "auto" || c.getStyle("top") == "auto") {
				c.position(c.getPosition(c.offsetParent))
			}
			c.setStyle("position", a);
			this.addEvent("start", function () {
				this.checkDroppables()
			}, true)
		},
		start : function (b) {
			if (this.container) {
				var d = this.element,
				m = this.container,
				f = m.getCoordinates(d.offsetParent),
				g = {},
				a = {};
				["top", "right", "bottom", "left"].each(function (n) {
					g[n] = m.getStyle("padding-" + n).toInt();
					a[n] = d.getStyle("margin-" + n).toInt()
				}, this);
				var c = d.offsetWidth + a.left + a.right,
				l = d.offsetHeight + a.top + a.bottom;
				var k = [f.left + g.left, f.right - g.right - c];
				var h = [f.top + g.top, f.bottom - g.bottom - l];
				this.options.limit = {
					x : k,
					y : h
				}
			}
			this.parent(b)
		},
		checkAgainst : function (b) {
			b = b.getCoordinates();
			var a = this.mouse.now;
			return (a.x > b.left && a.x < b.right && a.y < b.bottom && a.y > b.top)
		},
		checkDroppables : function () {
			var a = this.droppables.filter(this.checkAgainst, this).getLast();
			if (this.overed != a) {
				if (this.overed) {
					this.fireEvent("leave", [this.element, this.overed])
				}
				if (a) {
					this.overed = a;
					this.fireEvent("enter", [this.element, a])
				} else {
					this.overed = null
				}
			}
		},
		drag : function (a) {
			this.parent(a);
			if (this.droppables.length) {
				this.checkDroppables()
			}
		},
		stop : function (a) {
			this.checkDroppables();
			this.fireEvent("drop", [this.element, this.overed]);
			this.overed = null;
			return this.parent(a)
		}
	});
Element.implement({
	makeDraggable : function (a) {
		return new Drag.Move(this, a)
	}
});
Hash.Cookie = new Class({
		Extends : Cookie,
		options : {
			autoSave : true
		},
		initialize : function (b, a) {
			this.parent(b, a);
			this.load()
		},
		save : function () {
			var a = JSON.encode(this.hash);
			if (!a || a.length > 4096) {
				return false
			}
			if (a == "{}") {
				this.dispose()
			} else {
				this.write(a)
			}
			return true
		},
		load : function () {
			this.hash = new Hash(JSON.decode(this.read(), true));
			return this
		}
	});
Hash.Cookie.implement((function () {
		var a = {};
		Hash.each(Hash.prototype, function (c, b) {
			a[b] = function () {
				var d = c.apply(this.hash, arguments);
				if (this.options.autoSave) {
					this.save()
				}
				return d
			}
		});
		return a
	})());
var Color = new Native({
		initialize : function (b, c) {
			if (arguments.length >= 3) {
				c = "rgb";
				b = Array.slice(arguments, 0, 3)
			} else {
				if (typeof b == "string") {
					if (b.match(/rgb/)) {
						b = b.rgbToHex().hexToRgb(true)
					} else {
						if (b.match(/hsb/)) {
							b = b.hsbToRgb()
						} else {
							b = b.hexToRgb(true)
						}
					}
				}
			}
			c = c || "rgb";
			switch (c) {
			case "hsb":
				var a = b;
				b = b.hsbToRgb();
				b.hsb = a;
				break;
			case "hex":
				b = b.hexToRgb(true);
				break
			}
			b.rgb = b.slice(0, 3);
			b.hsb = b.hsb || b.rgbToHsb();
			b.hex = b.rgbToHex();
			return $extend(b, this)
		}
	});
Color.implement({
	mix : function () {
		var a = Array.slice(arguments);
		var c = ($type(a.getLast()) == "number") ? a.pop() : 50;
		var b = this.slice();
		a.each(function (d) {
			d = new Color(d);
			for (var f = 0; f < 3; f++) {
				b[f] = Math.round((b[f] / 100 * (100 - c)) + (d[f] / 100 * c))
			}
		});
		return new Color(b, "rgb")
	},
	invert : function () {
		return new Color(this.map(function (a) {
				return 255 - a
			}))
	},
	setHue : function (a) {
		return new Color([a, this.hsb[1], this.hsb[2]], "hsb")
	},
	setSaturation : function (a) {
		return new Color([this.hsb[0], a, this.hsb[2]], "hsb")
	},
	setBrightness : function (a) {
		return new Color([this.hsb[0], this.hsb[1], a], "hsb")
	}
});
function $RGB(d, c, a) {
	return new Color([d, c, a], "rgb")
}
function $HSB(d, c, a) {
	return new Color([d, c, a], "hsb")
}
function $HEX(a) {
	return new Color(a, "hex")
}
Array.implement({
	rgbToHsb : function () {
		var b = this[0],
		c = this[1],
		m = this[2];
		var h,
		g,
		k;
		var l = Math.max(b, c, m),
		f = Math.min(b, c, m);
		var n = l - f;
		k = l / 255;
		g = (l != 0) ? n / l : 0;
		if (g == 0) {
			h = 0
		} else {
			var d = (l - b) / n;
			var a = (l - c) / n;
			var p = (l - m) / n;
			if (b == l) {
				h = p - a
			} else {
				if (c == l) {
					h = 2 + d - p
				} else {
					h = 4 + a - d
				}
			}
			h /= 6;
			if (h < 0) {
				h++
			}
		}
		return [Math.round(h * 360), Math.round(g * 100), Math.round(k * 100)]
	},
	hsbToRgb : function () {
		var c = Math.round(this[2] / 100 * 255);
		if (this[1] == 0) {
			return [c, c, c]
		} else {
			var a = this[0] % 360;
			var g = a % 60;
			var h = Math.round((this[2] * (100 - this[1])) / 10000 * 255);
			var d = Math.round((this[2] * (6000 - this[1] * g)) / 600000 * 255);
			var b = Math.round((this[2] * (6000 - this[1] * (60 - g))) / 600000 * 255);
			switch (Math.floor(a / 60)) {
			case 0:
				return [c, b, h];
			case 1:
				return [d, c, h];
			case 2:
				return [h, c, b];
			case 3:
				return [h, d, c];
			case 4:
				return [b, h, c];
			case 5:
				return [c, h, d]
			}
		}
		return false
	}
});
String.implement({
	rgbToHsb : function () {
		var a = this.match(/\d{1,3}/g);
		return (a) ? hsb.rgbToHsb() : null
	},
	hsbToRgb : function () {
		var a = this.match(/\d{1,3}/g);
		return (a) ? a.hsbToRgb() : null
	}
});
var Group = new Class({
		initialize : function () {
			this.instances = Array.flatten(arguments);
			this.events = {};
			this.checker = {}

		},
		addEvent : function (b, a) {
			this.checker[b] = this.checker[b] || {};
			this.events[b] = this.events[b] || [];
			if (this.events[b].contains(a)) {
				return false
			} else {
				this.events[b].push(a)
			}
			this.instances.each(function (c, d) {
				c.addEvent(b, this.check.bind(this, [b, c, d]))
			}, this);
			return this
		},
		check : function (c, a, b) {
			this.checker[c][b] = true;
			var d = this.instances.every(function (g, f) {
					return this.checker[c][f] || false
				}, this);
			if (!d) {
				return
			}
			this.checker[c] = {};
			this.events[c].each(function (f) {
				f.call(this, this.instances, a)
			}, this)
		}
	});
var Asset = new Hash({
		javascript : function (g, d) {
			d = $extend({
					onload : $empty,
					document : document,
					check : $lambda(true)
				}, d);
			var b = new Element("script", {
					src : g,
					type : "text/javascript"
				});
			var f = d.onload.bind(b),
			a = d.check,
			h = d.document;
			delete d.onload;
			delete d.check;
			delete d.document;
			b.addEvents({
				load : f,
				readystatechange : function () {
					if (["loaded", "complete"].contains(this.readyState)) {
						f()
					}
				}
			}).setProperties(d);
			if (Browser.Engine.webkit419) {
				var c = (function () {
					if (!$try(a)) {
						return
					}
					$clear(c);
					f()
				}).periodical(50)
			}
			return b.inject(h.head)
		},
		css : function (b, a) {
			return new Element("link", $merge({
					rel : "stylesheet",
					media : "screen",
					type : "text/css",
					href : b
				}, a)).inject(document.head)
		},
		image : function (c, b) {
			b = $merge({
					onload : $empty,
					onabort : $empty,
					onerror : $empty
				}, b);
			var d = new Image();
			var a = $(d) || new Element("img");
			["load", "abort", "error"].each(function (f) {
				var g = "on" + f;
				var h = b[g];
				delete b[g];
				d[g] = function () {
					if (!d) {
						return
					}
					if (!a.parentNode) {
						a.width = d.width;
						a.height = d.height
					}
					d = d.onload = d.onabort = d.onerror = null;
					h.delay(1, a, a);
					a.fireEvent(f, a, 1)
				}
			});
			d.src = a.src = c;
			if (d && d.complete) {
				d.onload.delay(1)
			}
			return a.setProperties(b)
		},
		images : function (d, c) {
			c = $merge({
					onComplete : $empty,
					onProgress : $empty
				}, c);
			if (!d.push) {
				d = [d]
			}
			var a = [];
			var b = 0;
			d.each(function (g) {
				var f = new Asset.image(g, {
						onload : function () {
							c.onProgress.call(this, b, d.indexOf(g));
							b++;
							if (b == d.length) {
								c.onComplete()
							}
						}
					});
				a.push(f)
			});
			return new Elements(a)
		}
	});
var Sortables = new Class({
		Implements : [Events, Options],
		options : {
			snap : 4,
			opacity : 1,
			clone : false,
			revert : false,
			handle : false,
			constrain : false
		},
		initialize : function (a, b) {
			this.setOptions(b);
			this.elements = [];
			this.lists = [];
			this.idle = true;
			this.addLists($$($(a) || a));
			if (!this.options.clone) {
				this.options.revert = false
			}
			if (this.options.revert) {
				this.effect = new Fx.Morph(null, $merge({
							duration : 250,
							link : "cancel"
						}, this.options.revert))
			}
		},
		attach : function () {
			this.addLists(this.lists);
			return this
		},
		detach : function () {
			this.lists = this.removeLists(this.lists);
			return this
		},
		addItems : function () {
			Array.flatten(arguments).each(function (a) {
				this.elements.push(a);
				var b = a.retrieve("sortables:start", this.start.bindWithEvent(this, a));
				(this.options.handle ? a.getElement(this.options.handle) || a : a).addEvent("mousedown", b)
			}, this);
			return this
		},
		addLists : function () {
			Array.flatten(arguments).each(function (a) {
				this.lists.push(a);
				this.addItems(a.getChildren())
			}, this);
			return this
		},
		removeItems : function () {
			var a = [];
			Array.flatten(arguments).each(function (b) {
				a.push(b);
				this.elements.erase(b);
				var c = b.retrieve("sortables:start");
				(this.options.handle ? b.getElement(this.options.handle) || b : b).removeEvent("mousedown", c)
			}, this);
			return $$(a)
		},
		removeLists : function () {
			var a = [];
			Array.flatten(arguments).each(function (b) {
				a.push(b);
				this.lists.erase(b);
				this.removeItems(b.getChildren())
			}, this);
			return $$(a)
		},
		getClone : function (b, a) {
			if (!this.options.clone) {
				return new Element("div").inject(document.body)
			}
			if ($type(this.options.clone) == "function") {
				return this.options.clone.call(this, b, a, this.list)
			}
			return a.clone(true).setStyles({
				margin : "0px",
				position : "absolute",
				visibility : "hidden",
				width : a.getStyle("width")
			}).inject(this.list).position(a.getPosition(a.getOffsetParent()))
		},
		getDroppables : function () {
			var a = this.list.getChildren();
			if (!this.options.constrain) {
				a = this.lists.concat(a).erase(this.list)
			}
			return a.erase(this.clone).erase(this.element)
		},
		insert : function (c, b) {
			var a = "inside";
			if (this.lists.contains(b)) {
				this.list = b;
				this.drag.droppables = this.getDroppables()
			} else {
				a = this.element.getAllPrevious().contains(b) ? "before" : "after"
			}
			this.element.inject(b, a);
			this.fireEvent("sort", [this.element, this.clone])
		},
		start : function (b, a) {
			if (!this.idle) {
				return
			}
			this.idle = false;
			this.element = a;
			this.opacity = a.get("opacity");
			this.list = a.getParent();
			this.clone = this.getClone(b, a);
			this.drag = new Drag.Move(this.clone, {
					snap : this.options.snap,
					container : this.options.constrain && this.element.getParent(),
					droppables : this.getDroppables(),
					onSnap : function () {
						b.stop();
						this.clone.setStyle("visibility", "visible");
						this.element.set("opacity", this.options.opacity || 0);
						this.fireEvent("start", [this.element, this.clone])
					}
					.bind(this),
					onEnter : this.insert.bind(this),
					onCancel : this.reset.bind(this),
					onComplete : this.end.bind(this)
				});
			this.clone.inject(this.element, "before");
			this.drag.start(b)
		},
		end : function () {
			this.drag.detach();
			this.element.set("opacity", this.opacity);
			if (this.effect) {
				var a = this.element.getStyles("width", "height");
				var b = this.clone.computePosition(this.element.getPosition(this.clone.offsetParent));
				this.effect.element = this.clone;
				this.effect.start({
					top : b.top,
					left : b.left,
					width : a.width,
					height : a.height,
					opacity : 0.25
				}).chain(this.reset.bind(this))
			} else {
				this.reset()
			}
		},
		reset : function () {
			this.idle = true;
			this.clone.destroy();
			this.fireEvent("complete", this.element)
		},
		serialize : function () {
			var c = Array.link(arguments, {
					modifier : Function.type,
					index : $defined
				});
			var b = this.lists.map(function (d) {
					return d.getChildren().map(c.modifier || function (f) {
						return f.get("id")
					}, this)
				}, this);
			var a = c.index;
			if (this.lists.length == 1) {
				a = 0
			}
			return $chk(a) && a >= 0 && a < this.lists.length ? b[a] : b
		}
	});
var Tips = new Class({
		Implements : [Events, Options],
		options : {
			onShow : function (a) {
				a.setStyle("visibility", "visible")
			},
			onHide : function (a) {
				a.setStyle("visibility", "hidden")
			},
			showDelay : 100,
			hideDelay : 100,
			className : null,
			offsets : {
				x : 16,
				y : 16
			},
			fixed : false
		},
		initialize : function () {
			var c = Array.link(arguments, {
					options : Object.type,
					elements : $defined
				});
			this.setOptions(c.options || null);
			this.tip = new Element("div").inject(document.body);
			if (this.options.className) {
				this.tip.addClass(this.options.className)
			}
			var b = new Element("div", {
					"class" : "tip-top"
				}).inject(this.tip);
			this.container = new Element("div", {
					"class" : "tip"
				}).inject(this.tip);
			var a = new Element("div", {
					"class" : "tip-bottom"
				}).inject(this.tip);
			this.tip.setStyles({
				position : "absolute",
				top : 0,
				left : 0,
				visibility : "hidden"
			});
			if (c.elements) {
				this.attach(c.elements)
			}
		},
		attach : function (a) {
			$$(a).each(function (d) {
				var h = d.retrieve("tip:title", d.get("title"));
				var g = d.retrieve("tip:text", d.get("rel") || d.get("href"));
				var f = d.retrieve("tip:enter", this.elementEnter.bindWithEvent(this, d));
				var c = d.retrieve("tip:leave", this.elementLeave.bindWithEvent(this, d));
				d.addEvents({
					mouseenter : f,
					mouseleave : c
				});
				if (!this.options.fixed) {
					var b = d.retrieve("tip:move", this.elementMove.bindWithEvent(this, d));
					d.addEvent("mousemove", b)
				}
				d.store("tip:native", d.get("title"));
				d.erase("title")
			}, this);
			return this
		},
		detach : function (a) {
			$$(a).each(function (c) {
				c.removeEvent("mouseenter", c.retrieve("tip:enter") || $empty);
				c.removeEvent("mouseleave", c.retrieve("tip:leave") || $empty);
				c.removeEvent("mousemove", c.retrieve("tip:move") || $empty);
				c.eliminate("tip:enter").eliminate("tip:leave").eliminate("tip:move");
				var b = c.retrieve("tip:native");
				if (b) {
					c.set("title", b)
				}
			});
			return this
		},
		elementEnter : function (b, a) {
			$A(this.container.childNodes).each(Element.dispose);
			var d = a.retrieve("tip:title");
			if (d) {
				this.titleElement = new Element("div", {
						"class" : "tip-title"
					}).inject(this.container);
				this.fill(this.titleElement, d)
			}
			var c = a.retrieve("tip:text");
			if (c) {
				this.textElement = new Element("div", {
						"class" : "tip-text"
					}).inject(this.container);
				this.fill(this.textElement, c)
			}
			this.timer = $clear(this.timer);
			this.timer = this.show.delay(this.options.showDelay, this);
			this.position((!this.options.fixed) ? b : {
				page : a.getPosition()
			})
		},
		elementLeave : function (a) {
			$clear(this.timer);
			this.timer = this.hide.delay(this.options.hideDelay, this)
		},
		elementMove : function (a) {
			this.position(a)
		},
		position : function (d) {
			var b = window.getSize(),
			a = window.getScroll();
			var f = {
				x : this.tip.offsetWidth,
				y : this.tip.offsetHeight
			};
			var c = {
				x : "left",
				y : "top"
			};
			for (var g in c) {
				var h = d.page[g] + this.options.offsets[g];
				if ((h + f[g] - a[g]) > b[g]) {
					h = d.page[g] - this.options.offsets[g] - f[g]
				}
				this.tip.setStyle(c[g], h)
			}
		},
		fill : function (a, b) {
			(typeof b == "string") ? a.set("html", b) : a.adopt(b)
		},
		show : function () {
			this.fireEvent("show", this.tip)
		},
		hide : function () {
			this.fireEvent("hide", this.tip)
		}
	});
var SmoothScroll = new Class({
		Extends : Fx.Scroll,
		initialize : function (b, c) {
			c = c || document;
			var f = c.getDocument(),
			d = c.getWindow();
			this.parent(f, b);
			this.links = (this.options.links) ? $$(this.options.links) : $$(f.links);
			var a = d.location.href.match(/^[^#]*/)[0] + "#";
			this.links.each(function (h) {
				if (h.href.indexOf(a) != 0) {
					return
				}
				var g = h.href.substr(a.length);
				if (g && $(g)) {
					this.useLink(h, g)
				}
			}, this);
			if (!Browser.Engine.webkit419) {
				this.addEvent("complete", function () {
					d.location.hash = this.anchor
				}, true)
			}
		},
		useLink : function (b, a) {
			b.addEvent("click", function (c) {
				this.anchor = a;
				this.toElement(a);
				c.stop()
			}
				.bind(this))
		}
	});
var Slider = new Class({
		Implements : [Events, Options],
		options : {
			onTick : function (a) {
				if (this.options.snap) {
					a = this.toPosition(this.step)
				}
				this.knob.setStyle(this.property, a)
			},
			snap : false,
			offset : 0,
			range : false,
			wheel : false,
			steps : 100,
			mode : "horizontal"
		},
		initialize : function (f, a, d) {
			this.setOptions(d);
			this.element = $(f);
			this.knob = $(a);
			this.previousChange = this.previousEnd = this.step = -1;
			this.element.addEvent("mousedown", this.clickedElement.bind(this));
			if (this.options.wheel) {
				this.element.addEvent("mousewheel", this.scrolledElement.bindWithEvent(this))
			}
			var g,
			b = {},
			c = {
				x : false,
				y : false
			};
			switch (this.options.mode) {
			case "vertical":
				this.axis = "y";
				this.property = "top";
				g = "offsetHeight";
				break;
			case "horizontal":
				this.axis = "x";
				this.property = "left";
				g = "offsetWidth"
			}
			this.half = this.knob[g] / 2;
			this.full = this.element[g] - this.knob[g] + (this.options.offset * 2);
			this.min = $chk(this.options.range[0]) ? this.options.range[0] : 0;
			this.max = $chk(this.options.range[1]) ? this.options.range[1] : this.options.steps;
			this.range = this.max - this.min;
			this.steps = this.options.steps || this.full;
			this.stepSize = Math.abs(this.range) / this.steps;
			this.stepWidth = this.stepSize * this.full / Math.abs(this.range);
			this.knob.setStyle("position", "relative").setStyle(this.property, -this.options.offset);
			c[this.axis] = this.property;
			b[this.axis] = [-this.options.offset, this.full - this.options.offset];
			this.drag = new Drag(this.knob, {
					snap : 0,
					limit : b,
					modifiers : c,
					onDrag : this.draggedKnob.bind(this),
					onStart : this.draggedKnob.bind(this),
					onComplete : function () {
						this.draggedKnob();
						this.end()
					}
					.bind(this)
				});
			if (this.options.snap) {
				this.drag.options.grid = Math.ceil(this.stepWidth);
				this.drag.options.limit[this.axis][1] = this.full
			}
		},
		set : function (a) {
			if (!((this.range > 0)^(a < this.min))) {
				a = this.min
			}
			if (!((this.range > 0)^(a > this.max))) {
				a = this.max
			}
			this.step = Math.round(a);
			this.checkStep();
			this.end();
			this.fireEvent("tick", this.toPosition(this.step));
			return this
		},
		clickedElement : function (c) {
			var b = this.range < 0 ? -1 : 1;
			var a = c.page[this.axis] - this.element.getPosition()[this.axis] - this.half;
			a = a.limit(-this.options.offset, this.full - this.options.offset);
			this.step = Math.round(this.min + b * this.toStep(a));
			this.checkStep();
			this.end();
			this.fireEvent("tick", a)
		},
		scrolledElement : function (a) {
			var b = (this.options.mode == "horizontal") ? (a.wheel < 0) : (a.wheel > 0);
			this.set(b ? this.step - this.stepSize : this.step + this.stepSize);
			a.stop()
		},
		draggedKnob : function () {
			var b = this.range < 0 ? -1 : 1;
			var a = this.drag.value.now[this.axis];
			a = a.limit(-this.options.offset, this.full - this.options.offset);
			this.step = Math.round(this.min + b * this.toStep(a));
			this.checkStep()
		},
		checkStep : function () {
			if (this.previousChange != this.step) {
				this.previousChange = this.step;
				this.fireEvent("change", this.step)
			}
		},
		end : function () {
			if (this.previousEnd !== this.step) {
				this.previousEnd = this.step;
				this.fireEvent("complete", this.step + "")
			}
		},
		toStep : function (a) {
			var b = (a + this.options.offset) * this.stepSize / this.full * this.steps;
			return this.options.steps ? Math.round(b -= b % this.stepSize) : b
		},
		toPosition : function (a) {
			return (this.full * Math.abs(this.min - a)) / (this.steps * this.stepSize) - this.options.offset
		}
	});
var Scroller = new Class({
		Implements : [Events, Options],
		options : {
			area : 20,
			velocity : 1,
			onChange : function (a, b) {
				this.element.scrollTo(a, b)
			}
		},
		initialize : function (b, a) {
			this.setOptions(a);
			this.element = $(b);
			this.listener = ($type(this.element) != "element") ? $(this.element.getDocument().body) : this.element;
			this.timer = null;
			this.coord = this.getCoords.bind(this)
		},
		start : function () {
			this.listener.addEvent("mousemove", this.coord)
		},
		stop : function () {
			this.listener.removeEvent("mousemove", this.coord);
			this.timer = $clear(this.timer)
		},
		getCoords : function (a) {
			this.page = (this.listener.get("tag") == "body") ? a.client : a.page;
			if (!this.timer) {
				this.timer = this.scroll.periodical(50, this)
			}
		},
		scroll : function () {
			var b = this.element.getSize(),
			a = this.element.getScroll(),
			f = this.element.getPosition(),
			d = {
				x : 0,
				y : 0
			};
			for (var c in this.page) {
				if (this.page[c] < (this.options.area + f[c]) && a[c] != 0) {
					d[c] = (this.page[c] - this.options.area - f[c]) * this.options.velocity
				} else {
					if (this.page[c] + this.options.area > (b[c] + f[c]) && b[c] + b[c] != a[c]) {
						d[c] = (this.page[c] - b[c] + this.options.area - f[c]) * this.options.velocity
					}
				}
			}
			if (d.y || d.x) {
				this.fireEvent("change", [a.x + d.x, a.y + d.y])
			}
		}
	});
var Accordion = new Class({
		Extends : Fx.Elements,
		options : {
			display : 0,
			show : false,
			height : true,
			width : false,
			opacity : true,
			fixedHeight : false,
			fixedWidth : false,
			wait : false,
			alwaysHide : false
		},
		initialize : function () {
			var c = Array.link(arguments, {
					container : Element.type,
					options : Object.type,
					togglers : $defined,
					elements : $defined
				});
			this.parent(c.elements, c.options);
			this.togglers = $$(c.togglers);
			this.container = $(c.container);
			this.previous = -1;
			if (this.options.alwaysHide) {
				this.options.wait = true
			}
			if ($chk(this.options.show)) {
				this.options.display = false;
				this.previous = this.options.show
			}
			if (this.options.start) {
				this.options.display = false;
				this.options.show = false
			}
			this.effects = {};
			if (this.options.opacity) {
				this.effects.opacity = "fullOpacity"
			}
			if (this.options.width) {
				this.effects.width = this.options.fixedWidth ? "fullWidth" : "offsetWidth"
			}
			if (this.options.height) {
				this.effects.height = this.options.fixedHeight ? "fullHeight" : "scrollHeight"
			}
			for (var b = 0, a = this.togglers.length; b < a; b++) {
				this.addSection(this.togglers[b], this.elements[b])
			}
			this.elements.each(function (f, d) {
				if (this.options.show === d) {
					this.fireEvent("active", [this.togglers[d], f])
				} else {
					for (var g in this.effects) {
						f.setStyle(g, 0)
					}
				}
			}, this);
			if ($chk(this.options.display)) {
				this.display(this.options.display)
			}
		},
		addSection : function (f, c, h) {
			f = $(f);
			c = $(c);
			var g = this.togglers.contains(f);
			var b = this.togglers.length;
			this.togglers.include(f);
			this.elements.include(c);
			if (b && (!g || h)) {
				h = $pick(h, b - 1);
				f.inject(this.togglers[h], "before");
				c.inject(f, "after")
			} else {
				if (this.container && !g) {
					f.inject(this.container);
					c.inject(this.container)
				}
			}
			var a = this.togglers.indexOf(f);
			f.addEvent("click", this.display.bind(this, a));
			if (this.options.height) {
				c.setStyles({
					"padding-top" : 0,
					"border-top" : "none",
					"padding-bottom" : 0,
					"border-bottom" : "none"
				})
			}
			if (this.options.width) {
				c.setStyles({
					"padding-left" : 0,
					"border-left" : "none",
					"padding-right" : 0,
					"border-right" : "none"
				})
			}
			c.fullOpacity = 1;
			if (this.options.fixedWidth) {
				c.fullWidth = this.options.fixedWidth
			}
			if (this.options.fixedHeight) {
				c.fullHeight = this.options.fixedHeight
			}
			c.setStyle("overflow", "hidden");
			if (!g) {
				for (var d in this.effects) {
					c.setStyle(d, 0)
				}
			}
			return this
		},
		display : function (a) {
			a = ($type(a) == "element") ? this.elements.indexOf(a) : a;
			if ((this.timer && this.options.wait) || (a === this.previous && !this.options.alwaysHide)) {
				return this
			}
			this.previous = a;
			var b = {};
			this.elements.each(function (f, d) {
				b[d] = {};
				var c = (d != a) || (this.options.alwaysHide && (f.offsetHeight > 0));
				this.fireEvent(c ? "background" : "active", [this.togglers[d], f]);
				for (var g in this.effects) {
					b[d][g] = c ? 0 : f[this.effects[g]]
				}
			}, this);
			return this.start(b)
		}
	});
Array.implement({
	shuffle : function () {
		for (var b, a, c = this.length; c; b = parseInt(Math.random() * c), a = this[--c], this[c] = this[b], this[b] = a) {}

		return this
	},
	split : function (b) {
		var c = [],
		a = [];
		this.clean().each(function (g, f, d) {
			if ((f + 1) % b != 0) {
				a.include(g);
				if (f + 1 == d.length) {
					c.include(a);
					a = null
				}
			} else {
				a.include(g);
				c.include(a);
				a = (f + 1 == d.length) ? null : []
			}
		});
		return c
	},
	splitForm : function (c) {
		var d = [],
		b = [],
		a = 0;
		this.clean().each(function (h, g, f) {
			var k = (h.get("cols") || 1) / 1;
			if (a == 0 || a + k <= c) {
				b.include(h);
				a += k
			} else {
				d.include(b);
				b = [];
				b.include(h);
				a = k
			}
			if (g + 1 == f.length) {
				d.include(b);
				b = null;
				a = null
			}
		});
		return d
	},
	eachFromLast : function (c, d) {
		for (var b = this.length - 1, a = 0; b >= a; b--) {
			c.call(d, this[b], b, this)
		}
	},
	sum : function () {
		var b = 0;
		for (var a = 0; a < this.length; a++) {
			if ($chk(this[a])) {
				b += this[a] / 1
			}
		}
		return b
	}
});
Element.implement({
	hover : function (b, a) {
		this.addEvents({
			mouseenter : function (c) {
				b.attempt(c, this)
			},
			mouseleave : function (c) {
				a.attempt(c, this)
			}
		})
	},
	isDisplayed : function () {
		var b = window.getScroll();
		var a = window.getSize();
		b.x2 = b.x + a.x;
		b.y2 = b.y + a.y;
		var c = this.getCoordinates();
		return ((c.left >= b.x && c.left <= b.x2) || (c.right >= b.x && c.right <= b.x2) || (c.left <= b.x && c.right >= b.x2)) && ((c.top >= b.y && c.top <= b.y2) || (c.bottom >= b.y && c.bottom <= b.y2) || (c.top <= b.y && c.bottom >= b.y2))
	},
	getPos : function (b) {
		var a = this.getStyle(b);
		return (a.indexOf("px") == -1) ? a.toInt() : (a.split("px")[0]).toInt()
	},
	hoverClass : function (a) {
		this.hover(function () {
			this.addClass(a)
		}, function () {
			this.removeClass(a)
		});
		return this
	}
});
(function () {
	Element.implement({
		_getPosition : function () {
			if (!Browser.Engine.trident) {
				return this.getPosition()
			}
			if (a(this)) {
				return {
					x : 0,
					y : 0
				}
			}
			return this._getOffsets()
		},
		_getOffsets : function () {
			if (Browser.Engine.trident) {
				var b = this.getDocument().getScroll();
				try {
					var c = this.getBoundingClientRect();
					return {
						x : c.left + b.x,
						y : c.top + b.y
					}
				} catch (d) {
					return {
						x : -1000,
						y : -1000
					}
				}
			}
		},
		getHTML : function () {
			var b;
			var c = this.attributes;
			var f = "<" + this.tagName;
			for (var d = 0; d < c.length; d++) {
				b = c[d];
				if (b.specified) {
					f += " " + b.name + "='" + b.value + "'"
				}
			}
			if (!this.canHaveChildren) {
				return f + ">"
			}
			return f + ">" + this.innerHTML + "</" + this.tagName + ">"
		}
	});
	function a(b) {
		return (/^(?:body|html)$/i).test(b.tagName)
	}
})();
Native.implement([Element, Window, Document], {
	cloneAllEvents : function (b, a) {
		b = $(b);
		b.getElements("*").each(function (f) {
			var d = f.retrieve("events");
			if (!d) {
				return this
			}
			if (!a) {
				for (var c in d) {
					this.cloneEvents(f, c)
				}
			} else {
				if (d[a]) {
					d[a].keys.each(function (g) {
						f.addEvent(a, g)
					}, this)
				}
			}
		}, this);
		return this
	}
});
var DragTable = new Class({
		Extends : Sortables,
		insert : function (c, b) {
			if (!b) {
				return
			}
			var a = "inside";
			if (this.lists.contains(b)) {
				this.list = b;
				this.drag.droppables = this.getDroppables()
			} else {
				a = this.element.getAllPrevious().contains(b) ? "before" : "after"
			}
			this.element.inject(b, a);
			this.fireEvent("sort", [this.element, this.clone, b, a])
		},
		start : function (b, a) {
			if (!this.idle) {
				return
			}
			this.idle = false;
			this.element = a;
			this.opacity = a.get("opacity");
			this.list = a.getParent();
			this.clone = this.getClone(b, a);
			this.drag = new Drag.Move(this.clone, {
					snap : this.options.snap,
					container : this.options.constrain && this.element.getParent(),
					droppables : this.getDroppables(),
					onSnap : function () {
						this.clone.setStyle("visibility", "visible");
						this.clone.setStyle("opacity", 0.5);
						this.element.set("opacity", this.options.opacity || 0);
						this.fireEvent("start", [this.element, this.clone])
					}
					.bind(this),
					onDrop : this.insert.bind(this),
					onCancel : this.reset.bind(this),
					onComplete : this.end.bind(this),
					onEnter : this.doEnter.bind(this),
					onLeave : this.doLeave.bind(this)
				});
			this.clone.inject(this.element, "before");
			this.drag.start(b)
		},
		doEnter : function (b, a) {
			this.fireEvent("enter", [b, a])
		},
		doLeave : function (b, a) {
			this.fireEvent("leave", [b, a])
		}
	});
String.implement({
	bLength : function () {
		if (this == null) {
			return 0
		} else {
			return (this.length + this.replace(/[\u0000-\u00ff]/g, "").length)
		}
	},
	bSubString : function (d, b) {
		var a = 0;
		var c = this.replace(/[\s\S]/g, function (h, f, g) {
				if (h.charCodeAt(0) > 127) {
					a++
				}
				if (a + f >= b) {
					return ""
				}
				return h
			});
		return c
	},
	toHash : function () {
		if (!this.contains("|") && !this.contains(",") && !this.contains("code") && !this.contains("caption")) {
			return this
		}
		var c = new Hash();
		var b = this.split("|");
		b.each(function (d) {
			if (d.contains(",")) {
				var a = d.split(",")[0];
				c.set(a, d.replace((a + ","), ""))
			} else {
				c.set(d, null)
			}
		});
		return c
	},
	startWith : function (a) {
		if (a == null || a == "" || this.length == 0 || a.length > this.length) {
			return false
		}
		if (this.substr(0, a.length) == a) {
			return true
		} else {
			return false
		}
		return true
	},
	endWith : function (a) {
		if (a == null || a == "" || this.length == 0 || a.length > this.length) {
			return false
		}
		if (this.substring(this.length - a.length) == a) {
			return true
		} else {
			return false
		}
		return true
	}
});
Options.implement({
	htmlOptions : function (f) {
		for (var d in(this.options || {})) {
			var b = f.get(d);
			this.options[d] = ($chk(b) && $defined(b)) ? b : this.options[d];
			if (d == "pNode") {
				this.options[d] = f.pNode;
				continue
			}
			if ($type(this.options[d]) != "function" && (/^on[A-Z]/).test(d)) {
				var a = this.getFunc(this.options[d]);
				for (var c = 0; c < a.length; c++) {
					this.addEvent(d, a[c])
				}
			}
		}
		return this.setOptions()
	},
	getFunc : function (a) {
		return sword_getFunc(a)
	}
});
function sword_getFunc(g) {
	if (!g) {
		g = ""
	}
	if (typeof g == "function") {
		g = g.toString();
		var f = g.indexOf("{") + 1;
		if (f > 0) {
			var d = g.lastIndexOf("}");
			g = g.substring(f, d)
		}
	}
	if (g.indexOf("{") != -1) {
		g = g.substring(g.indexOf("{") + 1, g.lastIndexOf("}"))
	}
	var k = g.split(/\s*;\s*/);
	var c = [];
	for (var b = 0; b < k.length; b++) {
		if (k[b].trim() != "") {
			var h = k[b].substring(0, k[b].indexOf("(")) || undefined;
			var a = k[b].substring(k[b].indexOf("(") + 1, k[b].indexOf(")")) || undefined;
			if ((a && a.trim() == "") || a == undefined) {
				a = ""
			} else {
				a = "," + a
			}
			c.push(new Function("return sword_excutefunc(" + h.trim() + ",arguments" + a + ")"))
		}
	}
	return c
}
function sword_excutefunc(g, b) {
	var f = new Array();
	for (var c = 2; c < arguments.length; c++) {
		f.push(arguments[c])
	}
	if (typeof(g) == "object") {
		var a = new function (h) {
			g(f)
		};
		return
	}
	if (b) {
		var d = Array().slice.call(b);
		f = f.concat(d)
	}
	return g.apply(this, f)
}
Fx.ProgressBar = new Class({
		Extends : Fx,
		options : {
			text : null,
			url : null,
			transition : Fx.Transitions.Circ.easeOut,
			fit : true,
			link : "cancel"
		},
		initialize : function (c, b) {
			this.element = $(c);
			this.parent(b);
			var a = this.options.url;
			if (a) {
				this.element.setStyles({
					"background-image" : "url(" + a + ")",
					"background-repeat" : "no-repeat"
				})
			}
			if (this.options.fit) {
				a = a || this.element.getStyle("background-image").replace(/^url\(["']?|["']?\)$/g, "");
				if (a) {
					var d = new Image();
					d.onload = function () {
						this.fill = d.width;
						d = d.onload = null;
						this.set(this.now || 0)
					}
					.bind(this);
					d.src = a;
					if (!this.fill && d.width) {
						d.onload()
					}
				}
			} else {
				this.set(0)
			}
		},
		start : function (b, a) {
			return this.parent(this.now, (arguments.length == 1) ? b.limit(0, 100) : b / a * 100)
		},
		set : function (c) {
			this.now = c;
			var a = (this.fill) ? (((this.fill / -2) + (c / 100) * (this.element.width || 1) || 0).round() + "px") : ((100 - c) + "%");
			this.element.setStyle("backgroundPosition", a + " 0px").title = Math.round(c) + "%";
			var b = $(this.options.text);
			if (b) {
				b.set("text", Math.round(c) + "%")
			}
			return this
		}
	});
var WidgetFactory = new Class({
		name : "WidgetFactory",
		initialize : function () {},
		create : function (param) {
			var swordWidget = null;
			var className = param;
			if ($type(param) != "string") {
				className = param.get("sword")
			}
			swordWidget = eval("new " + className + "()");
			return swordWidget
		}
	});
var i18n = {
	chooseFile : "请选择文件",
	wait : "请稍后...",
	fileName : "文件名",
	fileSize : "文件大小",
	fileDelete : "删除",
	fileDownload : "下载",
	fileEdit : "编辑",
	fileAffix : "附件",
	fileAdd : "增加",
	fileCancel : "取消",
	months : ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
	days : ["日", "一", "二", "三", "四", "五", "六"],
	dateOrder : ["年", "月", "日", "时", "分", "秒"],
	bizSucMsg : "校验成功!",
	bizFaiMsg : "校验失败!",
	sysMsg : "系统错误!",
	menuCaption : ["刷新", "关闭当前项", "关闭其他项", "关闭所有项"],
	gridHide : "隐藏此列",
	gridEsc : "按升序排列",
	gridDesc : "按降序排列",
	gridCtrl : "控制面板",
	gridInsert : "请先选择一行,再执行此操作.",
	gridDelete : "请至少选择一行",
	gridDelConfirmTree : "确认删除?其子节点也将被删除!",
	gridDelConfirm : "确认删除?",
	gridLoadPage : "表格中有没有被保存的项目!点击确定放弃这些信息,执行此动作;点击取消,取消动作",
	gridTarNotExist1 : "目标页[",
	gridTarNotExist2 : "]不存在!",
	gridInsertRowDel : "此行为新增行，执行此操作会直接物理删除，信息将不能恢复!您要执行此操作吗？",
	gridSaveAlert : "该行数据没有保存，不能执行此操作!",
	gridFocus : "没有焦点可以转移",
	gridGo : "已经是当前页!",
	gridDi : "第",
	gridGoErr : "大于0的整数",
	gridYe : "页",
	gridYeGong : "页/共",
	gridMeiYeShow : "每页",
	gridTiao : "条",
	gridJsd : "共",
	gridJsdL : "条",
	gridMeiYe : "每页",
	gridGong : "共",
	gridFirst : "已经是首页了!",
	gridLast : "已经是末页了!",
	saveSuc : "保存成功!",
	saveFai : "保存失败!",
	save : "提交",
	cancel : "取消",
	button : "按钮",
	firstPage : "首页",
	endPage : "末页",
	nextPage : "下一页",
	previousPage : "上一页",
	titleName : "提示框",
	okBtnName : "确定",
	cancelBtnName : "取消",
	defineBtnName : "自定义",
	boxMin : "最小化",
	boxMax : "最大化",
	boxNatural : "正常化",
	boxClose : "关闭",
	selectLoading : "正在加载数据请稍后...",
	toolEdit : "编辑",
	toolNew : "新建",
	toolDel : "删除",
	toolFresh : "刷新",
	toolOpen : "打开",
	toolFind : "查找",
	toolSave : "保存",
	toolBack : "返回",
	toolExport : "导出",
	toolAddtime : "增加时间",
	toolReducetime : "减少时间",
	toolAddright : "授权",
	toolReduceright : "撤权",
	num : "数字",
	numInt : "整数",
	numFloat : "浮点数",
	numScience : "科学计数法",
	character : "字符",
	chinese : "汉字",
	twoBytes : "双字节",
	english : "英文",
	date : "日期格式不正确",
	numChar : "数字或字符",
	numEnglish : "数字英文字符",
	qq : "不符合QQ号码格式",
	telephone : "不符合座机号码格式",
	cellphone : "不符合手机号码格式",
	idcard : "不符合身份证格式",
	nidcard : "不符合18位的身份证格式",
	postal : "不符合邮政编码格式",
	currency : "美元",
	email : "不符合邮箱地址格式",
	url : "不符合URL地址格式",
	and1 : ",且",
	or : ",或者",
	must : "不能为空",
	contrast : "数值",
	range : "数值范围为",
	customCheckStyle : "不允许输入以下字符",
	length1 : "字符串长度为",
	customFunction : "自定义校验",
	area : ["", "", "", "", "", "", "", "", "", "", "", "北京", "天津", "河北", "山西", "内蒙古", "", "", "", "", "", "辽宁", "吉林", "黑龙江", "", "", "", "", "", "", "", "上海", "江苏", "浙江", "安微", "福建", "江西", "山东", "", "", "", "河南", "湖北", "湖南", "广东", "广西", "海南", "", "", "", "重庆", "四川", "贵州", "云南", "西藏", "", "", "", "", "", "", "陕西", "甘肃", "青海", "宁夏", "新疆", "", "", "", "", "", "台湾", "", "", "", "", "", "", "", "", "", "香港", "澳门", "", "", "", "", "", "", "", "", "国外"],
	tabMenuFresh : "刷新",
	tabMenuClose : "关闭当前项",
	tabMenuCloseAll : "关闭所有项",
	tabMenuCloseOthers : "关闭其他项",
	nullStr : ""
};
var PageInit = new Class({
		Implements : [Events, Options],
		name : "PageInit",
		options : {
			pNode : null,
			onBefore : null,
			onDataInit : null,
			onAfter : null,
			onSuccess : null,
			onError : null,
			onFinish : null,
			onAfterLoadData : null
		},
		initialize : function () {},
		initParam : function (a) {
			a.pNode = a;
			this.htmlOptions(a)
		},
		initStaticData : function () {
			if (!$defined(this.options.pNode) || !$chk(this.options.pNode.get("data"))) {
				return
			}
			pc.initData = JSON.decode(this.options.pNode.get("data"))
		},
		getInitData : function (d) {
			if (!$defined(this.options.pNode)) {
				return
			}
			if ($chk(this.options.pNode.get("data"))) {
				d.dataObj = pc.initData;
				pc.loadData(d)
			} else {
				if ($chk(this.options.pNode.get("tid")) || $chk(this.options.pNode.get("ctrl"))) {
					var c = {
						ctrl : this.options.pNode.get("ctrl") || "",
						tid : this.options.pNode.get("tid") || "",
						data : []
					};
					var a = new Request({
							method : "post",
							async : true,
							url : "ajax.sword?a=" + Math.random()
						});
					a.onSuccess = function (f) {
						pc.initData = d.dataObj = JSON.decode(f);
						pc.loadData(d)
					};
					var b = JSON.encode(c);
					a.send("postData=" + b)
				}
			}
		}
	});
var SwordFile2Template = {
	render : function (t, n, p) {
		var c = t.get("name"),
		d = p + "_" + c,
		l = t.get("dataname"),
		f = t.get("deleteCtrl"),
		m = t.get("hasAdd") || "true",
		u = t.get("hasDelete") || "true";
		var b = ['<div class="swordform_field_wrap"><div class="swordform_item_oprate sword_file_upload2" widgetGetValue="true" id="'];
		b.push(d);
		b.push('" name="');
		b.push(c);
		b.push('" dataname="');
		b.push(l);
		b.push('" downloadCtrl="');
		b.push(t.get("downloadCtrl"));
		b.push('" deleteCtrl="');
		b.push(f);
		b.push('" widget="file2"><ul class="up-list" name="up-list">');
		var g = t.get("addCaption") || "添加文件";
		t.set("id", d + "_tpl");
		n.fieldElHash.set(d, d);
		var a = pc.getInitDataByDataName(l),
		q = "";
		if (u != "true") {
			q = "display:none;"
		}
		if (a) {
			var k = a.data;
			for (var h = 0; h < k.length; h++) {
				var s = k[h].name;
				var r = JSON.encode(k[h]);
				b.push("<li id='file-id' class='file' datamap='");
				b.push(r);
				b.push('\'><span class="file-title">');
				b.push(s);
				b.push('</span><span class="file-delete" style="' + q + 'visibility: hidden;"></span></li>')
			}
		}
		b.push("</ul>");
		if (m == "true") {
			b.push('<a name="up-attach" style="color: blue;cursor: pointer; text-decoration: underline; ">');
			b.push(g);
			b.push("</a>")
		}
		b.push("</div></div></div>");
		return b.join("")
	},
	initWidget : function (b, f, a) {
		var d = $(f.get("id") + "_tpl");
		var c = initUp4Template(f.getParent(".swordform_field_wrap"), d, f, a);
		a.setWidget(b, c);
		a.fieldElHash.set(f.get("id"), f);
		return c
	},
	runEventFocus : function () {},
	runEventClick : function () {},
	runEventBlur : function () {},
	runEventDblClick : function () {
		return
	},
	runEventKeydown : function () {
		return
	}
};
var SwordFileTemplate = {
	start : '<div class="swordform_field_wrap"><div name="{name}" class="uploadGroup formselect-list swordform_item_oprate" widgetgetvalue="true" widget="file" keepfile="{keepfile}" isMulti={isMulti} size="{size}" id="{id}" style="float: left;" ',
	upinput : '><div class="formselect-list-inner"><div class="formselect-list-item"><input type="file" rule="{rule}" name="{name}" _onchange="{onchange}" value="选择" size="{size}"><span class="fileuploadloaded"></span>',
	insert : '<input type="button" value="增加">',
	end : "</div></div></div></div>",
	render : function (m, f, h, c) {
		var a = m.get("name"),
		b = h + "_" + a,
		l = m.get("keepfile"),
		n = m.get("size"),
		g = m.get("isMulti") || "true";
		var d = [this.start, this.upinput];
		f.fieldElHash.set(b, b);
		if (g == "true") {
			d.push(this.insert)
		}
		d.push(this.end);
		var k = d.join("").substitute({
				id : b,
				name : a,
				keepfile : m.get("keepfile") || "false",
				isMulti : g,
				size : n || "30",
				onchange : m.get("onchange"),
				rule : m.get("rule")
			});
		return k
	},
	initData : function (b, a) {
		b.set("value", a.value).set("realvalue", a.value)
	},
	addEvent : function (d, c, a) {
		var f = c.get("name");
		var b = a.getWidget(f);
		if (!b) {
			b = this.initWidget(f, c, a)
		}
		b.box = c;
		b.parent = a;
		b.wrap = d.getElement("div.uploadGroup");
		b.wrap.store("parent", a);
		b.innerWrap = d.getElement(".formselect-list-inner");
		b.initEvent();
		c.addEvent("change", b.fileValidator.bind(a))
	},
	initWidget : function (c, f, a) {
		var d = a.options.pNode.getElement("div[name=" + c + "]");
		var b = new fileUpload(d);
		b.options.pNode = d;
		b.innerWrap = f;
		this.innerWrap = f.getElement(".formselect-list-inner");
		b.wrap = f;
		b.parent = a;
		b.wrap.store("parent", a);
		b.box = f.getElement("input");
		b.box.addEvent("change", b.fileValidator.bind(a));
		a.setWidget(c, b);
		return b
	},
	runEventClick : function (d, c, a) {
		if (d.target.getAttribute("value") == "增加") {
			var b = a.getField(c.get("name"));
			b.parseFileRow("add", c)
		}
	},
	runEventDblClick : function (c, b, a) {
		return
	},
	runEventKeydown : function (c, b, a) {
		return
	},
	runEventKeyup : function (c, b, a) {
		return
	}
};
var SwordLabelTemplate = {
	start : '<div class="swordform_field_wrap"><label type="label" class="swordform_item_oprate swordform_item_label" style="',
	inp : ' id="{id}" name="{name}" defValue="{defValue}" format="{format}" realvalue="{realvalue}" showvalue="{showvalue}" _onclick="{onclick}" ',
	v : ">",
	end : "</label></div>",
	render : function (p, k, l, g) {
		var f = [this.start];
		if (p.get("show") == "false") {
			f.push("display:none;")
		}
		if ($chk(p.get("style"))) {
			f.push(p.get("style"))
		}
		f.push('"');
		var b = p.get("name"),
		c = l + "_" + b,
		a = p.get("defValue"),
		h = p.get("disable");
		if (h == "true") {
			f.push("disabled")
		}
		var d = g ? g.value : (a || ""),
		m = d;
		var q = p.get("format");
		if (q && d) {
			d = sword_fmt.formatText(p, d, "", q).value
		}
		var n = this.inp.substitute({
				id : c,
				name : b,
				defValue : a,
				realvalue : m,
				format : q,
				showvalue : d,
				onclick : p.get("onclick")
			});
		f.push(n);
		f.push(this.v);
		f.push(d);
		f.push(this.end);
		k.fieldElHash.set(c, c);
		return f.join("")
	},
	initData : function (d, c, a) {
		if ($defined(c)) {
			var b = c.value;
			if ($defined(b)) {
				c = b
			}
			d.set({
				text : c,
				value : c
			})
		}
	},
	runEventClick : function (c, b, a) {
		var d = b.get("_onclick");
		if ($chk(d)) {
			a.getFunc(d)[0](c, a)
		}
	},
	runEventDblClick : function () {
		return
	}
};
var SwordHiddenTemplate = {
	render : function (d, b, f, a) {
		var c = d.get("name"),
		g = f + "_" + c;
		d.set("id", g).set("realvalue", a ? a.value : (d.get("defValue") || ""));
		b.fieldElHash.set(g, g);
		return d.outerHTML
	}
};
var SwordUserdefineTemplate = {
	render : function (c, b, d, a) {
		c.setStyle("display", "none");
		return "<div class='swordform_userdefine_wrap'>" + c.innerHTML + "</div>"
	}
};
(function () {
	var c = function () {
		var f = [].slice.call(arguments);
		f.push(c.options);
		if (f[0].match(/^\s*#([\w:\-\.]+)\s*$/igm)) {
			f[0].replace(/^\s*#([\w:\-\.]+)\s*$/igm, function (k, l) {
				var g = document;
				var h = g && g.getElementById(l);
				f[0] = h ? (h.value || h.innerHTML) : k
			})
		}
		if (arguments.length == 1) {
			return c.compile.apply(c, f)
		}
		if (arguments.length >= 2) {
			return c.to_html.apply(c, f)
		}
	};
	var d = {
		escapehash : {
			"<" : "&lt;",
			">" : "&gt;",
			"&" : "&amp;",
			'"' : "&quot;",
			"'" : "&#x27;",
			"/" : "&#x2f;"
		},
		escapereplace : function (f) {
			return d.escapehash[f]
		},
		escaping : function (f) {
			return typeof(f) !== "string" ? f : f.replace(/[&<>"]/igm, this.escapereplace)
		},
		detection : function (f) {
			return typeof(f) === "undefined" ? "" : f
		}
	};
	var b = function (f) {
		if (typeof(console) !== "undefined") {
			if (console.warn) {
				console.warn(f);
				return
			}
			if (console.log) {
				console.log(f);
				return
			}
		}
		throw (f)
	};
	var a = function (k, g) {
		k = k !== Object(k) ? {}

		 : k;
		if (k.__proto__) {
			k.__proto__ = g;
			return k
		}
		var h = function () {};
		var l = Object.create ? Object.create(g) : new(h.prototype = g, h);
		for (var f in k) {
			if (k.hasOwnProperty(f)) {
				l[f] = k[f]
			}
		}
		return l
	};
	c.__cache = {};
	c.version = "0.6.5-stable";
	c.settings = {};
	c.tags = {
		operationOpen : "{@",
		operationClose : "}",
		interpolateOpen : "\\${",
		interpolateClose : "}",
		noneencodeOpen : "\\$\\${",
		noneencodeClose : "}",
		commentOpen : "\\{#",
		commentClose : "\\}"
	};
	c.options = {
		cache : true,
		strip : true,
		errorhandling : true,
		detection : true,
		_method : a({
			__escapehtml : d,
			__throw : b,
			__juicer : c
		}, {})
	};
	c.tagInit = function () {
		var g = c.tags.operationOpen + "each\\s*([^}]*?)\\s*as\\s*(\\w*?)\\s*(,\\s*\\w*?)?" + c.tags.operationClose;
		var k = c.tags.operationOpen + "\\/each" + c.tags.operationClose;
		var l = c.tags.operationOpen + "if\\s*([^}]*?)" + c.tags.operationClose;
		var m = c.tags.operationOpen + "\\/if" + c.tags.operationClose;
		var r = c.tags.operationOpen + "else" + c.tags.operationClose;
		var s = c.tags.operationOpen + "else if\\s*([^}]*?)" + c.tags.operationClose;
		var n = c.tags.interpolateOpen + "([\\s\\S]+?)" + c.tags.interpolateClose;
		var p = c.tags.noneencodeOpen + "([\\s\\S]+?)" + c.tags.noneencodeClose;
		var q = c.tags.commentOpen + "[^}]*?" + c.tags.commentClose;
		var h = c.tags.operationOpen + "each\\s*(\\w*?)\\s*in\\s*range\\(([^}]+?)\\s*,\\s*([^}]+?)\\)" + c.tags.operationClose;
		var f = c.tags.operationOpen + "include\\s*([^}]*?)\\s*,\\s*([^}]*?)" + c.tags.operationClose;
		c.settings.forstart = new RegExp(g, "igm");
		c.settings.forend = new RegExp(k, "igm");
		c.settings.ifstart = new RegExp(l, "igm");
		c.settings.ifend = new RegExp(m, "igm");
		c.settings.elsestart = new RegExp(r, "igm");
		c.settings.elseifstart = new RegExp(s, "igm");
		c.settings.interpolate = new RegExp(n, "igm");
		c.settings.noneencode = new RegExp(p, "igm");
		c.settings.inlinecomment = new RegExp(q, "igm");
		c.settings.rangestart = new RegExp(h, "igm");
		c.settings.include = new RegExp(f, "igm")
	};
	c.tagInit();
	c.set = function (g, l) {
		var k = this;
		var f = function (n) {
			return n.replace(/[\$\(\)\[\]\+\^\{\}\?\*\|\.]/igm, function (p) {
				return "\\" + p
			})
		};
		var m = function (p, q) {
			var n = p.match(/^tag::(.*)$/i);
			if (n) {
				k.tags[n[1]] = f(q);
				k.tagInit();
				return
			}
			k.options[p] = q
		};
		if (arguments.length === 2) {
			m(g, l);
			return
		}
		if (g === Object(g)) {
			for (var h in g) {
				if (g.hasOwnProperty(h)) {
					m(h, g[h])
				}
			}
		}
	};
	c.register = function (h, g) {
		var f = this.options._method;
		if (f.hasOwnProperty(h)) {
			return false
		}
		return f[h] = g
	};
	c.unregister = function (g) {
		var f = this.options._method;
		if (f.hasOwnProperty(g)) {
			return delete f[g]
		}
	};
	c.template = function (f) {
		var g = this;
		this.options = f;
		this.__interpolate = function (h, p, l) {
			var k = h.split("|"),
			n = k[0] || "",
			m;
			if (k.length > 1) {
				h = k.shift();
				m = k.shift().split(",");
				n = "_method." + m.shift() + ".call({}, " + [h].concat(m) + ")"
			}
			return "<%= " + (p ? "_method.__escapehtml.escaping" : "") + "(" + (!l || l.detection !== false ? "_method.__escapehtml.detection" : "") + "(" + n + ")) %>"
		};
		this.__removeShell = function (k, h) {
			var l = 0;
			k = k.replace(c.settings.forstart, function (r, n, q, p) {
					var q = q || "value",
					p = p && p.substr(1);
					var m = "i" + l++;
					return "<% ~function() {for(var " + m + " in " + n + ") {if(" + n + ".hasOwnProperty(" + m + ")) {var " + q + "=" + n + "[" + m + "];" + (p ? ("var " + p + "=" + m + ";") : "") + " %>"
				}).replace(c.settings.forend, "<% }}}(); %>").replace(c.settings.ifstart, function (m, n) {
					return "<% if(" + n + ") { %>"
				}).replace(c.settings.ifend, "<% } %>").replace(c.settings.elsestart, function (m) {
					return "<% } else { %>"
				}).replace(c.settings.elseifstart, function (m, n) {
					return "<% } else if(" + n + ") { %>"
				}).replace(c.settings.noneencode, function (n, m) {
					return g.__interpolate(m, false, h)
				}).replace(c.settings.interpolate, function (n, m) {
					return g.__interpolate(m, true, h)
				}).replace(c.settings.inlinecomment, "").replace(c.settings.rangestart, function (q, p, r, n) {
					var m = "j" + l++;
					return "<% ~function() {for(var " + m + "=" + r + ";" + m + "<" + n + ";" + m + "++) {{var " + p + "=" + m + "; %>"
				}).replace(c.settings.include, function (p, m, n) {
					return "<%= _method.__juicer(" + m + ", " + n + "); %>"
				});
			if (!h || h.errorhandling !== false) {
				k = "<% try { %>" + k;
				k += '<% } catch(e) {_method.__throw("Juicer Render Exception: "+e.message);} %>'
			}
			return k
		};
		this.__toNative = function (k, h) {
			return this.__convert(k, !h || h.strip)
		};
		this.__lexicalAnalyze = function (m) {
			var l = [];
			var r = [];
			var q = "";
			var h = ["if", "each", "_", "_method", "console", "break", "case", "catch", "continue", "debugger", "default", "delete", "do", "finally", "for", "function", "in", "instanceof", "new", "return", "switch", "this", "throw", "try", "typeof", "var", "void", "while", "with", "null", "typeof", "class", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "const", "arguments", "true", "false", "undefined", "NaN"];
			var p = function (u, t) {
				if (Array.prototype.indexOf && u.indexOf === Array.prototype.indexOf) {
					return u.indexOf(t)
				}
				for (var s = 0; s < u.length; s++) {
					if (u[s] === t) {
						return s
					}
				}
				return -1
			};
			var k = function (t, s) {
				s = s.match(/\w+/igm)[0];
				if (p(l, s) === -1 && p(h, s) === -1 && p(r, s) === -1) {
					if (typeof(window) !== "undefined" && typeof(window[s]) === "function" && window[s].toString().match(/^\s*?function \w+\(\) \{\s*?\[native code\]\s*?\}\s*?$/i)) {
						return t
					}
					if (typeof(global) !== "undefined" && typeof(global[s]) === "function" && global[s].toString().match(/^\s*?function \w+\(\) \{\s*?\[native code\]\s*?\}\s*?$/i)) {
						return t
					}
					if (typeof(c.options._method[s]) === "function" || c.options._method.hasOwnProperty(s)) {
						r.push(s);
						return t
					}
					l.push(s)
				}
				return t
			};
			m.replace(c.settings.forstart, k).replace(c.settings.interpolate, k).replace(c.settings.ifstart, k).replace(c.settings.elseifstart, k).replace(c.settings.include, k).replace(/[\+\-\*\/%!\?\|\^&~<>=,\(\)\[\]]\s*([A-Za-z_]+)/igm, k);
			for (var n = 0; n < l.length; n++) {
				q += "var " + l[n] + "=_." + l[n] + ";"
			}
			for (var n = 0; n < r.length; n++) {
				q += "var " + r[n] + "=_method." + r[n] + ";"
			}
			return "<% " + q + " %>"
		};
		this.__convert = function (k, l) {
			var h = [].join("");
			h += "'use strict';";
			h += "var _=_||{};";
			h += "var _out='';_out+='";
			if (l !== false) {
				h += k.replace(/\\/g, "\\\\").replace(/[\r\t\n]/g, " ").replace(/'(?=[^%]*%>)/g, "\t").split("'").join("\\'").split("\t").join("'").replace(/<%=(.+?)%>/g, "';_out+=$1;_out+='").split("<%").join("';").split("%>").join("_out+='") + "';return _out;";
				return h
			}
			h += k.replace(/\\/g, "\\\\").replace(/[\r]/g, "\\r").replace(/[\t]/g, "\\t").replace(/[\n]/g, "\\n").replace(/'(?=[^%]*%>)/g, "\t").split("'").join("\\'").split("\t").join("'").replace(/<%=(.+?)%>/g, "';_out+=$1;_out+='").split("<%").join("';").split("%>").join("_out+='") + "';return _out.replace(/[\\r\\n]\\s+[\\r\\n]/g, '\\r\\n');";
			return h
		};
		this.parse = function (k, h) {
			var l = this;
			if (!h || h.loose !== false) {
				k = this.__lexicalAnalyze(k) + k
			}
			k = this.__removeShell(k, h);
			k = this.__toNative(k, h);
			this._render = new Function("_, _method", k);
			this.render = function (n, m) {
				if (!m || m !== g.options._method) {
					m = a(m, g.options._method)
				}
				return l._render.call(this, n, m)
			};
			return this
		}
	};
	c.compile = function (g, f) {
		if (!f || f !== this.options) {
			f = a(f, this.options)
		}
		try {
			var h = this.__cache[g] ? this.__cache[g] : new this.template(this.options).parse(g, f);
			if (!f || f.cache !== false) {
				this.__cache[g] = h
			}
			return h
		} catch (k) {
			b("Juicer Compile Exception: " + k.message);
			return {
				render : function () {}

			}
		}
	};
	c.to_html = function (g, h, f) {
		if (!f || f !== this.options) {
			f = a(f, this.options)
		}
		return this.compile(g, f).render(h, f._method)
	};
	typeof(module) !== "undefined" && module.exports ? module.exports = c : this.juicer = c
})();
(function () {
	var c = function () {
		var f = [].slice.call(arguments);
		f.push(c.options);
		if (f[0].match(/^\s*#([\w:\-\.]+)\s*$/igm)) {
			f[0].replace(/^\s*#([\w:\-\.]+)\s*$/igm, function (k, l) {
				var g = document;
				var h = g && g.getElementById(l);
				f[0] = h ? (h.value || h.innerHTML) : k
			})
		}
		if (arguments.length == 1) {
			return c.compile.apply(c, f)
		}
		if (arguments.length >= 2) {
			return c.to_html.apply(c, f)
		}
	};
	var d = {
		escapehash : {
			"<" : "&lt;",
			">" : "&gt;",
			"&" : "&amp;",
			'"' : "&quot;",
			"'" : "&#x27;",
			"/" : "&#x2f;"
		},
		escapereplace : function (f) {
			return d.escapehash[f]
		},
		escaping : function (f) {
			return typeof(f) !== "string" ? f : f.replace(/[&<>"]/igm, this.escapereplace)
		},
		detection : function (f) {
			return typeof(f) === "undefined" ? "" : f
		}
	};
	var b = function (f) {
		if (typeof(console) !== "undefined") {
			if (console.warn) {
				console.warn(f);
				return
			}
			if (console.log) {
				console.log(f);
				return
			}
		}
		throw (f)
	};
	var a = function (k, g) {
		k = k !== Object(k) ? {}

		 : k;
		if (k.__proto__) {
			k.__proto__ = g;
			return k
		}
		var h = function () {};
		var l = Object.create ? Object.create(g) : new(h.prototype = g, h);
		for (var f in k) {
			if (k.hasOwnProperty(f)) {
				l[f] = k[f]
			}
		}
		return l
	};
	c.__cache = {};
	c.version = "0.6.5-stable";
	c.settings = {};
	c.tags = {
		operationOpen : "{@",
		operationClose : "}",
		interpolateOpen : "\\${",
		interpolateClose : "}",
		noneencodeOpen : "\\$\\${",
		noneencodeClose : "}",
		commentOpen : "\\{#",
		commentClose : "\\}"
	};
	c.options = {
		cache : true,
		strip : true,
		errorhandling : true,
		detection : true,
		_method : a({
			__escapehtml : d,
			__throw : b,
			__juicer : c
		}, {})
	};
	c.tagInit = function () {
		var g = c.tags.operationOpen + "each\\s*([^}]*?)\\s*as\\s*(\\w*?)\\s*(,\\s*\\w*?)?" + c.tags.operationClose;
		var k = c.tags.operationOpen + "\\/each" + c.tags.operationClose;
		var l = c.tags.operationOpen + "if\\s*([^}]*?)" + c.tags.operationClose;
		var m = c.tags.operationOpen + "\\/if" + c.tags.operationClose;
		var r = c.tags.operationOpen + "else" + c.tags.operationClose;
		var s = c.tags.operationOpen + "else if\\s*([^}]*?)" + c.tags.operationClose;
		var n = c.tags.interpolateOpen + "([\\s\\S]+?)" + c.tags.interpolateClose;
		var p = c.tags.noneencodeOpen + "([\\s\\S]+?)" + c.tags.noneencodeClose;
		var q = c.tags.commentOpen + "[^}]*?" + c.tags.commentClose;
		var h = c.tags.operationOpen + "each\\s*(\\w*?)\\s*in\\s*range\\(([^}]+?)\\s*,\\s*([^}]+?)\\)" + c.tags.operationClose;
		var f = c.tags.operationOpen + "include\\s*([^}]*?)\\s*,\\s*([^}]*?)" + c.tags.operationClose;
		c.settings.forstart = new RegExp(g, "igm");
		c.settings.forend = new RegExp(k, "igm");
		c.settings.ifstart = new RegExp(l, "igm");
		c.settings.ifend = new RegExp(m, "igm");
		c.settings.elsestart = new RegExp(r, "igm");
		c.settings.elseifstart = new RegExp(s, "igm");
		c.settings.interpolate = new RegExp(n, "igm");
		c.settings.noneencode = new RegExp(p, "igm");
		c.settings.inlinecomment = new RegExp(q, "igm");
		c.settings.rangestart = new RegExp(h, "igm");
		c.settings.include = new RegExp(f, "igm")
	};
	c.tagInit();
	c.set = function (g, l) {
		var k = this;
		var f = function (n) {
			return n.replace(/[\$\(\)\[\]\+\^\{\}\?\*\|\.]/igm, function (p) {
				return "\\" + p
			})
		};
		var m = function (p, q) {
			var n = p.match(/^tag::(.*)$/i);
			if (n) {
				k.tags[n[1]] = f(q);
				k.tagInit();
				return
			}
			k.options[p] = q
		};
		if (arguments.length === 2) {
			m(g, l);
			return
		}
		if (g === Object(g)) {
			for (var h in g) {
				if (g.hasOwnProperty(h)) {
					m(h, g[h])
				}
			}
		}
	};
	c.register = function (h, g) {
		var f = this.options._method;
		if (f.hasOwnProperty(h)) {
			return false
		}
		return f[h] = g
	};
	c.unregister = function (g) {
		var f = this.options._method;
		if (f.hasOwnProperty(g)) {
			return delete f[g]
		}
	};
	c.template = function (f) {
		var g = this;
		this.options = f;
		this.__interpolate = function (h, p, l) {
			var k = h.split("|"),
			n = k[0] || "",
			m;
			if (k.length > 1) {
				h = k.shift();
				m = k.shift().split(",");
				n = "_method." + m.shift() + ".call({}, " + [h].concat(m) + ")"
			}
			return "<%= " + (p ? "_method.__escapehtml.escaping" : "") + "(" + (!l || l.detection !== false ? "_method.__escapehtml.detection" : "") + "(" + n + ")) %>"
		};
		this.__removeShell = function (k, h) {
			var l = 0;
			k = k.replace(c.settings.forstart, function (r, n, q, p) {
					var q = q || "value",
					p = p && p.substr(1);
					var m = "i" + l++;
					return "<% ~function() {for(var " + m + " in " + n + ") {if(" + n + ".hasOwnProperty(" + m + ")) {var " + q + "=" + n + "[" + m + "];" + (p ? ("var " + p + "=" + m + ";") : "") + " %>"
				}).replace(c.settings.forend, "<% }}}(); %>").replace(c.settings.ifstart, function (m, n) {
					return "<% if(" + n + ") { %>"
				}).replace(c.settings.ifend, "<% } %>").replace(c.settings.elsestart, function (m) {
					return "<% } else { %>"
				}).replace(c.settings.elseifstart, function (m, n) {
					return "<% } else if(" + n + ") { %>"
				}).replace(c.settings.noneencode, function (n, m) {
					return g.__interpolate(m, false, h)
				}).replace(c.settings.interpolate, function (n, m) {
					return g.__interpolate(m, true, h)
				}).replace(c.settings.inlinecomment, "").replace(c.settings.rangestart, function (q, p, r, n) {
					var m = "j" + l++;
					return "<% ~function() {for(var " + m + "=" + r + ";" + m + "<" + n + ";" + m + "++) {{var " + p + "=" + m + "; %>"
				}).replace(c.settings.include, function (p, m, n) {
					return "<%= _method.__juicer(" + m + ", " + n + "); %>"
				});
			if (!h || h.errorhandling !== false) {
				k = "<% try { %>" + k;
				k += '<% } catch(e) {_method.__throw("Juicer Render Exception: "+e.message);} %>'
			}
			return k
		};
		this.__toNative = function (k, h) {
			return this.__convert(k, !h || h.strip)
		};
		this.__lexicalAnalyze = function (m) {
			var l = [];
			var r = [];
			var q = "";
			var h = ["if", "each", "_", "_method", "console", "break", "case", "catch", "continue", "debugger", "default", "delete", "do", "finally", "for", "function", "in", "instanceof", "new", "return", "switch", "this", "throw", "try", "typeof", "var", "void", "while", "with", "null", "typeof", "class", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "const", "arguments", "true", "false", "undefined", "NaN"];
			var p = function (u, t) {
				if (Array.prototype.indexOf && u.indexOf === Array.prototype.indexOf) {
					return u.indexOf(t)
				}
				for (var s = 0; s < u.length; s++) {
					if (u[s] === t) {
						return s
					}
				}
				return -1
			};
			var k = function (t, s) {
				s = s.match(/\w+/igm)[0];
				if (p(l, s) === -1 && p(h, s) === -1 && p(r, s) === -1) {
					if (typeof(window) !== "undefined" && typeof(window[s]) === "function" && window[s].toString().match(/^\s*?function \w+\(\) \{\s*?\[native code\]\s*?\}\s*?$/i)) {
						return t
					}
					if (typeof(global) !== "undefined" && typeof(global[s]) === "function" && global[s].toString().match(/^\s*?function \w+\(\) \{\s*?\[native code\]\s*?\}\s*?$/i)) {
						return t
					}
					if (typeof(c.options._method[s]) === "function" || c.options._method.hasOwnProperty(s)) {
						r.push(s);
						return t
					}
					l.push(s)
				}
				return t
			};
			m.replace(c.settings.forstart, k).replace(c.settings.interpolate, k).replace(c.settings.ifstart, k).replace(c.settings.elseifstart, k).replace(c.settings.include, k).replace(/[\+\-\*\/%!\?\|\^&~<>=,\(\)\[\]]\s*([A-Za-z_0-9]+)/igm, k);
			for (var n = 0; n < l.length; n++) {
				q += "var " + l[n] + "=_." + l[n] + ";"
			}
			for (var n = 0; n < r.length; n++) {
				q += "var " + r[n] + "=_method." + r[n] + ";"
			}
			return "<% " + q + " %>"
		};
		this.__convert = function (k, l) {
			var h = [].join("");
			h += "'use strict';";
			h += "var _=_||{};";
			h += "var _out='';_out+='";
			if (l !== false) {
				h += k.replace(/\\/g, "\\\\").replace(/[\r\t\n]/g, " ").replace(/'(?=[^%]*%>)/g, "\t").split("'").join("\\'").split("\t").join("'").replace(/<%=(.+?)%>/g, "';_out+=$1;_out+='").split("<%").join("';").split("%>").join("_out+='") + "';return _out;";
				return h
			}
			h += k.replace(/\\/g, "\\\\").replace(/[\r]/g, "\\r").replace(/[\t]/g, "\\t").replace(/[\n]/g, "\\n").replace(/'(?=[^%]*%>)/g, "\t").split("'").join("\\'").split("\t").join("'").replace(/<%=(.+?)%>/g, "';_out+=$1;_out+='").split("<%").join("';").split("%>").join("_out+='") + "';return _out.replace(/[\\r\\n]\\s+[\\r\\n]/g, '\\r\\n');";
			return h
		};
		this.parse = function (k, h) {
			var l = this;
			if (!h || h.loose !== false) {
				k = this.__lexicalAnalyze(k) + k
			}
			k = this.__removeShell(k, h);
			k = this.__toNative(k, h);
			this._render = new Function("_, _method", k);
			this.render = function (n, m) {
				if (!m || m !== g.options._method) {
					m = a(m, g.options._method)
				}
				return l._render.call(this, n, m)
			};
			return this
		}
	};
	c.compile = function (g, f) {
		if (!f || f !== this.options) {
			f = a(f, this.options)
		}
		try {
			var h = this.__cache[g] ? this.__cache[g] : new this.template(this.options).parse(g, f);
			if (!f || f.cache !== false) {
				this.__cache[g] = h
			}
			return h
		} catch (k) {
			b("Juicer Compile Exception: " + k.message);
			return {
				render : function () {}

			}
		}
	};
	c.to_html = function (g, h, f) {
		if (!f || f !== this.options) {
			f = a(f, this.options)
		}
		return this.compile(g, f).render(h, f._method)
	};
	typeof(module) !== "undefined" && module.exports ? module.exports = c : this.juicer2 = c
})();
var SwordPasswordTemplate = {
	start : '<div class="swordform_field_wrap"><input type="password" id="{id}" name="{name}" style="float:left;{style}" rule="{rule}" msg="{msg}" value="{value}" realvalue="{value}" _onfocus="{onfocus}" defValue="{defValue}" _onclick="{onclick}"  _onblur="{onblur}" onEnterPress="{onEnterPress}" class="swordform_item_oprate swordform_item_input"',
	end : "></div>",
	render : function (r, l, m, g) {
		var b = r.get("name"),
		c = m + "_" + b,
		n = r.get("rule"),
		d = r.get("msg"),
		a = r.get("style");
		var p = r.get("defValue"),
		k = r.get("readonly") || r.getAttribute("readonly"),
		h = r.get("disable");
		var f = a ? a : "";
		if ((n && n.contains("must")) && h != "true") {
			f = f + ";background-color:#fffadb;"
		}
		var q = [this.start.substitute({
				id : c,
				style : f,
				name : b,
				rule : n,
				msg : d,
				value : g ? g.value : p,
				onfocus : r.get("onfocus"),
				onblur : r.get("onblur"),
				onclick : r.get("onclick"),
				onEnterPress : r.get("onEnterPress")
			})];
		l.fieldElHash.set(c, c);
		if (h == "true") {
			q[0] = q[0].replace("swordform_item_oprate swordform_item_input", "swordform_item_oprate swordform_item_input swordform_item_input_disable");
			q.push(" disabled ")
		}
		if (k == "true") {
			q.push(" readonly='readonly' ")
		}
		q.push(this.end);
		return q.join("")
	},
	initData : function (c, b, a) {
		c.set("value", b.value).set("realvalue", b.value)
	},
	runEventFocus : function (c, b, a) {
		SwordTextTemplate.runEventFocus(c, b, a)
	},
	runEventClick : function (c, b, a) {
		SwordTextTemplate.runEventClick(c, b, a)
	},
	runEventBlur : function (c, b, a) {
		SwordTextTemplate.runEventBlur(c, b, a)
	},
	runEventDblClick : function () {
		return
	},
	runEventKeydown : function () {},
	runEventKeyup : function (d, c, b) {
		var a = c.get("onEnterPress");
		if (a && d.key == "enter") {
			b.getFunc(a)[0](d, c)
		}
	}
};
var SwordRadioCheckboxTemplate = {
	start : '<div class="swordform_field_wrap"><div id="{id}" class="formselect-list swordform_item_oprate" style="{style}" widgetGetValue="true" name="{name}" widget="{type}" type="{type}" onClickAfter="{onClickAfter}" sbmitcontent="{sbmitcontent}" onClickBefore="{onClickBefore}" defValue="{defValue}" msg="{msg}" ruletype="{type}Group" rule="{rule}" "{disable}">',
	inner_before : '<div class="formselect-list-inner">',
	inner_h : '<div class="formselect-list-item" code="{code}" caption="{caption}" style="{colWidth}"><input type="{type}" ruletype="{type}Group" name="{name}"  style="cursor: pointer;" value="{code}" ',
	inner_e : ' /><span title="{caption}"> {caption}</span></div>',
	end : "</div>",
	render : function (s, k, c, r) {
		var f = [this.start];
		var v = s.get("name"),
		n = c + "_" + v,
		d = s.get("type"),
		h = s.get("rule"),
		p = s.get("defValue"),
		g = s.get("msg");
		var l = s.get("readonly") || s.getAttribute("readonly"),
		b = s.get("disable"),
		t = s.get("colWidth"),
		a = t ? "width:" + t : "";
		f[0] = f[0].substitute({
				id : n,
				name : v,
				style : s.get("style"),
				rule : h,
				msg : g,
				type : d,
				defValue : p,
				sbmitcontent : s.get("sbmitcontent"),
				onClickAfter : s.get("onClickAfter"),
				onClickBefore : s.get("onClickBefore"),
				disable : b == "true" ? "disabled" : ""
			});
		k.fieldElHash.set(n, n);
		var q = r ? r.value : (p || "");
		if (q) {
			q = q.split(",")
		}
		f.push(this.inner_before);
		var u = pc.getInitData(s.get("name")) || pc.getInitData(c + "." + s.get("name"));
		var m = (u ? u.data : s.getChildren("div")) || s.getChildren("div");
		m.forEach(function (A, y) {
			var z = A.code || A.get("code") || A.get("CODE"),
			w = A.caption || A.get("caption") || A.get("CAPTION");
			var x = SwordRadioCheckboxTemplate.inner_h.substitute({
					code : z,
					caption : w,
					type : d,
					name : v,
					colWidth : a
				});
			if (q.contains(z)) {
				f.push(x.replace("formselect-list-item", "formselect-list-item formselect-selected"));
				f.push(" checked='true' ")
			} else {
				f.push(x)
			}
			if (b == "true") {
				f.push(" disabled ")
			}
			if (l == "true") {
				f.push(" readonly='readonly' ")
			}
			f.push(SwordRadioCheckboxTemplate.inner_e.substitute({
					caption : w
				}))
		});
		f.push(this.end);
		f.push(this.end);
		f.push(this.end);
		return f.join("")
	},
	initData : function (g, k, a, h) {
		var c;
		if ($defined(h)) {
			c = h
		} else {
			c = a.getWidget(g.get("name")).innerWrap
		}
		var f = c.get("defValue");
		if (k == "" && $defined(f)) {
			k = f
		} else {
			var b = k.value;
			if ($defined(b)) {
				k = b
			}
		}
		if (k.indexOf(",") == -1) {
			k = k + ",1"
		}
		k = k.toHash();
		if ($type(k) == "hash") {
			this.reset(g);
			k.each(function (l, d) {
				if (l / 1 == 1) {
					var m = g.getElement("input[value='" + d + "']");
					if (m) {
						m.set("checked", "true");
						m.getParent().addClass("formselect-selected")
					}
				}
			}, this)
		}
	},
	initWidget : function (c, f, a) {
		var d = $$("div[name=" + c + "]")[0];
		var b = new SwordGroupFields(d);
		b.innerWrap = f;
		b.wrap = f;
		b.options.validate = a.Vobj;
		a.setWidget(c, b);
		return b
	},
	runEventFocus : function (c, b, a) {
		return
	},
	runEventClick : function (g, c, d) {
		var a = c.get("name"),
		l = c.get("rule"),
		k = d.getField(a);
		var f = $(g.target),
		q = f.hasClass("formselect-list-item") ? f : f.getParent(".formselect-list-item"),
		m = q ? q.getElement("input") : null;
		if (!m && !q) {
			return
		}
		var b = q.get("code"),
		p = q.get("caption"),
		h = c.get("onClickBefore"),
		n = c.get("onClickAfter");
		if (l) {
			k.options.validate.tooltips.hide(a);
			k.options.validate.intimeValidate(c)
		}
		if ($defined(h)) {
			k.getFunc(h)[0](b, p, q, d)
		}
		if (m.get("type") == "checkbox") {
			if (m.get("checked")) {
				if (f != m) {
					if (!$chk(m.get("disabled"))) {
						m.set("checked", false)
					}
					q.removeClass("formselect-selected")
				} else {
					q.addClass("formselect-selected")
				}
			} else {
				if (f != m) {
					if (!$chk(m.get("disabled"))) {
						m.set("checked", true)
					}
					q.addClass("formselect-selected")
				} else {
					q.removeClass("formselect-selected")
				}
			}
		} else {
			if (!$chk(m.get("disabled"))) {
				k.reset();
				q.addClass("formselect-selected");
				m.set("checked", true)
			}
		}
		if ($defined(n)) {
			k.getFunc(n)[0](b, p, q, d)
		}
	},
	runEventBlur : function (c, b, a) {
		return
	},
	runEventDblClick : function (c, b, a) {
		return
	},
	runEventKeydown : function (c, b, a) {
		return
	},
	runEventKeyup : function (c, b, a) {
		return
	}
};
var SwordCalendarTemplate = {
	start : "<table class='swordform_field_wrap' cellspacing='0' cellpadding='0'><tbody><tr><td><input class='swordform_item_oprate swordform_item_input' style='float: left; width: 99%;{style}' id='{id}' name='{name}' autoctrl='{autoCtrl}' dateControl='{dateControl}'type='text' rule='{rule}' msg='{msg}' widget='calendar' dataformat='{dataformat}' widgetgetvalue='true' realvalue='{realvalue}' isshow='{isShow}' handInput='{handInput}' ovalue='{realvalue}' defaultValue='{defValue}' value='{value}' maxlength='{maxlength}' showOptions='{showOptions}' _onkeyup='{onkeyup}' _onblur='{onblur}' isShowCloseBtn='{isShowCloseBtn}' isShowEraseBtn='{isShowEraseBtn}' isShowTodayBtn='{isShowTodayBtn}' _onchange='{onchange}' onHide='{onHide}' _onclick='{onclick}' onShow='{onShow}' submitDateformat='{submitDateformat}' returnRealValue='{returnRealValue}' toZero='{toZero}' ",
	end : "></td><td class='{dateBtn}' width='17px'><div style='width:17px'></div></td></tr></tbody></table>",
	datedef : {
		dataformat : "yyyy-MM-dd",
		returnRealValue : "false",
		showOptions : "true,true,true,false,false,false",
		submitDateformat : "yyyy-MM-dd HH:mm:ss",
		isShowCloseBtn : "false",
		isShowEraseBtn : "false",
		isShowTodayBtn : "false",
		handInput : "true",
		isReadonly : "false",
		toZero : false,
		isShow : "true",
		autoCtrl : "true",
		disable : "false"
	},
	render : function (s, m, n, g) {
		var f = [this.start];
		var b = s.get("name"),
		c = n + "_" + b,
		q = s.get("rule"),
		a = s.get("style");
		var l = s.get("readonly") || s.getAttribute("readonly"),
		k = s.get("disable");
		m.fieldElHash.set(c, c);
		if (k == "true") {
			f[0] = f[0].replace("swordform_item_oprate swordform_item_input", "swordform_item_oprate swordform_item_input swordform_item_input_disable");
			f.push(" disabled ")
		}
		if (l == "true") {
			f.push(" readonly='readonly' ")
		}
		var r = this.datedef,
		d = g ? (g.value || "") : (s.get("defValue") || ""),
		p = d;
		var t = s.get("dataformat") || r.dataformat,
		h = s.get("submitDateformat") || r.submitDateformat;
		if (t && d) {
			d = SwordDataFormat.formatStringToString(d, t, t);
			p = SwordDataFormat.formatStringToString(d, h || t, h)
		}
		f[0] = f[0].substitute({
				id : c,
				name : b,
				style : (q && q.contains("must")) && k != "true" ? a + ";background-color:#fffadb;" : a,
				rule : q,
				msg : s.get("msg"),
				dataformat : t,
				isShow : s.get("isShow") || r.isShow,
				handInput : s.get("handInput") || r.handInput,
				isShowCloseBtn : s.get("isShowCloseBtn") || r.isshowclosebtn,
				isShowEraseBtn : s.get("isShowEraseBtn") || r.isshowerasebtn,
				isShowTodayBtn : s.get("isShowTodayBtn") || r.isshowtodaybtn,
				returnRealValue : s.get("returnRealValue") || r.returnRealValue,
				submitDateformat : h,
				toZero : s.get("toZero") || r.tozero,
				autoCtrl : s.get("autoCtrl") || r.autoCtrl,
				maxlength : s.get("maxlength") || s.getAttribute("maxlength") || 10000,
				showOptions : s.get("showOptions") || r.showOptions,
				onchange : s.get("onchange"),
				onHide : s.get("onHide"),
				realvalue : p,
				defValue : s.get("defValue"),
				value : d,
				ovalue : p,
				onblur : s.get("onblur"),
				onkeyup : s.get("onkeyup"),
				dateControl : s.get("dateControl"),
				onclick : s.get("onclick"),
				onShow : s.get("onShow")
			});
		f.push(this.end.substitute({
				dateBtn : k == "true" ? "dateBtn dateBtn_disable" : "dateBtn"
			}));
		return f.join("")
	},
	initData : function (c, b) {
		if (!$defined(b) && !$defined(c)) {
			return
		}
		var a = b.value;
		if ($defined(a)) {
			b = a
		}
		var d = c.get("dataformat");
		c.set("realvalue", b);
		if ($defined(d)) {
			if (b.split(".").length == 2) {
				b = b.split(".")[0];
				c.set("realvalue", b);
				b = SwordDataFormat.formatStringToString(b, this.datedef.submitDateformat, d)
			} else {
				b = SwordDataFormat.formatStringToString(b, this.datedef.submitDateformat, d)
			}
		}
		c.set("value", b);
		c.set("oValue", b)
	},
	initWidget : function (d, f, b) {
		var a = new SwordCalendar();
		var c = f.getParent("tr").getElement(".dateBtn");
		a.setValidate(b.Vobj);
		a.formObj = b;
		a.dateInput = f;
		a.dateBtn = c;
		pc.calendar = a;
		b.setWidget(d, a);
		a.dateInput.addEvent((Browser.Engine.trident || Browser.Engine.webkit) ? "keydown" : "keypress", a.hand_Input.bind(a));
		return a
	},
	runEventFocus : function (d, c, b) {
		if (pc.calendar && pc.calendar.dateInput.get("name") != c.get("name")) {
			pc.calendar.hide()
		}
		var f = c.get("_onfocus");
		if ($chk(f)) {
			b.getFunc(f)[0](d)
		}
		b.setSRang4El(c);
		var a = b.getField(c.get("name"));
		pc.calendar = a
	},
	runEventClick : function (f, d, b) {
		var g = d.get("_onclick");
		if ($chk(g)) {
			b.getFunc(g)[0](f)
		}
		this.runEventFocus(f, d, b);
		var c = d.getParent("tr").getElement(".dateBtn");
		var a = b.getField(d.get("name"));
		a.dateBtn = c;
		a.execGridOnFinished();
		a.show(d)
	},
	runEventBlur : function (c, b, a) {
		var d = b.get("_onblur");
		if ($chk(d)) {
			b.set("realvalue", b.get("value"));
			a.getFunc(d)[0](c, a)
		}
	},
	runEventDblClick : function (c, b, a) {
		return
	},
	runEventKeydown : function (d, c, a) {
		if (this.testValue(d.target.value)) {
			d.target.keydownBeforeValue = d.target.value
		}
		var b = a.getField(c.get("name"));
		b.keyEvents(d)
	},
	runEventKeyup : function (c, b, a) {
		var d = b.get("_onkeyup");
		if ($chk(d)) {
			if (c.code == 13) {
				b.set("realvalue", b.get("value"))
			}
			a.getFunc(d)[0](c, a)
		}
		if (c.target.value == "") {
			c.target.keydownBeforeValue = ""
		} else {
			if (c.target.value != "backspace") {
				if (this.testValue(c.target.value) == false) {
					c.target.value = c.target.keydownBeforeValue || ""
				}
			}
		}
	},
	testValue : function (c) {
		var a = [/^\d{1,4}$/, /^\d{4}-$/, /^\d{4}-\d{1,2}$/, /^\d{4}-\d{1,2}-$/, /^\d{4}-\d{1,2}-\d{1,2}$/, /^\d{4}-\d{1,2}-\d{1,2} $/, /^\d{4}-\d{1,2}-\d{1,2} \d{1,2}$/, /^\d{4}-\d{1,2}-\d{1,2} \d{1,2}:$/, /^\d{4}-\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}$/, /^\d{4}-\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}:$/, /^\d{4}-\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}:\d{1,2}$/];
		var b = false;
		a.each(function (d) {
			if (d.test(c)) {
				b = true;
				return false
			}
		});
		return b
	}
};
var SwordPullBigtreeTemplate = {
	tablePre : '<table class="swordform_field_wrap swordtree_wrap" cellSpacing="0" cellPadding="0"><tbody><tr><td class="boxtd">',
	inputPre : '<input class="swordform_item_oprate swordform_item_input" type="text"  widget="pullbigtree"  swordType="tree" display="true" evnSign="true" widgetGetValue="true"',
	attr : 'style="float: left; cursor: text;{style}" name="{name}" rule="{rule}" msg="{msg}" id="{id}" initValue="{initValue}" defValue="{defValue}"',
	end : '></td><td width="17" class="tree-select-selimg"><div style="width: 17px;"></div></td></tr></tbody></table>',
	datedef : {
		sbmitcontent : "{code}",
		selReadOnly : "false",
		disable : "false"
	},
	render : function (r, k, l, f) {
		var d = [this.tablePre];
		d.push(this.inputPre);
		var b = r.get("name"),
		c = l + "_" + b,
		h = r.get("selRealOnly") || r.getAttribute("selRealOnly") || r.getAttribute("selReadOnly") || r.get("selReadOnly");
		var p = f ? f.value : "",
		g = r.get("disable"),
		n = r.get("defValue") || "";
		var m = r.get("rule"),
		a = r.get("style");
		k.fieldElHash.set(c, c);
		var q = this.attr.substitute({
				id : c,
				name : b,
				style : (m && m.contains("must")) && g != "true" ? a + ";background-color:#fffadb;" : a,
				rule : m,
				msg : r.get("msg"),
				initValue : p || n || ""
			});
		d.push(q);
		if (h == "true") {
			d.push(" readonly='readonly' ")
		}
		if (r.get("cellName")) {
			d.push(" cellName='" + r.get("cellName") + "' ")
		}
		d.push(this.end);
		pc.setWidget4loaddata(b, l);
		return d.join("")
	},
	addEvent : function (d, f, b) {
		var c = f.get("name");
		var a = b.getWidget(c);
		if (!a) {
			a = this.initWidget(c, b)
		}
	},
	initWidget : function (D, c, l) {
		var v = l.options.pNode.getElement("div[name=" + D + "]");
		v.pNode = v.getParent();
		var p = pageContainer.create("SwordBigTree");
		l.setWidget(D, p);
		v.setProperty("select", "true");
		p.initParam(v, l);
		p.setValidate(l.Vobj);
		p.formObj = l;
		if (p.options.select === "true") {
			var z = $(l.options.name + "_" + D);
			var g = z.get("initValue");
			if (g) {
				var C = "",
				f = "",
				w = "",
				k = "",
				b = "";
				var x = pageContainer.getInitData(v.get("name"));
				if (g.contains("code") && g.contains("caption")) {
					if (g.contains("checkPath") || g.contains(";")) {
						var u = g.split(";");
						var m = "",
						a = "",
						t = "";
						u.each(function (d, E) {
							var F = d.split("|");
							if (E != 0) {
								m = m + F[1].split(":")[1] + ",";
								a = a + F[0].split(":")[1] + ",";
								t = t + F[2].split(":")[1] + "|"
							} else {
								m = F[1].split(":")[1] + ",";
								a = F[0].split(":")[1] + ",";
								t = F[2].split(":")[1] + "|"
							}
						});
						w = m.substring(0, m.length - 1);
						k = a.substring(0, a.length - 1);
						C = t.substring(0, t.length - 1)
					} else {
						var r = g.split("|");
						if (g.contains("codePath")) {
							f = r[2].substring("codePath,".length)
						}
						w = r[1].split(",")[1];
						k = r[0].split(",")[1]
					}
					b = k
				} else {
					var r = g.split(",");
					var B = [];
					var y = x;
					var q = "";
					var h = p.options.selectRealKey;
					var n = [];
					if (h.contains("|")) {
						n = h.split("|")
					}
					var s = n.length;
					if ($chk(y)) {
						r.each(function (d) {
							var F = y.data;
							var E = function (H, G) {
								H.each(function (J) {
									if (J[p.options.cascadeSign.id] == d) {
										J.ischecked = "true";
										G.push(J[p.options.displayTag]);
										if (s > 0) {
											n.each(function (K, L) {
												q = q + J[K] + "|"
											});
											q = q.substring(0, q.length - 1);
											q = q + ","
										}
									} else {
										for (var I in J) {
											if ($type(J[I]) == "array") {
												E(J[I], G);
												break
											}
										}
									}
								})
							}
							.bind(this);
							E(F, B)
						})
					}
					if (s > 0) {
						q = q.substring(0, q.length - 1);
						k = q
					} else {
						k = r.join(",")
					}
					w = B.join(",");
					b = r.join(",")
				}
			}
			z.set("value", w);
			z.set("code", b);
			z.set("defValue", v.get("defValue"));
			z.set("realvalue", k);
			z.set("checkPath", C);
			z.set("codePath", f)
		}
		var A = pageContainer.getInitData(v.get("name"));
		p.initData(A, l);
		return p
	},
	runEventFocus : function () {
		return
	},
	runEventClick : function () {
		return
	},
	runEventBlur : function () {
		return
	},
	runEventDblClick : function () {
		return
	},
	runEventKeydown : function () {
		return
	},
	runEventKeyup : function (c, b, a) {
		return
	}
};
var SwordSelectTemplate = {
	pre : '<table class="swordform_field_wrap" cellspacing="0" cellpadding="0"><tbody><tr><td><input type="text" widget="select"',
	end1 : " ></td><td ",
	end2 : 'width="17px" vtype="fldiv"><div style="width:17px;"></div></td></tr></tbody></table>',
	attr : 'id="{id}" name="{name}" rule="{rule}"  msg="{msg}" realvalue="{realvalue}" code="{code}" sbmitcontent="{sbmitcontent}" codeSign="{codeSign}" captionSign="{captionSign}" pcodeSign="{pcodeSign}" _onChange="{onChange}" _onSelect=\'{onSelect}\' allDb=\'{allDb}\' firstCodeSign=\'{firstCodeSign}\' firstCaptionSign=\'{firstCaptionSign}\' firstPcodeSign=\'{firstPcodeSign}\'  onSubmitBefore="{onSubmitBefore}"  onHide="{onHide}" onShow="{onShow}" onBeforeClick="{onBeforeClick}" value="{value}" parent="{parent}" lines="{lines}" lineheight="{height}" dataname="{dataname}" firstInputdisplay="{firstInputdisplay}" firstPopdisplay="{firstPopdisplay}"  pcode="{pcode}" tid="{tid}" defValue="{defValue}" defIndex="{defIndex}" firstindex="{firstindex}" firstSbmitcontent="{firstSbmitcontent}" dataFilter="{dataFilter}" style="float: left;" popWidth="{popWidth}" displayCode="{displayCode}" inputdisplay="{inputdisplay}" popdisplay="{popdisplay}" handInput="{handInput}" addAllItem="{addAllItem}" allItemCode="{allItemCode}" allItemCap="{allItemCap}"',
	render : function (D, s, h, z) {
		var k = [this.pre],
		G = sbmitcontent = D.get("sbmitcontent"),
		r = "",
		E = "",
		a = "",
		K = inputdisplay = D.get("inputdisplay");
		var L = D.get("name"),
		x = h + "_" + L,
		m = D.get("dataname") || D.get("dataName"),
		w = popdisplay = D.get("popdisplay"),
		H = D.get("defValue"),
		l = D.get("defIndex"),
		A = D.get("firstindex"),
		v = D.get("readonly") || D.getAttribute("readonly"),
		g = D.get("disable"),
		p = D.get("rule"),
		n = codeSign = D.get("codeSign") || "code",
		q = captionSign = D.get("captionSign") || "caption",
		B = pcodeSign = D.get("pcodeSign") || "pcode";
		s.fieldElHash.set(x, x);
		if (v == "true") {
			k.push('readonly="true" ')
		}
		if (g == "true") {
			k.push('disabled  class="swordform_item_oprate swordform_item_input select_input_disable" style="float:left;cursor:default;"')
		} else {
			if ((p && p.contains("must")) && g != "true") {
				k.push('style="float:left;background-color:#fffadb;" class="swordform_item_oprate swordform_item_input"')
			} else {
				k.push('style="float: left;" class="swordform_item_oprate swordform_item_input"')
			}
		}
		var b = z ? (z.value || "") : (H || ""),
		F = {};
		if (b.contains("code") && b.contains("caption")) {
			b = b.toHash();
			b.each(function (t, d) {
				F[d] = t
			}, this);
			E = F.caption;
			a = r = F.code;
			if (sbmitcontent) {
				r = sbmitcontent.substitute(F)
			}
			if (inputdisplay) {
				E = inputdisplay.substitute(F)
			}
		} else {
			var C = pc.getInitDataByDataName(m) || pageContainer.getInitData(L),
			y,
			J = false;
			if (D.get("isAll") != "false" && !C) {
				C = this.getCacheSelData(D);
				J = true;
				codeSign = D.get("codeSign") || "code";
				captionSign = D.get("captionSign") || "caption";
				pcodeSign = D.get("pcodeSign") || "pcode";
				inputdisplay = D.get("inputdisplay");
				popdisplay = D.get("popdisplay");
				sbmitcontent = D.get("sbmitcontent")
			}
			if (C && C.data) {
				y = C.data;
				if (!b && A == "true" && !y[1]) {
					b = y[0][codeSign]
				}
				F = y.filter(function (d) {
						return d[codeSign] == b
					})[0];
				if (J) {
					var f = {};
					for (var I in F) {
						f[I] = F[I]
					}
					F = f
				}
			} else {
				y = D.getChildren(">div");
				if (!b && A == "true" && !y[1]) {
					b = y[0].get(codeSign)
				}
				F = y.filter(function (d) {
						return d.get(codeSign) == b
					})[0];
				var c = null;
				if (F) {
					c = {};
					c[codeSign] = F.get(codeSign);
					c[captionSign] = F.get(captionSign);
					F = c
				}
			}
			if (b && F) {
				E = F[captionSign];
				a = r = F[codeSign];
				if (sbmitcontent) {
					r = sbmitcontent.substitute(F)
				}
				if (inputdisplay) {
					E = inputdisplay.substitute(F)
				}
			}
		}
		var u = this.attr.substitute({
				id : x,
				name : L,
				rule : D.get("rule"),
				msg : D.get("msg"),
				prikey : D.get("prikey"),
				sbmitcontent : sbmitcontent,
				onChange : D.get("onChange"),
				onSelect : D.get("onSelect"),
				onShow : D.get("onShow"),
				onHide : D.get("onHide"),
				onSubmitBefore : D.get("onSubmitBefore"),
				value : E,
				realvalue : r,
				code : a,
				codeSign : codeSign,
				captionSign : captionSign,
				allDb : JSON.encode(F),
				pcodeSign : pcodeSign,
				firstCodeSign : n,
				firstCaptionSign : q,
				firstPcodeSign : B,
				firstInputdisplay : K,
				firstPopdisplay : w,
				firstSbmitcontent : G,
				parent : D.get("parent"),
				lines : D.get("lines") || 10,
				height : D.get("height") || 21,
				firstindex : A,
				dataname : m,
				pcode : D.get("pcode"),
				tid : D.get("tid"),
				defValue : H,
				defIndex : l,
				dataFilter : D.get("dataFilter"),
				popWidth : D.get("popWidth"),
				displayCode : D.get("displayCode") || "false",
				inputdisplay : inputdisplay,
				popdisplay : popdisplay,
				handInput : D.get("handInput") || "false",
				addAllItem : D.get("addAllItem") || "false",
				allItemCode : D.get("allItemCode"),
				allItemCap : D.get("allItemCap"),
				onBeforeClick : D.get("onBeforeClick")
			});
		k.push(u);
		k.push(this.end1);
		k.push(' class="swordselect-selimg');
		if (g == "true") {
			k.push(" swordselect-selimg-disable")
		}
		k.push('"');
		k.push(this.end2);
		if ($chk(D.innerHTML)) {
			k.push(D.outerHTML)
		}
		return k.join("")
	},
	getCacheSelData : function (g) {
		var c = g.get("dataname");
		var h;
		if (top.pc.swordCacheDataContainer) {
			h = top.pc.swordCacheDataContainer.get(c)
		}
		var b = [];
		if (h) {
			var a = h.data,
			f = a.length;
			for (var d = 0; d < f; d++) {
				b.push(a[d])
			}
			h.data = b;
			pc.selCacheArray.each(function (s, n) {
				var r = s.T;
				if (r == c) {
					var k = s.DM;
					var l = s.MC;
					if ($chk(s.PDM)) {
						g.set("pcodeSign", s.PDM)
					}
					g.set("codeSign", k);
					g.set("captionSign", l);
					var m = g.get("popdisplay");
					if (m) {
						m = m.replace(new RegExp("code", "gm"), k);
						m = m.replace(new RegExp("caption", "gm"), l);
						g.setAttribute("popDisplay", m);
						g.set("popdisplay", m)
					}
					var t = g.get("sbmitcontent");
					if (t) {
						t = t.replace(new RegExp("code", "gm"), k);
						t = t.replace(new RegExp("caption", "gm"), l);
						g.setAttribute("sbmitContent", t);
						g.set("sbmitcontent", t)
					}
					var p = g.get("inputdisplay");
					if (p) {
						p = p.replace(new RegExp("code", "gm"), k);
						p = p.replace(new RegExp("caption", "gm"), l);
						g.setAttribute("inputDisplay", p);
						g.set("inputdisplay", p)
					}
				}
			})
		}
		return h
	},
	isMulti : function (b, c) {
		var a = b.get("pcodeSign");
		return $defined(b.get("child")) || $defined(b.get("parent")) || (($type(c[0]) == "element") ? $defined(c[0].get(a)) : $H(c[0]).has(a))
	},
	genarateContent : function (a, c, b) {
		if (!$defined(b)) {
			b = a.get("sbmitcontent")
		}
		if (!$defined(b)) {
			b = "{" + a.get("codeSign") + "}"
		}
		if ($type(c) == "element") {
			c = {
				code : c.get("code"),
				caption : c.get("caption")
			}
		}
		return b.substitute(c)
	},
	genarateInputContent : function (a, c) {
		var b = a.get("inputdisplay");
		if (!$defined(b)) {
			b = "{" + a.get("captionSign") + "}";
			return c[a.get("captionSign")]
		} else {
			return this.genarateContent(a, c, b)
		}
	},
	initData : function (a, k, h) {
		var l = "";
		if (!$chk(k)) {
			if ($defined(item.get("defIndex")) || $defined(item.get("defValue"))) {
				k = item.get("defValue");
				l = item.get("defIndex")
			} else {
				item.set("value", "").set("realvalue", "").set("code", "").store("allDb", {
					code : "",
					caption : ""
				});
				return
			}
		} else {
			var m = k.value;
			if ($defined(m)) {
				k = m
			}
		}
		if ((!$defined(k) || !$chk(k)) && (!$defined(l) || !$chk(l))) {
			return
		}
		if ($type(k) == "string") {
			k = k.toHash()
		}
		if ($type(k) == "object") {
			k = new Hash(k)
		}
		var b = "";
		if ($type(k) == "hash") {
			var f = {};
			k.each(function (n, d) {
				f[d] = n
			}, this);
			b = this.genarateContent(a, f);
			item.set({
				value : this.genarateInputContent(a, f),
				code : k.get("code"),
				realvalue : this.genarateContent(a, f)
			});
			item.store("allDb", f)
		} else {
			var g = this.getOptionsData(a, h);
			if (!$defined(g)) {
				return
			}
			if ($defined(k) || $chk(k)) {
				g.each(function (d) {
					if ($type(d) == "element") {
						d = {
							caption : d.get("caption"),
							code : d.get("code")
						}
					}
					if (d.code == k) {
						b = this.genarateContent(a, d);
						item.set({
							value : this.genarateInputContent(a, d),
							code : d.code,
							realvalue : this.genarateContent(a, d)
						});
						item.store("allDb", d)
					}
				}, this)
			} else {
				if ($defined(l) || $chk(l)) {
					var c = g[l / 1];
					if ($defined(c)) {
						if ($type(c) == "element") {
							c = {
								caption : c.get("caption"),
								code : c.get("code")
							}
						}
						b = this.genarateContent(a, c);
						item.set({
							value : this.genarateInputContent(a, c),
							code : c.code,
							realvalue : this.genarateContent(a, c)
						});
						item.store("allDb", c)
					}
				}
			}
		}
		return b
	},
	getRoot : function (a, b) {
		while ($defined(a)) {
			var c = b.getElements("*[name='" + a + "']")[0].get("parent");
			if ($defined(c)) {
				a = c
			} else {
				break
			}
		}
		return b.getElements("*[name='" + a + "']")[0]
	},
	initWidget : function (b, f, d) {
		var k = new SwordSelect();
		d.setWidget(b, k);
		k.setValidate(d.Vobj);
		k.formObj = d;
		k.box = f;
		if (!k.hasBoxDiv) {
			k.createBoxDiv();
			k.hasBoxDiv = true
		}
		var c = f.getParent("tr").getElement(".swordselect-selimg");
		k.selDiv = c;
		var a = d.options.pNode;
		var h = f.get("parent");
		if ($chk(h)) {
			var l = a.getElements("input[name='" + h + "']")[0];
			l.set("child", b);
			if (!$chk(f.get("dataname"))) {
				var g = ($chk(l.get("dataname"))) ? l.get("dataname") : l.get("name");
				f.set("dataname", g)
			}
		}
		k.selectbox.addEvent("mouseenter", SwordSelectTemplate.mouseenter.bind(k));
		k.selectbox.addEvent("mouseleave", SwordSelectTemplate.mouseleave.bind(k));
		k.box.addEvent("blur", SwordSelectTemplate.selectBlur.bind(k));
		return k
	},
	mouseenter : function (a) {
		this.leaveSign = true
	},
	mouseleave : function (a) {
		this.leaveSign = false
	},
	selectBlur : function (a) {
		if (!this.leaveSign) {
			this.hide();
			this.execGridOnFinished()
		}
	},
	runEventFocus : function (f, d, a) {
		var b = d.get("name"),
		c = a.getField(b);
		c.grid = null;
		if (c.box.get("disabled") == true) {
			return
		}
		if ($defined(d)) {
			if (c.box == d) {
				c.rebuild = false
			} else {
				if (c.box.get("display") == "true") {
					c.hide();
					if (!d.hasClass("sGrid_data_row_item_select")) {
						c.execGridOnFinished()
					}
					c.box.set("display", "false")
				}
				c.box = d;
				c.selDiv = d.getParent("tr").getElement(".swordselect-selimg");
				c.rebuild = true
			}
		}
		if (f.target == c.selDiv) {
			c.leaveSign = false
		}
		if (c.box.get("display") != "true") {
			c.show()
		}
		if (pc.curSelectObj && c != pc.curSelectObj) {
			pc.oldSelectObj = pc.curSelectObj
		}
		pc.curSelectObj = c
	},
	runEventClick : function (c, b, a) {
		this.runEventFocus(c, b, a)
	},
	runEventBlur : function (c, b, a) {},
	runEventDblClick : function () {
		return
	},
	runEventKeydown : function () {
		return
	},
	runEventKeyup : function (f, d, a) {
		var b = d.get("name"),
		c = a.getField(b);
		c.change_item_on_keyup(f)
	}
};
var SwordTextareaTemplate = {
	start : '<table class="swordform_field_wrap" cellspacing="0" cellpadding="0" style="width: 100%;"><tbody><tr><td class="boxtd"><textarea widget="textarea" type="textarea" class="swordform_item_oprate swordform_item_textarea ',
	inp : 'style="{style}" maxlength="{maxlength}" defValue="{defValue}" name="{name}" id="{id}" rule="{rule}" msg="{msg}" ',
	inpend : ">{text}</textarea>",
	end1 : '<div style="color: rgb(51, 51, 51);" class="textarea_maxLength_wrap">您还可以输入<span class="textarea_maxLength_count">',
	end2 : "</span>字</div>",
	end : "</td></tr></tbody></table>",
	render : function (t, n, p, h) {
		var g = [this.start];
		var b = t.get("name"),
		d = p + "_" + b,
		l = t.get("disable"),
		m = t.get("readonly") || t.getAttribute("readonly"),
		c = t.get("maxlength") || t.getAttribute("maxlength"),
		r = t.get("defValue"),
		a = t.get("style"),
		q = t.get("rule");
		t.set({
			ostyle : a,
			style : ""
		});
		if (l == "true") {
			g.push('swordform_item_input_disable swordform_textarea_readonly" ');
			g.push(' disable="true" readonly="readonly"')
		} else {
			if (m == "true") {
				g.push('swordform_textarea_readonly" ')
			} else {
				g.push('"')
			}
		}
		n.fieldElHash.set(d, d);
		var k = h ? h.value : (r || "");
		var f = c ? c - this.getStringUTFLength(k) : 0;
		g.push(this.inp.substitute({
				id : d,
				style : (q && q.contains("must")) && l != "true" ? a + ";background-color:#fffadb;" : a,
				name : b,
				rule : q,
				defValue : r,
				maxlength : c || 30000,
				msg : t.get("msg")
			}));
		g.push(this.inpend.substitute({
				text : k
			}));
		if (f != 0) {
			if (l == "true") {
				var s = this.end1.replace("textarea_maxLength_wrap", "textarea_maxLength_wrap swordform_item_input_disable");
				g.push(s)
			} else {
				g.push(this.end1)
			}
			g.push(f > 0 ? f : 0);
			g.push(this.end2)
		}
		g.push(this.end);
		return g.join("")
	},
	initData : function (d, c, a) {
		if (!$defined(c)) {
			c = ""
		}
		var b = c.value;
		if ($defined(b)) {
			c = b
		}
		c = c.replace(/&apos;/g, "'");
		d.set("value", c).set("realvalue", c);
		if ($defined(d.get("maxLength"))) {
			this.maxLengthCount(d)
		}
	},
	getStringUTFLength : function (b) {
		var a = b.replace(/[\u4e00-\u9fa5]/g, "  ");
		return a.length
	},
	initWidget : function (c, f, a) {
		var d = $$("div[name=" + c + "]")[0];
		var b = new Textarea(d);
		b.box = f;
		b.parent = a;
		b.countSpan = f.getNext() ? f.getNext().getElement("span.textarea_maxLength_count") : null;
		a.setWidget(c, b);
		return b
	},
	runEventFocus : function (d, b, a) {
		if (!b.hasClass("swordform_textarea_readonly")) {
			if (a) {
				var c = a.getField(b.get("name"));
				if (c.countSpan) {
					c.maxLengthCount(d)
				}
			} else {
				this.maxlenVal(d, b)
			}
		}
	},
	runEventClick : function (c, b, a) {
		this.runEventFocus(c, b, a)
	},
	runEventBlur : function (c, b, a) {
		if (b.get("rule")) {
			if (a) {
				a.Vobj.validate(b)
			}
		}
		this.runEventFocus(c, b, a);
		b.set("realvalue", b.get("value"))
	},
	runEventDblClick : function (c, a, b) {
		this.openDbWin(a);
		return
	},
	runEventKeydown : function (c, b, a) {
		if (c.key == "esc") {
			event.returnValue = false
		}
		return
	},
	runEventKeyup : function (c, b, a) {
		this.runEventFocus(c, b, a)
	},
	openDbWin : function (f) {
		var t = document.body,
		q = document.documentElement;
		var d = new Element("div", {
				"class" : "pop_mask_div"
			}).inject(t);
		d.setStyles({
			height : t.getScrollSize().y,
			"z-index" : 1003
		});
		var k = new Element("div", {
				"class" : "pop_panel"
			}).inject(t);
		var s = q.scrollTop;
		var g = q.clientHeight;
		var r = q.clientWidth;
		var a = (r - 800) / 2;
		k.setStyles({
			width : 800,
			"z-index" : 1004,
			top : s + 30,
			left : a
		});
		var n = f.getParent("table");
		var m = n.getParent("td").getPrevious().innerHTML;
		var l = ['<table class="tab_form" border="0" cellpadding="0" cellspacing="0"><tr><th style="text-align:center">'];
		l.push(m);
		l.push("</th></tr><tr><td>");
		l.push(n.outerHTML);
		l.push('</td></tr></table><div class="pop_panel_div"><input type="button" value="确定" class="pop_panel_sbutton"><input type="button" value="取消" class="pop_panel_cbutton"></div>');
		k.innerHTML = l.join("");
		var b = k.getElement("textarea");
		var p = k.getElement(".pop_panel_sbutton");
		var h = k.getElement(".pop_panel_cbutton");
		var c = b.get("id");
		b.set("id", "pop_" + c);
		b.setStyle("height", "500px");
		b.focus();
		b.addEvent("blur", function (u) {
			this.runEventBlur(u, b)
		}
			.bind(this));
		b.addEvent("click", function (u) {
			this.runEventClick(u, b)
		}
			.bind(this));
		b.addEvent("keyup", function (u) {
			this.runEventKeyup(u, b)
		}
			.bind(this));
		b.addEvent("keydown", function (u) {
			this.runEventKeydown(u, b)
		}
			.bind(this));
		p.addEvent("click", this.buttonFun.bind(this, ["sb", d, k, b, f]));
		h.addEvent("click", this.buttonFun.bind(this, ["cb", d, k]))
	},
	maxlenVal : function (e, el) {
		var ta = new Textarea();
		var value = el.get("value");
		var maxlen = el.get("maxLength");
		if (ta.getStringUTFLength(value) > maxlen / 1) {
			if (e) {
				try {
					with (window.event || e) {
						cancelBubble = true;
						keyCode = 0;
						returnValue = false
					}
				} catch (ex) {}

			}
			el.set("value", ta.leftUTFString(value, maxlen / 1))
		}
		var len = maxlen / 1 - ta.getStringUTFLength(value);
		var cdiv = el.getNext();
		if (cdiv) {
			cdiv.getElement("span").set("text", (len >= 0) ? len : 0);
			if (len == 0) {
				cdiv.setStyle("color", "red")
			} else {
				cdiv.setStyle("color", "#333")
			}
		}
	},
	buttonFun : function (a, f, d, c, b) {
		if (a == "sb") {
			b.set("value", c.get("value"))
		}
		d.destroy();
		f.destroy()
	}
};
var SwordTextTemplate = {
	start : '<div class="swordform_field_wrap" style="{style}"><input type="text" onMouseOver="this.title=this.value" style="float:left;',
	inp : ' defValue="{defValue}" maxlength="{maxlength}" msg="{msg}" value="{value}" name="{name}" id="{id}" rule="{rule}" format="{format}" onchange="{onchange}" oValue="{realvalue}" realvalue="{realvalue}" class="swordform_item_oprate swordform_item_input" _onclick="{onclick}" _ondblclick="{ondblclick}" onEnterPress="{onEnterPress}" _onfocus="{onfocus}"  _onkeydown="{onkeydown}" _onkeyup="{onkeyup}" _onblur="{onblur}" ',
	end : "></div>",
	render : function (u, n, p, k) {
		var c = u.get("style");
		var h;
		if (c.contains("WIDTH") || c.contains("width")) {
			h = [this.start.substitute({
					style : c
				})];
			h.push(c);
			h.push(";width:100%");
			u.setStyle("display", "none")
		} else {
			h = [this.start];
			h.push(c)
		}
		var f = u.get("tipTitle"),
		r = u.get("rule"),
		m = u.get("readonly") || u.getAttribute("readonly");
		var b = u.get("name"),
		d = p + "_" + b,
		a = u.get("defValue"),
		v = u.get("format"),
		l = u.get("disable") || u.get("disabled");
		if (l == true) {
			l = "true"
		}
		if ((r && r.contains("must")) && l != "true") {
			h.push(";background-color:#fffadb;")
		}
		h.push('"');
		var g = k ? k.value : (a || ""),
		q = g;
		if (v && g) {
			g = sword_fmt.formatText(u, g, "", v).value
		}
		var s = [this.inp.substitute({
				id : d,
				name : b,
				rule : r,
				realvalue : q,
				value : g,
				defValue : a,
				format : v,
				tipTitle : f,
				maxlength : u.get("maxlength") || u.getAttribute("maxlength"),
				msg : u.get("msg"),
				onchange : u.get("onchange"),
				onkeydown : u.get("onkeydown"),
				onkeyup : u.get("onkeyup"),
				onfocus : u.get("onfocus"),
				onblur : u.get("onblur"),
				onclick : u.get("onclick"),
				ondblclick : u.get("ondblclick"),
				onEnterPress : u.get("onEnterPress")
			}), ' format="', u.get("format"), '" '];
		if (l == "true") {
			s[0] = s[0].replace("swordform_item_oprate swordform_item_input", "swordform_item_oprate swordform_item_input swordform_item_input_disable");
			s.push(' disable="true" readonly="readonly"')
		}
		if (m == "true") {
			s.push(" readonly='readonly' ")
		}
		h.push(s.join(""));
		h.push(this.end);
		n.fieldElHash.set(d, d);
		return h.join("")
	},
	initData : function (d, c, a) {
		if (!$defined(c)) {
			c = ""
		}
		var b = c.value;
		if ($defined(b)) {
			c = b
		}
		d.set("value", c)
	},
	runEventFocus : function (c, b, a) {
		if (!b.hasClass("swordform_item_input_disable")) {
			var d = b.get("_onfocus");
			if ($chk(d)) {
				a.getFunc(d)[0](c, a)
			}
			var f = b.get("realvalue");
			if (b.get("format") && f) {
				b.set("value", f)
			}
			a.setSRang4El(b)
		}
	},
	runEventClick : function (c, b, a) {
		var d = b.get("_onclick");
		if ($chk(d)) {
			a.getFunc(d)[0](c, a)
		}
	},
	runEventBlur : function (l, b, h) {
		var d = b.get("_onblur");
		var n = b.get("format");
		var c = b.get("value");
		if (n) {
			if (!$chk(c) || c == " ") {
				var a = JSON.decode(n);
				var m = a.type;
				var g = a.format;
				if ($defined(m) && $defined(g) && m.contains("number")) {
					b.set("value", "0")
				}
			}
			h.initFormatVal(b)
		} else {
			b.set("realvalue", b.get("value").trim());
			b.set("value", b.get("value").trim())
		}
		if ($chk(d)) {
			var f = b.getParent().getNext().get("gridName");
			if (f) {
				var k = $w(f);
				var p = k.getCheckedRow().getCell(b.get("name"));
				h.getFunc(d)[0](b.get("realvalue"), b.get("value"), k.getCheckedRowData(), p, k.getCheckedRow())
			} else {
				h.getFunc(d)[0](l, h)
			}
		}
		if (b.get("rule")) {
			h.Vobj.validate(b)
		}
	},
	runEventDblClick : function (c, b, a) {
		var d = b.get("_ondblclick");
		if ($chk(d)) {
			a.getFunc(d)[0](c, a)
		}
	},
	runEventKeydown : function (c, b, a) {
		if (!b.hasClass("swordform_item_input_disable")) {
			var d = b.get("_onkeydown");
			if ($chk(d)) {
				b.set("realvalue", b.get("value"));
				a.getFunc(d)[0](c, a)
			}
		}
	},
	runEventKeyup : function (g, d, c) {
		var h = d.get("_onkeyup");
		if ($chk(h)) {
			d.set("realvalue", d.get("value"));
			c.getFunc(h)[0](g, c)
		}
		var b = d.get("onEnterPress");
		if (b && g.key == "enter") {
			var f = $w(d.getParent().getNext().get("gridName"));
			if (f) {
				var a = f.getCheckedRow().getCell(d.get("name"));
				c.getFunc(b)[0](a, g)
			} else {
				c.getFunc(b)[0](g, d)
			}
		}
	}
};
var SwordForm_Template = {
	PUBATTR : ' style="{css}" rule="{rule}" bizctrl="{bizctrl}" biztid="{biztid}" name="{name}" msg="{msg}" ',
	panel : '<div class="swordform-panel-box"><div class="swordform-panel-title" id="{name}_panelTitle" >{caption}</div><div id="{name}_panelTog" class="x-tool" title="收缩"></div></div>',
	htmlStrs : [],
	render : function (b, a) {
		this.realRender(b, a)
	},
	realRender : function (d, b, f) {
		d = $(d),
		this.formObj = b,
		this.fName = d.get("name");
		var c = this.htmlStrs;
		if (d.get("panel") == "true") {
			c.push(this["panel"].substitute({
					caption : b.options.caption,
					name : this.fName
				}))
		}
		var a = d.getChildren();
		a.each(function (n, l) {
			var m = n.get("tag");
			if (m == "div") {
				var h = n.get("type");
				if (h == "hidden") {
					var p = n.get("name");
					c.push(this.getItemHtml(h, n, f[p]))
				} else {
					c.push(n.outerHTML)
				}
			} else {
				if (m.toLowerCase() == "fieldset") {
					c.push("<fieldset style='");
					var g = n.get("style");
					c.push(g);
					var q = n.get("id");
					c.push("' id='");
					c.push(q);
					c.push("'>");
					var k = n.getChildren();
					k.each(function (s, r) {
						this.buildTable(s, f)
					}
						.bind(this));
					c.push("</fieldset>")
				} else {
					this.buildTable(n, f)
				}
			}
		}
			.bind(this));
		this.render()
	},
	buildTable : function (u, n) {
		var f = this.htmlStrs;
		f.push("<table class='{c}' width='{w}' id='{id}' border='0' cellpadding='0' cellspacing='0' style='{style}'>".substitute({
				c : u.get("class") || "tab_form",
				w : u.get("width"),
				id : u.get("id"),
				style : u.get("style")
			}));
		var k = u.getFirst();
		if (k && k.tagName.toLowerCase() == "colgroup") {
			f.push("<colgroup>");
			f.push(k.innerHTML);
			f.push("</colgroup>")
		}
		var l = u.getFirst("tbody").getChildren("tr");
		f.push("<tbody>");
		var b = l[0],
		q,
		p,
		v,
		c,
		s;
		while (b) {
			var d = b.get("id");
			if ($chk(d)) {
				f.push("<tr style='{style}' id='{id}'>".substitute({
						style : b.get("style"),
						id : d
					}))
			} else {
				f.push("<tr style='{style}'>".substitute({
						style : b.get("style")
					}))
			}
			q = b.getChildren(),
			s = q.length;
			for (p = 0; p < s; p++) {
				var a = q[p],
				h = a.get("colspan"),
				g = a.get("rowspan"),
				r = a.get("style"),
				m = a.get("id");
				v = a.tagName.toLowerCase();
				if (v == "th") {
					f.push(("<th id='{id}' style='{style}' colspan='{c}' rowspan='{r}' >" + a.innerHTML + "</th>").substitute({
							c : h,
							r : g,
							style : r,
							id : m
						}))
				} else {
					var t = a.getChildren();
					f.push(("<td style='{style}' id='{id}' colspan='{c}' rowspan='{r}' align='{align}' valign='{valign}'>").substitute({
							c : h,
							r : g,
							style : r,
							id : m,
							align : a.get("align"),
							valign : a.get("valign")
						}));
					t.each(function (x) {
						if (x != null) {
							if (x.get("sword") == "SwordSubmit") {
								f.push(this.getItemHtml("submit", x))
							} else {
								var w = x.get("tag");
								c = x.get("type"),
								itemName = x.get("name");
								if (w != "table") {
									if (pc.formItems[c]) {
										f.push(this.getItemHtml(c, x, n[itemName]))
									}
									f.push(x.outerHTML)
								} else {
									this.buildTable(x, n)
								}
							}
						}
					}
						.bind(this));
					f.push("</td>")
				}
			}
			f.push("</tr>");
			b = b.getNext("tr")
		}
		f.push("</tbody></table>")
	},
	render : function () {
		this.formObj.options.pNode.set("isRender", "true").innerHTML = this.htmlStrs.join("");
		this.htmlStrs.empty()
	},
	getItemHtml : function (c, b, a) {
		return pc.formItems[c].render(b, this.formObj, this.fName, a)
	}
};
var SwordGrid_OTemplate = {
	row_tree : '<div status="${status}" class="sGrid_data_row_div " row="true"  pageNum="${_|pageNum}">',
	row_shuang : '<div status="${status}" class="sGrid_data_row_div  sGrid_data_row_div_shuang   " row="true"  pageNum="${_|pageNum}">',
	row_dan : '<div status="${status}" class="sGrid_data_row_div  sGrid_data_row_div_dan   " row="true"  pageNum="${_|pageNum}">',
	div_end : "</div>"
};
var SwordGridRender = new Class({
		Implements : [Options],
		name : "SwordGridRender",
		options : {
			gridObj : null,
			gName : null
		},
		formats : new Hash(),
		initialize : function (a) {
			this.setOptions(a);
			if (!this.options.gridObj) {
				throw new Error("SwordGridRender 初始化必须要传入 gridObj")
			}
			this.g = this.options.gridObj;
			this.options.gName = this.options.gridObj.options.name;
			this.fieldRender = new SwordGridFields({
					gridObj : this.options.gridObj,
					gName : this.options.gName
				});
			this._showDataHandlers = {
				checkbox : this._checkbox_radioDataHandler.bind(this),
				radio : this._checkbox_radioDataHandler.bind(this),
				date : this._dateDataHandler.bind(this),
				file2 : this._file2DataHandler.bind(this),
				pulltree : this._pulltreeDataHandler.bind(this),
				rowNum : this._rowNumDataHandler.bind(this),
				rowNumOnePage : this._rowNumOnePageDataHandler.bind(this),
				pullbigtree : this._pulltreeDataHandler.bind(this),
				select : this._selectDataHandler.bind(this)
			}
		},
		render : function (m, q) {
			if (!q) {
				q = this.options.items
			}
			var w = this._createRow(m, q);
			var n = this.options.gridObj,
			h = n.options;
			var b = h.sGrid_data_div,
			f,
			k = 0,
			s = [];
			var r = b.childNodes.length;
			if (h.fenye != "false" || h.fenyeType == "server") {
				var p = new Element("div");
				p.innerHTML = w;
				$$(p.childNodes).inject($(b))
			} else {
				b.innerHTML = w
			}
			f = b.childNodes.length;
			var u = $$(b.childNodes);
			if (Browser.Engine.trident4) {
				if (f > 0) {
					b.setStyle("height", "auto")
				}
			}
			for (var l = r; l < f; l++) {
				var v = u[l],
				a = m[k];
				a.init = "load";
				s.push(v);
				v.store("rowData", a);
				k++;
				n.hjDataOs.each(function (d) {
					var c = a.tds[d.name] ? a.tds[d.name].value / 1 : 0;
					if (c) {
						d.value = accAdd(d.value, c)
					}
				})
			}
			this._renderAfter(s, m, q);
			return b
		},
		renderRow : function (d, b, a, g) {
			var c = this._createRow([d], b, g);
			var f = new Element("div", {
					html : c
				}).getFirst();
			if (a == "insert") {
				f.set("status", a)
			}
			d.init = "load";
			f.store("rowData", d);
			this.options.gridObj.hjDataOs.each(function (k) {
				var h = d.tds[k.name] ? d.tds[k.name].value / 1 : 0;
				if (h) {
					k.value = accAdd(k.value, h)
				}
			});
			this._renderAfter([f], [d], b, a);
			if (Browser.Engine.trident4) {
				this.options.gridObj.options.sGrid_data_div.setStyle("height", "auto")
			}
			return f
		},
		_renderAfter : function (h, b, f, c) {
			var d = this;
			var g = 0;
			vartime = 10;
			var a = b.length;
			if (a == 0) {
				return
			}
			if (c == "insert") {
				var k = h[0];
				d._addRowFuncs(k, b[0]);
				d._renderCellAfter(b[0], k, f);
				d.g.fireEvent("onAfterCreateRow", [b[0], k, d.g])
			} else {
				h.each(function (m) {
					var n = h[g],
					l = b[g];
					d._addRowFuncs(n, l);
					if (n.get("status") == "deleting" || n.get("status") == "delete") {
						n.addClass("sGrid_data_row_delete_div")
					}
					g = g + 1
				});
				g = 0;
				setTimeout(function () {
					if ($chk(d.g.options.sGrid_data_div.innerHTML)) {
						var m = h[g],
						l = b[g];
						d._renderCellAfter(l, m, f);
						d.g.fireEvent("onAfterCreateRow", [l, m, d.g]);
						g = g + 1;
						if (a > g) {
							setTimeout(arguments.callee, 10)
						} else {
							d.g.fireEvent("onAfterInitData")
						}
					}
				}
					.bind(this), vartime)
			}
		},
		_renderRowAfter : function (b, a) {
			this._storeRowData(b, a);
			this._addRowFuncs(b, a)
		},
		_storeRowData : function (b, a) {
			b.store("rowData", a)
		},
		_addRowFuncs : function (b, a) {
			this.g.addRowApi(b);
			a.getValue = this._getValue
		},
		_renderCellAfter : function (h, k, c) {
			var f = 0,
			g = $$(k.childNodes),
			b = g.length;
			for (; f < b; f++) {
				var a = g[f];
				var d = a.getAttribute("name");
				this.g.fireEvent("onAfterCreateCell", [h, h.getValue(d), a, c[f]])
			}
		},
		_createRow : function (g, k, l) {
			var d = this.fieldRender.render(k, this.formats);
			var n = this;
			var c = this.options.gName;
			juicer.register(c + "pageNum", function () {
				return n.g.pageNum()
			});
			juicer.register(c + "dataHandler", function () {
				return n._findDataHandler(arguments[1]).apply(this, arguments)
			});
			var f = [];
			if (this.g.options.type != "tree") {
				var a = ['<div status="${status}" class="sGrid_data_row_div  sGrid_data_row_div_shuang   " row="true"  pageNum="${_|', c, 'pageNum}">', d, "</div>"].join("");
				var m = ['<div status="${status}" class="sGrid_data_row_div  sGrid_data_row_div_dan   " row="true"  pageNum="${_|', c, 'pageNum}">', d, "</div>"].join("");
				g.each(function (p, h) {
					if (h % 2 != 0 || ($chk(l) && l % 2 == 0)) {
						f.push(juicer(a, p))
					} else {
						f.push(juicer(m, p))
					}
				}, this)
			} else {
				var b = ['<div status="${status}" class="sGrid_data_row_div " row="true"  pageNum="${_|', c, 'pageNum}">', d, "</div>"].join("");
				g.each(function (p, h) {
					f.push(juicer(b, p))
				}, this)
			}
			return f.join("")
		},
		_getValue : function (a) {
			var b = this.tds[a];
			if (!$defined(b)) {
				return null
			}
			return b.value
		},
		_findDataHandler : function (b) {
			if ("userdefine" != b) {
				var a = this._showDataHandlers[b];
				if (a) {
					return a
				}
				return this._defalutDataHandler.bind(this)
			} else {
				return $empty
			}
		},
		_defalutDataHandler : function (h, f, c, b, a) {
			var g = h.tds[c];
			if (g) {
				g = g.value
			}
			if (!$chk(g)) {
				if (f == "a" && a == "true") {
					return ' title="' + b + '" realvalue="' + b + '" showValue="' + b + '">' + b + "</div>"
				}
				return ' title="" realvalue="" showValue=""></div>'
			}
			var k = this.formats.get(c);
			var d = (g + "").replace(/&/g, "&amp;");
			if ($chk(k)) {
				d = sword_fmt.convertText(d, k).value
			}
			if ($defined(d) && $type(d) == "string" && (d.indexOf(">") != -1 || d.indexOf("<")) != -1) {
				d = (d.replace(/</g, "&lt;")).replace(/>/g, "&gt;")
			}
			d = d.replace(/&/g, "&amp;");
			if ($type(g) == "string" && g.test(/\"*\"/)) {
				return " title='" + d + "' realvalue='" + g + "' showValue='" + d + "'>" + d + "</div>"
			} else {
				return ' title="' + d + '" realvalue="' + g + '" showValue="' + d + '">' + d + "</div>"
			}
		},
		_checkbox_radioDataHandler : function (h, f, c, k, a) {
			var g = h.tds[c];
			if (g) {
				g = g.value
			}
			var d = "0";
			if ($chk(g) && g != "0") {
				d = "1"
			}
			var b;
			if (this.g.isCP() && k == "true") {
				a == "true" ? b = "checked" : b = ""
			} else {
				if (d == "1") {
					b = "checked"
				} else {
					b = ""
				}
			}
			return b + ' value="' + d + '"/></div>'
		},
		_textDataHandler : function (f, c, a) {
			var d = f.tds[a];
			if (d) {
				d = d.value
			}
			if (!$chk(d)) {
				return 'title="" realvalue="" showValue=""></div>'
			}
			var g = this.formats.get(a);
			var b = (d + "").replace(/&/g, "&amp;");
			if ($chk(g)) {
				b = sword_fmt.convertText(b, g).value
			}
			if ($defined(b) && $type(b) == "string" && (b.indexOf(">") != -1 || b.indexOf("<")) != -1) {
				b = (b.replace(/</g, "&lt;")).replace(/>/g, "&gt;")
			}
			b = b.replace(/&/g, "&amp;");
			return 'title="' + b + '" realvalue="' + d + '" showValue="' + b + '">' + b + "</div>"
		},
		_dateDataHandler : function (c, g, a, f, h, b, k) {
			var l = c.tds[a];
			if (l) {
				l = l.value
			}
			var d = "";
			if ($chk(l)) {
				d = l
			} else {
				if ($chk(h)) {
					d = h
				} else {
					if (b == "true") {
						d = SwordDataFormat.formatDateToString(new Date(), f)
					}
				}
			}
			if ($chk(d)) {
				f = f || SwordCalendar.prototype.defaultdataformat;
				k = k || SwordCalendar.prototype.submitDateformat;
				if (d.split(".").length == 2) {
					d = d.split(".")[0]
				}
				d = SwordDataFormat.formatStringToString(d, f, f);
				return 'title="' + d + '" realvalue="' + l + '" showValue="' + d + '">' + d + "</div>"
			} else {
				return 'title="" realvalue="" showValue=""></div>'
			}
		},
		_selectDataHandler : function (f, m, n, l, q, b, d) {
			var p = f.tds[b];
			if (p) {
				p = p.value
			}
			var r = this.g.getItemElByName(b)[0];
			var a = r.get("firstindex");
			a = a == "true" ? true : false;
			if (!($chk(p) || $chk(n) || $chk(l) || a)) {
				return ' title=""  code="" realvalue="" ></div>'
			}
			var c = this.g.getSelect();
			c.grid = true;
			var h = this._getPcode(r, f);
			var k = c.dm2mc(r, p, h, "", a);
			var g = $type(k);
			if (g == "object") {
				return ' title="' + k.caption + '"  code="' + k.code + '" realvalue="' + k.realvalue + '" >' + k.caption + "</div>"
			} else {
				if (g == "string") {
					return ' title="' + k + '"  code="' + k + '" realvalue="' + k + '" >' + k + "</div>"
				} else {
					return ' title=""  code="" realvalue="" ></div>'
				}
			}
		},
		_pulltreeDataHandler : function (f, c, z, y, l) {
			var q = f.tds[z];
			if (q) {
				q = q.value
			}
			if (!$chk(q)) {
				return ' title="" realvalue=""></div>'
			}
			if (q.contains("code") && q.contains("caption")) {
				if (q.contains("checkPath")) {
					var u = q.split(";");
					var k;
					var a;
					var t;
					u.each(function (A, B) {
						var C = A.split("|");
						if (B == 0) {
							k = C[1].split(":")[1] + ",";
							a = C[0].split(":")[1] + ",";
							t = C[2].split(":")[1] + "|"
						} else {
							k = k + C[1].split(":")[1] + ",";
							a = a + C[0].split(":")[1] + ",";
							t = t + C[2].split(":")[1] + "|"
						}
					});
					var m = k.substring(0, k.length - 1);
					return ' title="' + m + '" realvalue="' + a.substring(0, a.length - 1) + '" checkPath="' + t.substring(0, t.length - 1) + '">' + m + "</div>"
				} else {
					var s = q.split("|");
					var d = s[1].split(",");
					var b = "";
					var h = "";
					if (d.length > 2) {
						h = (d.slice(1, d.length)).join(",")
					} else {
						h = d[1]
					}
					var p = s[0].split(",");
					if (p.length > 2) {
						b = (p.slice(1, p.length)).join(",")
					} else {
						b = p[1]
					}
					return ' title="' + h + '" realvalue="' + b + '">' + h + "</div>"
				}
			} else {
				var r = $w(y);
				var x = pc.getInitData(y) || JSON.decode(r.options.dataStr);
				var g = r.options.cascadeSign.id;
				var v = r.options.displayTag;
				if ($chk(x)) {
					var s = $splat(q.split(","));
					var w = [];
					var n = [];
					s.each(function (A) {
						var E = x.data;
						var C = function (G, F) {
							G.each(function (I) {
								if (I[g] == A) {
									I.ischecked = "true";
									F.push(I[v])
								} else {
									for (var H in I) {
										if ($type(I[H]) == "array") {
											C(I[H], F);
											break
										}
									}
								}
							})
						}
						.bind(this);
						C(E, w);
						var D = new Hash();
						D.set(g, A);
						if (r.isContain(D)) {
							var B = r.getTreeNode(D);
							n.push(D)
						}
					});
					realvalue = s.join(",");
					showvalue = w.join(",");
					r.setCheckedList(n);
					return ' title="' + showvalue + '" realvalue="' + realvalue + '">' + showvalue + "</div>"
				} else {
					return ' title="" realvalue=""></div>'
				}
			}
		},
		_getPcode : function (a, b) {
			var c = a.get("parent");
			if (c) {
				if (b.tds[c]) {
					return b.tds[c].value
				}
			}
		},
		_file2DataHandler : function (f, m, c, d, p) {
			var a = f ? (f.tds[c] ? f.tds[c].value : "") : "";
			var b = '<div class="sword_file_upload2" style="background-color:;" name="' + c + '"><ul class="up-list" name="up-list">',
			k = "";
			var g = p || "添加文件";
			if (a) {
				var n = "";
				try {
					var h = JSON.decode(a);
					n = h.name
				} catch (l) {}

				n = n || a;
				k = " >" + b + '<li id="file-id" class="file"><span class="file-title">' + n + '</span><span class="file-delete" style="visibility: hidden;"></span></li></ul><a name="up-attach" style="color: blue; text-decoration: underline; display: none;">' + g + "</a></div></div>"
			} else {
				k = " >" + b + '</ul><a name="up-attach" style="color: blue; text-decoration: underline; ">' + g + "</a></div></div>"
			}
			return k
		},
		_rowNumDataHandler : function (c, b) {
			var a = this.g.addRowN++;
			return "realvalue='" + a + "' >" + a + "</div>"
		},
		_rowNumOnePageDataHandler : function (b, a) {
			return ">请使用rowNum类型</div>"
		}
	});
var SwordGridFields = new Class({
		Implements : [Options],
		name : "SwordGridFields",
		options : {
			gridObj : null,
			gName : null
		},
		Fields : {
			a : {
				name : "",
				caption : "",
				x : "",
				type : "a",
				disable : "",
				show : "",
				isShowCaption : "true",
				style : "",
				onClick : "",
				noView : ""
			},
			button : {
				name : "",
				caption : "",
				x : "",
				type : "button",
				show : "",
				style : "",
				onClick : "",
				noView : ""
			},
			label : {
				format : "",
				caption : "",
				show : "",
				rule : "",
				x : "",
				type : "label",
				name : "",
				style : "",
				noView : ""
			},
			text : {
				format : "",
				caption : "",
				show : "",
				disable : "",
				rule : "",
				x : "",
				type : "text",
				name : "",
				style : "",
				msg : "",
				maxlength : "",
				onEnterPress : "",
				tipTitle : "",
				onAutoNextBefore : "",
				noView : "",
				hjnum : ""
			},
			password : {
				caption : "",
				show : "",
				disable : "",
				rule : "",
				x : "",
				type : "text",
				name : "",
				style : "",
				msg : "",
				maxlength : "",
				onEnterPress : "",
				tipTitle : "",
				onAutoNextBefore : "",
				noView : ""
			},
			rowNum : {
				caption : "",
				show : "",
				x : "",
				type : "rowNum",
				name : "",
				style : "",
				noView : ""
			},
			rowNumOnePage : {
				caption : "",
				show : "",
				x : "",
				type : "rowNumOnePage",
				name : "",
				style : "",
				noView : ""
			},
			checkbox : {
				caption : "",
				disable : "",
				x : "",
				type : "checkbox",
				name : "",
				style : "",
				noView : ""
			},
			date : {
				defValue : "",
				submitDateformat : "",
				dataformat : "yyyy-MM-dd",
				showCurDate : "",
				edit : "",
				caption : "",
				show : "",
				disable : "",
				rule : "",
				x : "",
				type : "date",
				name : "",
				style : "",
				msg : "",
				returnRealValue : "false",
				onAutoNextBefore : "",
				noView : ""
			},
			select : {
				name : "",
				type : "",
				lines : 10,
				height : 21,
				rule : "",
				parent : "",
				child : "",
				dataName : "",
				pcode : "",
				defValue : "",
				defIndex : "",
				onChange : "",
				onSelect : "",
				onShow : "",
				onHide : "",
				dataFilter : "",
				onSubmitBefore : "",
				disable : "",
				sbmitcontent : "",
				displayCode : "false",
				inputdisplay : "",
				popdisplay : "",
				edit : "true",
				handInput : "false",
				addAllItem : "false",
				allItemCode : "",
				allItemCap : "",
				show : "",
				x : "",
				caption : "",
				msg : "",
				style : "",
				codeSign : "code",
				captionSign : "caption",
				pcodeSign : "pcode",
				onAutoNextBefore : "",
				noView : "",
				firstindex : ""
			},
			pulltree : {
				name : "",
				show : "",
				disable : "",
				rule : "",
				treeName : "",
				x : "",
				caption : "",
				style : "",
				type : "pulltree",
				checkbox : "",
				selectrule : "",
				selectRealKey : "",
				filterSign : "",
				ltid : "",
				lctrl : "",
				qtid : "",
				qctrl : "",
				height : "",
				selReadOnly : "",
				onClickBefore : "",
				onNodeClickBefore : "",
				onSelectChange : "",
				onSelectShow : "",
				onSelectHide : "",
				onFinish : "",
				onQtidBefore : "",
				search : "false",
				cacheName : null,
				searchLength : "1",
				searchTime : "0.5",
				searchInputWidth : "160px",
				isSearchByCode : "true",
				maxHeight : "305px",
				handInput : "false",
				cascadeSign : "",
				echoExtend : "",
				onAutoNextBefore : "",
				noView : ""
			},
			userdefine : {
				name : "",
				type : "userdefine",
				show : "",
				disable : "",
				x : "",
				style : "",
				noView : ""
			},
			hidden : {
				name : "",
				type : "hidden",
				show : "false",
				noView : ""
			},
			file2 : {
				name : "",
				caption : "",
				addCaption : "",
				type : "file2",
				show : "",
				disable : "",
				x : "",
				style : "",
				downloadCtrl : "",
				noView : ""
			}
		},
		initialize : function (a) {
			this.setOptions(a);
			if (!this.options.gridObj) {
				throw new Error("SwordGridRender 初始化必须要传入 gridObj")
			}
			this.g = this.options.gridObj;
			this._showDataHandlers = {
				a : this._aHtmlHandler.bind(this),
				label : this._labelHtmlHandler.bind(this),
				text : this._textHtmlHandler.bind(this),
				password : this._passwordHtmlHandler.bind(this),
				textarea : this._textHtmlHandler.bind(this),
				rowNum : this._rowNumHtmlHandler.bind(this),
				rowNumOnePage : this._rowNumOnePageHtmlHandler.bind(this),
				checkbox : this._checkboxHtmlHandler.bind(this),
				radio : this._checkboxHtmlHandler.bind(this),
				date : this._dateHtmlHandler.bind(this),
				select : this._selectHtmlHandler.bind(this),
				pulltree : this._pulltreeHtmlHandler.bind(this),
				pullbigtree : this._pulltreeHtmlHandler.bind(this),
				userdefine : this._userdefineHtmlHandler.bind(this),
				file2 : this._file2HtmlHandler.bind(this),
				hidden : this._hiddenHtmlHandler.bind(this)
			}
		},
		render : function (b, a) {
			var c = [];
			b.each(function (f) {
				var d = f.get("type");
				if (f.getAttribute("show") == "false") {
					f.setStyle("display", "none")
				}
				if (f.getAttribute("format")) {
					a.set(f.getAttribute("name"), f.getAttribute("format"))
				}
				c.push(this._findFieldHandler(d)(f, d))
			}, this);
			return c.join("")
		},
		_findFieldHandler : function (b) {
			if (!$chk(b)) {
				b = "label"
			}
			var a = this._showDataHandlers[b];
			if (a) {
				return a
			} else {
				throw new Error("_findFieldHandler 未知的列类型定义")
			}
		},
		_aHtmlHandler : function (d) {
			var f = this.findFieldOptions("a");
			var b = this.copeHtmlOptions(f, d);
			var a = d.getAttribute("disable");
			var c = '<div datael="true" class="sGrid_data_row_item_div ';
			if (a == "true") {
				c = c + 'sGrid_data_row_item_label" '
			} else {
				c = c + 'sGrid_data_row_item_a" '
			}
			return c + b.join("") + "  $${_|" + this.options.gName + 'dataHandler,"' + f.type + '","' + f.name + '","' + f.caption + '","' + f.isShowCaption + '"}'
		},
		_labelHtmlHandler : function (b) {
			var c = this.findFieldOptions("label");
			var a = this.copeHtmlOptions(c, b);
			return ' <div datael="true" class="sGrid_data_row_item_div sGrid_data_row_item_label " ' + a.join("") + "  $${_|" + this.options.gName + 'dataHandler,"' + c.type + '","' + c.name + '"}'
		},
		_textHtmlHandler : function (b) {
			var c = this.findFieldOptions("text");
			var a = this.copeHtmlOptions(c, b);
			return '<div eventdele="text" datael="true"  class="sGrid_data_row_item_div sGrid_data_row_item_text "  ' + a.join("") + "  $${_|" + this.options.gName + 'dataHandler,"' + c.type + '","' + c.name + '"}'
		},
		_passwordHtmlHandler : function (b) {
			var c = this.findFieldOptions("password");
			var a = this.copeHtmlOptions(c, b);
			return '<div eventdele="text" datael="true"  class="sGrid_data_row_item_div sGrid_data_row_item_password "  ' + a.join("") + "  $${_|" + this.options.gName + 'dataHandler,"' + c.type + '","' + c.name + '"}'
		},
		_rowNumHtmlHandler : function (b) {
			var c = this.findFieldOptions("rowNum");
			var a = this.copeHtmlOptions(c, b);
			return '<div  datael="true" class="sGrid_data_row_item_div sGrid_data_row_item_rowNum "  ' + a.join("") + "  $${_|" + this.options.gName + 'dataHandler,"' + c.type + '"} '
		},
		_rowNumOnePageHtmlHandler : function (b) {
			var c = this.findFieldOptions("rowNumOnePage");
			var a = this.copeHtmlOptions(c, b);
			return '<div  datael="true" class="sGrid_data_row_item_div sGrid_data_row_item_rowNumOnePage "  ' + a.join("") + "  $${_|" + this.options.gName + 'dataHandler,"' + c.type + '"} '
		},
		_checkboxHtmlHandler : function (d) {
			var f = this.findFieldOptions("checkbox");
			var b = this.copeHtmlOptions(f, d);
			var c = "";
			if (f.disable == "true") {
				c = "disabled"
			}
			if (d.get("type") == "radio") {
				return '<div eventdele="checkbox" datael="true"  class="sGrid_data_row_item_div "' + b.join("") + ' ><input type="' + f.type + '" name="' + f.name + '"  ' + c + '   eventdele="checkbox"  class="sGrid_data_row_item_checkbox"  $${_|' + this.options.gName + 'dataHandler,"' + f.type + '","' + f.name + '","' + g + '","' + a + '"}'
			} else {
				var g = d.get("userClicked") || "";
				var a = d.get("checkAllFlag") || "";
				return '<div eventdele="checkbox" datael="true"  class="sGrid_data_row_item_div "' + b.join("") + ' ><input type="' + f.type + '" name="' + f.name + '"  ' + c + '  eventdele="checkbox"   class="sGrid_data_row_item_checkbox"  $${_|' + this.options.gName + 'dataHandler,"' + f.type + '","' + f.name + '","' + g + '","' + a + '"}'
			}
		},
		_dateHtmlHandler : function (b) {
			var c = this.findFieldOptions("date");
			var a = this.copeHtmlOptions(c, b);
			return '<div datael="true"  eventdele="date" class="sGrid_data_row_item_div sGrid_data_row_item_date   "' + a.join("") + "  $${_|" + this.options.gName + 'dataHandler,"' + c.type + '","' + c.name + '","' + c.dataformat + '","' + c.defValue + '","' + c.showCurDate + '","' + c.submitDateformat + '"}'
		},
		_selectHtmlHandler : function (b) {
			var c = this.findFieldOptions("select");
			var a = this.copeHtmlOptions(c, b);
			return '<div datael="true" eventdele="select" class="sGrid_data_row_item_div sGrid_data_row_item_select  "' + a.join("") + "  $${_|" + this.options.gName + 'dataHandler,"' + c.type + '","' + c.defValue + '","' + c.defIndex + '","' + c.parent + '","' + c.name + '","' + c.dataName + '"}'
		},
		_pulltreeHtmlHandler : function (b) {
			var d = this.findFieldOptions("pulltree");
			var a = this.copeHtmlOptions(d, b);
			var c = d.treeName || d.treename;
			if (c) {
				if ($w(c) && $w(c).options.pNode.get("treeType") == "1") {
					d.checkbox = "true"
				}
			}
			return '<div datael="true" eventdele="pulltree" select="true" class="sGrid_data_row_item_div sGrid_data_row_item_pulltree"  ' + a.join("") + "  $${_|" + this.options.gName + 'dataHandler,"' + d.type + '","' + d.name + '","' + d.treeName + '","' + d.checkbox + '"}'
		},
		_userdefineHtmlHandler : function (b) {
			var c = this.findFieldOptions("userdefine");
			var a = this.copeHtmlOptions(c, b);
			if (b.get("disable") == "true") {
				b.getElements("input").each(function (d) {
					d.set("disabled", "true")
				})
			}
			if (b.get("show") == "false") {
				a.push('style="display:none"')
			}
			return '<div datael="true" eventdele="userdefine" class="sGrid_data_row_item_div sGrid_data_row_item_userdefine"  ' + a.join("") + ' title="">' + b.innerHTML + "</div>"
		},
		_hiddenHtmlHandler : function (b) {
			var c = this.findFieldOptions("hidden");
			var a = this.copeHtmlOptions(c, b);
			return '<div datael="true" eventdele="hidden" class="sGrid_data_row_item_div sGrid_data_row_item_hidden" style="display:none;" ' + a.join("") + ' title="">' + b.innerHTML + "</div>"
		},
		_file2HtmlHandler : function (b) {
			var c = this.findFieldOptions("file2");
			var a = this.copeHtmlOptions(c, b);
			return '<div datael="true" eventdele="file2" class="sGrid_data_row_item_div sGrid_data_row_item_file2  "' + a.join("") + "  $${_|" + this.options.gName + 'dataHandler,"' + c.type + '","' + c.name + '","' + c.dataName + '","' + c.addCaption + '"}'
		},
		findFieldOptions : function (a) {
			var b = this.Fields[a];
			return JSON.decode(JSON.encode(b))
		},
		copeHtmlOptions : function (g, f) {
			var b = [];
			var d = f.get("type") || f.getAttribute("type");
			for (var c in(g || {})) {
				var a = f.get(c) || f.getAttribute(c);
				g[c] = ($chk(a) && $defined(a)) ? a : g[c];
				if ($chk(g[c])) {
					if (c == "onChange" && d == "select") {
						b.push("_" + c + '="' + g[c] + '"  ')
					} else {
						b.push(c + '="' + g[c] + '"  ')
					}
				}
			}
			return b
		}
	});
var SwordSubmitTemplate = {
	start : '<div  sword="SwordSubmit" widget="submit" ',
	inp : ' name={name} btnName="{btnName}" value="{btnName}" id="{id}" enabled="{enabled}" isSubmit="{isSubmit}" img="{img}" title="{title}" forceAjax="{forceAjax}" isRedirect="{isRedirect}"  css="{css}" mask="{mask}" page="{page}" isShow="{isShow}" postType="{postType}" style="display: inline;{style}" tid="{tid}" ctrl="{ctrl}" encodeData="{encodeData}"  quickKey="{quickKey}" isOneClick="{isOneClick}" onSuccess="{onSuccess}" onValidatorBefore="{onValidatorBefore}" submitConfirm="{submitConfirm}" submitConfirmMsg="{submitConfirmMsg}"  onSubmitBefore="{onSubmitBefore}" async="{async}"  onclick="{onclick}" onSubmitAfter="{onSubmitAfter}" onError="{onError}"  onAfterLoadData="{onAfterLoadData}" ',
	end : "</div>",
	render : function (F, p, a) {
		var d = [this.start];
		var N = F.get("name"),
		s = F.get("btnName") || F.getAttribute("value"),
		J = F.get("isShow") || "true",
		L = F.get("title"),
		K = F.get("isSubmit") || "true",
		G = F.get("class"),
		r = F.get("css"),
		M = F.get("img"),
		l = F.get("postType") || "ajax",
		n = F.get("enabled") || "true",
		C = F.get("tid"),
		q = F.get("ctrl"),
		D = F.get("style"),
		x = a + "_" + N,
		A = F.get("mask") || true,
		g = F.get("page"),
		h = F.get("isRedirect"),
		k = F.get("forceAjax"),
		f = F.get("async") || "false",
		z = F.get("encodeData") || "false",
		w = F.get("maskOpacity"),
		E = F.get("submitConfirm") || "false",
		I = F.get("submitConfirmMsg"),
		m = F.get("isOneClick"),
		v = F.get("quickKey");
		var u = [this.inp.substitute({
				id : x,
				name : N,
				btnName : s,
				value : s,
				enabled : n,
				mask : A,
				page : g,
				css : r,
				isSubmit : K,
				isRedirect : h,
				forceAjax : k,
				isShow : J,
				title : L,
				postType : l,
				encodeData : z,
				style : D,
				tid : C,
				submitConfirm : E,
				img : M,
				ctrl : q,
				maskOpacity : w,
				submitConfirmMsg : I,
				isOneClick : m,
				quickKey : v,
				onSuccess : F.get("onSuccess"),
				onSubmitBefore : F.get("onSubmitBefore"),
				onSubmitAfter : F.get("onSubmitAfter"),
				onError : F.get("onError"),
				onAfterLoadData : F.get("onAfterLoadData"),
				onClick : F.get("onclick"),
				onValidatorBefore : F.get("onValidatorBefore")
			})];
		if (G) {
			if (M) {
				G += "submitCon"
			}
			u[0] += 'class="' + G + '"'
		}
		u[0] += ">";
		d.push(u.join(""));
		var B = F.getChildren();
		for (var y = 0; y < B.length; y++) {
			sw = B[y];
			d.push(sw.outerHTML);
			if (sw.get("tag") == "input" && sw.get("parent") == N) {
				this.haveBtn = true;
				break
			}
		}
		if (!this.haveBtn) {
			var H = '<div class="';
			if (n == "false") {
				H += "disabled_btn"
			} else {
				H += "submit_btn"
			}
			H += '" title="';
			if (L) {
				H += L
			} else {
				H += s
			}
			H += '" ';
			if (r) {
				H += 'style="' + r + '" '
			}
			H += "><span>" + s + "</span></div>";
			d.push(H)
		}
		d.push(this.end);
		p.fieldElHash.set(x, x);
		pc.formSubmit.set(N, a);
		return d.join("")
	},
	initWidget : function (c, f, a) {
		var b = new SwordSubmit();
		f.pNode = f;
		b.htmlOptions(f);
		b.container = f;
		var d = f.getElement("input[type=button][parent=" + c + "]");
		if (d) {
			b.isCustomer = true
		} else {
			d = f.getElement(".submit_btn") || f.getElement(".disabled_btn")
		}
		b.button = d;
		if (b.options.enabled == "false") {
			Sword.utils.btn.init(b.button);
			b.disabled()
		} else {
			if (!b.isCustomer) {
				Sword.utils.btn.init(b.button)
			}
		}
		if (b.options.isShow == "false") {
			b.hide()
		}
		b.initEvents();
		pc.setWidget(f.get("name"), b);
		return b
	}
};
function addKzSubmitDiv() {
	var a = $(document.body).getElements("div[sword=SwordToolBar]").get("name");
	if (a.length != 0) {
		var b = a[0];
		if (!$chk(b)) {
			return
		}
		var d = new Element("div", {
				name : "tybddy",
				type : "print",
				caption : "表单打印",
				onclick : "beforeSubmitDiv()",
				enabled : "true"
			});
		$(document.body).getElements("div[name=" + b + "]").grab(d)
	} else {
		var d = new Element("div", {
				name : "ToolBarButton",
				sword : "SwordToolBar",
				showType : "mini"
			});
		var c = new Element("div", {
				name : "tybddy",
				type : "print",
				caption : "表单打印",
				onclick : "beforeSubmitDiv()",
				enabled : "true"
			});
		$(d).grab(c);
		var f = $(document.body).getElements("div[class=wrapper]")[0];
		if ($chk(f)) {
			$(f).grab(d, "top")
		} else {
			$(document.body).grab(d, "top")
		}
	}
}
function getTybddyName() {
	return "tybddy"
}
function getTybddyDiv() {
	return new Element("div", {
		name : "tybddy",
		type : "print",
		caption : "表单打印",
		onclick : "beforeSubmitDiv()",
		enabled : "true"
	})
}
function beforeSubmitDiv() {
	var g = $(document.body).getElements("div[sword=SwordSubmit]").get("name");
	if (g.length != 0) {
		for (var c = 0; c < g.length; c++) {
			var h = g[c];
			$w(h).button.getParent().setStyle("display", "none")
		}
	}
	var f = $(document.body).getElements("div[class=tb_mini_box]");
	if (f.length != 0) {
		for (var c = 0; c < f.length; c++) {
			f[c].setStyle("display", "none")
		}
	}
	var a = $(document.body).getElements("div[class=tb_box]");
	if (a.length != 0) {
		for (var c = 0; c < a.length; c++) {
			a[c].setStyle("display", "none")
		}
	}
	var b = $(document.body).getElement("div[name=SwordWorkflowtoolbar]");
	if ($chk(b)) {
		b.setStyle("display", "none")
	}
	window.print();
	if (g.length != 0) {
		for (var c = 0; c < g.length; c++) {
			var h = g[c];
			var d = $w(h).options.isShow;
			if (d == "true") {
				$w(h).show()
			}
		}
	}
	if (f.length != 0) {
		for (var c = 0; c < f.length; c++) {
			f[c].setStyle("display", "")
		}
	}
	if (a.length != 0) {
		for (var c = 0; c < a.length; c++) {
			a[c].setStyle("display", "")
		}
	}
	if ($chk(b)) {
		b.setStyle("display", "")
	}
}
var PageContainer = new Class({
		Implements : [Events, Options],
		name : "PageContainer",
		widgetFactory : new WidgetFactory(),
		mask : null,
		initData : null,
		calendar : null,
		select : null,
		uploadCommit : null,
		pinitData : null,
		widgets : new Hash(),
		formSubmit : new Hash(),
		formItems : {
			checkbox : SwordRadioCheckboxTemplate,
			select : SwordSelectTemplate,
			radio : SwordRadioCheckboxTemplate,
			calendar : SwordCalendarTemplate,
			date : SwordCalendarTemplate,
			text : SwordTextTemplate,
			textarea : SwordTextareaTemplate,
			password : SwordPasswordTemplate,
			label : SwordLabelTemplate,
			tree : SwordPullBigtreeTemplate,
			bigtree : SwordPullBigtreeTemplate,
			pulltree : SwordPullBigtreeTemplate,
			pullbigtree : SwordPullBigtreeTemplate,
			userdefine : SwordUserdefineTemplate,
			file2 : SwordFile2Template,
			file : SwordFileTemplate,
			hidden : SwordHiddenTemplate,
			submit : SwordSubmitTemplate
		},
		usforms : [],
		initSwordTag : function (b) {
			var a = [];
			if ($defined(b)) {
				a = $(b).getElements("div[sword][sword!='PageInit']")
			} else {
				a = $$("div[sword][sword!='PageInit'][type!='pulltree'][type!='pullbigtree'][lazy!='true']")
			}
			var c = new Date().getTime();
			a.each(function (h) {
				var g = new Date().getTime();
				var l = {};
				try {
					l.caption = "初始化组件【" + h.get("sword") + "】";
					if (h.get("name")) {
						l.caption += "【" + h.get("name") + "】"
					}
					swordWebMonitor.startMonitor("15", l)
				} catch (k) {}

				var m = h.get("name");
				if (!pc.formSubmit.get(m)) {
					this.initWidgetParam(h)
				}
				this.detailed = "";
				var f = h.get("sword");
				if (h.get("userdefine") == "true" && (f == "SwordForm" || f == "SwordForm_plex")) {
					var d = $w(m);
					d.renderForm(h, pc.getInitData(m));
					this.usforms.push(d)
				}
				h.set("isload", "true");
				try {
					l.url = window.location.href;
					l.serverName = swordWebMonitor.getAttrWithUrl(l.url, "sName");
					l.sessionID = swordWebMonitor.getSwordWebMonitorTicket() ? swordWebMonitor.getSwordWebMonitorTicket()["jyls"] : null;
					swordWebMonitor.endMonitor("15", l)
				} catch (k) {}

				this.detailed = this.detailed + h.get("name") + ":" + (new Date().getTime() - g) + ","
			}, this);
			this.detailed = this.detailed + "组件渲染总时间（不包括组件数据加载）：" + (new Date().getTime() - c)
		},
		initUsFormEW : function () {
			(function () {
				this.usforms.each(function (a) {
					a.delayEWfRF()
				})
			}
				.delay(10, this))
		},
		initWidgetParam : function (b) {
			var a = this.widgetFactory.create(b);
			b.pNode = b;
			this.widgets.set(b.get("name"), a);
			a.initParam(b)
		},
		initSwordPageData : function () {
			var a = document.getElementById("SwordPageData");
			if ($defined(a)) {
				var b = a.getAttribute("data");
				if ($chk(b)) {
					pc.initData = JSON.decode(b.replace(/&apos;/g, "'"))
				}
			} else {
				pc.pageInit.initStaticData()
			}
			if (pc.initData) {
				pc.initData.getAttr = pc.getAttrFunc
			}
			_pcSwordClientPageJumpTiming("11")
		},
		getAttrFunc : function (b) {
			for (var a = 0; a < (this.data || []).length; a++) {
				var c = this.data[a];
				if (c.name == b) {
					return c.value
				}
			}
		},
		getData4Name : function (a) {
			return this.data.filter(function (b) {
				return b.name == a
			})[0]
		},
		getData4DataName : function (a) {
			return this.data.filter(function (b) {
				return b.dataname == a || b.dataName == a
			})[0]
		},
		initPageData : function () {
			var a = pc.pageInit.options;
			if ($chk(this.initData)) {
				var b = {
					dataObj : this.initData,
					onSuccess : this.getFunc(a.onSuccess)[0],
					onError : this.getFunc(a.onError)[0],
					onFinish : this.getFunc(a.onFinish)[0],
					onAfterLoadData : this.getFunc(a.onAfterLoadData)[0]
				};
				b.initpage = true;
				b.monitorUrl = window.location.href;
				pc.loadData(b)
			} else {
				pc.pageInit.getInitData({
					onSuccess : this.getFunc(a.onSuccess)[0],
					onError : this.getFunc(a.onError)[0],
					onFinish : this.getFunc(a.onFinish)[0],
					onAfterLoadData : this.getFunc(a.onAfterLoadData)[0]
				})
			}
		},
		swordCacheDataContainer : new Hash(),
		selCacheArray : [],
		initSwordCacheData : function () {
			var c = document.getElementById("SwordCacheData");
			var b = null;
			if ($defined(c)) {
				b = c.getAttribute("queryTree");
				if (b) {
					var a = JSON.decode(b);
					a.each(function (g) {
						var d = g.T;
						var f = d.substring(d.lastIndexOf("_") + 1);
						g.DM = g.DM || f + "_DM";
						g.MC = g.MC || f + "MC";
						g.PDM = g.PDM || "SJ" + f + "_DM";
						g.W = g.W
					});
					pullTreeBefore(a)
				}
				b = c.getAttribute("query");
				if (b) {
					var a = JSON.decode(b);
					a.each(function (g) {
						var d = g.T;
						var f = d.substring(d.lastIndexOf("_") + 1);
						g.DM = g.DM || f + "_DM";
						g.MC = g.MC || f + "MC"
					});
					this.selCacheArray.combine(a);
					selectBefore(a)
				}
			}
		},
		process : function () {
			swordPageMonitor("11");
			var a = window.location.href.indexOf("cxbj=Y");
			if (a != -1) {
				addKzSubmitDiv()
			}
			this.getPageInit();
			this.initSwordPageData();
			this.initSwordCacheData();
			this.firePIOnBefore();
			_pcSwordClientPageJumpTiming("12");
			swordPageMonitor("12");
			this.initSwordTag();
			_pcSwordClientPageJumpTiming("13");
			this.firePIOnDataInit();
			this.initPageData();
			this.regHotKey();
			this.initUsFormEW();
			this.firePIOnAfter();
			if (a != -1) {
				this.disableAllSword()
			}
		},
		disableAllSword : function () {
			$$("div[sword='SwordForm']").each(function (a) {
				var b = a.get("name");
				$w(b).disable()
			});
			$$("div[sword='SwordGrid']").each(function (a) {
				var b = a.get("name");
				(function () {
					$w(b).readonly()
				}).delay(100)
			});
			$$("div[sword='SwordToolBar']").each(function (a) {
				var b = a.get("name");
				if (b) {
					a.getElements("div[type]").each(function (c) {
						var d = c.get("type");
						var f = c.get("name");
						if (f != "tybddy" && d != "custom") {
							$w(b).setDisabled(f)
						}
					})
				}
			});
			$$("div[sword='SwordSubmit']").each(function (a) {
				var b = a.get("name");
				$w(b).disabled()
			})
		},
		firePIOnDataInit : function () {
			pc.pageInit.fireEvent("onDataInit", pc.initData)
		},
		firePIOnAfter : function () {
			pc.pageInit.fireEvent("onAfter", pc.initData);
			pageAfter()
		},
		firePIOnBefore : function () {
			_OverWritePostReq();
			pc.pageInit.fireEvent("onBefore", pc.initData)
		},
		setWidget : function (a, b) {
			this.widgets.set(a, b)
		},
		getWidget : function (a) {
			var b = this.widgets.get(a);
			if (!b) {
				if (this.name == "SwordForm") {
					return this.addInitWidget(a)
				} else {
					if (pc.formSubmit.get(a)) {
						return $w(pc.formSubmit.get(a)).addInitWidget(a)
					}
				}
			}
			return b
		},
		getWidgetsByType : function (a) {
			if (a == "SwordSubmit") {
				pc.formSubmit.filter(function (c, b) {
					$w(pc.formSubmit.get(b)).addInitWidget(b)
				})
			}
			return this.widgets.filter(function (c, b) {
				return $chk(c.$family) ? c.$family.name == a : c.name == a
			}, this)
		},
		getMask : function () {
			if (!$defined(this.mask)) {
				this.mask = new SwordMask()
			}
			return this.mask
		},
		getUploadCommit : function () {
			if (!$defined(this.uploadCommit)) {
				this.uploadCommit = new SwordFileUpload()
			}
			return this.uploadCommit
		},
		getCalendar : function () {
			if (!$defined(this.calendar)) {
				this.calendar = new SwordCalendar()
			}
			return this.calendar
		},
		getSelect : function () {
			if (!$defined(this.select)) {
				this.select = new SwordSelect()
			}
			return this.select
		},
		getValidate : function () {
			if (!$defined(this.validate)) {
				this.validate = new SwordValidator()
			}
			return this.validate
		},
		getPageInit : function () {
			if (!$defined(this.pageInit)) {
				var a = $$("div[sword='PageInit']");
				if (a.length > 1) {
					throw new Error("一个页面只能设置一个初始数据操作！")
				} else {
					this.pageInit = new PageInit();
					if (a.length == 1) {
						this.pageInit.initParam(a[0])
					}
				}
			}
			return this.pageInit
		},
		getDownLoadForm : function () {
			if (!this.downLoadForm) {
				var a = "swordDownLoadIframe";
				this.downLoadForm = new Element("form", {
						name : "swordDownLoadForm",
						method : "post",
						target : a,
						action : "download.sword",
						styles : {
							display : "none"
						}
					}).inject($(document.body));
				new Element("iframe", {
					id : a,
					name : a,
					styles : {
						display : "none"
					}
				}).inject($(document.body));
				this.downLoadForm.postReqInput = new Element("input", {
						name : "postData"
					}).inject(this.downLoadForm)
			}
			return this.downLoadForm
		},
		submit : function () {
			if (arguments.length != 1) {
				return
			}
			var a = arguments[0]["widgets"][0];
			var d = this.getWidget(a);
			if (!d.validate()) {
				return
			}
			var c = {
				ctrl : arguments[0].ctrl || "",
				tid : arguments[0].tid || "",
				data : d.getSubmitData()
			};
			var b = new Request({
					method : "post",
					async : true,
					url : "ajax.sword"
				});
			b.onSuccess = function (f) {
				if (!$chk(f)) {
					return
				}
				var g = JSON.decode(f);
				this.loadData({
					dataObj : g
				})
			}
			.bind(this);
			b.onFailure = function () {
				this.alertError("提交数据出错了。。。pc.submit")
			}
			.bind(this);
			b.send("postData=" + JSON.encode(c))
		},
		create : function (a) {
			return this.widgetFactory.create(a)
		},
		showEx : function (g, b) {
			if (g.errMes != false) {
				if (b.ajaxErrorPage) {
					if (!b.exceptionMes) {
						b.exceptionMes = ""
					}
					var a = JSON.decode(b.ajaxErrorPopupParam.replace(/&apos;/g, "'")) || {
						titleName : "出错了！",
						width : 412,
						height : 450
					};
					var h = window.document;
					var f = h.body;
					if ($type(f) == "element" && $(f).getHeight() == 0 && $(f).getWidth() == 0) {
						h = parent.window.document
					}
					var d = 0;
					if (f && f.scrollTop) {
						d = f.scrollTop
					} else {
						if (h.documentElement && h.documentElement.scrollTop) {
							d = h.documentElement.scrollTop
						}
					}
					a.top = a.top + d;
					var c = window;
					if ($type(f) == "element" && $(f).getHeight() == 0 && $(f).getWidth() == 0) {
						c = parent.window
					}
					a.param = {
						win : c,
						data : b
					};
					swordAlertIframe(jsR.rootPath + "sword?ctrl=SwordPage_redirect&pagename=" + b.ajaxErrorPage, a, null)
				} else {
					this.alertError('<b><font color="red">出错了！</font></b><br><font color="blue" >错误名称</font> : ' + b.exceptionName + '  <br><font color="blue" >错误信息</font> : ' + b.exceptionMes + '<br><font color="blue" >调试信息</font> : ' + b.debugMes)
				}
			}
			pc.getMask().unmask()
		},
		loadData : function (k) {
			MaskDialog.hide();
			var b = k.dataObj;
			if (!$defined(b.getAttr.getAttr)) {
				b.getAttr = this.getAttrFunc
			}
			b.getData = this.getData4Name;
			b.getDataByDataName = this.getData4DataName;
			if (b.exception) {
				var f = k.onError;
				if ($defined(f)) {
					f(b)
				}
				this.showEx(k, b)
			} else {
				var a = b.message;
				if ($defined(a)) {
					swordAlert(a)
				}
				var h = k.onSuccess;
				if ($defined(h)) {
					h(b);
					if (!document.body) {
						return
					}
				}
				if ($defined(k.onFinish)) {
					k.onFinish(b)
				}
				var d = k.url || k.monitorUrl;
				if (d) {
					swordAjaxMonitor("32", d, k)
				}
				if ($chk(k.url)) {
					_pcSwordClientAJAXTiming("32", k.url, k)
				} else {
					_pcSwordClientPageJumpTiming("14")
				}
				var c = k.loaddata;
				if (c == "widget") {
					return
				}
				swordWebMonitor.pageJumpTiming = new Date().getTime();
				var g = b.data;
				if ($chk(g)) {
					g.each(function (l) {
						if (l.type == "") {
							return
						}
						if (l.sword == "SwordSelect") {
							if (k.initpage != true && l.dataName) {
								this.reloadSel(l.dataName, b)
							}
						}
					}, this);
					g.each(function (q) {
						if (q.type == "") {
							return
						}
						if (q.sword == "SwordSelect") {}
						else {
							var m = q.name;
							if (!$chk(m)) {
								return
							}
							var p = {};
							p.caption = "装载组件数据【" + q.sword + "】【" + m + "】";
							swordWebMonitor.startMonitor("16", p);
							var l = pc.getWidget4loaddata(m);
							if (l != null && q.loaddata != "widget") {
								var n = l.options ? l.options.userDefine : "";
								if (k.initpage == true && n == "true") {
									return
								}
								l.initData(q, b)
							}
							p.url = d;
							p.serverName = swordWebMonitor.getAttrWithUrl(p.url, "sName");
							p.sessionID = b.getAttr("sessionID");
							swordWebMonitor.endMonitor("16", p)
						}
					}, this)
				}
			}
			if ($defined(k.onAfterLoadData)) {
				k.onAfterLoadData(b)
			}
		},
		widgets_loaddataOnly : new Hash(),
		setWidget4loaddata : function (a, b) {
			if (!this.widgets_loaddataOnly.get(a)) {
				this.widgets_loaddataOnly.set(a, [])
			}
			this.widgets_loaddataOnly.get(a).include(b)
		},
		getWidget4loaddata : function (a) {
			var b = this.widgets_loaddataOnly.get(a);
			if (b) {
				return $w(b).getWidget(a)
			} else {
				return this.getWidget(a)
			}
		},
		getResData : function (d, c, a) {
			if (!$chk(a)) {
				a = "name"
			}
			if ($chk(!c)) {
				return
			}
			var f = c.data;
			if ($chk(!f)) {
				return
			}
			var b;
			f.each(function (h) {
				var g = h[a];
				if ($chk(!g)) {
					return
				}
				if (d == g) {
					b = h;
					return
				}
			}, this);
			return b
		},
		downLoad : function (d) {
			var a = "download.sword";
			if (d.bindParam) {
				var f = d.tid;
				var b = d.ctrl;
				if ($chk(f)) {
					if (f.indexOf("?") != -1) {
						a = a + f.substr(f.indexOf("?"), f.length - 1)
					}
				} else {
					if ($chk(b)) {
						if (b.indexOf("?") != -1) {
							a = a + b.substr(b.indexOf("?"), b.length - 1)
						}
					}
				}
			}
			a = this.AddBaseCode2URL(a);
			var c = this.getDownLoadForm().set({
					target : "swordDownLoadIframe",
					action : a
				});
			c.postReqInput.set("value", JSON.encode(d));
			c.submit()
		},
		SwordformSubmit : function (d, f) {
			var a = "";
			if ($chk(d.page)) {
				a = d.page
			} else {
				a = "form.sword";
				if (d.bindParam) {
					var g = d.tid;
					var b = d.ctrl;
					if ($chk(g) && g.indexOf("?") != -1) {
						a = a + g.substr(g.indexOf("?"), g.length - 1)
					} else {
						if ($chk(b) && b.indexOf("?") != -1) {
							a = a + b.substr(b.indexOf("?"), b.length - 1)
						}
					}
				}
				a = this.AddBaseCode2URL(a)
			}
			var c = this.getDownLoadForm().set({
					target : f,
					action : a
				});
			c.postReqInput.set("value", JSON.encode(d));
			c.submit()
		},
		jsonpReq : function (a) {
			new Request.JSONP({
				url : a.url,
				data : a.data,
				onComplete : function (b) {
					var c = a.onError;
					var d = a.onSuccess;
					if (!$defined(b.getAttr)) {
						b.getAttr = pc.getAttrFunc
					}
					if (b.exception) {
						if ($defined(c)) {
							c(b)
						}
						pc.showEx(a, b);
						return
					} else {
						if ($defined(d)) {
							d(b)
						}
					}
				}
			}).send()
		},
		postReq : function (d) {
			if ($defined(d.postType) && d.postType.contains("form")) {
				var n = "";
				if (d.postType.contains("form_")) {
					var h = d.postType.split("_");
					h.erase(h[0]);
					n = (h.length > 1) ? h.join("_") : h.join("")
				}
				this.SwordformSubmit(d.req, n);
				if ($defined(d.onFinish)) {
					d.onFinish()
				}
				return
			}
			if (d.postType == "download") {
				this.downLoad(d.req);
				if ($defined(d.onFinish)) {
					d.onFinish()
				}
				return
			}
			var f = true;
			var s = true;
			if ($defined(d.async) && d.async == false) {
				f = false
			}
			if ($defined(d.errMes) && d.errMes == false) {
				s = false
			}
			d.errMes = s;
			var q = d.req;
			var p = d.onSuccess;
			var k = d.onError;
			var c = d.loaddata;
			var a = "ajax.sword?r=" + Math.random();
			if (q.bindParam) {
				var l = q.tid;
				var r = q.ctrl;
				if ($chk(l) && l.indexOf("?") != -1) {
					a = a + "&" + l.substr(l.indexOf("?") + 1, l.length - 1)
				} else {
					if ($chk(r) && r.indexOf("?") != -1) {
						a = a + "&" + r.substr(r.indexOf("?") + 1, r.length - 1)
					}
				}
			}
			a = this.AddBaseCode2URL(a);
			var g = new Request({
					method : "post",
					async : f,
					url : a
				});
			g.onSuccess = function (u) {
				window.top.isOpenAllDsrw = "Y";
				if (!$chk(u)) {
					swordAjaxMonitor("100", a, d);
					return
				}
				if (u.startWith("haveSql")) {
					pc.getMask().unmask();
					swordAlert("解析提交参数时发现SQL关键字，请检查！");
					u = u.replace("haveSql", "")
				}
				var v = d.dataObj = JSON.decode(u);
				if (!$defined(v.getAttr)) {
					v.getAttr = this.getAttrFunc
				}
				var t = v.sso_timeout;
				if ($defined(t)) {
					pc.getMask().unmask();
					pc.fireEvent("onTimeOut", t)
				} else {
					_pcSwordClientAJAXTiming("31", a, d.dataObj.getAttr("sessionID"), q.tid, q.ctrl);
					swordAjaxMonitor("31", a, d);
					d.url = a;
					this.loadData(d);
					_pcSwordClientAJAXTiming("33", a, d.dataObj.getAttr("sessionID"), q.tid, q.ctrl);
					swordAjaxMonitor("100", a, d)
				}
			}
			.bind(this);
			g.onFailure = function () {
				pc.getMask().unmask();
				swordAjaxMonitor("31", a, d);
				swordWebMonitor.clear();
				window.top.isOpenAllDsrw = "N";
				if (g.status == 0) {
					return
				}
				if (g.status == 500) {
					swordAlertDiv(g.xhr.responseText, {
						width : 770,
						height : 500,
						isMax : "false",
						titleName : "系统异常提示"
					})
				} else {
					swordAlertWrong("请求地址：" + a + "请求失败，状态码：" + g.status, {
						width : 380,
						height : 200
					});
					if ($chk(g.xhr.responseText)) {
						if (typeof(console) !== "undefined") {
							if (console.warn) {
								console.warn(g.xhr.responseText)
							}
							if (console.log) {
								console.log(g.xhr.responseText)
							}
						}
						throw (g.xhr.responseText)
					}
				}
			}
			.bind(this);
			var b = "";
			if (d.encodeData && d.encodeData == "true") {
				b = encodeURI(JSON.encode(q))
			} else {
				b = JSON.encode(q);
				b = b.replace(/&/g, "#*^@^*#");
				b = b.replace(/%/g, "%25");
				b = b.replace(/[+]+/g, "%2B")
			}
			try {
				g.send("postData=" + b)
			} catch (m) {
				if (jsR.server()) {
					alert("与服务器连接断开，请尝试重新登录或与管理员联系!")
				}
				pc.getMask().unmask();
				swordWebMonitor.clear();
				throw m
			}
		},
		getReq : function (c) {
			var a = {
				tid : c.tid,
				ctrl : c.ctrl,
				page : c.page,
				data : c.widgets
			};
			var b = [];
			if ($chk(c.data)) {
				var d = c.data.split("&");
				d.each(function (h) {
					var g = h.split("=");
					var f = {
						sword : "attr",
						name : g[0],
						value : g[1]
					};
					b[b.length] = f
				})
			}
			if (!$chk(a.data)) {
				a.data = b
			} else {
				a.data.extend(b)
			}
			return a
		},
		getInitData : function (a) {
			if ($chk(a)) {
				return this.getResData(a, this.initData)
			} else {
				if (!$defined(this.initData)) {
					this.initData = []
				}
				if (!$defined(this.initData.getAttr)) {
					this.initData.getAttr = this.getAttrFunc
				}
				return this.initData
			}
		},
		getInitDataByDataName : function (a) {
			return this.getResData(a, this.initData, "dataName")
		},
		deleteDataByWidgetName : function (a) {
			return this.deleteData(a, this.initData)
		},
		deleteDataByDataName : function (a) {
			return this.deleteData(a, this.initData, "dataName")
		},
		deleteData : function (c, b, a) {
			if (!$chk(a)) {
				a = "name"
			}
			if ($chk(!b)) {
				return false
			}
			var d = b.data;
			if ($chk(!d)) {
				return false
			}
			d.each(function (h, f) {
				var g = h[a];
				if ($chk(!g)) {
					return false
				}
				if (c == g) {
					d[f] = {};
					return true
				}
			}, this)
		},
		alertError : function (a) {
			swordAlertWrong(a, {
				width : 380,
				height : 200
			})
		},
		reloadSel : function (a, c) {
			this.deleteDataByDataName(a);
			var b = this.getResData(a, c, "dataName");
			if (!b) {
				return
			}
			if (!pc.initData) {
				pc.initData = {
					data : []
				}
			}
			this.initData.data[this.initData.data.length] = b
		},
		HotKeyHash : new Hash(),
		regHotKey : function () {
			var b = this.getWidgetsByType("SwordToolBar");
			var d = b.getValues()[0];
			var a = false;
			if (!$chk(d)) {
				if (!$chk(parent.window.pc)) {
					return
				}
				d = parent.window.pc.getWidgetsByType("SwordToolBar").getValues()[0];
				if ($chk(d)) {
					a = true
				}
			}
			if ($chk(d)) {
				var f = d.pNode().getChildren();
				if (f.length != 0) {
					var c = d.options.name;
					f.each(function (k) {
						var h = k.get("name");
						var l = k.get("quickKey");
						if (l != null) {
							if (!this.HotKeyHash.has(l)) {
								this.HotKeyHash.set(l, k);
								var g = k.parentNode.getElements("div[name='container']");
								var m = g.getElements("div[name='" + h + "']")[0]
							}
						}
					}
						.bind(this))
				}
			}
			this.getWidgetsByType("SwordSubmit").getValues().each(function (h, g) {
				var k = h.container;
				if (k.get("show") != "false") {
					var l = k.get("quickKey");
					if (l) {
						if (!this.HotKeyHash.has(l)) {
							this.HotKeyHash.set(l, k)
						}
					}
				}
			}
				.bind(this));
			window.document.addEvent("keydown", function (g) {
				if ($defined(pc.maskState) && pc.maskState) {
					return
				}
				this.HotKeyHash.each(function (w, v) {
					var p = v.indexOf("+");
					var t = v.substring(0, p).toLowerCase();
					var r = v.substring(p + 1, v.length);
					var s = false;
					var n = false;
					var l = false;
					if (t == "ctrl") {
						s = true
					} else {
						if (t == "alt") {
							n = true
						} else {
							if (t == "shift") {
								l = true
							}
						}
					}
					var m = String.fromCharCode(g.code);
					if (m == r && event.ctrlKey == s && event.altKey == n && event.shiftKey == l) {
						if (navigator.userAgent.indexOf("MSIE") > 0) {
							event.keyCode = 0;
							event.returnValue = false;
							if (w.hasClass("submitbutton")) {
								if (w.get("enabled") == "true") {
									var h = $w(w.get("name"));
									if (h.container.get("disabled") != true) {
										h.submit(h.options)
									}
								}
							} else {
								var k = d.options.pNode.getElements("div[name='container']");
								var u = k.getElements("div[name='" + w.get("name") + "']")[0];
								if (u.get("enabled") == "true") {
									if ($defined(w.get("_onClick"))) {
										var q = w.get("_onClick");
										if (a) {
											q = "parent." + q
										}
										if (pc.calendar) {
											pc.calendar.hide()
										}
										if (document.activeElement) {
											document.activeElement.blur()
										}
										this.getFunc(q)[0]()
									} else {
										if ($defined(w.get("onClick"))) {
											var q = w.get("onClick");
											if (a) {
												q = "parent." + q
											}
											this.getFunc(q)[0]()
										}
									}
								}
							}
						}
					}
				}
					.bind(this))
			}
				.bind(this))
		},
		getRandomUUID : function () {
			return Sword.utils.uuid(32)
		},
		getServerName : function (b) {
			if (b.indexOf("http") != -1 && b.indexOf("sword") == -1) {
				return "do"
			}
			var f;
			var d;
			if (b.indexOf("tid") != -1) {
				var g = b.substr(b.indexOf("tid"));
				d = g.substr(g.indexOf("=") + 1)
			} else {
				if (b.indexOf("ctrl") != -1) {
					var c = b.substr(b.indexOf("ctrl"));
					d = c.substr(c.indexOf("=") + 1)
				} else {
					if (b.indexOf("sName") != -1) {
						var a = b.substr(b.indexOf("sName"));
						d = a.substr(a.indexOf("=") + 1)
					}
				}
			}
			if ($chk(d)) {
				if (d.indexOf("&") != -1) {
					f = d.substr(0, d.indexOf("&"))
				} else {
					f = d
				}
			} else {
				f = b
			}
			return f
		},
		AddBaseCode2URL : function (d, h) {
			if (!$chk(d)) {
				return ""
			}
			var g = d;
			if (d.indexOf("?") != -1) {
				g = this.getServerName(d)
			}
			if (d.indexOf("sName") == -1) {
				d = d + ((d.indexOf("?") == -1) ? "?" : "&") + "sName=" + g
			}
			if (d.indexOf("rUUID") == -1) {
				d = d + ((d.indexOf("?") == -1) ? "?" : "&") + "rUUID=" + this.getRandomUUID()
			}
			if (jsR.config.SwordClientTiming && window.top.rzjkkgFlag == "Y") {
				if (d.indexOf("sDate") == -1) {
					d = (d + ((d.indexOf("?") == -1) ? "?" : "&") + "sDate=" + new Date().getTime())
				}
				if (d.indexOf("baseuuid") == -1) {
					var f = window.location.search;
					var a = "baseuuid".length;
					var c = f.indexOf("baseuuid");
					if (c == -1) {
						return d
					}
					c += a + 1;
					var b = f.indexOf("&", c);
					if (b == -1) {
						d = d + ((d.indexOf("?") == -1) ? "?" : "&") + "baseuuid=" + f.substring(c)
					} else {
						d = d + ((d.indexOf("?") == -1) ? "?" : "&") + "baseuuid=" + f.substring(c, b)
					}
				}
			}
			d = swordWebMonitor.changeURL(d);
			return d
		},
		clientTimingObj : {
			clientPageJumpUUID : "",
			clientPageJumpObjs : new Hash(),
			clientAjaxObjs : new Hash
		}
	});
var pageContainer, pc;
function $init_Gt() {
	pc = pageContainer = new PageContainer();
	if (typeof top.initTimeOut == "function") {
		pc.addEvent("onTimeOut", top.initTimeOut)
	}
	pc.getMask();
	pc.process();
	MaskDialog.hide();
	swordPageMonitor("100");
	window.document.addEvent("click", function (a) {
		if (parent.document.body == document.body) {
			return
		}
		if (parent.pc && parent.pc.hidePopDiv) {
			parent.pc.hidePopDiv.apply(parent.pc.hidePopObj)
		}
	}
		.bind(this));
	if (Browser.Engine.trident4) {
		if (document.documentElement.scrollHeight > document.body.ownerDocument.window.document.html.clientHeight) {
			$(document.body).setStyle("width", "99%")
		}
	}
	_pcSwordClientPageJumpTiming("15")
}
function unloadSword() {
	$$("iframe").set("src", "")
}
if (Browser.Engine.trident) {
	window.attachEvent("onload", $init_Gt)
} else {
	window.addEvent("domready", $init_Gt)
}
function _pcSwordClientAJAXTiming(p, b, s, g, q) {
	if (jsR.config.SwordClientTiming && window.top.rzjkkgFlag == "Y") {
		if (!$chk(s)) {
			return
		}
		var h = b.indexOf("sDate");
		if (h == -1) {
			return
		}
		var t = new Date().getTime();
		var k = document.location.href;
		var r;
		var a;
		var n;
		if (b.indexOf("rUUID") != -1) {
			a = b.substr(b.indexOf("rUUID"));
			a = a.substr(a.indexOf("=") + 1);
			if (a.indexOf("&") != -1) {
				a = a.substr(0, a.indexOf("&"))
			}
		}
		if (k.indexOf("baseuuid") != -1) {
			n = k.substr(k.indexOf("baseuuid"));
			n = n.substr(n.indexOf("=") + 1);
			if (n.indexOf("&") != -1) {
				n = n.substr(0, n.indexOf("&"))
			}
		}
		if (a && n) {
			var m = pc.clientTimingObj.clientAjaxObjs.get(a);
			if (!m) {
				m = {};
				pc.clientTimingObj.clientAjaxObjs.set(a, m)
			}
			if (p == "31") {
				var d;
				var f;
				if ($chk(g)) {
					if (g.indexOf("?") != -1) {
						d = g.substr(0, g.indexOf("?"))
					} else {
						d = g
					}
				} else {
					if ($chk(q)) {
						if (q.indexOf("?") != -1) {
							d = q.substr(0, q.indexOf("?"))
						} else {
							d = q
						}
					}
				}
				if (!$chk(d)) {
					return
				}
				if (k.indexOf("gndm") != -1) {
					f = k.substr(k.indexOf("gndm"));
					f = f.substr(f.indexOf("=") + 1);
					if (f.indexOf("&") != -1) {
						f = f.substr(0, f.indexOf("&"))
					}
				}
				var c = b.substr(h);
				c = c.substr(c.indexOf("=") + 1);
				var l;
				if (c.indexOf("&") != -1) {
					l = c.substr(0, c.indexOf("&"))
				} else {
					l = c
				}
				r = t - l;
				m.pageJumpUUID = pc.clientTimingObj.clientPageJumpUUID;
				m.baseuuid = n;
				m.sName = d;
				m.sessionID = s;
				m.gndm = f;
				m.rUUID = a;
				m.begin = l;
				m.stepOneTime = r
			} else {
				r = t - pc.clientAJAXTiming;
				if (p == "32") {
					m.stepTwoTime = r
				} else {
					if (p == "33") {
						m.stepThreeTime = r;
						m.end = t;
						window.top.setClientMonitorValue(m, "")
					}
				}
			}
			pc.clientAJAXTiming = t
		}
	}
}
function _pcSwordClientPageJumpTiming(m) {
	if (jsR.config.SwordClientTiming && window.top.rzjkkgFlag == "Y") {
		if (!$chk(pc.initData)) {
			return
		}
		var n = pc.initData.getAttr("sessionID");
		if (!$chk(n)) {
			return
		}
		var d = document.location.href;
		var f = d.indexOf("sDate");
		if (f == -1) {
			return
		}
		var q = new Date().getTime();
		var p;
		var k;
		var a;
		if (d.indexOf("rUUID") != -1) {
			a = d.substr(d.indexOf("rUUID"));
			a = a.substr(a.indexOf("=") + 1);
			if (a.indexOf("&") != -1) {
				a = a.substr(0, a.indexOf("&"))
			}
		}
		if (d.indexOf("baseuuid") != -1) {
			k = d.substr(d.indexOf("baseuuid"));
			k = k.substr(k.indexOf("=") + 1);
			if (k.indexOf("&") != -1) {
				k = k.substr(0, k.indexOf("&"))
			}
		}
		if (a && k) {
			var l = pc.clientTimingObj.clientPageJumpObjs.get(a);
			if (!l) {
				l = {};
				pc.clientTimingObj.clientPageJumpObjs.set(a, l)
			}
			if (m == "11") {
				var c;
				var a;
				var b = pc.getServerName(d);
				if (!$chk(b)) {
					return
				}
				if (d.indexOf("gndm") != -1) {
					c = d.substr(d.indexOf("gndm"));
					c = c.substr(c.indexOf("=") + 1);
					if (c.indexOf("&") != -1) {
						c = c.substr(0, c.indexOf("&"))
					}
				}
				var h = d.substr(f);
				h = h.substr(h.indexOf("=") + 1);
				var g;
				if (h.indexOf("&") != -1) {
					g = h.substr(0, h.indexOf("&"))
				} else {
					g = h
				}
				p = q - g;
				pc.clientTimingObj.clientPageJumpUUID = a;
				l.baseuuid = k;
				l.sName = b;
				l.sessionID = n;
				l.gndm = c;
				l.rUUID = a;
				l.begin = g;
				l.stepOneTime = p
			} else {
				p = q - pc.pageJumpTiming;
				if (m == "12") {
					l.stepTwoTime = p
				} else {
					if (m == "13") {
						l.stepThreeTime = p
					} else {
						if (m == "14") {
							l.stepFourTime = p
						} else {
							if (m == "15") {
								l.stepFiveTime = p;
								l.end = q;
								pc.clientTimingObj.clientPageJumpUUID = "";
								window.top.setClientMonitorValue(l, pc.detailed)
							}
						}
					}
				}
			}
			pc.pageJumpTiming = q
		}
	}
}
function swordAjaxMonitor(b, a, d) {
	try {
		if (d && d.dataObj && d.req) {
			swordWebMonitor.ajaxMonitor(b, a, d)
		}
	} catch (c) {}

}
function swordPageMonitor(a) {
	try {
		if (a == "11") {
			var c = swordWebMonitor.getSwordWebMonitorTicket();
			if (c) {
				c.uuid = null
			}
		}
		swordWebMonitor.pageJumpMonitor(a)
	} catch (b) {}

}
function SwordWebMonitorDC() {
	this.isWebMonitorEnable = false;
	this.dataSaveMode = "db";
	this.observers = [];
	this.intervalTime = 5000;
	this.webMonitorTicket = undefined;
	this.tid = "SwordWebMonitorService_saveWebLogService";
	this.setSessionCtrl = "SwordWebMonitorCtrl_change";
	this.noRecordList = ["mh011SaveLogService", "MH011TqgxhxxCtrl_getOnlineUserCount", "mh018_query_Yjggxxzx", "SwordWebMonitorService_saveWebLogService", "SwordWebMonitorCtrl_change", "SwordWebMonitorCtrl_isEnable", "SwordPage_redirect", "client_monitor.jsp", "client_detail.jsp"];
	this.logArray = new Array();
	this.tmpTopWin;
	this.pageStartTiming;
	this.isRedirect;
	this.pageLoadFinish;
	this.intervalID = null;
	this.tmpMonitorInfo = {};
	this.ajaxFinish;
	this.ajaxStartTiming;
	this.pageJumpTiming;
	this.childSessions = new Array();
	this.isSynchronizingSession = false;
	this.isSynchronizedSession = false;
	this.currentPageIsMonitor = true
}
var _SwordWebMonitorEnable;
SwordWebMonitorDC.Constants = {
	Data_Save_Mode_DB : "db",
	Data_Save_Mode_Client : "client"
};
SwordWebMonitorDC.prototype.addObserver = function (b) {
	var a = this.getTopWin();
	if (a.swordWebMonitor.observers.indexOf(b) < 0) {
		a.swordWebMonitor.observers.push(b)
	}
};
SwordWebMonitorDC.prototype.removeObserver = function (c) {
	var b = this.getTopWin();
	var a = b.swordWebMonitor.observers.indexOf(c);
	if (a > 0) {
		b.swordWebMonitor.observers.splice(a, 1)
	}
};
SwordWebMonitorDC.prototype.cleanObserver = function (c) {
	var b = this.getTopWin();
	var a = b.swordWebMonitor.observers.length;
	for (var d = 0; d < a; d++) {
		b.swordWebMonitor.observers.splice(d, 1)
	}
};
SwordWebMonitorDC.prototype.init = function () {
	document.addEvent("keydown", function (c) {
		if (c.shift && c.key == "f9") {
			var a = this.getTopWin();
			var b = "swordweb/core/monitor/sword_monitor_enable.html";
			a.open(b, "monitor", "height=500,width=800,top=10,screenX =50,toolbar=no,menubar=no,scrollbars=yes, resizable=yes,location=no, status=no")
		}
	}
		.bind(this))
};
SwordWebMonitorDC.prototype.getMonitorEnable = function () {
	try {
		var a = this.getTopWin();
		return a.isWebMonitorEnable || $chk(this.getSwordWebMonitorTicket()) || false
	} catch (b) {
		return false
	}
};
SwordWebMonitorDC.prototype.synchronizedSession = function (c) {
	var a = this.getTopWin();
	var f = [];
	var b;
	if (a.isWebMonitorEnable) {
		b = {
			sword : "attr",
			name : "__swm",
			value : "1"
		}
	} else {
		b = {
			sword : "attr",
			name : "__swm",
			value : "0"
		}
	}
	f.push(b);
	var d = pc.getReq({
			ctrl : this.setSessionCtrl,
			widgets : f
		});
	this.isSynchronizingSession = true;
	pc.postReq({
		req : d,
		async : true,
		onSuccess : function (g) {},
		onError : function () {}

	});
	this.isSynchronizingSession = false;
	this.isSynchronizedSession = true;
	if (!this.topIsContain()) {
		a.swordWebMonitor.addChildSession(c)
	}
};
SwordWebMonitorDC.prototype.isSynchronizedSession = function () {
	try {
		var a = this.getTopWin();
		var d = a.location.hostname;
		var b = window.location.hostname;
		if (d != b) {
			if (!this.isSynchronizedSession) {
				return false
			}
			if (this.topIsContain()) {
				return true
			}
		}
	} catch (c) {
		return false
	}
	return false
};
SwordWebMonitorDC.prototype.topIsContain = function () {
	var a = this.getTopWin();
	var d = a.swordWebMonitor.childSessions;
	if ($defined(d) && null != d && d.length > 0) {
		for (var b = 0; b < d.length; b++) {
			var c = d[b];
			if (null != c && "" != c && c == window.location.hostname) {
				return true
			}
		}
	}
	return false
};
SwordWebMonitorDC.prototype.changeEnable = function (b) {
	var a = this.getTopWin();
	a.isWebMonitorEnable = b;
	a.swordWebMonitor.cleanChildSession()
};
SwordWebMonitorDC.prototype.addChildSession = function (a) {
	if (null != this.childSessions) {
		this.childSessions.push(a)
	}
};
SwordWebMonitorDC.prototype.cleanChildSession = function () {
	this.childSessions = new Array()
};
SwordWebMonitorDC.prototype.getTopWin = function (c) {
	if (!this.tmpTopWin) {
		var a = c || window;
		if (a.top.window != a) {
			a = a.top.window
		} else {
			if (a.parent == a) {
				try {
					a.opener;
					if (a.opener && a.opener != a) {
						a = this.getTopWin(a.opener)
					}
				} catch (b) {}

			} else {
				while (a.parent) {
					if (a.parent == a) {
						a = a.parent;
						break
					}
				}
			}
		}
		this.tmpTopWin = a
	}
	return this.tmpTopWin
};
SwordWebMonitorDC.prototype.enableChildSession = function (c) {
	var d = [];
	var a = {
		sword : "attr",
		name : "__swm",
		value : "1"
	};
	d.push(a);
	var b = pc.getReq({
			ctrl : this.setSessionCtrl,
			widgets : d
		});
	this.isSynchronizingSession = true;
	pc.postReq({
		req : b,
		async : true,
		onSuccess : function (f) {},
		onError : function () {}

	});
	this.isSynchronizingSession = false;
	this.isSynchronizedSession = true;
	this.getTopWin().swordWebMonitor.addChildSession(c)
};
SwordWebMonitorDC.prototype.disableChildSession = function (c) {
	var d = [];
	var a = {
		sword : "attr",
		name : "__swm",
		value : "0"
	};
	d.push(a);
	var b = pc.getReq({
			ctrl : this.setSessionCtrl,
			widgets : d
		});
	this.isSynchronizingSession = true;
	pc.postReq({
		req : b,
		async : true,
		onSuccess : function (f) {},
		onError : function () {}

	});
	this.isSynchronizingSession = false;
	this.isSynchronizedSession = true;
	this.getTopWin().swordWebMonitor.addChildSession(c)
};
SwordWebMonitorDC.prototype.getDataSaveMode = function () {
	return this.dataSaveMode
};
SwordWebMonitorDC.prototype.enable = function () {
	var b = this.getTopWin();
	if (b.isWebMonitorEnable != true) {
		this.changeEnable(true);
		if (b.swordMonitorIntervalID == null) {
			if (b.swordWebMonitor.getDataSaveMode() == SwordWebMonitorDC.Constants.Data_Save_Mode_DB) {
				var a = "saveLogToDB";
				b.swordMonitorIntervalID = b.setInterval(b.swordWebMonitor[a].bind(b.swordWebMonitor), b.swordWebMonitor.intervalTime)
			}
		}
	}
};
SwordWebMonitorDC.prototype.disable = function () {
	var a = this.getTopWin();
	this.changeEnable(false);
	if (a._SWORD_MONITOR_TICKET) {
		a._SWORD_MONITOR_TICKET = null
	}
	if (a.swordMonitorIntervalID) {
		clearInterval(a.swordMonitorIntervalID);
		a.swordMonitorIntervalID = null
	}
};
SwordWebMonitorDC.prototype.getClientVersionInfo = function () {
	var a = {
		msie : false,
		firefox : false,
		opera : false,
		safari : false,
		chrome : false,
		netscape : false,
		appname : "unknown",
		version : 0
	},
	b = window.navigator.userAgent.toLowerCase();
	if (/(msie|firefox|opera|chrome|netscape)\D+(\d[\d.]*)/.test(b)) {
		a.version = RegExp.$2
	} else {
		if (/version\D+(\d[\d.]*).*safari/.test(b)) {
			a.version = RegExp.$2
		}
	}
	return a.version
};
SwordWebMonitorDC.prototype.saveLogToClient = function (c) {
	if (!this.getMonitorEnable() || !c) {
		return
	}
	try {
		var a = this.observers.length;
		for (var b = 0; b < a; b++) {
			if (this.observers[b]["change"]) {
				this.observers[b]["change"](c)
			}
		}
	} catch (d) {}

};
SwordWebMonitorDC.prototype.saveLogToDB = function () {
	if (!this.getMonitorEnable() || this.logArray == undefined || this.logArray.length == 0) {
		return
	}
	try {
		var d = {
			sword : "SwordGrid",
			name : "logData",
			trs : []
		};
		var h = this.logArray.length;
		for (var b = 0; b < h; b++) {
			var c = {
				tds : {}

			};
			var k = this.logArray[b];
			c.tds.caption = {
				value : k.caption
			};
			c.tds.jllx = {
				value : k.jllx
			};
			c.tds.sDate = {
				value : k.sDate
			};
			c.tds.eDate = {
				value : k.eDate
			};
			c.tds.serverName = {
				value : k.serverName
			};
			c.tds.sessionid = {
				value : k.sessionid
			};
			c.tds.gnDm = {
				value : k.gnDm
			};
			c.tds.nUUID = {
				value : k.nUUID
			};
			c.tds.pUUID = {
				value : k.pUUID
			};
			c.tds.sUUID = {
				value : k.sUUID
			};
			c.tds.xhsj = {
				value : k.xhsj
			};
			c.tds.sid = {
				value : k.sid
			};
			c.tds.request_url = {
				value : k.request_url
			};
			c.tds.postType = {
				value : k.post_type
			};
			c.tds.client_ip = {
				value : k.client_ip
			};
			c.tds.client_cpu_load = {
				value : k.client_cpu_load
			};
			c.tds.is_exception = {
				value : k.is_exception
			};
			c.tds.exception = {
				value : k.exception
			};
			d.trs[b] = c
		}
		var g = {
			sword : "attr",
			name : "ieVersion",
			value : this.getClientVersionInfo()
		};
		var a = [];
		a.push(d);
		a.push(g);
		var l = pc.getReq({
				tid : this.tid,
				widgets : a
			});
		this.logArray.splice(0, h);
		pc.postReq({
			req : l,
			async : true,
			onSuccess : function (m) {},
			onError : function () {
				swordWebMonitor.disable()
			}
		})
	} catch (f) {}

};
SwordWebMonitorDC.prototype.addMonitorInfo = function (a) {
	var b = "";
	if (null == a.serverName || "" == a.serverName) {
		return
	} else {
		b = a.serverName.replace("?__swm=1", "")
	}
	if (this.noRecordList.contains(b)) {
		return
	}
	if (this.getDataSaveMode() == SwordWebMonitorDC.Constants.Data_Save_Mode_DB) {
		this.logArray.push(a);
		this.saveLogToClient(a)
	} else {
		this.saveLogToClient(a)
	}
};
SwordWebMonitorDC.prototype.getSwordWebMonitorTicket = function () {
	if (typeof this.webMonitorTicket == "undefined") {
		if (typeof _SWORD_MONITOR_TICKET == "undefined") {
			this.webMonitorTicket = null
		} else {
			this.webMonitorTicket = _SWORD_MONITOR_TICKET
		}
	}
	return this.webMonitorTicket
};
SwordWebMonitorDC.prototype.getServerName = function (b) {
	if (b.indexOf("http") != -1 && b.indexOf("sword") == -1) {
		return "do"
	}
	var f;
	var d = null;
	if (b.indexOf("tid") != -1) {
		var g = b.substr(b.indexOf("tid"));
		d = g.substr(g.indexOf("=") + 1)
	} else {
		if (b.indexOf("ctrl") != -1) {
			var c = b.substr(b.indexOf("ctrl"));
			d = c.substr(c.indexOf("=") + 1)
		} else {
			if (b.indexOf("sName") != -1) {
				var a = b.substr(b.indexOf("sName"));
				d = a.substr(a.indexOf("=") + 1)
			}
		}
	}
	if ($chk(d)) {
		if (d.indexOf("&") != -1) {
			f = d.substr(0, d.indexOf("&"))
		} else {
			f = d
		}
	} else {
		f = b
	}
	return f
};
SwordWebMonitorDC.prototype.getAttrWithUrl = function (b, c) {
	var d = null;
	if ($chk(b)) {
		var a = b.indexOf(c);
		if (a > -1) {
			d = b.substr(a);
			d = d.substr(d.indexOf("=") + 1);
			if (d.indexOf("&") != -1) {
				d = d.substr(0, d.indexOf("&"))
			}
		}
	}
	return d
};
SwordWebMonitorDC.prototype.synchronizedSessionByWindow = function (c) {
	var a = this.getTopWin();
	var d = a.location.hostname;
	var b = window.location.hostname;
	if (d != b) {}
	else {}

};
SwordWebMonitorDC.prototype.changeURL = function (a) {
	var b = a;
	if (this.isSynchronizingSession) {
		return a
	}
	if (this.getMonitorEnable()) {
		if (a.indexOf("?") != -1) {
			b = this.getServerName(a)
		}
		if (!this.noRecordList.contains(b)) {
			if (a.indexOf("sDate") == -1) {
				a = (a + ((a.indexOf("?") == -1) ? "?" : "&") + "sDate=" + new Date().getTime())
			}
			if (a.indexOf("sName") == -1) {
				a = a + ((a.indexOf("?") == -1) ? "?" : "&") + "sName=" + b
			}
			if (a.indexOf("nUUID") == -1) {
				a = a + ((a.indexOf("?") == -1) ? "?" : "&");
				var c = pc.getRandomUUID();
				a += "nUUID=" + c + "&pUUID=" + c;
				if (a.indexOf("sUUID") == -1) {
					a += "&sUUID=" + pc.getRandomUUID()
				}
			}
			if (a.indexOf("__swm") == -1) {
				a = (a + ((a.indexOf("?") == -1) ? "?" : "&") + "__swm=1")
			}
		}
	} else {
		if (!this.noRecordList.contains(b)) {
			a = (a + ((a.indexOf("?") == -1) ? "?" : "&") + "__swm=0")
		}
	}
	return a
};
SwordWebMonitorDC.prototype.setSwordWebMonitorValue = function (c) {
	try {
		if (this.getMonitorEnable()) {
			var b = this.getTopWin();
			b.swordWebMonitor.addMonitorInfo(c)
		}
	} catch (a) {}

};
SwordWebMonitorDC.prototype.clear = function () {
	if (this.getMonitorEnable()) {
		var a = this.getSwordWebMonitorTicket();
		if (typeof a != "undefined") {
			a.puuid = null;
			a.uuid = null;
			a.suuid = null;
			a.startSign = undefined
		}
	}
};
SwordWebMonitorDC.prototype.getCpuLoadPercentage = function () {
	return 0
};
SwordWebMonitorDC.prototype.getClientIP = function () {
	if (Browser.Engine.trident) {
		try {
			var b = new ActiveXObject("WbemScripting.SWbemLocator");
			var a = b.ConnectServer(".");
			var c = a.ExecQuery("SELECT * FROM Win32_NetworkAdapterConfiguration WHERE IPEnabled =True");
			var f = new Enumerator(c);
			var g = "";
			if (!f.atEnd()) {
				var d = f.item();
				g = d.IPAddress(0)
			}
			return g
		} catch (f) {
			return null
		}
	} else {
		return null
	}
};
SwordWebMonitorDC.prototype.setCurrentPageMonitor = function (a) {
	this.currentPageIsMonitor = a
};
SwordWebMonitorDC.prototype.isCurrentPageMonitor = function () {
	if ($defined(_SwordWebMonitorEnable)) {
		return _SwordWebMonitorEnable
	} else {
		return this.currentPageIsMonitor
	}
};
SwordWebMonitorDC.prototype.isPageLoadFinish = function () {
	return this.pageLoadFinish
};
SwordWebMonitorDC.prototype.pageJumpMonitor = function (d) {
	if (this.getMonitorEnable() && this.isCurrentPageMonitor()) {
		try {
			var w = this.getSwordWebMonitorTicket();
			var f = document.location.href;
			if (!w && this.getDataSaveMode() == SwordWebMonitorDC.Constants.Data_Save_Mode_Client) {
				w = {
					suuid : this.getAttrWithUrl(f, "sUUID")
				}
			}
			var v = "";
			var h = this.getAttrWithUrl(f, "pUUID");
			var k = w.sid;
			var b = w.jyls;
			if (d == "100") {
				this.pageLoadFinish = true
			}
			var p = f.indexOf("sDate");
			if (p == -1) {
				return
			}
			var m = new Date().getTime();
			var u;
			var t = this.getAttrWithUrl(f, "gndm");
			var g = this.getServerName(f);
			if (!$chk(g)) {
				return
			}
			var c = this.getAttrWithUrl(f, "sDate");
			if (d == "11") {
				u = m - c;
				this.pageStartTiming = c
			} else {
				c = this.pageJumpTiming;
				u = m - c
			}
			var q = false;
			var a = w.suuid;
			if (d == "100") {
				c = this.pageStartTiming;
				u = m - c;
				q = true
			}
			this.pageJumpTiming = m;
			var l = this.getClientIP();
			var r = this.getCpuLoadPercentage();
			var n = {
				jllx : d,
				sDate : c,
				eDate : m,
				caption : this.getStateName(d),
				serverName : g,
				sid : k,
				sessionid : b,
				gnDm : t,
				nUUID : v,
				pUUID : h,
				sUUID : a,
				xhsj : u,
				request_url : f,
				post_type : "DOM",
				client_ip : l,
				client_cpu_load : r
			};
			this.setSwordWebMonitorValue(n);
			if (q === true) {
				w.startSign = undefined;
				this.clear(w)
			}
		} catch (s) {}

	}
};
SwordWebMonitorDC.prototype.ajaxMonitor = function (d, k, m) {
	var s = m.dataObj.getAttr("sessionID");
	var w = m.req["tid"];
	var b = m.req["ctrl"];
	if (this.getMonitorEnable() && this.isCurrentPageMonitor()) {
		var h = "";
		var t = k.indexOf("sDate");
		if (t == -1) {
			return
		}
		var q = new Date().getTime();
		var x;
		var f = null;
		var v = this.getAttrWithUrl(k, "gndm");
		if ($chk(w)) {
			if (w.indexOf("?") != -1) {
				f = w.substr(0, w.indexOf("?"))
			} else {
				f = w
			}
		} else {
			if ($chk(b)) {
				if (b.indexOf("?") != -1) {
					f = b.substr(0, b.indexOf("?"))
				} else {
					f = b
				}
			}
		}
		if (!$chk(f)) {
			return
		}
		var c = this.getAttrWithUrl(k, "sDate");
		this.ajaxStartTiming = c;
		var y = this.getAttrWithUrl(k, "nUUID");
		var g = this.getAttrWithUrl(k, "pUUID");
		var a = this.getAttrWithUrl(k, "sUUID");
		if (d == "31") {
			x = q - c
		} else {
			c = this.clientAJAXTiming;
			x = q - c
		}
		this.clientAJAXTiming = q;
		var n = this.getClientIP();
		var u = this.getCpuLoadPercentage();
		if (d == "100") {
			var l = m.dataObj.exception;
			var p = m.dataObj.debugMes;
			if ((this.pageLoadFinish && !this.isRedirect) || (!this.pageLoadFinish && !this.isRedirect)) {
				var r = {
					jllx : "100",
					sDate : this.ajaxStartTiming,
					eDate : q,
					caption : this.getStateName(d),
					serverName : f,
					sid : null,
					sessionid : s,
					gnDm : v,
					nUUID : y,
					pUUID : g,
					sUUID : a,
					xhsj : (q - this.ajaxStartTiming),
					request_url : k,
					post_type : "AJAX_POST",
					client_ip : n,
					is_exception : l,
					exception : p
				};
				this.setSwordWebMonitorValue(r)
			}
			return
		}
		var r = {
			jllx : d,
			sDate : c,
			eDate : q,
			caption : this.getStateName(d),
			serverName : f,
			sid : h,
			sessionid : s,
			gnDm : v,
			nUUID : y,
			pUUID : g,
			sUUID : a,
			xhsj : x,
			request_url : k,
			post_type : "AJAX_POST",
			client_ip : n,
			client_cpu_load : u
		};
		if (d == "31" && this.getDataSaveMode() == SwordWebMonitorDC.Constants.Data_Save_Mode_Client) {
			r.request_params = JSON.encode(m.req);
			r.response_params = JSON.encode(m.dataObj)
		}
		this.setSwordWebMonitorValue(r)
	}
};
SwordWebMonitorDC.prototype.getStateName = function (b) {
	var a = null;
	if (b == "11") {
		a = "网络传输"
	} else {
		if (b == "12") {
			a = "页面初始化事件"
		} else {
			if (b == "31") {
				a = "Ajax请求耗时"
			} else {
				if (b == "32") {
					a = "Ajax回调方法执行"
				} else {
					if (b == "100") {
						a = "总耗时"
					}
				}
			}
		}
	}
	return a
};
SwordWebMonitorDC.prototype.startMonitor = function (d, c) {
	try {
		if (this.getMonitorEnable()) {
			var a = new Date().getTime();
			this.tmpMonitorInfo[d] = a
		}
	} catch (b) {}

};
SwordWebMonitorDC.prototype.endMonitor = function (a, g) {
	try {
		if (this.getMonitorEnable()) {
			var c = this.tmpMonitorInfo[a];
			if (null != c && "" != c) {
				var h = new Date().getTime();
				var b = g.url;
				var f = this.getAttrWithUrl(b, "pUUID");
				var l = this.getAttrWithUrl(b, "sUUID");
				var d = {
					jllx : a,
					caption : g.caption,
					serverName : g.serverName,
					sDate : c,
					eDate : h,
					sid : "",
					sessionid : g.sessionID || "",
					pUUID : f,
					sUUID : l,
					xhsj : (h - c),
					post_type : "DOM"
				};
				this.setSwordWebMonitorValue(d);
				delete this.tmpMonitorInfo[a]
			}
		}
	} catch (k) {}

};
var swordWebMonitor = new SwordWebMonitorDC();
swordWebMonitor.init();
var $SwordShielding = (function () {
	function shielding() {
		if ($SwordLoader.isIE) {
			document.onkeydown = function () {
				return SwordShielding(event, $(event.srcElement))
			}
		} else {
			document.onkeypress = function (e) {
				return SwordShielding(e, $(e.target))
			}
		}
	}
	function SwordShielding(e, el) {
		var s = {
			backspace : true,
			f5 : false,
			contextMenu : false
		};
		var f5 = true;
		var bp = true;
		var cm = true;
		if (s.f5) {
			f5 = shieldingF5(e)
		}
		if (s.backspace) {
			bp = shieldingBackSpace(e, el)
		}
		if (s.contextMenu) {
			cm = shieldingRightClick(e)
		}
		return f5 && bp && cm
	}
	function shieldingF5(e) {
		with (e) {
			if (keyCode == 116 || (ctrlKey && keyCode == 82)) {
				e.keyCode = 0;
				e.cancelBubble = true;
				return false
			}
		}
		return true
	}
	function shieldingBackSpace(e, el) {
		var type = el.type;
		var code = e.keyCode;
		if (code != 8) {
			return true
		}
		if (el.getAttribute("readonly")) {
			return false
		}
		return (code != 8 || type == "button" || (type == "text" && !["calendar", "select"].contains(el.get("widget"))) || (type == "password") || (type == "textarea") || (type == "submit"))
	}
	function shieldingRightClick(e) {
		if (window.Event) {
			if (e.which == 2 || e.which == 3) {
				return false
			}
		} else {
			if (e.button == 2 || e.button == 3) {
				e.cancelBubble = true;
				e.returnValue = false;
				return false
			}
		}
		return true
	}
	return {
		shielding : shielding
	}
})();
$SwordShielding.shielding();
var _swordDefaultAttrs = {
	value : "value",
	dataformat : "dataformat",
	readonly : "readonly",
	disabled : "disabled",
	maxlength : "maxlength",
	onclick : "onclick",
	ondblclick : "ondblclick",
	onchange : "onchange",
	onmouseover : "onmouseover",
	onmouseout : "onmouseout",
	onblur : "onblur",
	onkeydown : "onkeydown",
	onkeyup : "onkeyup",
	onfocus : "onfocus"
};
var ConvertHtml = new Class({
		build : function (d, c, b) {
			var a = this.init(d, c, b);
			d.set(a)
		},
		init : function (k, h, c) {
			var b = {};
			if (h) {
				if (Browser.Engine.trident) {
					["onclick", "ondblclick", "onchange", "onmouseover", "onmouseout", "onblur", "onkeydown", "onkeyup", "onfocus"].each(function (l) {
						if (h.get(l)) {
							this.convertEvent(k, {
								name : l,
								value : h.get(l)
							}, c)
						}
					}
						.bind(this));
					if (h.getAttribute("readonly") == undefined) {
						return {
							dataformat : k.get("dataformat") || h.get("dataformat"),
							value : k.get("value") || h.get("value"),
							disabled : k.disabled || h.disabled,
							maxlength : h.get("maxLength") || 1000000
						}
					} else {
						return {
							dataformat : k.get("dataformat") || h.get("dataformat"),
							value : k.get("value") || h.get("value"),
							readonly : true,
							disabled : k.disabled || h.disabled,
							maxlength : h.get("maxLength") || 1000000
						}
					}
				} else {
					var a = h.attributes;
					if (!a) {
						return b
					}
					for (var g = 0; g < a.length; g++) {
						if (a[g].specified) {
							var f = this.convertAttr(k, a[g], c);
							if (f.type == "1") {
								this.convertEvent(k, a[g], c)
							} else {
								if (f.type == "0") {
									var d = a[g].name;
									b[d] = f.value
								}
							}
						}
					}
				}
			}
			return b
		},
		convertAttr : function (f, a, c) {
			var d = {};
			var g = a.name;
			var b = _swordDefaultAttrs[g.toLowerCase()];
			if (b) {
				if ((/^on[a-zA-Z]/).test(a.name)) {
					d.type = "1"
				} else {
					d.type = "0";
					d.value = a.value ? a.value : true
				}
			} else {
				d.type = "-1"
			}
			return d
		},
		convertEvent : function (f, a, c) {
			var b = sword_getFunc(a.value);
			for (var d = 0; d < b.length; d++) {
				if (c && c[a.name]) {
					f.addEvent(a.name.toLowerCase().substring(2), b[d].pass(c[a.name]))
				} else {
					f.addEvent(a.name.toLowerCase().substring(2), b[d])
				}
			}
		}
	});
var _convertHTML = new ConvertHtml();
function sword_convertHTML(c, b, a) {
	_convertHTML.build(c, b, a)
}
var _SwordDF = SwordDataFormat = {
	MONTH_NAMES : new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
	DAY_NAMES : new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"),
	toChi : function (a) {
		return a.replace(/0/g, "零").replace(/1/g, "一").replace(/2/g, "二").replace(/3/g, "三").replace(/4/g, "四").replace(/5/g, "五").replace(/6/g, "六").replace(/7/g, "七").replace(/8/g, "八").replace(/9/g, "九")
	},
	toChiNum : function (c) {
		var b = c / 1;
		var a = b + "";
		if (b > 9 && b < 20) {
			a = "十" + a.charAt(1)
		} else {
			if (b > 19) {
				a = a.charAt(0) + "十" + a.charAt(1)
			}
		}
		a = this.toChi(a);
		if (b != 0) {
			a = a.replace(/零/g, "")
		}
		return a
	},
	toNum : function (a) {
		return a.replace(/零/g, "0").replace(/一/g, "1").replace(/二/g, "2").replace(/三/g, "3").replace(/四/g, "4").replace(/五/g, "5").replace(/六/g, "6").replace(/七/g, "7").replace(/八/g, "8").replace(/九/g, "9")
	},
	toNum2 : function (b) {
		var a = b.length;
		if (b == "十") {
			return 10
		}
		if (a == 1 && "十" != b) {
			return this.toNum(b)
		}
		if (a == 2 && "十" != b.charAt(a - 1)) {
			return this.toNum(b.replace(/十/g, "一"))
		}
		if (a == 2 && "十" == b.charAt(a - 1)) {
			return this.toNum(b.replace(/十/g, "零"))
		}
		if (a == 3) {
			return this.toNum(b.replace(/十/g, ""))
		}
	},
	LZ : function (a) {
		return (a < 0 || a > 9 ? "" : "0") + a
	},
	isDate : function (c, b) {
		var a = this.formatStringToDate(c, b);
		if (a == 0) {
			return false
		}
		return true
	},
	compareDates : function (f, g, c, d) {
		var b = this.formatStringToDate(f, g);
		var a = this.formatStringToDate(c, d);
		if (b == 0 || a == 0) {
			alert("format格式转换有问题");
			return
		} else {
			if (b > a) {
				return true
			}
		}
		return false
	},
	formatDateToString : function (O, J) {
		J = J + "";
		var q = "";
		var A = 0;
		var N = "";
		var g = "";
		var p = O.getFullYear() + "";
		var l = O.getMonth() + 1;
		var L = O.getDate();
		var t = O.getDay();
		var r = O.getHours();
		var C = O.getMinutes();
		var v = O.getSeconds();
		var x,
		z,
		b,
		w,
		P,
		f,
		I,
		G,
		D,
		u,
		R,
		r,
		Q,
		n,
		a,
		F;
		var B = new Object();
		B.y = "" + p;
		B.yyyy = p;
		B.yy = p.substring(2, 4);
		B.M = l;
		B.MM = this.LZ(l);
		B.MMM = this.MONTH_NAMES[l - 1];
		B.NNN = this.MONTH_NAMES[l + 11];
		B.d = L;
		B.dd = this.LZ(L);
		B.E = this.DAY_NAMES[t + 7];
		B.EE = this.DAY_NAMES[t];
		B.H = r;
		B.HH = this.LZ(r);
		if (r == 0) {
			B.h = 12
		} else {
			if (r > 12) {
				B.h = r - 12
			} else {
				B.h = r
			}
		}
		B.hh = this.LZ(B.h);
		if (r > 11) {
			B.K = r - 12
		} else {
			B.K = r
		}
		B.k = r + 1;
		B.KK = this.LZ(B.K);
		B.kk = this.LZ(B.k);
		if (r > 11) {
			B.a = "PM"
		} else {
			B.a = "AM"
		}
		B.m = C;
		B.mm = this.LZ(C);
		B.s = v;
		B.ss = this.LZ(v);
		B.NNNN = this.toChi(B.yyyy);
		B.NN = this.toChi(B.yy);
		B.N = this.toChi(B.y);
		B.Y = this.toChiNum(l);
		B.R = this.toChiNum(L);
		B.S = this.toChiNum(B.h);
		B.T = this.toChiNum(B.H);
		B.U = this.toChiNum(B.K);
		B.V = this.toChiNum(B.k);
		B.F = this.toChiNum(C);
		B.W = this.toChiNum(v);
		while (A < J.length) {
			N = J.charAt(A);
			g = "";
			while ((J.charAt(A) == N) && (A < J.length)) {
				g += J.charAt(A++)
			}
			if (B[g] != null) {
				q = q + B[g]
			} else {
				q = q + g
			}
		}
		return q
	},
	_isInteger : function (c) {
		var b = "1234567890";
		for (var a = 0; a < c.length; a++) {
			if (b.indexOf(c.charAt(a)) == -1) {
				return false
			}
		}
		return true
	},
	_isInteger_chi : function (c) {
		var b = "零一二三四五六七八九十";
		for (var a = 0; a < c.length; a++) {
			if (b.indexOf(c.charAt(a)) == -1) {
				return false
			}
		}
		return true
	},
	_getInt : function (g, d, f, c) {
		for (var a = c; a >= f; a--) {
			var b = g.substring(d, d + a);
			if (b.length < f) {
				return null
			}
			if (this._isInteger(b)) {
				return b
			}
		}
		return null
	},
	_getInt2 : function (g, d, f, c) {
		for (var a = c; a >= f; a--) {
			var b = g.substring(d, d + a);
			if (b.length < f) {
				return null
			}
			if (b) {
				return b
			}
		}
		return null
	},
	_getInt_month : function (d, c) {
		for (var a = 2; a >= 1; a--) {
			var b = d.substring(c, c + a);
			if (b.length < 1) {
				return null
			}
			if (b.length == 1) {
				return b
			}
			if (["十一", "十二"].contains(b)) {
				return b
			}
		}
		return null
	},
	_getInt_date : function (d, c) {
		for (var a = 3; a >= 1; a--) {
			var b = d.substring(c, c + a);
			if (b.length < 1) {
				return null
			}
			if (b.length == 1) {
				return b
			}
			if (this._isInteger_chi(b)) {
				return b
			}
		}
		return null
	},
	formatStringToDate : function (B, s) {
		B = B + "";
		s = s + "";
		var A = 0;
		var n = 0;
		var u = "";
		var g = "";
		var z = "";
		var k,
		h;
		var b = new Date();
		var l = b.getFullYear();
		var w = b.getMonth() + 1;
		var v = 1;
		var d = b.getHours();
		var t = b.getMinutes();
		var q = b.getSeconds();
		var m = "";
		while (n < s.length) {
			u = s.charAt(n);
			g = "";
			while ((s.charAt(n) == u) && (n < s.length)) {
				g += s.charAt(n++)
			}
			if (g == "NNNN" || g == "NN" || g == "N") {
				if (g == "NNNN") {
					k = 4;
					h = 4
				}
				if (g == "NN") {
					k = 2;
					h = 2
				}
				if (g == "N") {
					k = 2;
					h = 4
				}
				l = this._getInt2(B, A, k, h);
				if (l == null) {
					return 0
				}
				l = this.toNum(l);
				A += l.length;
				if (l.length == 2) {
					if (l > 70) {
						l = 1900 + (l - 0)
					} else {
						l = 2000 + (l - 0)
					}
				}
			} else {
				if (g == "Y") {
					w = this._getInt_month(B, A);
					A += w.length;
					w = this.toNum2(w);
					if (w == null || (w < 1) || (w > 12)) {
						return 0
					}
				} else {
					if (g == "R") {
						v = this._getInt_date(B, A);
						A += v.length;
						v = this.toNum2(v);
						if (v == null || (v < 1) || (v > 31)) {
							return 0
						}
					} else {
						if (g == "S") {
							d = this._getInt_date(B, A);
							A += d.length;
							d = this.toNum2(d);
							if (d == null || (d < 1) || (d > 12)) {
								return 0
							}
						} else {
							if (g == "T") {
								d = this._getInt_date(B, A);
								A += d.length;
								d = this.toNum2(d);
								if (d == null || (d < 0) || (d > 23)) {
									return 0
								}
							} else {
								if (g == "U") {
									d = this._getInt_date(B, A);
									A += d.length;
									d = this.toNum2(d);
									if (d == null || (d < 0) || (d > 11)) {
										return 0
									}
								} else {
									if (g == "V") {
										d = this._getInt_date(B, A);
										A += d.length;
										d = this.toNum2(d);
										d--;
										if (d == null || (d < 1) || (d > 24)) {
											return 0
										}
									} else {
										if (g == "F") {
											t = this._getInt_date(B, A);
											A += t.length;
											t = this.toNum2(t);
											if (t == null || (t < 0) || (t > 59)) {
												return 0
											}
										} else {
											if (g == "W") {
												q = this._getInt_date(B, A);
												A += q.length;
												q = this.toNum2(q);
												if (q == null || (q < 0) || (q > 59)) {
													return 0
												}
											} else {
												if (g == "yyyy" || g == "yy" || g == "y") {
													if (g == "yyyy") {
														k = 4;
														h = 4
													}
													if (g == "yy") {
														k = 2;
														h = 2
													}
													if (g == "y") {
														k = 2;
														h = 4
													}
													l = this._getInt(B, A, k, h);
													if (l == null) {
														return 0
													}
													A += l.length;
													if (l.length == 2) {
														if (l > 70) {
															l = 1900 + (l - 0)
														} else {
															l = 2000 + (l - 0)
														}
													}
												} else {
													if (g == "MMM" || g == "NNN") {
														w = 0;
														for (var r = 0; r < this.MONTH_NAMES.length; r++) {
															var f = this.MONTH_NAMES[r];
															if (B.substring(A, A + f.length).toLowerCase() == f.toLowerCase()) {
																if (g == "MMM" || (g == "NNN" && r > 11)) {
																	w = r + 1;
																	if (w > 12) {
																		w -= 12
																	}
																	A += f.length;
																	break
																}
															}
														}
														if ((w < 1) || (w > 12)) {
															return 0
														}
													} else {
														if (g == "EE" || g == "E") {
															for (var r = 0; r < this.DAY_NAMES.length; r++) {
																var p = this.DAY_NAMES[r];
																if (B.substring(A, A + p.length).toLowerCase() == p.toLowerCase()) {
																	A += p.length;
																	break
																}
															}
														} else {
															if (g == "MM" || g == "M") {
																w = this._getInt(B, A, g.length, 2);
																if (w == null || (w < 1) || (w > 12)) {
																	return 0
																}
																A += w.length
															} else {
																if (g == "dd" || g == "d") {
																	v = this._getInt(B, A, g.length, 2);
																	if (v == null || (v < 1) || (v > 31)) {
																		return 0
																	}
																	A += v.length
																} else {
																	if (g == "hh" || g == "h") {
																		d = this._getInt(B, A, g.length, 2);
																		if (d == null || (d < 1) || (d > 12)) {
																			return 0
																		}
																		A += d.length
																	} else {
																		if (g == "HH" || g == "H") {
																			d = this._getInt(B, A, g.length, 2);
																			if (d == null || (d < 0) || (d > 23)) {
																				return 0
																			}
																			A += d.length
																		} else {
																			if (g == "KK" || g == "K") {
																				d = this._getInt(B, A, g.length, 2);
																				if (d == null || (d < 0) || (d > 11)) {
																					return 0
																				}
																				A += d.length
																			} else {
																				if (g == "kk" || g == "k") {
																					d = this._getInt(B, A, g.length, 2);
																					if (d == null || (d < 1) || (d > 24)) {
																						return 0
																					}
																					A += d.length;
																					d--
																				} else {
																					if (g == "mm" || g == "m") {
																						t = this._getInt(B, A, g.length, 2);
																						if (t == null || (t < 0) || (t > 59)) {
																							return 0
																						}
																						A += t.length
																					} else {
																						if (g == "ss" || g == "s") {
																							q = this._getInt(B, A, g.length, 2);
																							if (q == null || (q < 0) || (q > 59)) {
																								return 0
																							}
																							A += q.length
																						} else {
																							if (g == "a") {
																								if (B.substring(A, A + 2).toLowerCase() == "am") {
																									m = "AM"
																								} else {
																									if (B.substring(A, A + 2).toLowerCase() == "pm") {
																										m = "PM"
																									} else {
																										return 0
																									}
																								}
																								A += 2
																							} else {
																								if (B.substring(A, A + g.length) != g) {
																									return 0
																								} else {
																									A += g.length
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if (w == 2) {
			if (((l % 4 == 0) && (l % 100 != 0)) || (l % 400 == 0)) {
				if (v > 29) {
					return 0
				}
			} else {
				if (v > 28) {
					return 0
				}
			}
		}
		if ((w == 4) || (w == 6) || (w == 9) || (w == 11)) {
			if (v > 30) {
				return 0
			}
		}
		if (d < 12 && m == "PM") {
			d = d - 0 + 12
		} else {
			if (d > 11 && m == "AM") {
				d -= 12
			}
		}
		var a = new Date(l, w - 1, v, d, t, q);
		return a
	},
	formatStringToString : function (d, a, f) {
		var b = this.formatStringToDate(d, a);
		if (b == 0) {
			return d
		}
		var c = this.formatDateToString(b, f);
		if (c == 0) {
			return d
		}
		return c
	}
};
if (!Sword) {
	var Sword = {}

}
Sword.utils = {
	setWidth : function (d, f, c, g, b) {
		if (b === true) {
			g.addClass("swordform_item_input_plusImg")
		}
		var a;
		if ($defined(d)) {
			a = d
		} else {
			if (f && f.FiledWidth) {
				a = f.FiledWidth
			} else {
				return
			}
		}
		if (("" + a).contains("%")) {
			c.setStyle("width", a);
			g.setStyle("width", "100%")
		} else {
			c.setStyle("width", "auto");
			if (b === true) {
				a = ("" + a).toInt() - 17 + "px"
			}
			g.setStyle("width", a)
		}
	},
	parseCss : function (a, c) {
		var b;
		if (a) {
			if (c) {
				if (Browser.Engine.trident4 && a.indexOf("text-align:right") != -1 && a.indexOf("padding-right") == -1) {
					a = a + " ;padding-right:2px;"
				}
				c.set("style", a)
			}
			if (a.indexOf("width") != -1) {
				b = new Element("div").set("html", "<div style='" + a + "'></div>").getFirst().getStyle("width")
			}
		}
		return b
	},
	createTable : function (g, b, c) {
		var d = $(document.createElement("table"));
		d.set("cellpadding", 0);
		d.set("cellspacing", 0);
		d.addClass("swordform_field_wrap");
		var a = document.createElement("tbody");
		var f = document.createElement("tr");
		g.boxtd = $(document.createElement("td"));
		g.boxtd.name = "boxtd";
		g.boxtd.addClass("boxtd");
		f.appendChild(g.boxtd);
		if (b === true) {
			g.imgtd = $(document.createElement("td"));
			g.imgtd.name = "imgtd";
			g.imgtd.width = "17px";
			if (Browser.Engine.version <= 5) {
				g.imgtd.set("html", '<div style="width:17px;display:none;"></div>')
			} else {
				g.imgtd.set("html", '<div style="width:17px;visibility:hidden;"></div>')
			}
			f.appendChild(g.imgtd)
		}
		a.appendChild(f);
		d.appendChild(a);
		if (c === true) {
			d.inject(g.options.pNode)
		}
		return d
	},
	createElAfter : function (a, b) {
		var c = new Element(a.get("tag") == "tr" ? "td" : "div", {
				"class" : "swordform_field_valiwrap",
				styles : {
					display : "none"
				}
			}).inject(a);
		if (b) {
			b.valWrapDiv = c
		}
		new Element("div", {
			"class" : "swordform_fieldimg_nomal",
			styles : {
				"float" : "left"
			}
		}).inject(c);
		new Element("div", {
			name : "msgText",
			styles : {
				margin : "0 2px 0 17px",
				"text-align" : "left"
			}
		}).inject(c);
		return c
	},
	getRootPath : function () {
		var a = document.location;
		if ("file:" == a.protocol) {
			var c = a.toString();
			return c.replace(c.split("/").reverse()[0], "")
		}
		var b = a.pathname;
		if (b.substring(0, 1) != "/") {
			b = "/" + b
		}
		b = b.split("/");
		return a.protocol + "//" + a.host + "/" + b[1] + "/"
	},
	uuid : function (a, d) {
		var g = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
		var c = [],
		b;
		d = d || g.length;
		if (a) {
			for (b = 0; b < a; b++) {
				c[b] = g[0 | Math.random() * d]
			}
		} else {
			var f;
			c[8] = c[13] = c[18] = c[23] = "-";
			c[14] = "4";
			for (b = 0; b < 36; b++) {
				if (!c[b]) {
					f = 0 | Math.random() * 16;
					c[b] = g[(b == 19) ? (f & 3) | 8 : f]
				}
			}
		}
		return c.join("")
	},
	valPx : function (a) {
		a = ("" + a).replace(/\s+/g, "");
		if ((a).contains("%") || a == "" || a == null || !a.toInt()) {
			a = null
		} else {
			a = (a).contains("px") ? a : a + "px"
		}
		return a
	}
};
Sword.utils.btn = {
	style : {
		submitBtn : "submit_btn",
		disabledBtn : "disabled_btn",
		mouseMoveBtn : "mousemove_btn",
		submit_btn_IE67 : "submit_btn_IE67"
	},
	init : function (b, a) {
		if (b.disabled) {
			b.addClass(Sword.utils.btn.style.disabledBtn)
		} else {
			b.addClass(Sword.utils.btn.style.submitBtn);
			b.addClass(Sword.utils.btn.style.submit_btn_IE67);
			Sword.utils.btn.addBtnEvents(b, a)
		}
		return b
	},
	disabled : function (a) {
		a.removeClass(Sword.utils.btn.style.submitBtn);
		a.addClass(Sword.utils.btn.style.disabledBtn);
		return a
	},
	enabled : function (a) {
		a.removeClass(Sword.utils.btn.style.disabledBtn);
		a.addClass(Sword.utils.btn.style.submitBtn);
		return a
	},
	addBtnEvents : function (c, a) {
		var b = c.getElement("span");
		if ($chk(b)) {
			c = b
		}
		c.addEvent("mouseover", Sword.utils.btn.mousemove.bindWithEvent());
		c.addEvent("mouseout", Sword.utils.btn.mouseout.bindWithEvent())
	},
	mousemove : function (b) {
		var c = b.target;
		if (c) {
			var a = c.get("tag");
			if (a == "u" || a == "span") {
				c = c.getParent("div")
			}
			c.removeClass(Sword.utils.btn.style.submitBtn);
			c.addClass(Sword.utils.btn.style.mouseMoveBtn);
			if (Browser.Engine.trident4 || Browser.Engine.trident5) {
				c.setStyle("display", "inline")
			}
		}
	},
	mouseout : function (b) {
		var c = b.target;
		if (c) {
			var a = c.get("tag");
			if (a == "u" || a == "span") {
				c = c.getParent("div")
			}
			c.removeClass(Sword.utils.btn.style.mouseMoveBtn);
			c.addClass(Sword.utils.btn.style.submitBtn)
		}
	}
};
Sword.utils.Iterator = new Class({
		$family : {
			name : "Sword.utils.Iterator"
		},
		node : $empty,
		iterator : $empty,
		lastSign : true,
		dataDetph : 0,
		domainData : [],
		initialize : function (a, b) {
			this.iterator(a);
			if ($defined(b)) {
				this.dataDepth = b
			}
		},
		hasChildNodes : $lambda(false),
		isLast : $lambda(true),
		getAttributes : $empty,
		getAttribute : $empty,
		getChildNodes : $empty,
		setParentSign : function (a, b) {
			Sword.utils.Iterator.code = a;
			Sword.utils.Iterator.pcode = b
		},
		getAllChildNodes : $empty,
		getNodes : $empty
	});
Sword.utils.JSONIterator = new Class({
		Extends : Sword.utils.Iterator,
		current : null,
		iterator : function (a) {
			this.node = a
		},
		setLastSign : function (a) {
			this.lastSign = a
		},
		hasChildNodes : function () {
			if (this.dataDepth == 0) {
				return this.domainData.length > 0
			} else {
				return this.domainData.some(function (a) {
					return a[Sword.utils.Iterator.pcode] == this.node[Sword.utils.Iterator.code]
				}, this)
			}
		},
		setDomainData : function (a) {
			this.domainData = a
		},
		getChildNodes : function () {
			var f = new Array();
			if (this.dataDepth == 0) {
				this.dataDepth++;
				if ($defined(this.domainData) && this.domainData.length > 0) {
					for (var b = 0; b < this.domainData.length; b++) {
						var d = true;
						for (var a = 0; a < this.domainData.length; a++) {
							if (this.domainData[b][Sword.utils.Iterator.pcode] == this.domainData[a][Sword.utils.Iterator.code]) {
								d = false;
								break
							}
						}
						if (d) {
							var c = new Sword.utils.JSONIterator(this.domainData[b], this.dataDepth);
							c.setLastSign(false);
							f.push(c);
							c.setDomainData(this.domainData)
						}
					}
				}
			} else {
				if ($defined(this.domainData) && this.domainData.length > 0) {
					for (var b = 0; b < this.domainData.length; b++) {
						if (this.domainData[b][Sword.utils.Iterator.pcode] == this.node[Sword.utils.Iterator.code]) {
							var c = new Sword.utils.JSONIterator(this.domainData[b], this.dataDepth);
							c.setLastSign(false);
							f.push(c);
							c.setDomainData(this.domainData)
						}
					}
				}
				this.dataDepth++
			}
			if (f.length > 0) {
				f[f.length - 1].setLastSign(true)
			}
			return f
		},
		getAttributes : function () {
			var b = new Array();
			var a = new Hash(this.node);
			a.getKeys().each(function (c) {
				switch ($type(a.get(c))) {
				case "string":
				case "number":
				case "boolean":
					b.push({
						nodeName : c,
						nodeValue : a.get(c)
					});
				case false:
					return null
				}
			});
			return b
		},
		getAttribute : function (a) {
			if ($defined(this.node)) {
				return this.node[a]
			} else {
				return null
			}
		},
		isLast : function () {
			return this.lastSign
		},
		getAllChildNodes : function () {
			return this.getNodes(this)
		},
		getNodes : function (c) {
			var b = [];
			if (c) {
				var d = c.getChildNodes() || [];
				for (var a = 0; a < d.length; a++) {
					b.push(d[a].node);
					b.extend(this.getNodes(d[a]))
				}
			}
			return b
		}
	});
Sword.utils.Iterator.newInstance = function (d, b, c) {
	var a = null;
	Sword.utils.Iterator.treeNodeNum = 0;
	var f = [];
	if ($defined(d) && $defined(d.data)) {
		f = d.data
	}
	if ($chk(b) && "json".test(b.trim(), "i")) {
		a = new Sword.utils.JSONIterator(f, 0);
		a.setDomainData(f);
		a.setParentSign(c.id, c.pid, d)
	}
	return a
};
function _getTopSwordPopUpBox() {
	if (!pc) {
		return
	}
	if (jsR.config.swordPopUpBox.topMask == false) {
		return new SwordPopUpBox()
	}
	var b = window;
	try {
		if (b.top.pageContainer) {
			b = b.top.window
		} else {
			while (b.parent && b.parent.pageContainer) {
				if (b.parent == b) {
					break
				}
				b = b.parent
			}
		}
	} catch (a) {
		return new SwordPopUpBox()
	}
	if (b.pageContainer) {
		b.pageContainer.swordPopUpBox = b.pageContainer.create("SwordPopUpBox")
	}
	return b.pageContainer.swordPopUpBox
}
function getTopDom() {
	var a = window;
	if (a.top.pc) {
		a = a.top.window
	} else {
		while (a.parent && a.parent.pageContainer) {
			if (a.parent == a) {
				break
			}
			a = a.parent
		}
	}
	if (a.pageContainer) {
		return a
	}
	return a
}
function swordAlert(d, b, a) {
	var c = _getTopSwordPopUpBox();
	c.alert($extend({
			message : d
		}, b), a);
	return c
}
function swordAlertWrong(d, b, a) {
	var c = _getTopSwordPopUpBox();
	c.alertWrong($extend({
			message : d
		}, b), a);
	return c
}
function swordAlertRight(d, b, a) {
	var c = _getTopSwordPopUpBox();
	c.alertRight($extend({
			message : d
		}, b), a);
	return c
}
function swordPrompt(d, b, a) {
	var c = _getTopSwordPopUpBox();
	c.prompt($extend({
			message : d
		}, b), a);
	return c
}
function swordConfirm(d, b, a) {
	var c = _getTopSwordPopUpBox();
	c.confirm($extend({
			message : d
		}, b), a);
	return c
}
function swordAlertIframe(f, c, b, a) {
	if (Browser.Engine.webkit || Browser.Engine.trident4) {
		if ($type(window.document.body) == "element" && $(window.document.body).getHeight() == 0 && $(window.document.body).getWidth() == 0) {
			return parent.swordAlertIframe(f, c, b, a)
		}
	}
	f = encodeURI(f);
	var d = _getTopSwordPopUpBox();
	if (a == false) {
		d.alertIframeNoPanel($extend({
				message : f
			}, c), b, pc);
		return d
	}
	if (!$chk(d)) {
		return
	}
	d.alertIframe($extend({
			message : f
		}, c), b, pc);
	return d
}
function openWindowSub(a) {
	a = unescape(a);
	var c = JSON.decode(a);
	var b = new SwordSubmit();
	b.options.tid = c.tid;
	b.options.ctrl = c.ctrl;
	b.options.page = c.page;
	b.dataContainer = c.data;
	b.options.postType = c.postType;
	swordOpenWin("", b)
}
function openWindowHash(a) {
	a = unescape(a);
	var c = JSON.decode(a);
	var d = $H;
	var b = "";
	for (j in c) {
		if (j != "sUrl") {
			d.set(j, c[j]["value"])
		} else {
			b = c[j]["value"]
		}
	}
	swordOpenWin(b, d)
}
function swordOpenWin(c, n) {
	var a = screen.availHeight;
	var l = screen.availWidth - 10;
	var h = navigator.userAgent;
	var d = h.indexOf("Windows NT 6.1") > -1 || h.indexOf("Windows 7") > -1;
	if (d) {
		a = a - 40
	}
	var g = "top=0,left=0,toolbar=no,menubar=no,scrollbars=no,width=" + l + ",height=" + a + ",resizable=no,location=no, status=no";
	if ($chk(n) && $type(n) == "hash") {
		var f = document.createElement("form");
		f.id = "openPrintWindowForm";
		f.method = "post";
		f.action = AddBizCode2URL(c);
		var k = Math.random() + "";
		if (k.indexOf(".") != -1) {
			k = k.substr(k.indexOf(".") + 1, k.length)
		}
		var b = "openPrintWindowName" + k;
		f.target = b;
		n.each(function (r, q) {
			var p = document.createElement("input");
			p.type = "hidden";
			p.name = q;
			p.value = r;
			f.appendChild(p)
		});
		var m = window.open("about:blank", "", g);
		m.name = b;
		document.body.appendChild(f);
		f.submit();
		document.body.removeChild(f)
	} else {
		if ($chk(n) && $type(n) == "SwordSubmit") {
			var k = Math.random() + "";
			if (k.indexOf(".") != -1) {
				k = k.substr(k.indexOf(".") + 1, k.length)
			}
			var b = "openPrintWindowName" + k;
			var m = top.window.open("about:blank", "", g);
			m.name = b;
			n.options.postType = "form_" + b;
			n.submit()
		} else {
			window.open(AddBizCode2URL(c), "", g)
		}
	}
}
function openWindowParent() {
	return window.opener
}
function swordAlertDiv(d, b, a) {
	var c = _getTopSwordPopUpBox();
	c.alertDiv($extend({
			message : d
		}, b), a);
	return c
}
function swordAlertMsn(d, b, a) {
	var c = _getTopSwordPopUpBox();
	c.alertMSN($extend({
			message : d
		}, b), a);
	return c
}
function getHtmlAttrs(f) {
	var d = {};
	if (f) {
		var a = f.attributes;
		for (var c = 0; c < a.length; c++) {
			if (a[c].specified) {
				var b = _swordDefaultAttrs[a[c].name.toLowerCase()];
				if (b) {
					d[b] = a[c].value ? a[c].value : true
				}
			}
		}
	}
	return d
}
var sword_fmt = {
	defFmt : {
		"float" : "{'type':'number','format':'0.00','style':''}",
		RMB : "{'type':'number','format':'0.00 RMB','style':''}",
		USD : "{'type':'number','format':'$ 0.00','style':''}"
	},
	convertText : function (d, a, b) {
		var c = {};
		var g = "";
		if (!$defined(a)) {
			a = ""
		}
		if (typeof(d) == "object") {
			c.value = a;
			c.realvalue = a;
			c.style = b || "";
			g = d.get("format");
			if (!$chk(g) || !$defined(g)) {
				return c
			}
			if (a == "") {
				var h = JSON.decode(g)["default"];
				if ($defined(h)) {
					c.value = h;
					c.realvalue = h
				} else {
					return c
				}
			}
		} else {
			if (typeof(d) == "string") {
				c.value = d;
				c.realvalue = d;
				g = a
			}
		}
		if (sword_fmt.defFmt[g]) {
			g = sword_fmt.defFmt[g]
		}
		try {
			$extend(c, JSON.decode(g))
		} catch (f) {}

		return this.builderText(c)
	},
	formatText : function (d, a, b, g) {
		var c = {};
		if (typeof(d) == "object") {
			c.value = a;
			c.realvalue = a;
			c.style = b || "";
			if (a == "") {
				var h = JSON.decode(g)["default"];
				return $defined(h) ? {
					value : h
				}
				 : c
			}
		} else {
			if (typeof(d) == "string") {
				c.value = d;
				c.realvalue = d;
				g = a
			}
		}
		if (sword_fmt.defFmt[g]) {
			g = sword_fmt.defFmt[g]
		}
		try {
			$extend(c, JSON.decode(g))
		} catch (f) {}

		return this.builderText(c)
	},
	builderItem : function (a) {},
	aptitude : function (a) {},
	builderText : function (a) {
		if (a) {
			if (a.func) {
				var b = sword_getFunc(a.func)[0];
				a.func = b
			}
			if (this[a.type]) {
				$extend(a, this[a.type].run(a));
				if (a.func) {
					a.func.run(a)
				}
			}
			return a
		} else {
			return {
				value : "",
				style : ""
			}
		}
	},
	routine : function (a) {},
	datePatterns : ["Y-m-d H:i:s.u", "Y-m-d H:i:s", "Y-m-d", "y-m-d", "m/d/y", "Y/m/d", "y/m/d", "Ymd", "ymd"],
	date : function (a) {
		var c = "";
		var d;
		if (!$chk(a.format)) {
			a.format = Date.patterns.ISO8601Long
		} else {
			if (a.value == "now") {
				d = new Date();
				c = d.dateFormat(a.format)
			} else {
				if (!$chk(a.analysisFormat)) {
					for (var b = 0; b < sword_fmt.datePatterns.length; b++) {
						d = Date.parseDate(a.value, sword_fmt.datePatterns[b]);
						if (d) {
							break
						}
					}
				} else {
					d = Date.parseDate(a.value, a.analysisFormat)
				}
				if ($chk(d)) {
					c = d.dateFormat(a.format)
				} else {
					c = a.value
				}
			}
		}
		$extend(a, {
			value : c,
			obj : d
		});
		return a
	},
	number : function (a) {
		var c = a.value;
		if (!$chk(c)) {
			c = 0
		}
		var b = (c / 1).numberFormat(a.format);
		b == Number.prototype.NaNstring ? a.value = (0 / 1).numberFormat(a.format) : a.value = b;
		return a
	},
	money : function (a) {
		alert(JSON.encode(a))
	},
	percent : function (d) {
		var c = d.value + "";
		var b = c.split(".");
		if (b.length > 1) {
			c = "";
			if (b[0].substring(0, 1) != "0") {
				c += b[0]
			}
			if (b[1].length > 2) {
				c += b[1].substring(0, 2);
				c = c.toInt() + "." + b[1].substring(2)
			} else {
				if (b[1].length == 2) {
					c = (c + b[1].substring(0, 2)).toInt()
				} else {
					c = (c + (b[1] + "0")).toInt()
				}
			}
		} else {
			c += (c.toInt() == 0) ? "" : "00"
		}
		d.value = c + "%";
		return d
	},
	exceptive : function (a) {},
	customer : function (a) {},
	money_chi : function (b) {
		var a = b.value;
		if (a) {
			b.value = sword_fmt_convertCurrency(a)
		}
		return b
	}
};
function sword_fmt_convertCurrency(z) {
	z = ($type(z) == "string") ? z / 1 : z;
	var c = 99999999999.99;
	var D = "零";
	var H = "壹";
	var l = "贰";
	var m = "叁";
	var q = "肆";
	var J = "伍";
	var G = "陆";
	var C = "柒";
	var L = "捌";
	var E = "玖";
	var h = "拾";
	var s = "佰";
	var v = "仟";
	var g = "万";
	var k = "亿";
	var B = "";
	var y = "元";
	var f = "角";
	var w = "分";
	var A = "整";
	var b;
	var O;
	var x;
	var K;
	var M,
	r,
	u,
	t;
	var a;
	var I,
	F,
	N;
	var P,
	n;
	z = z.toString();
	if (z == "") {
		return z
	}
	if (z.match(/[^,.\d]/) != null) {
		alert("输入字符中有不合法字符，请输入数字。");
		return z
	}
	if ((z).match(/^((\d{1,3}(,\d{3})*(.((\d{3},)*\d{1,3}))?)|(\d+(.\d+)?))$/) == null) {
		alert("输入的格式不合法。");
		return z
	}
	z = z.replace(/,/g, "");
	z = z.replace(/^0+/, "");
	if (Number(z) > c) {
		alert("您输入的超过了最大值：" + c);
		return z
	}
	K = z.split(".");
	if (K.length > 1) {
		b = K[0];
		O = K[1];
		O = O.substr(0, 2)
	} else {
		b = K[0];
		O = ""
	}
	M = new Array(D, H, l, m, q, J, G, C, L, E);
	r = new Array("", h, s, v);
	u = new Array("", g, k);
	t = new Array(f, w);
	x = "";
	if (Number(b) > 0) {
		a = 0;
		for (I = 0; I < b.length; I++) {
			F = b.length - I - 1;
			N = b.substr(I, 1);
			P = F / 4;
			n = F % 4;
			if (N == "0") {
				a++
			} else {
				if (a > 0) {
					x += M[0]
				}
				a = 0;
				x += M[Number(N)] + r[n]
			}
			if (n == 0 && a < 4) {
				x += u[P]
			}
		}
		x += y
	}
	if (O != "" && O != "00") {
		for (I = 0; I < O.length; I++) {
			N = O.substr(I, 1);
			if (N != "0") {
				x += M[Number(N)] + t[I]
			} else {
				x += M[Number(N)]
			}
		}
	} else {
		O = ""
	}
	if (x == "") {
		x = D + y
	}
	if (O == "") {
		x += A
	}
	x = B + x;
	return x
}
function accAdd(f, d) {
	if (f == null) {
		f = 0
	}
	if (d == null) {
		d = 0
	}
	var c,
	b,
	a;
	try {
		c = f.toString().split(".")[1].length
	} catch (g) {
		c = 0
	}
	try {
		b = d.toString().split(".")[1].length
	} catch (g) {
		b = 0
	}
	a = Math.pow(10, Math.max(c, b));
	return (f.multiple(a) + d.multiple(a)) / a
}
Number.prototype.accAdd = function (a) {
	return parseFloat(accAdd(a, this))
};
String.prototype.accAdd = function (a) {
	return accAdd(a, this)
};
function accSubtr(f, d) {
	if (f == null) {
		f = 0
	}
	if (d == null) {
		d = 0
	}
	var c,
	b,
	a,
	h;
	try {
		c = f.toString().split(".")[1].length
	} catch (g) {
		c = 0
	}
	try {
		b = d.toString().split(".")[1].length
	} catch (g) {
		b = 0
	}
	a = Math.pow(10, Math.max(c, b));
	h = (c >= b) ? c : b;
	return ((f.multiple(a) - d.multiple(a)) / a).round(h)
}
Number.prototype.subtract = function (a) {
	return parseFloat(accSubtr(this, a))
};
String.prototype.subtract = function (a) {
	return accSubtr(this, a)
};
function accMul(k, g) {
	if (k == null) {
		k = 0
	}
	if (g == null) {
		g = 0
	}
	var d = 0,
	l = k.toString(),
	h = g.toString();
	var f = l.split(".");
	d += f.length > 1 ? f[1].length : 0;
	var c = h.split(".");
	d += c.length > 1 ? c[1].length : 0;
	return Number(l.replace(".", "")) * Number(h.replace(".", "")) / Math.pow(10, d)
}
Number.prototype.multiple = function (a) {
	return parseFloat(accMul(a, this))
};
String.prototype.multiple = function (a) {
	return accMul(a, this)
};
function accDiv(arg1, arg2) {
	if (arg1 == null) {
		arg1 = 0
	}
	if (arg2 == null) {
		arg2 = 0
	}
	var t1 = 0,
	t2 = 0,
	r1,
	r2;
	try {
		t1 = arg1.toString().split(".")[1].length
	} catch (e) {}

	try {
		t2 = arg2.toString().split(".")[1].length
	} catch (e) {}

	with (Math) {
		r1 = Number(arg1.toString().replace(".", ""));
		r2 = Number(arg2.toString().replace(".", ""));
		return (r1 / r2) * pow(10, t2 - t1)
	}
}
Number.prototype.divide = function (a) {
	return parseFloat(accDiv(this, a))
};
String.prototype.divide = function (a) {
	return accDiv(this, a)
};
function round(a, c) {
	var b = 1;
	for (; c > 0; b *= 10, c--) {}

	for (; c < 0; b /= 10, c++) {}

	return Math.round(a.multiple(b)) / b
}
Number.prototype.round = function (a) {
	return parseFloat(round(this, a))
};
String.prototype.round = function (a) {
	return round(this, a)
};
Number.formatFunctions = {
	count : 0
};
String.formatFunctions = {
	count : 0
};
Number.prototype.NaNstring = "NaN";
Number.prototype.posInfinity = "Infinity";
Number.prototype.negInfinity = "-Infinity";
Number.prototype.numberFormat = function (b, a) {
	if (isNaN(this)) {
		return Number.prototype.NaNstring
	} else {
		if (this == +Infinity) {
			return Number.prototype.posInfinity
		} else {
			if (this == -Infinity) {
				return Number.prototype.negInfinity
			} else {
				if (Number.formatFunctions[b] == null) {
					Number.createNewFormat(b)
				}
			}
		}
	}
	return this[Number.formatFunctions[b]](a)
};
Number.createNewFormat = function (format) {
	var funcName = "format" + Number.formatFunctions.count++;
	Number.formatFunctions[format] = funcName;
	var code = "Number.prototype." + funcName + " = function(context){\n";
	var formats = format.split(";");
	switch (formats.length) {
	case 1:
		code += Number.createTerminalFormat(format);
		break;
	case 2:
		code += 'return (this < 0) ? this.numberFormat("' + _escape(formats[1]) + '", 1) : this.numberFormat("' + _escape(formats[0]) + '", 2);';
		break;
	case 3:
		code += 'return (this < 0) ? this.numberFormat("' + _escape(formats[1]) + '", 1) : ((this == 0) ? this.numberFormat("' + _escape(formats[2]) + '", 2) : this.numberFormat("' + _escape(formats[0]) + '", 3));';
		break;
	default:
		code += "throw 'Too many semicolons in format string';";
		break
	}
	eval(code + "}")
};
Number.createTerminalFormat = function (l) {
	if (l.length > 0 && l.search(/[0#?]/) == -1) {
		return "return '" + _escape(l) + "';\n"
	}
	var a = "var val = (context == null) ? new Number(this) : Math.abs(this);\n";
	var g = false;
	var f = l;
	var h = "";
	var n = 0;
	var p = 0;
	var b = 0;
	var k = false;
	var c = "";
	d = l.match(/\..*(e)([+-]?)(0+)/i);
	if (d) {
		c = d[1];
		k = (d[2] == "+");
		b = d[3].length;
		l = l.replace(/(e)([+-]?)(0+)/i, "")
	}
	var d = l.match(/^([^.]*)\.(.*)$/);
	if (d) {
		f = d[1].replace(/\./g, "");
		h = d[2].replace(/\./g, "")
	}
	if (l.indexOf("%") >= 0) {
		a += "val *= 100;\n"
	}
	d = f.match(/(,+)(?:$|[^0#?,])/);
	if (d) {
		a += "val /= " + Math.pow(1000, d[1].length) + "\n;"
	}
	if (f.search(/[0#?],[0#?]/) >= 0) {
		g = true
	}
	if ((d) || g) {
		f = f.replace(/,/g, "")
	}
	d = f.match(/0[0#?]*/);
	if (d) {
		n = d[0].length
	}
	d = h.match(/[0#?]*/);
	if (d) {
		p = d[0].length
	}
	if (b > 0) {
		a += "var sci = Number.toScientific(val," + n + ", " + p + ", " + b + ", " + k + ");\nvar arr = [sci.l, sci.r];\n"
	} else {
		if (l.indexOf(".") < 0) {
			a += "val = (val > 0&&val.toString().indexOf('.')!=-1&&val.toString().split('.')[1][0]<=4) ? Math.floor(val) : Math.ceil(val);\n"
		}
		a += "var arr = val.round(" + p + ").toFixed(" + p + ").split('.');\n";
		a += "arr[0] = (val < 0 ? '-' : '') + _leftPad((val < 0 ? arr[0].substring(1) : arr[0]), " + n + ", '0');\n"
	}
	if (g) {
		a += "arr[0] = Number.addSeparators(arr[0]);\n"
	}
	a += "arr[0] = Number.injectIntoFormat(arr[0].reverse(), '" + _escape(f.reverse()) + "', true).reverse();\n";
	if (p > 0) {
		a += "arr[1] = Number.injectIntoFormat(arr[1], '" + _escape(h) + "', false);\n"
	}
	if (b > 0) {
		a += "arr[1] = arr[1].replace(/(\\d{" + p + "})/, '$1" + c + "' + sci.s);\n"
	}
	return a + "return arr.join('.');\n"
};
Number.toScientific = function (c, h, k, b, d) {
	var l = {
		l : "",
		r : "",
		s : ""
	};
	var f = "";
	var g = Math.abs(c).toFixed(h + k + 1).trim("0");
	var a = Math.round(new Number(g.replace(".", "").replace(new RegExp("(\\d{" + (h + k) + "})(.*)"), "$1.$2"))).toFixed(0);
	if (a.length >= h) {
		a = a.substring(0, h) + "." + a.substring(h)
	} else {
		a += "."
	}
	l.s = (g.indexOf(".") - g.search(/[1-9]/)) - a.indexOf(".");
	if (l.s < 0) {
		l.s++
	}
	l.l = (c < 0 ? "-" : "") + _leftPad(a.substring(0, a.indexOf(".")), h, "0");
	l.r = a.substring(a.indexOf(".") + 1);
	if (l.s < 0) {
		f = "-"
	} else {
		if (d) {
			f = "+"
		}
	}
	l.s = f + _leftPad(Math.abs(l.s).toFixed(0), b, "0");
	return l
};
Number.injectIntoFormat = function (h, g, b) {
	var d = 0;
	var c = 0;
	var a = "";
	var f = h.charAt(h.length - 1) == "-";
	if (f) {
		h = h.substring(0, h.length - 1)
	}
	while (d < g.length && c < h.length && g.substring(d).search(/[0#?]/) >= 0) {
		if (g.charAt(d).match(/[0#?]/)) {
			if (h.charAt(c) != "-") {
				a += h.charAt(c)
			} else {
				a += "0"
			}
			c++
		} else {
			a += g.charAt(d)
		}
		++d
	}
	if (f && c == h.length) {
		a += "-"
	}
	if (c < h.length) {
		if (b) {
			a += h.substring(c)
		}
		if (f) {
			a += "-"
		}
	}
	if (d < g.length) {
		a += g.substring(d)
	}
	return a.replace(/#/g, "").replace(/\?/g, " ")
};
Number.addSeparators = function (a) {
	return a.reverse().replace(/(\d{3})/g, "$1,").reverse().replace(/^(-)?,/, "$1")
};
Date.parseFunctions = {
	count : 0
};
Date.parseRegexes = [];
Date.formatFunctions = {
	count : 0
};
Date.patterns = {
	ISO8601Long : "Y-m-d H:i:s",
	ISO8601Short : "Y-m-d",
	ShortDate : "n/j/Y",
	LongDate : "l, F d, Y",
	FullDateTime : "l, F d, Y g:i:s A",
	MonthDay : "F d",
	ShortTime : "g:i A",
	LongTime : "g:i:s A",
	SortableDateTime : "Y-m-d\\TH:i:s",
	UniversalSortableDateTime : "Y-m-d H:i:sO",
	YearMonth : "F, Y"
};
Date.prototype.dateFormat = function (b) {
	if (Date.formatFunctions[b] == null) {
		Date.createNewFormat(b)
	}
	var a = Date.formatFunctions[b];
	return this[a]()
};
Date.prototype.format = Date.prototype.dateFormat;
Date.createNewFormat = function (format) {
	var funcName = "format" + Date.formatFunctions.count++;
	Date.formatFunctions[format] = funcName;
	var code = "Date.prototype." + funcName + " = function(){return ";
	var special = false;
	var ch = "";
	for (var i = 0; i < format.length; ++i) {
		ch = format.charAt(i);
		if (!special && ch == "\\") {
			special = true
		} else {
			if (special) {
				special = false;
				code += "'" + _escape(ch) + "' + "
			} else {
				code += Date.getFormatCode(ch)
			}
		}
	}
	eval(code.substring(0, code.length - 3) + ";}")
};
Date.getFormatCode = function (a) {
	switch (a) {
	case "d":
		return "_leftPad(this.getDate(), 2, '0') + ";
	case "D":
		return "Date.dayNames[this.getDay()].substring(0, 3) + ";
	case "j":
		return "this.getDate() + ";
	case "l":
		return "Date.dayNames[this.getDay()] + ";
	case "S":
		return "this.getSuffix() + ";
	case "w":
		return "this.getDay() + ";
	case "z":
		return "this.getDayOfYear() + ";
	case "W":
		return "this.getWeekOfYear() + ";
	case "F":
		return "Date.monthNames[this.getMonth()] + ";
	case "m":
		return "_leftPad(this.getMonth() + 1, 2, '0') + ";
	case "M":
		return "Date.monthNames[this.getMonth()].substring(0, 3) + ";
	case "n":
		return "(this.getMonth() + 1) + ";
	case "t":
		return "this.getDaysInMonth() + ";
	case "L":
		return "(this.isLeapYear() ? 1 : 0) + ";
	case "Y":
		return "this.getFullYear() + ";
	case "y":
		return "('' + this.getFullYear()).substring(2, 4) + ";
	case "a":
		return "(this.getHours() < 12 ? 'am' : 'pm') + ";
	case "A":
		return "(this.getHours() < 12 ? 'AM' : 'PM') + ";
	case "g":
		return "((this.getHours() % 12) ? this.getHours() % 12 : 12) + ";
	case "G":
		return "this.getHours() + ";
	case "h":
		return "_leftPad((this.getHours() % 12) ? this.getHours() % 12 : 12, 2, '0') + ";
	case "H":
		return "_leftPad(this.getHours(), 2, '0') + ";
	case "i":
		return "_leftPad(this.getMinutes(), 2, '0') + ";
	case "s":
		return "_leftPad(this.getSeconds(), 2, '0') + ";
	case "u":
		return "_leftPad(this.getMilliseconds(), 4, '0') + ";
	case "O":
		return "this.getGMTOffset() + ";
	case "T":
		return "this.getTimezone() + ";
	case "Z":
		return "(this.getTimezoneOffset() * -60) + ";
	default:
		return "'" + _escape(a) + "' + "
	}
};
Date.parseDate = function (a, c) {
	if (Date.parseFunctions[c] == null) {
		Date.createParser(c)
	}
	var b = Date.parseFunctions[c];
	return Date[b](a)
};
Date.createParser = function (format) {
	var funcName = "parse" + Date.parseFunctions.count++;
	var regexNum = Date.parseRegexes.length;
	var currentGroup = 1;
	Date.parseFunctions[format] = funcName;
	var code = "Date." + funcName + " = function(input){\nvar y = -1, m = -1, d = -1, h = -1, i = -1, s = -1, o, z, v;\nvar d = new Date();\ny = d.getFullYear();\nm = d.getMonth();\nd = d.getDate();\nvar results = input.match(Date.parseRegexes[" + regexNum + "]);\nif (results && results.length > 0) {";
	var regex = "";
	var special = false;
	var ch = "";
	for (var i = 0; i < format.length; ++i) {
		ch = format.charAt(i);
		if (!special && ch == "\\") {
			special = true
		} else {
			if (special) {
				special = false;
				regex += _escape(ch)
			} else {
				var obj = Date.formatCodeToRegex(ch, currentGroup);
				currentGroup += obj.g;
				regex += obj.s;
				if (obj.g && obj.c) {
					code += obj.c
				}
			}
		}
	}
	code += "if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0)\n{v = new Date(y, m, d, h, i, s);}\nelse if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0)\n{v = new Date(y, m, d, h, i);}\nelse if (y >= 0 && m >= 0 && d > 0 && h >= 0)\n{v = new Date(y, m, d, h);}\nelse if (y >= 0 && m >= 0 && d > 0)\n{v = new Date(y, m, d);}\nelse if (y >= 0 && m >= 0)\n{v = new Date(y, m);}\nelse if (y >= 0)\n{v = new Date(y);}\n}return (v && (z || o))?\n    ((z)? v.add(Date.SECOND, (v.getTimezoneOffset() * 60) + (z*1)) :\n        v.add(Date.HOUR, (v.getGMTOffset() / 100) + (o / -100))) : v\n;}";
	Date.parseRegexes[regexNum] = new RegExp("^" + regex + "$", "i");
	eval(code)
};
Date.formatCodeToRegex = function (b, a) {
	switch (b) {
	case "D":
		return {
			g : 0,
			c : null,
			s : "(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)"
		};
	case "j":
		return {
			g : 1,
			c : "d = parseInt(results[" + a + "], 10);\n",
			s : "(\\d{1,2})"
		};
	case "d":
		return {
			g : 1,
			c : "d = parseInt(results[" + a + "], 10);\n",
			s : "(\\d{2})"
		};
	case "l":
		return {
			g : 0,
			c : null,
			s : "(?:" + Date.dayNames.join("|") + ")"
		};
	case "S":
		return {
			g : 0,
			c : null,
			s : "(?:st|nd|rd|th)"
		};
	case "w":
		return {
			g : 0,
			c : null,
			s : "\\d"
		};
	case "z":
		return {
			g : 0,
			c : null,
			s : "(?:\\d{1,3})"
		};
	case "W":
		return {
			g : 0,
			c : null,
			s : "(?:\\d{2})"
		};
	case "F":
		return {
			g : 1,
			c : "m = parseInt(Date.monthNumbers[results[" + a + "].substring(0, 1).toUpperCase() + results[" + a + "].substring(1, 3).toLowerCase()], 10);\n",
			s : "(" + Date.monthNames.join("|") + ")"
		};
	case "M":
		return {
			g : 1,
			c : "m = parseInt(Date.monthNumbers[results[" + a + "].substring(0, 1).toUpperCase() + results[" + a + "].substring(1, 3).toLowerCase()], 10);\n",
			s : "(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)"
		};
	case "n":
		return {
			g : 1,
			c : "m = parseInt(results[" + a + "], 10) - 1;\n",
			s : "(\\d{1,2})"
		};
	case "m":
		return {
			g : 1,
			c : "m = parseInt(results[" + a + "], 10) - 1;\n",
			s : "(\\d{2})"
		};
	case "t":
		return {
			g : 0,
			c : null,
			s : "\\d{1,2}"
		};
	case "L":
		return {
			g : 0,
			c : null,
			s : "(?:1|0)"
		};
	case "Y":
		return {
			g : 1,
			c : "y = parseInt(results[" + a + "], 10);\n",
			s : "(\\d{4})"
		};
	case "y":
		return {
			g : 1,
			c : "var ty = parseInt(results[" + a + "], 10);\ny = ty > Date.y2kYear ? 1900 + ty : 2000 + ty;\n",
			s : "(\\d{1,2})"
		};
	case "a":
		return {
			g : 1,
			c : "if (results[" + a + "] == 'am') {\nif (h == 12) { h = 0; }\n} else { if (h < 12) { h += 12; }}",
			s : "(am|pm)"
		};
	case "A":
		return {
			g : 1,
			c : "if (results[" + a + "] == 'AM') {\nif (h == 12) { h = 0; }\n} else { if (h < 12) { h += 12; }}",
			s : "(AM|PM)"
		};
	case "g":
	case "G":
		return {
			g : 1,
			c : "h = parseInt(results[" + a + "], 10);\n",
			s : "(\\d{1,2})"
		};
	case "h":
	case "H":
		return {
			g : 1,
			c : "h = parseInt(results[" + a + "], 10);\n",
			s : "(\\d{2})"
		};
	case "i":
		return {
			g : 1,
			c : "i = parseInt(results[" + a + "], 10);\n",
			s : "(\\d{2})"
		};
	case "s":
		return {
			g : 1,
			c : "s = parseInt(results[" + a + "], 10);\n",
			s : "(\\d{2})"
		};
	case "u":
		return {
			g : 1,
			c : "u = parseInt(results[" + a + "], 10);\n",
			s : "(\\d{4})"
		};
	case "O":
		return {
			g : 1,
			c : ["o = results[", a, "];\n", "var sn = o.substring(0,1);\n", "var hr = o.substring(1,3)*1 + Math.floor(o.substring(3,5) / 60);\n", "var mn = o.substring(3,5) % 60;\n", "o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))?\n", "    (sn + _leftPad(hr, 2, 0) + _leftPad(mn, 2, 0)) : null;\n"].join(""),
			s : "([+-]\\d{4})"
		};
	case "T":
		return {
			g : 0,
			c : null,
			s : "[A-Z]{1,4}"
		};
	case "Z":
		return {
			g : 1,
			c : "z = results[" + a + "];\nz = (-43200 <= z*1 && z*1 <= 50400)? z : null;\n",
			s : "([+-]?\\d{1,5})"
		};
	default:
		return {
			g : 0,
			c : null,
			s : _escape(b)
		}
	}
};
Date.prototype.getTimezone = function () {
	return this.toString().replace(/^.*? ([A-Z]{1,4})[\-+][0-9]{4} .*$/, "$1")
};
Date.prototype.getGMTOffset = function () {
	return (this.getTimezoneOffset() > 0 ? "-" : "+") + _leftPad(Math.abs(Math.floor(this.getTimezoneOffset() / 60)), 2, "0") + _leftPad(this.getTimezoneOffset() % 60, 2, "0")
};
Date.prototype.getDayOfYear = function () {
	var a = 0;
	Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
	for (var b = 0; b < this.getMonth(); ++b) {
		a += Date.daysInMonth[b]
	}
	return a + this.getDate() - 1
};
Date.prototype.getWeekOfYear = function () {
	var b = this.getDayOfYear() + (4 - this.getDay());
	var a = new Date(this.getFullYear(), 0, 1);
	var c = (7 - a.getDay() + 4);
	return _leftPad(((b - c) / 7) + 1, 2, "0")
};
Date.prototype.isLeapYear = function () {
	var a = this.getFullYear();
	return ((a & 3) == 0 && (a % 100 || (a % 400 == 0 && a)))
};
Date.prototype.getFirstDayOfMonth = function () {
	var a = (this.getDay() - (this.getDate() - 1)) % 7;
	return (a < 0) ? (a + 7) : a
};
Date.prototype.getLastDayOfMonth = function () {
	var a = (this.getDay() + (Date.daysInMonth[this.getMonth()] - this.getDate())) % 7;
	return (a < 0) ? (a + 7) : a
};
Date.prototype.getFirstDateOfMonth = function () {
	return new Date(this.getFullYear(), this.getMonth(), 1)
};
Date.prototype.getLastDateOfMonth = function () {
	return new Date(this.getFullYear(), this.getMonth(), this.getDaysInMonth())
};
Date.prototype.getDaysInMonth = function () {
	Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
	return Date.daysInMonth[this.getMonth()]
};
Date.prototype.getSuffix = function () {
	switch (this.getDate()) {
	case 1:
	case 21:
	case 31:
		return "st";
	case 2:
	case 22:
		return "nd";
	case 3:
	case 23:
		return "rd";
	default:
		return "th"
	}
};
Date.daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
Date.monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
Date.dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
Date.y2kYear = 50;
Date.monthNumbers = {
	Jan : 0,
	Feb : 1,
	Mar : 2,
	Apr : 3,
	May : 4,
	Jun : 5,
	Jul : 6,
	Aug : 7,
	Sep : 8,
	Oct : 9,
	Nov : 10,
	Dec : 11
};
Date.prototype.clone = function () {
	return new Date(this.getTime())
};
Date.prototype.clearTime = function (a) {
	if (a) {
		return this.clone().clearTime()
	}
	this.setHours(0);
	this.setMinutes(0);
	this.setSeconds(0);
	this.setMilliseconds(0);
	return this
};
Date.MILLI = "ms";
Date.SECOND = "s";
Date.MINUTE = "mi";
Date.HOUR = "h";
Date.DAY = "d";
Date.MONTH = "mo";
Date.YEAR = "y";
Date.prototype.add = function (b, c) {
	var f = this.clone();
	if (!b || c === 0) {
		return f
	}
	switch (b.toLowerCase()) {
	case Date.MILLI:
		f.setMilliseconds(this.getMilliseconds() + c);
		break;
	case Date.SECOND:
		f.setSeconds(this.getSeconds() + c);
		break;
	case Date.MINUTE:
		f.setMinutes(this.getMinutes() + c);
		break;
	case Date.HOUR:
		f.setHours(this.getHours() + c);
		break;
	case Date.DAY:
		f.setDate(this.getDate() + c);
		break;
	case Date.MONTH:
		var a = this.getDate();
		if (a > 28) {
			a = Math.min(a, this.getFirstDateOfMonth().add("mo", c).getLastDateOfMonth().getDate())
		}
		f.setDate(a);
		f.setMonth(this.getMonth() + c);
		break;
	case Date.YEAR:
		f.setFullYear(this.getFullYear() + c);
		break
	}
	return f
};
Date.prototype.between = function (c, a) {
	var b = this.getTime();
	return b >= c.getTime() && b <= a.getTime()
};
_leftPad = function (d, b, c) {
	var a = new String(d);
	if (c == null) {
		c = " "
	}
	while (a.length < b) {
		a = c + a
	}
	return a
};
_escape = function (a) {
	return a.replace(/('|\\)/g, "\\$1")
};
String.prototype.reverse = function () {
	var b = "";
	for (var a = this.length; a > 0; --a) {
		b += this.charAt(a - 1)
	}
	return b
};
xyposition = function (c, b, a) {
	xposition(c, b, a);
	yposition(c, b)
};
xposition = function (g, d, a) {
	var h;
	var c = d.measure(function () {
			return this.getSize()
		});
	if (!$defined(a)) {
		h = g._getPosition().y - $(document.body).getScroll().y + g.getHeight() + c.y + 20
	} else {
		h = g._getPosition().y - $(document.body).getScroll().y - c.y - 5
	}
	var b = $(document.body).getHeight();
	if ((!$defined(a) && h > b) || ($defined(a) && h >= 0)) {
		var f = g._getPosition().y - c.y;
		if (f < 0) {
			d.setStyle("top", (g._getPosition().y + g.getHeight()))
		} else {
			d.setStyle("top", f)
		}
	} else {
		d.setStyle("top", (g._getPosition().y + g.getHeight()))
	}
};
yposition = function (c, b) {
	var d = c._getPosition().x - $(document.body).getScrollWidth() + b.getWidth();
	var a = $(document.body).getWidth();
	if (d > 0) {
		b.setStyle("left", (a - b.getWidth()))
	} else {
		b.setStyle("left", c._getPosition().x)
	}
};
$dateFmt = function (b, f, a) {
	if (!$defined(b)) {
		return
	}
	if (!$defined(b) && !$defined(f)) {
		return
	}
	var d = b.split(".");
	if (d.length <= 2) {
		if (!_SwordDF.isDate(d[0], "yyyy-MM-dd HH:mm:ss")) {
			return false
		}
	} else {
		return false
	}
	if (!$defined(a)) {
		a = f.get("dataformat")
	}
	if (!$defined(a)) {
		a = "yyyy-MM-dd HH:mm:ss"
	}
	var c;
	if (_SwordDF.isDate(b, a)) {
		c = b
	} else {
		c = _SwordDF.formatStringToString(b, "yyyy-MM-dd HH:mm:ss", a)
	}
	f.set("realvalue", b);
	f.set("value", c);
	f.set("text", c);
	return true
};
$w = function (a) {
	return pageContainer.getWidget(a)
};
$print = function (a) {
	return JSON.encode(a)
};
$submit = function (b, d, a) {
	var c = null;
	if ($chk(a)) {
		$extend(a, {
			newFlag : "true"
		});
		c = new SwordSubmit(a)
	} else {
		c = new SwordSubmit({
				newFlag : "true"
			})
	}
	if ($chk(b)) {
		pageContainer.widgets.set(b, c)
	}
	d = d || [];
	d.each(function (l, h) {
		var k = ($type(l) == "object" ? l.widgetName : l);
		var n = pageContainer.getWidget(k);
		if (n) {
			var m = n.name;
			if ($defined(n)) {
				if (m == "SwordForm") {
					if (n.isHasFile()) {
						c.hasFile = true
					}
				}
				var g = c.initConsoleAttr(m, l);
				var f = SwordSubmit.Command.newInstance(m, k, g, n);
				if ($defined(f)) {
					c.widgetObjs.set(k, f)
				}
			}
		}
	});
	return c
};
Sword.utils.getDataByMenu = function (d, g, h, a) {
	var c = null;
	if ($chk(d) && $chk(g) && $chk(h)) {
		if (!$chk(h.has(d))) {
			alert("传递的参数中没有其对应的属性，请检查");
			return c
		}
		if ($defined(Sword.utils._containerData)) {
			c = Sword.utils._containerData.get(h.get(d));
			if (c) {
				return c
			}
		}
		var b = new SwordSubmit();
		b.options.mask = "false";
		b.setTid(g);
		var f = {};
		if ($chk(h) && $type(h) == "hash") {
			h.each(function (l, k) {
				f.name = k;
				f.value = l
			});
			b.pushData(f);
			c = b.submit();
			if (c && a !== false) {
				if (!$defined(Sword.utils._containerData)) {
					Sword.utils._containerData = new Hash()
				}
				if (c.data && c.data.length > 0) {
					Sword.utils._containerData.set(h.get(d), c.data[0]);
					c = c.data[0]
				}
			}
			return c
		}
	} else {
		return c
	}
};
var SwordEventDelegator = new Class({
		Implements : [Options],
		name : "SwordEventDelegator",
		options : {
			container : null
		},
		initialize : function (a) {
			this.setOptions(a);
			if (!this.options.container) {
				throw new Error("SwordEventManager初始化必须要传入 container")
			}
			this.options.container = $(this.options.container);
			this._initEvents()
		},
		add : function (d, c, f, a) {
			if (!this._types.has(d)) {
				throw new Error("事件处理器不能处理【" + d + "】类型的事件！！")
			}
			var b = this._listener;
			if (!b.has(d)) {
				b.set(d, [])
			}
			b.get(d).push(this._newListener(c, f, a));
			return this
		},
		remove : function () {
			alert("remove尚未实现！！");
			return this
		},
		_listener : new Hash(),
		_types : new Hash({
			click : "click",
			mouseover : "mouseover",
			mouseout : "mouseout",
			mouseenter : "mouseover",
			mouseleave : "mouseout",
			mousedown : "mousedown",
			dblclick : "dblclick",
			contextmenu : "contextmenu",
			keyup : "keyup",
			keydown : "keydown"
		}),
		_newListener : function (b, c, a) {
			return {
				fn : b,
				condition : c,
				args : a
			}
		},
		_initEvents : function () {
			var a = this.options.container;
			this._types.each(function (b, c) {
				a.addEvent(b, this._getHandler(c).bindWithEvent(this, c))
			}, this)
		},
		_handlers : null,
		_getHandler : function (a) {
			if (!this._handlers) {
				this._handlers = {
					mouseenter : this._enterLeaveHandler,
					mouseleave : this._enterLeaveHandler
				}
			}
			if (this._handlers[a]) {
				return this._handlers[a]
			}
			return this._defaultHandler
		},
		_baseHandler : function (d, b, g, f) {
			if (!d.$extended) {
				d = new Event(d)
			}
			if (!g) {
				g = $(d.target)
			}
			if (g) {
				if (g.get("disabled") == true) {
					return
				}
				var c = $(d.relatedTarget);
				var a = this._listener.get(b);
				if (a) {
					a.each(function (h) {
						if (f(g, c, h.condition)) {
							if (h.args) {
								h.fn(d, g, h.args)
							} else {
								h.fn(d, g)
							}
						}
						if (this._cancelBubble(d.event)) {
							return
						}
					}, this)
				}
				if (this._cancelBubble(d.event)) {
					return
				}
				if (g == this.options.container) {
					return
				}
				g = g.getParent();
				if (!g) {
					return
				}
				this._baseHandler(d, b, g, f)
			} else {
				return
			}
		},
		_cancelBubble : function (a) {
			return a.cancelBubble
		},
		_defaultHandler : function (b, a, c) {
			this._baseHandler(b, a, c, this._defalutProcessor)
		},
		_enterLeaveHandler : function (b, a, c) {
			this._baseHandler(b, a, c, this._enterLeaveProcessor)
		},
		_defalutProcessor : function (a, b, c) {
			return a.match(c)
		},
		_enterLeaveProcessor : function (b, c, d) {
			if (!c) {
				return b.match(d)
			}
			var a = c.getParent(d) || c;
			return b.match(d) && b != a
		}
	});
Sword.data = {};
SwordDataModelContainer = new Class({
		$family : {
			name : "SwordDataModelContainer"
		},
		pool : $H(),
		regModel : function (b, a) {
			if (a) {
				this.pool.set(b, a)
			}
		},
		getModel : function (a) {
			return this.pool.get(a)
		}
	});
Sword.data.container = new SwordDataModelContainer();
Sword.data.SwordDataModel = new Class({
		Implements : [Options, Events],
		$family : {
			name : "Sword.data.SwordDataModel"
		},
		dataContainer : null,
		reader : null,
		writer : null,
		initialize : function (a) {
			this.key = a.key || $random(1, 1000000);
			this.writer = a.writer || new Sword.data.SwordDataWriter();
			this.writer.setModel(this);
			this.reader = a.reader || new Sword.data.SwordDataReader();
			this.reader.setModel(this);
			Sword.data.container.regModel(this.key, this)
		},
		options : {
			onInsert : null,
			onDelete : null,
			onUpdate : null,
			onGet : null
		},
		getKey : function () {
			return this.key
		},
		setReader : function (a) {
			if (a) {
				this.reader = a;
				this.reader.setModel(this)
			}
		},
		getReader : function () {
			return this.reader
		},
		setWriter : function (a) {
			if (a) {
				this.writer = a;
				this.writer.setModel(this)
			}
		},
		getWriter : function () {
			return this.writer
		},
		setData : function (a) {
			if (this.reader) {
				this.dataContainer = this.reader.read(a)
			}
		},
		getData : function () {
			return this.dataContainer
		}
	});
Sword.data.SwordDataWriter = new Class({
		Implements : [Options, Events],
		$family : {
			name : "Sword.data.SwordDataWriter"
		},
		model : null,
		setModel : function (a) {
			this.model = a
		},
		write : function () {}

	});
Sword.data.SwordDataReader = new Class({
		Implements : [Options, Events],
		$family : {
			name : "Sword.data.SwordDataReader"
		},
		model : null,
		setModel : function (a) {
			this.model = a
		},
		read : function (a) {
			return a
		},
		findByPath : function (path) {
			var resData;
			if (!path) {
				resData = this.model.dataContainer
			} else {
				if (this.model.dataContainer) {
					var str = "this.model.dataContainer" + path;
					resData = eval(str)
				}
			}
			return resData
		},
		query : function (a) {
			return this.model.domainData
		}
	});
var SwordMoveBase = new Class({
		name : "SwordMoveBase",
		readyMove : function (b, a, c) {
			b.each(function (f) {
				var d = null;
				if (c == "checked") {
					d = f.getCheckedLis()
				} else {
					if (c == "all") {
						d = f.getAllLis()
					}
				}
				a.each(function (k) {
					var h = null;
					if ($defined(f.options.onBeforeOut) && $chk(f.options.onBeforeOut)) {
						h = f.getFunc(f.options.onBeforeOut)[0](d, k);
						if (typeof(h) == "undefined") {
							h = d
						} else {
							if (h == null || h.length == 0) {
								return
							}
						}
					} else {
						h = d
					}
					var g = h;
					if ($defined(k.options.onBeforeIn) && $chk(k.options.onBeforeIn)) {
						g = k.getFunc(k.options.onBeforeIn)[0](h, f);
						if (typeof(g) == "undefined") {
							g = h
						} else {
							if (g == null || g.length == 0) {
								return
							}
						}
					}
					if (g == null || g.length == 0) {
						return
					}
					f.doMove(k, g);
					g = null;
					h = null
				}
					.bind(this))
			}
				.bind(this))
		},
		loadWidget : function (a) {
			var b = pc.getWidget(a);
			if ($chk(b)) {
				return b
			} else {
				if (this.alarm) {
					alert("无法获取关联组件" + a)
				}
			}
		}
	});
var SwordMove = new Class({
		Implements : [Events, Options],
		Extends : SwordMoveBase,
		name : "SwordMove",
		options : {
			sword : null,
			name : null,
			caption : null,
			dataY : -1,
			showName : null,
			target : null,
			dataX : -1,
			autoHeight : "true",
			beanname : null,
			pNode : null,
			onAfterCreate : $empty,
			onAfterCreateItem : $empty,
			onAfterInitData : $empty,
			onAfterMove : $empty,
			onItemClick : $empty,
			onItemDbClick : $empty,
			onItemRightClick : $empty,
			onBeforeOut : $empty,
			onBeforeIn : $empty
		},
		sm_div : null,
		data : null,
		initParam : function (d) {
			this.htmlOptions(d);
			var c = new Element("div", {
					"class" : "sm_div"
				}).inject(this.options.pNode);
			this.sm_div = c;
			if (this.options.caption) {
				this.createPanel(c, this.options.caption)
			}
			var a = new Element("div", {
					"class" : "sm_data_div"
				}).inject(this.sm_div);
			this.sm_data_div = a;
			var b = new Element("ul", {
					"class" : "sm_data_ul"
				}).inject(a);
			this.bindUlEvents(b);
			this.sm_data_ul = b;
			this.buildXY();
			this.fireEvent("onAfterCreate")
		},
		bindUlEvents : function (a) {
			a.addEvent("click", function (k) {
				var l = k.target;
				var n = l.get("tag");
				if (n !== "li") {
					return
				}
				var m = a.getChildren();
				var c = this.getCheckedLis();
				var d = (l.get("rowNum") - 1) / 1;
				var h = this.lastIndex / 1;
				if (k.shift) {
					c.removeClass("li_gridview");
					if (d > h) {
						var g = (h) / 1;
						for (g; g <= d; g++) {
							m[g].addClass("li_gridview")
						}
					} else {
						var f = (h) / 1;
						for (f; f >= d; f--) {
							m[f].addClass("li_gridview")
						}
					}
				} else {
					if (k.control) {
						l.toggleClass("li_gridview");
						h = d
					} else {
						c.removeClass("li_gridview");
						l.addClass("li_gridview");
						this.lastIndex = d;
						var b = l.retrieve("liData");
						this.fireEvent("onItemClick", [b, l, k])
					}
				}
			}
				.bind(this));
			a.addEvent("dblclick", function (g) {
				var f = g.target;
				var b = f.get("tag");
				if (b !== "li") {
					return
				}
				var d = this.getTargetWidgets();
				this.readyMove([this], d, "checked");
				var c = f.retrieve("liData");
				this.fireEvent("onItemDbClick", [c, f, g])
			}
				.bind(this));
			a.addEvent("contextmenu", function (f) {
				var d = f.target;
				var b = d.get("tag");
				if (b !== "li") {
					return
				}
				var c = d.retrieve("liData");
				this.fireEvent("onItemRightClick", [c, f])
			}
				.bind(this))
		},
		createPanel : function (c, b) {
			var a = new Element("div", {
					"class" : "sm_panel_header"
				}).inject(c);
			new Element("div", {
				"class" : "sm_panel_header_caption"
			}).appendText(b).inject(a)
		},
		buildXY : function () {
			this.buildX();
			this.buildY()
		},
		buildX : function () {
			var a = "" + this.options.dataX;
			if (this.options.dataX != -1) {
				if (a.contains("px")) {
					var a = parseInt(a);
					if (this.sm_div.getWidth() < a) {
						this.sm_div.setStyle("width", a + "px")
					}
				}
			}
		},
		buildY : function (c) {
			var b = "" + this.options.dataY;
			var a = null;
			if (this.options.autoHeight == "true") {
				if (b.contains("px")) {
					b = parseInt(b)
				}
				if (b > this.dataDiv().getHeight()) {
					a = b
				}
			} else {
				if ($chk(c) && c > 0) {
					a = this.itemY() * ((c / 1) + 2)
				}
			}
			if ($chk(a)) {
				this.dataDiv().setStyle("height", a + "px")
			}
		},
		initData : function (a) {
			this.clearData();
			if (!$chk(a)) {
				return
			}
			this.setInitData(a);
			if (!$chk(this.data)) {
				return
			}
			var b = a.trs.length;
			this.buildY(b);
			this.loadData(this.data);
			this.options.totalItems = b
		},
		loadData : function (a) {
			this.doMask();
			this.readyLoadData(a);
			this.doUnmask()
		},
		doMask : function () {
			pc.getMask().mask(this.sm_div)
		},
		doUnmask : function () {
			pc.getMask().unmask()
		},
		readyLoadData : function (a) {
			if (!$chk(a)) {
				this.doUnmask();
				return
			}
			a.each(function (c, d) {
				var b = this.createItem(d + 1, c);
				b.inject(this.dataUl())
			}, this);
			this.fireEvent("onAfterInitData", [a])
		},
		insertItem : function (a, b) {
			if (!$chk(a)) {
				return
			}
			var d = this.options.totalItems + 1;
			var c = this.createItem(d, a);
			c.set("status", "insert");
			c.set("origin", " ");
			c.set("outer", true);
			if (!$defined(b)) {
				c.inject(this.dataUl(), "bottom");
				this.options.totalItems += 1
			} else {
				if ("before" == b || "after" == b) {
					var f = this.getCheckedLis();
					if (f.length >= 1) {
						c.inject(f[f.length - 1], b);
						this.options.totalItems += 1;
						this.adjustItem(false)
					} else {
						alert("请先选择参照项")
					}
				}
			}
		},
		createItem : function (c, a) {
			if (a.getValue == undefined) {
				a.getValue = function (d) {
					var f = this.tds[d];
					if (!$defined(f)) {
						return null
					}
					return f.value
				}
			}
			this.fireEvent("onBeforeCreateItem", [a]);
			var b = new Element("li", {
					text : this.genarateContent(a.tds),
					origin : this.options.name,
					rowNum : c,
					title : this.genarateContent(a.tds),
					"class" : "sm_data_li",
					events : {
						mouseover : function (d) {
							Event(d).target.addClass("li-selected")
						},
						mouseout : function (d) {
							Event(d).target.removeClass("li-selected")
						}
					}
				});
			b.store("liData", a);
			if (c % 2 == 0) {
				b.addClass("sm_data_li_shuang")
			} else {
				b.addClass("sm_data_li_dan")
			}
			this.fireEvent("onAfterCreateItem", [a, b]);
			return b
		},
		genarateContent : function (c) {
			var a = this.options.showName;
			if (!$defined(a)) {
				a = "{caption}"
			}
			var b = this.substitute(c, a);
			if (b == "") {
				a = "{code}";
				b = this.substitute(c, a)
			}
			if (b == "") {
				a = "";
				b = this.substitute(c, a)
			}
			return b
		},
		substitute : function (a, b) {
			return b.replace((/\\?\{([^{}]+)\}/g), function (d, c) {
				if (d.charAt(0) == "\\") {
					return d.slice(1)
				}
				return (a[c] != undefined) ? a[c].value : ""
			})
		},
		getTargetWidgets : function () {
			var a = new Array();
			var b = this.options.target;
			if ($chk(b)) {
				b.split(",").each(function (d, c) {
					a.push(this.loadWidget(d))
				}, this)
			}
			return a
		},
		getCheckedLis : function () {
			var a = this.dataUl().getElements("li[.li_gridview]");
			return a
		},
		getLisByInsert : function () {
			var a = this.dataUl().getElements("li[status=insert]");
			return a
		},
		getLisByOuter : function () {
			var a = this.dataUl().getElements("li[outer=true]");
			return a
		},
		getAllLis : function () {
			var a = this.dataUl().getElements("li");
			return a
		},
		getInLis : function (c) {
			var b = "li[origin=" + c + "]";
			if (!$chk(c)) {
				c = this.options.name;
				b = "li[status=insert]"
			}
			var a = this.dataUl().getChildren(b);
			return a
		},
		getOutLis : function (b) {
			var a = new Array();
			if (!$chk(b)) {
				b = this.getTargetWidgets()
			}
			b.each(function (f, d) {
				var c = f.getInLis(this.options.name);
				if (c.length > 0) {
					a.combine(c)
				}
			}, this);
			return a
		},
		getStatusLis : function () {
			var a = this.getInLis();
			var b = this.getOutLis();
			if (a.length > 0 && b.length > 0) {
				return a.combine(b)
			} else {
				if (a.length > 0) {
					return a
				} else {
					return b
				}
			}
		},
		getCheckedData : function () {
			var a = this.getCheckedLis();
			var b = this.getLisData(a);
			return b
		},
		getCurrentData : function () {
			var a = this.dataUl().getChildren();
			return this.getLisData(a)
		},
		getLisData : function (b) {
			var a = new Array();
			b.each(function (c) {
				a.push(this.getOneLiData(c))
			}, this);
			return {
				sword : "SwordGrid",
				name : this.options.name,
				beannames : this.options.beanname,
				trs : a
			}
		},
		getStatusData : function () {
			var a = this.getStatusLis();
			return this.getLisData(a)
		},
		getOneLiData : function (a) {
			if (!$defined(a)) {
				return null
			}
			var b = a.retrieve("liData");
			if (a.get("status") == "insert") {
				var c = JSON.decode(JSON.encode(b));
				if (a.get("origin") == this.options.name) {
					c.status = "delete"
				} else {
					c.status = "insert"
				}
				return c
			} else {
				return b
			}
		},
		doMove : function (b, c) {
			var a = b.dataUl();
			c.each(function (d) {
				if (d.get("origin") != b.options.name) {
					d.set("status", "insert")
				} else {
					if (!$defined(d.get("outer"))) {
						d.set("status", null)
					}
				}
				d.removeClass("li_gridview").inject(a)
			});
			this.adjustItem();
			b.adjustItem()
		},
		doUpOrDown : function (c) {
			var b = this.getCheckedLis()[0];
			if (b) {
				var a;
				if (c == "up") {
					a = b.getPrevious();
					move = "after"
				} else {
					a = b.getNext();
					move = "before"
				}
				if (a) {
					a.inject(b, move);
					this.adjustItem("check")
				}
			}
		},
		adjustItem : function (a) {
			var b = this.dataUl().getChildren();
			b.each(function (c, d) {
				var f = d + 1;
				c.removeClass("sm_data_li_shuang");
				c.removeClass("sm_data_li_dan");
				if (f % 2 == 0) {
					c.addClass("sm_data_li_shuang")
				} else {
					c.addClass("sm_data_li_dan")
				}
				if (!$defined(a)) {
					c.removeClass("li_gridview")
				}
				c.set("rowNum", f)
			}, this)
		},
		setInitData : function (a) {
			this.data = a.trs;
			this.data.each(function (b) {
				b.getValue = function (c) {
					var d = this.tds[c];
					if (!$defined(d)) {
						return null
					}
					return d.value
				}
			})
		},
		clearData : function () {
			this.dataUl().getChildren().each(function (a) {
				a.destroy()
			})
		},
		dataDiv : function () {
			return this.sm_data_div
		},
		dataUl : function () {
			return this.sm_data_ul
		},
		dataY : function () {
			return this.options.dataY / 1
		},
		itemY : function () {
			return 22
		}
	});
var SwordMoveButton = new Class({
		Implements : [Events, Options],
		Extends : SwordMoveBase,
		name : "SwordMoveButton",
		options : {
			sword : null,
			name : null,
			pNode : null
		},
		leftWidgets : new Hash(),
		rightWidgets : new Hash(),
		upWidgets : [],
		downWidgets : [],
		initParam : function (a) {
			this.htmlOptions(a);
			this.initMoveZone()
		},
		pNode : function () {
			return this.options.pNode
		},
		initMoveZone : function () {
			var a = this.createContainer().inject(this.pNode());
			this.container = a;
			var b = this.pNode().getElement("div[name='associate']");
			pc.getPageInit().addEvent("onDataInit", function () {
				this.getAssociate(b)
			}
				.bind(this));
			this.createButton()
		},
		getAssociate : function (a) {
			if ($chk(a)) {
				var b = a.getElements("div[location =='left'||'right']");
				b.each(function (h, f) {
					var g = h.get("widgetName");
					var d = this.loadWidget(g);
					var c = h.get("location");
					var k = d.name;
					if (k != "SwordMove") {
						return
					}
					if (c == "left") {
						this.leftWidgets.include(g, d)
					} else {
						if (c == "right") {
							this.rightWidgets.include(g, d)
						} else {
							if (c == "up") {
								this.upWidgets.include(d)
							} else {
								if (c == "down") {
									this.downWidgets.include(d)
								}
							}
						}
					}
				}
					.bind(this))
			} else {
				alert("请设置关联的组件！")
			}
		},
		createContainer : function () {
			var a = 200;
			var b = new Element("div", {
					name : "console",
					"class" : "moveContainer"
				});
			var c = this.pNode().getChildren("div[name!=associate]");
			if (c.length > 0) {
				var a = c.length * 35;
				b.setStyle("height", a + "px")
			}
			return b
		},
		createButton : function () {
			var a = this.pNode().getElements("div[name!='associate']");
			a.each(function (f) {
				var b = f.get("name");
				var d = f.get("type");
				var c = this.items[b];
				if (c != null) {
					this.container.adopt(this.createDefaultHref(f, b, d, c.title, c["class"], c.enabled))
				} else {}

			}
				.bind(this))
		},
		createDefaultHref : function (f, k, d, g, a, c) {
			var b = k;
			if (!$chk(d)) {
				b = d
			}
			var h = new Element("a", {
					name : b,
					type : d,
					"class" : a,
					title : g,
					enabled : !$chk(f.get("enabled")) ? ($chk(c) ? c : "true") : f.get("enabled")
				});
			if ($chk(f.get("x"))) {
				h.setStyle("width", f.get("x"))
			}
			h.addEvent("click", function () {
				if (h.get("enabled") == "true") {
					switch (d) {
					case "right":
						this.moveTo("right");
						break;
					case "left":
						this.moveTo("left");
						break;
					case "allRight":
						this.moveAllTo("right");
						break;
					case "allLeft":
						this.moveAllTo("left");
						break;
					case "rollback":
						this.rollback();
						break;
					case "up":
						this.doUpOrDown("up");
						break;
					case "down":
						this.doUpOrDown("down");
						break;
					default:
						break
					}
				}
			}
				.bind(this));
			return h
		},
		doUpOrDown : function (a) {
			if (a == "up") {
				this.upWidgets[0].doUpOrDown("up")
			} else {
				this.downWidgets[0].doUpOrDown("down")
			}
		},
		moveLR : function (a, d) {
			var c = null;
			var b = null;
			if (a == "right") {
				c = this.leftWidgets;
				b = this.rightWidgets
			} else {
				c = this.rightWidgets;
				b = this.leftWidgets
			}
			this.readyMove(c, b, d)
		},
		moveTo : function (a) {
			if (a == "left" || a == "right") {
				this.moveLR(a, "checked")
			}
		},
		moveAllTo : function (a) {
			this.moveLR(a, "all")
		},
		rollback : function () {
			var a = this.leftWidgets.map(function (d, c) {
					return d
				});
			var b = a.combine(this.rightWidgets);
			b.each(function (f) {
				var k = f.getLisByOuter();
				k.each(function (l) {
					l.dispose()
				});
				var c = f.getLisByInsert();
				for (var d = 0; d < c.length; d++) {
					var h = c[d].get("origin");
					var g = b.get(h);
					if ($defined(g)) {
						g.doMove(g, f.getInLis(h));
						c = f.getLisByInsert();
						d = 0
					}
				}
				f.adjustItem()
			})
		},
		setDisabled : function (a) {
			var c = this.container.getElements("a[name='" + a + "']");
			if (c.length != 1) {
				alert("元素不存在或指定名称的必须唯一！");
				return
			} else {
				var b = c[0];
				this.setHrefStatus(b, false)
			}
		},
		setEnable : function (a) {
			var c = this.container.getElements("a[name='" + a + "']");
			if (c.length != 1) {
				alert("元素不存在或指定名称的必须唯一！");
				return
			} else {
				var b = c[0];
				this.setHrefStatus(b, true)
			}
		},
		setHrefStatus : function (d, b) {
			if (d.get("tag") == "a") {
				var c = d.get("class");
				var a = d.get("enabled");
				if (b == false && a == "true") {
					d.set("class", c + "_g");
					d.set("enabled", b)
				} else {
					if (b == true && a == "false") {
						d.set("class", c.replace("_g", ""));
						d.set("enabled", b)
					}
				}
			}
		}
	});
SwordMoveButton.implement({
	items : {
		left : {
			name : "left",
			type : "left",
			"class" : "a_r_d",
			enabled : "true",
			title : "选中左移"
		},
		allLeft : {
			name : "allLeft",
			type : "allLeft",
			"class" : "a_r_s",
			enabled : "true",
			title : "全部左移"
		},
		right : {
			name : "right",
			type : "right",
			"class" : "a_l_d",
			enabled : "true",
			title : "选中右移"
		},
		allRight : {
			name : "allRight",
			type : "allRight",
			"class" : "a_l_s",
			enabled : "true",
			title : "全部右移"
		},
		rollback : {
			name : "rollback",
			type : "rollback",
			"class" : "a_l_rollback",
			enabled : "true",
			title : "重置"
		},
		up : {
			name : "up",
			type : "up",
			"class" : "a_l_up",
			enabled : "true",
			title : "上移"
		},
		down : {
			name : "down",
			type : "down",
			"class" : "a_l_down",
			enabled : "true",
			title : "下移"
		}
	}
});
var SwordAccordion = new Class({
		Implements : [Events, Options],
		type : "SwordAccordion",
		options : {
			pNode : null,
			sword : null,
			name : null,
			pos : "relative",
			divWidth : null,
			divHeight : null,
			divLeft : null,
			divTop : null,
			cascadeSign : {
				id : "code",
				pid : "pcode"
			},
			displayTag : "caption",
			startLayer : 1,
			defaultSelectName : null,
			ctrl : null,
			tid : null,
			dataStr : null,
			collapse : "false",
			tree : {},
			onItemClick : $empty
		},
		accordionDiv : null,
		accordionItems : new Hash(),
		curAccordionItem : null,
		data : null,
		root : [],
		childs : new Hash(),
		initialize : function (a) {},
		initParam : function (a) {
			this.htmlOptions(a);
			if ($type(this.options.cascadeSign) == "string") {
				this.options.cascadeSign = JSON.decode(this.options.cascadeSign)
			}
			this.parseDynamicData();
			this.parseAccordionItems(a);
			this.create(a)
		},
		initData : function () {},
		parseDynamicData : function () {
			this.buildData();
			this.parseData()
		},
		buildData : function () {
			if ($chk(this.options.dataStr)) {
				this.data = JSON.decode(this.options.dataStr).data
			} else {
				if ($chk(this.options.ctrl) || $chk(this.options.tid)) {
					this.getDataByCtrl()
				}
			}
		},
		getDataByCtrl : function () {
			var a = pageContainer.getReq({
					tid : this.options.tid,
					ctrl : this.options.ctrl
				});
			pageContainer.postReq({
				req : a,
				async : false,
				onSuccess : function (b) {
					var c = pageContainer.getResData(this.options.name, b);
					this.data = c.data
				}
				.bind(this),
				onError : function (b) {}

				.bind(this)
			})
		},
		parseData : function () {
			if ($chk(this.data)) {
				this.getRoot();
				this.getChildUnderRoot()
			}
		},
		getRoot : function () {
			for (var d = 0; d < this.data.length; d++) {
				var g = this.data[d][this.options.cascadeSign.pid] || this.data[d][this.options.cascadeSign.pid.toUpperCase()];
				var a = true;
				for (var b = 0; b < this.data.length; b++) {
					var f = this.data[b][this.options.cascadeSign.id] || this.data[b][this.options.cascadeSign.id.toUpperCase()];
					if (f == g) {
						a = false;
						break
					}
				}
				if (a) {
					var c = 1;
					if (this.options.startLayer.toInt() > 1) {
						this.getRootByStartLayer(this.data[d], c)
					} else {
						this.root[this.root.length] = this.data[d]
					}
				}
			}
		},
		getRootByStartLayer : function (a, c) {
			var b = c + 1;
			var f = a[this.options.cascadeSign.id] || a[this.options.cascadeSign.id.toUpperCase()];
			for (var d = 0; d < this.data.length; d++) {
				var g = this.data[d][this.options.cascadeSign.pid] || this.data[d][this.options.cascadeSign.pid.toUpperCase()];
				if (f == g) {
					if (b == this.options.startLayer) {
						this.root[this.root.length] = this.data[d]
					} else {
						if (this.isHasChilds(this.data[d])) {
							this.getRootByStartLayer(this.data[d], b)
						}
					}
				}
			}
		},
		getChildUnderRoot : function () {
			for (var b = 0; b < this.root.length; b++) {
				var a = new Array();
				this.getChildNode(this.root[b], a);
				this.childs.set((this.root[b][this.options.cascadeSign.id] || this.root[b][this.options.cascadeSign.id.toUpperCase()]), a)
			}
		},
		getChildNode : function (a, b) {
			var d = a[this.options.cascadeSign.id] || a[this.options.cascadeSign.id.toUpperCase()];
			for (var c = 0; c < this.data.length; c++) {
				var f = this.data[c][this.options.cascadeSign.pid] || this.data[c][this.options.cascadeSign.pid.toUpperCase()];
				if (d == f) {
					b[b.length] = this.data[c];
					if (this.isHasChilds(this.data[c])) {
						this.getChildNode(this.data[c], b)
					}
				}
			}
		},
		isHasChilds : function (c) {
			var b = false;
			var d = c[this.options.cascadeSign.id] || c[this.options.cascadeSign.id.toUpperCase()];
			for (var a = 0; a < this.data.length; a++) {
				var f = this.data[a][this.options.cascadeSign.pid] || this.data[a][this.options.cascadeSign.pid.toUpperCase()];
				if (d == f) {
					b = true;
					break
				}
			}
			return b
		},
		parseAccordionItems : function (b) {
			var a = b.getChildren("div[type=SwordAccordionItem]");
			if (a.length > 0 && !$chk(this.options.defaultSelectName)) {
				this.options.defaultSelectName = a[0].getProperty("name")
			}
			a.each(function (f, d) {
				var c = new SwordAccordionItem();
				c.initParam(f);
				this.accordionItems.set(f.getProperty("name"), c)
			}
				.bind(this));
			if (!$chk(this.options.defaultSelectName) && this.root.length > 0) {
				this.options.defaultSelectName = this.root[0][this.options.cascadeSign.id] || this.root[0][this.options.cascadeSign.id.toUpperCase()]
			}
			this.root.each(function (g, k) {
				var h = {};
				var d = true;
				var f;
				new Hash(g).each(function (m, l) {
					h[l] = m;
					$extend(h, JSON.decode(this.options.tree));
					if (l == this.options.cascadeSign.id || l == this.options.cascadeSign.id.toUpperCase()) {
						h.name = m;
						h.dataStr = "{'data':" + this.childs[m].toJSON() + "}"
					} else {
						if (l == this.options.displayTag || l == this.options.displayTag.toUpperCase()) {
							d = false;
							f = l;
							h[l] = m
						}
					}
				}
					.bind(this));
				var c = new SwordAccordionItem(h);
				if (!d) {
					c.options.caption = h[f]
				}
				this.accordionItems.set((g[this.options.cascadeSign.id] || g[this.options.cascadeSign.id.toUpperCase()]), c)
			}
				.bind(this))
		},
		create : function (a) {
			this.options.pNode = a;
			this.options.pNode.setStyle("height", "99.5%");
			this.options.pNode.setStyle("width", "99.5%");
			this.buildAccordionDiv();
			this.buildAccordionItems();
			this.activeAccordionItem(this.options.defaultSelectName)
		},
		buildAccordionDiv : function () {
			this.accordionDiv = new Element("div", {
					name : this.options.name,
					"class" : "x-according-body x-according-body-noheader"
				}).inject(this.options.pNode);
			if (this.options.pos == "absolute") {
				this.accordionDiv.setStyles({
					position : "absolute",
					left : this.options.divLeft,
					top : this.options.divTop,
					width : this.options.divWidth,
					height : this.options.divHeight
				})
			} else {
				this.accordionDiv.setStyles({
					width : this.options.divWidth,
					height : this.options.divHeight
				})
			}
		},
		buildAccordionItems : function () {
			var a = 0;
			this.accordionItems.each(function (c, b) {
				c.refSwordAccordion = this;
				c.addAccordionItem(++a)
			}
				.bind(this))
		},
		activeAccordionItem : function (a) {
			this.curAccordionItem = this.accordionItems.get(a);
			if ($chk(this.curAccordionItem)) {
				this.curAccordionItem.activeAccordionItem()
			}
		},
		unactiveAccordionItem : function (a) {
			this.accordionItems.get(a).unActiveAccordionItem();
			this.curAccordionItem = null
		},
		calculateItemHeight : function () {
			return this.options.pNode.getSize().y - 23 * this.accordionItems.getLength()
		}
	});
var SwordAccordionItem = new Class({
		Implements : [Events, Options],
		name : "SwordAccordionItem",
		options : {
			name : null,
			caption : "手风琴",
			src : null,
			pNode : null
		},
		refSwordAccordion : null,
		accordionItemDiv : null,
		accordionItemTitleDiv : null,
		accordionItemTitleSpan : null,
		accordionItemContentDiv : null,
		accordionItemContent : null,
		initialize : function (a) {
			this.setOptions(a)
		},
		initParam : function (a) {
			this.htmlOptions(a);
			this.options.pNode = a
		},
		initData : function () {},
		addAccordionItem : function (a) {
			this.buildAccordionItemTitle(a);
			this.buildAccordionItemContent()
		},
		buildAccordionItemTitle : function (b) {
			this.accordionItemDiv = new Element("div", {
					name : "accordionItem_" + this.options.name,
					"class" : "x-according empty x-according-collapsed x-according-" + b
				}).inject(this.refSwordAccordion.accordionDiv);
			this.accordionItemTitleDiv = new Element("div", {
					name : "accordionItemTitle_" + this.options.name,
					"class" : "x-according-header x-unselectable x-accordion-hd",
					styles : {
						cursor : "pointer"
					}
				}).inject(this.accordionItemDiv);
			var a = new Element("div", {
					"class" : "x-tool x-according-tool x-tool-toggle"
				}).inject(this.accordionItemTitleDiv);
			this.accordionItemTitleDiv.addEvent("click", function () {
				if (this.refSwordAccordion.options.collapse == "true") {
					if (this.refSwordAccordion.curAccordionItem == this) {
						if (this.accordionItemContentDiv.getStyle("display") == "none") {
							this.accordionItemDiv.removeClass("x-according-collapsed");
							this.accordionItemContentDiv.setStyles({
								display : "block",
								height : this.refSwordAccordion.calculateItemHeight()
							})
						} else {
							this.accordionItemDiv.addClass("x-according-collapsed");
							this.accordionItemContentDiv.setStyle("display", "none")
						}
					} else {
						if ($chk(this.refSwordAccordion.curAccordionItem)) {
							this.refSwordAccordion.unactiveAccordionItem(this.refSwordAccordion.curAccordionItem.options.name)
						}
						this.refSwordAccordion.activeAccordionItem(this.options.name)
					}
				}
				if (this.refSwordAccordion.curAccordionItem != this) {
					if ($chk(this.refSwordAccordion.curAccordionItem)) {
						this.refSwordAccordion.unactiveAccordionItem(this.refSwordAccordion.curAccordionItem.options.name)
					}
					this.refSwordAccordion.activeAccordionItem(this.options.name)
				}
				if (this.refSwordAccordion.options.onItemClick) {
					this.refSwordAccordion.fireEvent("onItemClick", this.options)
				}
			}
				.bind(this));
			this.accordionItemTitleSpan = new Element("div", {
					text : this.options.caption
				}).inject(this.accordionItemTitleDiv)
		},
		buildAccordionItemContent : function () {
			this.accordionItemContentDiv = new Element("div", {
					name : "accordionItemContentDiv_" + this.options.name,
					"class" : "x-according-bwrap",
					styles : {
						display : "none"
					}
				}).inject(this.accordionItemDiv);
			if ($defined(this.options.src)) {
				this.buildItemContent("iframe");
				this.accordionItemContent.setProperty("src", this.options.src)
			} else {
				if ($chk(this.options.pNode)) {
					this.buildItemContent("div");
					this.accordionItemContent.adopt(this.options.pNode.getChildren())
				} else {
					this.buildItemContent("div");
					jsR.doIm("SwordTree");
					var a = new SwordTree(this.options, this.accordionItemContent);
					a.addEvent("onNodeClick", this.getFunc(a.options.onNodeClick)[0]);
					var b = this.getFunc(a.options.onNodeContextMenu)[0];
					if ($defined(b)) {
						a.addEvent("onNodeContextMenu", b)
					}
					a.build();
					pc.setWidget("accordionItemContent_" + this.options.name, a);
					this.tree = a
				}
			}
			if ($defined(this.options.pNode)) {
				this.options.pNode.destroy()
			}
		},
		buildItemContent : function (a) {
			this.accordionItemContent = new Element(a, {
					name : "accordionItemContent_" + this.options.name
				}).inject(this.accordionItemContentDiv);
			this.accordionItemContent.setStyles({
				width : "100%",
				height : "100%"
			})
		},
		activeAccordionItem : function () {
			this.accordionItemDiv.removeClass("x-according-collapsed");
			this.accordionItemTitleSpan.addClass("x-according-text");
			this.accordionItemContentDiv.setStyles({
				display : "block",
				height : this.refSwordAccordion.calculateItemHeight()
			})
		},
		unActiveAccordionItem : function () {
			this.accordionItemDiv.addClass("x-according-collapsed");
			this.accordionItemTitleSpan.removeClass("x-according-text");
			this.accordionItemContentDiv.setStyle("display", "none")
		}
	});
var SwordCalendar = new Class({
		Implements : [Events, Options],
		options : {
			name : null,
			sword : null,
			caption : "日期控件",
			pNode : null,
			defaultValue : null,
			defValue : null,
			dataformat : "yyyy-MM-dd",
			yearNames : {
				beginYear : "1900",
				endYear : "9999"
			},
			monthNames : i18n.months,
			monthDays : [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
			weekNames : i18n.days,
			lazyMinute : 500,
			showOptions : "true,true,true,false,false,false",
			rule : null,
			showCurDate : false,
			isReadonly : "false",
			edit : null,
			msg : null,
			isShow : "true",
			returnRealValue : "false",
			isShowCloseBtn : "false",
			isShowEraseBtn : "false",
			isShowTodayBtn : "false",
			disable : null,
			toZero : false,
			handInput : "true",
			yearCap : "年",
			autoCtrl : "true",
			dateControl : null
		},
		validate : null,
		parent : null,
		defaultdataformat : "yyyy-MM-dd",
		submitDateformat : "yyyy-MM-dd HH:mm:ss",
		dateDiv : null,
		dateInput : null,
		dateBtn : null,
		datepopDiv : null,
		SelYear : null,
		SelMonth : null,
		SelDay : null,
		SelHour : null,
		SelMinute : null,
		SelSecond : null,
		DivTable : null,
		DivTbody : null,
		oldDate : new Date(),
		grid_onFinished : null,
		CloseBtn : null,
		bcContainer2 : null,
		monthContent : null,
		yearContent : null,
		initialize : function (a) {
			if (!pc.SwordCalendarWindowClick) {
				window.document.addEvent("click", function (g) {
					var c = pc.getCalendar();
					var h = c.dateInput;
					if ($defined(h)) {
						if (h.get("show") == "true") {
							var f = $(g.target);
							if (f.hasClass("sGrid_data_row_item_date")) {
								return
							}
							var d = f.parentNode;
							if (!d) {
								return
							}
							var b = d.parentNode;
							if (f != h && null != c.dateBtn && null != c.datepopDiv && f != c.dateBtn && f != c.ymContainer && f != c.ymct && f != c.SelHour && f != c.SelMinute && f != c.SelSecond && d != c.ymContainer && d != c.ymct && d != c.SelHour && d != c.SelMinute && d != c.SelSecond && d != c.topDiv && f != c.topDiv && b != c.monthContent && b != c.yearContent) {
								if (Browser.Engine.trident4 || Browser.Engine.trident5) {
									if (d != c.dateBtn) {
										pc.getCalendar().hide()
									}
								} else {
									pc.getCalendar().hide()
								}
							}
						}
					}
				});
				pc.SwordCalendarWindowClick = true
			}
		},
		initParam : function (b, a) {
			if (!$defined(b.get("dataformat"))) {
				b.setProperty("dataformat", this.defaultdataformat)
			}
			this.parent = a;
			$extend(this.options, {
				disable : null,
				defValue : null,
				returnRealValue : "false",
				showOptions : "true,true,true,false,false,false",
				isShowCloseBtn : "false",
				isShowEraseBtn : "false",
				isShowTodayBtn : "false",
				showCurDate : false,
				handInput : "true",
				rule : null,
				toZero : false,
				isShow : "true",
				autoCtrl : "true"
			});
			this.htmlOptions(b);
			this.options.defaultValue = this.options.defValue;
			this.build_input(b.get("rule"), b);
			this.build_inputBtn();
			Sword.utils.setWidth(b.get("width"), a ? a.userSize : null, this.dateContentDiv, this.dateInput, true);
			if ((this.options.rule || "").indexOf("must") > -1 && this.parent && this.parent.options.requiredSign == "field") {
				new Element("span", {
					styles : {
						color : "red",
						"float" : "left"
					},
					html : "*"
				}).inject(this.dateContentDiv)
			}
			this.getValidate();
			return this.dateInput
		},
		setValidate : function (a) {
			this.validate = a
		},
		getValidate : function () {
			if (this.validate == null) {
				this.validate = new SwordValidator();
				this.validate.initParam("intime")
			}
		},
		initData : function (b, a) {
			if (!$defined(b) && !$defined(a)) {
				return
			}
			var c = a.get("dataformat");
			a.set("realvalue", b);
			if ($defined(c)) {
				if (b.split(".").length == 2) {
					b = b.split(".")[0];
					a.set("realvalue", b);
					b = SwordDataFormat.formatStringToString(b, this.submitDateformat, c)
				} else {
					b = SwordDataFormat.formatStringToString(b, this.submitDateformat, c)
				}
			}
			a.set("value", b);
			a.set("oValue", b)
		},
		createCalendar : function () {
			if ($chk(this.dateInput.value)) {
				if (SwordDataFormat.isDate(this.dateInput.value, this.dateInput.get("dataformat"))) {
					this.oldDate = SwordDataFormat.formatStringToDate(this.dateInput.value, this.dateInput.get("dataformat"))
				} else {
					this.oldDate = new Date()
				}
			} else {
				this.oldDate = new Date();
				if (this.options.toZero == "true") {
					this.oldDate.setSeconds(0);
					this.oldDate.setMinutes(0);
					this.oldDate.setHours(0)
				}
			}
			this.buildCalendar2();
			this.build_firstPopDiv();
			this.build_SecondpopDiv()
		},
		showCalendar2 : function (a) {
			this.datepopDiv.setStyle("display", "none");
			this.bcContainer2.setStyle("display", "");
			if (a == "month") {
				this.monthContent.setStyle("display", "");
				this.monthContent.set("show", true);
				this.yearContent.setStyle("display", "none");
				this.yearContent.set("show", false)
			} else {
				this.monthContent.setStyle("display", "none");
				this.monthContent.set("show", false);
				this.yearContent.setStyle("display", "");
				this.yearContent.set("show", true)
			}
		},
		hideCalendar2 : function (a) {
			if (this.dateInput.get("dataformat") == "yyyy-MM") {
				this.validateText(this.dateInput.value)
			}
			this.dateInput.set("realvalue", this.dateInput.value);
			this.bcContainer2.setStyle("display", "none");
			if (this.dateInput.get("oValue") == null) {
				this.dateInput.set("oValue", " ")
			}
			var d = this.dateInput.get("oValue");
			if (!$chk(d)) {
				d = " "
			}
			if (d.trim() != this.dateInput.value) {
				var c = this.execGridOnFinished();
				if (this.dateInput.get("show") == "true") {
					var b = this.dateInput.get("onChange") || this.dateInput.get("_onChange");
					if (b) {
						this.getFunc(b)[0](this.dateInput, this, c)
					}
				}
				this.dateInput.set("oValue", this.dateInput.value)
			}
			if (this.dateInput.get("show") == "true") {
				if (this.dateInput.get("onHide")) {
					this.getFunc(this.dateInput.get("onHide"))[0](this.dateInput)
				}
			}
			this.dateInput.set("show", "false");
			if (this.dateInput.get("rule")) {
				this.validate.validate(this.dateInput)
			}
			if (this.formObj && this.formObj.active && this.validate.validate(this.dateInput)) {
				this.formObj.pop_grid_obj.OpenFormUpdateCell(this.formObj.pop_grid_gridname, this.dateInput.get("name"), this.formObj.getValue(this.dateInput.get("name")))
			}
		},
		top_m : null,
		top_l : null,
		top_r : null,
		topDiv : null,
		topDivClone : null,
		buildCalendar2 : function () {
			if (this.bcContainer2) {
				return
			}
			this.bcContainer2 = new Element("div").inject($(document.body));
			this.bcContainer2.addClass("calendar2");
			this.bcContainer2.setStyle("display", "none");
			this.topDiv = new Element("div").inject(this.bcContainer2);
			this.topDiv.addClass("cd2_top");
			this.top_l = new Element("div").inject(this.topDiv);
			this.top_l.addClass("cd2_top_l");
			this.top_m = this.top_l.clone();
			this.top_m.addClass("cd2_top_m");
			this.top_m.inject(this.topDiv);
			this.testMonthDaysFebruary(this.top_m.get("text"));
			this.top_r = this.top_l.clone();
			this.top_r.addClass("cd2_top_r");
			this.top_r.inject(this.topDiv);
			this.top_l.addClass("cd2_top_z");
			this.topDivClone = this.topDiv.clone(false, false);
			this.topDivClone.setStyles({
				display : "none",
				"line-height" : "28px",
				"text-align" : "center",
				"font-weight" : "bold"
			});
			this.topDivClone.set("text", "请选择月份");
			this.topDivClone.inject(this.topDiv, "after");
			this.yearContent = new Element("div").inject(this.bcContainer2);
			this.yearContent.setStyle("display", "none");
			this.yearContent.addClass("cdCellContent");
			var m = new Element("div").setStyle("cursor", "pointer");
			var h = new Element("div").addClass("cd2_cell");
			h.addEvent("mouseover", function (q) {
				var p = new Event(q);
				var n = $(p.target);
				n.addClass("cd2_cell_mouseover")
			}
				.bind(this));
			h.addEvent("mouseout", function (q) {
				var p = new Event(q);
				var n = $(p.target);
				n.removeClass("cd2_cell_mouseover")
			}
				.bind(this));
			var g = new Date().getFullYear() + "";
			var k = g / 1 - 1;
			for (var c = 0; c < 3; c++) {
				var l = m.clone();
				l.inject(this.yearContent);
				for (var b = 0; b < 4; b++) {
					var a = h.clone().inject(l);
					a.set("text", k++);
					a.cloneEvents(h);
					if ((c == 0 && b == 0) || (c == 2 && b == 3)) {
						a.setStyle("color", "gray")
					}
				}
			}
			this.monthContent = new Element("div").inject(this.bcContainer2);
			this.monthContent.setStyle("display", "none");
			this.monthContent.addClass("cdCellContent");
			var f = 1;
			for (var c = 0; c < 3; c++) {
				var d = m.clone();
				d.inject(this.monthContent);
				for (var b = 0; b < 4; b++) {
					var a = h.clone().inject(d);
					a.set("text", (f++) + "月");
					a.cloneEvents(h)
				}
			}
			h.destroy();
			m.destroy();
			this.bcContainer2.addEvent("click", function (r) {
				var q = new Event(r);
				var p = $(q.target);
				var s = p.get("text");
				var n = this.bcContainer2.get("cdtype");
				if (n == "month") {
					if (p.hasClass("cd2_top_z")) {
						this.dealTopL()
					} else {
						if (p.hasClass("cd2_top_m")) {
							this.dealTopM()
						} else {
							if (p.hasClass("cd2_top_r")) {
								this.dealTopR()
							} else {
								if (p.hasClass("cd2_cell")) {
									this.dealMonth(r)
								}
							}
						}
					}
				} else {
					if (n == "year") {
						if (p.hasClass("cd2_top_z")) {
							this.dealTopL()
						} else {
							if (p.hasClass("cd2_top_m")) {
								this.dealTopM()
							} else {
								if (p.hasClass("cd2_top_r")) {
									this.dealTopR()
								} else {
									if (p.hasClass("cd2_cell")) {
										this.dealMonth(r, n)
									}
								}
							}
						}
					} else {
						this.dateInput.set("value", SwordDataFormat.formatStringToString(s, "yyyy", this.dateInput.get("dataformat")));
						this.hideCalendar2(p)
					}
				}
			}
				.bind(this));
			this.top_l.addEvent("mouseover", function () {
				this.top_l.addClass("cd2_top_l_over")
			}
				.bind(this));
			this.top_l.addEvent("mouseout", function () {
				this.top_l.removeClass("cd2_top_l_over")
			}
				.bind(this));
			this.top_r.addEvent("mouseover", function () {
				this.top_r.addClass("cd2_top_r_over")
			}
				.bind(this));
			this.top_r.addEvent("mouseout", function () {
				this.top_r.removeClass("cd2_top_r_over")
			}
				.bind(this));
			this.changeTopMidState("pointer")
		},
		dealTopR : function () {
			if (this.yearContent.get("show") == "true") {
				this.yearContent.getElements("div.cd2_cell").each(function (b) {
					b.set("text", b.get("text") / 1 + 10);
					if (b.get("text") == this.dateInput.get("selYear")) {
						b.addClass("cd2_cell_selected")
					} else {
						b.removeClass("cd2_cell_selected")
					}
				}
					.bind(this));
				var a = this.top_m.get("text").split("-");
				this.top_m.set("text", (a[0] / 1 + 10) + "-" + (a[1] / 1 + 10))
			} else {
				this.top_m.set("text", this.top_m.get("text") / 1 + 1);
				if (this.top_m.get("text") != this.dateInput.get("selYear")) {
					this.monthContent.getElements("div.cd2_cell").removeClass("cd2_cell_selected")
				} else {
					this.monthContent.getElements("div.cd2_cell[text=" + this.dateInput.get("selMonth") + "]").addClass("cd2_cell_selected")
				}
			}
		},
		dealTopL : function () {
			if (this.yearContent.get("show") == "true") {
				this.yearContent.getElements("div.cd2_cell").each(function (b) {
					b.set("text", b.get("text") / 1 - 10);
					if (b.get("text") == this.dateInput.get("selYear")) {
						b.addClass("cd2_cell_selected")
					} else {
						b.removeClass("cd2_cell_selected")
					}
				}
					.bind(this));
				var a = this.top_m.get("text").split("-");
				this.top_m.set("text", (a[0] / 1 - 10) + "-" + (a[1] / 1 - 10))
			} else {
				this.top_m.set("text", this.top_m.get("text") / 1 - 1);
				if (this.top_m.get("text") != this.dateInput.get("selYear")) {
					this.monthContent.getElements("div.cd2_cell").removeClass("cd2_cell_selected")
				} else {
					this.monthContent.getElements("div.cd2_cell[text=" + this.dateInput.get("selMonth") + "]").addClass("cd2_cell_selected")
				}
			}
		},
		dealTopM : function () {
			if (this.monthContent.get("show") == "true") {
				this.monthContent.setStyle("display", "none");
				this.monthContent.set("show", false);
				this.changeTopMidState("default");
				this.yearContent.setStyle("display", "");
				this.yearContent.set("show", true);
				var a = this.top_m.get("text");
				a = a.substring(0, 3) + "0";
				this.yearContent.getElements("div.cd2_cell").each(function (c, b) {
					var d = a / 1 + b - 1 + "";
					c.set("text", d);
					if (d == this.dateInput.get("selYear")) {
						c.addClass("cd2_cell_selected")
					} else {
						c.removeClass("cd2_cell_selected")
					}
				}
					.bind(this));
				this.top_m.set("text", a + "-" + (a / 1 + 9))
			}
		},
		dealMonth : function (c, d) {
			var b = new Event(c);
			var a = $(b.target);
			var k = a.get("text");
			if (k.contains("月")) {
				var f = k.split("月")[0];
				this.testMonthDaysFebruary(this.top_m.get("text"));
				var h = this.options.monthDays[f - 1];
				var l = this.top_m.get("text") + "-" + (f.length == 1 ? "0" + f : f);
				if (this.options.dateControl == "minDay") {
					this.dateInput.set("dataformat", "yyyy-MM-dd");
					this.dateInput.set("value", SwordDataFormat.formatStringToString(l + "-01", "yyyy-MM-dd", this.dateInput.get("dataformat")))
				} else {
					if (this.options.dateControl == "maxDay") {
						this.dateInput.set("dataformat", "yyyy-MM-dd");
						this.dateInput.set("value", SwordDataFormat.formatStringToString(l + "-" + h, "yyyy-MM-dd", this.dateInput.get("dataformat")))
					} else {
						this.dateInput.set("value", SwordDataFormat.formatStringToString(l, "yyyy-MM", this.dateInput.get("dataformat")))
					}
				}
				this.hideCalendar2(a)
			} else {
				if (d != "year") {
					this.monthContent.setStyle("display", "");
					this.monthContent.set("show", true)
				}
				this.changeTopMidState("pointer");
				if (d != "year") {
					this.yearContent.setStyle("display", "none");
					this.yearContent.set("show", false);
					this.top_m.set("text", k)
				}
				if (k == this.dateInput.get("selYear")) {
					this.monthContent.getElements("div.cd2_cell[text=" + this.dateInput.get("selMonth") + "]").addClass("cd2_cell_selected")
				} else {
					this.monthContent.getElements("div.cd2_cell").removeClass("cd2_cell_selected")
				}
				if (d === "year") {
					var g = a.get("text");
					this.dateInput.set("value", g);
					this.hideCalendar2(a)
				}
			}
		},
		changeTopMidState : function (a) {
			if (a == "pointer") {
				this.top_m.setStyle("cursor", "pointer");
				this.top_m.addEvent("mouseover", function () {
					this.topDiv.addClass("cd2_top_over")
				}
					.bind(this));
				this.top_m.addEvent("mouseout", function () {
					this.topDiv.removeClass("cd2_top_over")
				}
					.bind(this))
			} else {
				this.top_m.setStyle("cursor", "default");
				this.top_m.removeEvents("mouseover");
				this.top_m.removeEvents("mouseout");
				this.topDiv.removeClass("cd2_top_over")
			}
		},
		build_SecondpopDiv : function () {
			var a = this.dateInput.get("showOptions").split(",");
			if (a[2] == "false" && a[3] == "false" && a[4] == "false" && a[5] == "false") {
				this.bcContainer2.setStyle("display", "");
				var b = new Date().getFullYear() + "";
				if (a[1] == "true" && a[0] == "true") {
					var g = new Date().getMonth() + 1 + "月";
					var d = b;
					if (this.defaultdataformat == this.dateInput.get("dataformat")) {
						if (this.options.dateControl != "minDay" && this.options.dateControl != "maxDay") {
							this.dateInput.set("dataformat", "yyyy-MM")
						}
					}
					this.topDivClone.setStyle("display", "none");
					this.topDiv.setStyle("display", "");
					this.changeTopMidState("pointer");
					this.showCalendar2("month");
					this.bcContainer2.set("cdtype", "month");
					if (this.dateInput.value != "") {
						var f = SwordDataFormat.formatStringToDate(this.dateInput.value, this.dateInput.get("dataformat"));
						g = f.getMonth() + 1 + "月";
						d = f.getFullYear() + ""
					}
					this.top_m.set("text", d);
					this.dateInput.set("selYear", d);
					this.dateInput.set("selMonth", g);
					this.monthContent.getElements("div.cd2_cell").each(function (k, h) {
						if (k.get("text") == g) {
							k.addClass("cd2_cell_selected")
						} else {
							k.removeClass("cd2_cell_selected")
						}
					})
				} else {
					if (a[0] == "true" && a[1] == "false") {
						if (this.defaultdataformat == this.dateInput.get("dataformat")) {
							this.dateInput.set("dataformat", "yyyy")
						}
						this.topDivClone.setStyle("display", "none");
						this.topDiv.setStyle("display", "");
						this.changeTopMidState("default");
						this.showCalendar2("year");
						this.bcContainer2.set("cdtype", "year");
						if (this.dateInput.value != "") {
							b = SwordDataFormat.formatStringToDate(this.dateInput.value, this.dateInput.get("dataformat")).getFullYear() + ""
						}
						this.dateInput.set("selYear", b);
						var c = b.substring(0, 3) + "0";
						this.top_m.set("text", c + "-" + (c / 1 + 9));
						this.yearContent.getElements("div.cd2_cell").each(function (k, h) {
							k.set("text", c / 1 + h - 1);
							if ((c / 1 + h - 1) + "" == b) {
								k.addClass("cd2_cell_selected")
							} else {
								k.removeClass("cd2_cell_selected")
							}
						})
					} else {
						var g = new Date().getMonth() + 1 + "月";
						if (this.defaultdataformat == this.dateInput.get("dataformat")) {
							this.dateInput.set("dataformat", "MM")
						}
						this.topDivClone.setStyle("display", "");
						this.topDiv.setStyle("display", "none");
						this.showCalendar2("month");
						this.bcContainer2.set("cdtype", "month");
						if (this.dateInput.value != "") {
							var f = SwordDataFormat.formatStringToDate(this.dateInput.value, this.dateInput.get("dataformat"));
							g = f.getMonth() + 1 + "月"
						}
						this.top_m.set("text", b);
						this.dateInput.set("selMonth", g);
						this.monthContent.getElements("div.cd2_cell").each(function (k, h) {
							if (k.get("text") == g) {
								k.addClass("cd2_cell_selected")
							} else {
								k.removeClass("cd2_cell_selected")
							}
						})
					}
				}
			} else {
				this.bcContainer2.setStyle("display", "none");
				this.bcContainer2.erase("cdtype");
				if (a[0] == "true") {
					this.build_popSelectYear();
					this.SelYear.inject(this.ymct)
				} else {
					this.build_popSelectYear();
					this.SelYear.setStyle("display", "none")
				}
				if (a[1] == "true") {
					this.build_popSelectMonth();
					this.SelMonth.inject(this.ymct)
				} else {
					this.SelMonth.setStyle("display", "none")
				}
				if (a[0] == "true" || a[1] == "true") {
					this.show4YearAndMonth(a[0], a[1])
				}
				if (a[3] == "true") {
					this.build_popSelectHour()
				} else {
					this.SelHour.setStyle("display", "none")
				}
				if (a[4] == "true") {
					this.build_popSelectMinute()
				} else {
					this.SelMinute.setStyle("display", "none")
				}
				if (a[5] == "true") {
					this.build_popSelectSecond()
				} else {
					this.SelSecond.setStyle("display", "none")
				}
				if (a[3] == "false" && a[4] == "false" && a[5] == "false") {
					if (this.DivTable.getElement("thead").getChildren().length > 1) {
						this.DivTable.getElement("thead").getChildren()[1].setStyle("display", "none")
					}
				} else {
					if (this.DivTable.getElement("thead").getChildren().length > 1) {
						this.DivTable.getElement("thead").getChildren()[1].setStyle("display", "")
					}
				}
			}
		},
		ymContainer : null,
		ymct : null,
		show4YearAndMonth : function (b, a) {
			if (b == "false") {
				$("navImgll").setStyle("display", "none");
				$("navImgrr").setStyle("display", "none");
				this.ymct.setStyle("width", "150px")
			} else {
				$("navImgll").setStyle("display", "");
				$("navImgrr").setStyle("display", "");
				this.ymct.setStyle("width", "110px")
			}
			if (a == "false") {
				$("navImgl").setStyle("display", "none");
				$("navImgr").setStyle("display", "none")
			}
		},
		build_YearAndMonth : function () {
			this.ymContainer = new Element("div").set("id", "ymContainer").setStyles({
					height : "20px",
					"float" : "left"
				}).inject(this.ymCtTh);
			var d = new Element("div").inject(this.ymContainer);
			d.set({
				id : "navImgll",
				"class" : "navImgll",
				title : "上一年"
			});
			var a = new Element("div").inject(this.ymContainer);
			a.set({
				id : "navImgl",
				"class" : "navImgl",
				title : "上个月"
			});
			this.ymct = new Element("div").set("id", "ymct").inject(this.ymContainer).setStyles({
					align : "center",
					width : "110px",
					height : "20px",
					"float" : "left",
					"line-height" : "20px"
				});
			var c = new Element("div").inject(this.ymContainer);
			c.set({
				id : "navImgr",
				"class" : "navImgr",
				title : "下个月"
			});
			var b = new Element("div").inject(this.ymContainer);
			b.set({
				id : "navImgrr",
				"class" : "navImgrr",
				title : "下一年"
			});
			this.ymContainer.addEvent("click", function (h) {
				var g = h.target;
				if (g != this.SelYear) {
					this.SelYear.setStyle("background", "transparent");
					this.SelYearPopDiv.setStyle("display", "none")
				}
				if (g != this.SelMonth) {
					this.SelMonth.setStyle("background", "transparent");
					this.SelMonthPopDiv.setStyle("display", "none")
				}
				if (g == this.SelYear || g == this.SelMonth) {
					g.setStyles({
						background : "#fff"
					});
					g.focus();
					g.select();
					if (g == this.SelYear) {
						this.build_year();
						this.SelMonth.setStyle("background", "transparent");
						this.SelYearPopDiv.setStyles({
							display : ""
						});
						xyposition(this.SelYear, this.SelYearPopDiv)
					} else {
						this.SelMonthPopDiv.setStyles({
							display : ""
						});
						xyposition(this.SelMonth, this.SelMonthPopDiv)
					}
				} else {
					if (g == d) {
						this.SelYear.set("code", this.SelYear.get("code") / 1 - 1);
						this.SelYear.set("value", this.SelYear.get("code") + this.options.yearCap);
						this.refreshDate(this.SelYear.get("code"))
					}
					if (g == a) {
						var f = this.SelMonth.get("code") / 1 - 1;
						if (f == -1) {
							this.SelYear.set("code", this.SelYear.get("code") / 1 - 1);
							this.SelYear.set("value", this.SelYear.get("code") + this.options.yearCap);
							this.SelMonth.set("code", 11);
							this.SelMonth.set("value", this.options.monthNames[11]);
							this.refreshDate(this.SelYear.get("code"), 11)
						} else {
							this.SelMonth.set("code", this.SelMonth.get("code") / 1 - 1);
							this.SelMonth.set("value", this.options.monthNames[this.SelMonth.get("code")]);
							this.refreshDate(null, this.SelMonth.get("code"))
						}
					}
					if (g == c) {
						var f = this.SelMonth.get("code") / 1 + 1;
						if (f == 12) {
							this.SelYear.set("code", this.SelYear.get("code") / 1 + 1);
							this.SelYear.set("value", this.SelYear.get("code") + this.options.yearCap);
							this.SelMonth.set("code", 0);
							this.SelMonth.set("value", this.options.monthNames[0]);
							this.refreshDate(this.SelYear.get("code"), 0)
						} else {
							this.SelMonth.set("code", this.SelMonth.get("code") / 1 + 1);
							this.SelMonth.set("value", this.options.monthNames[this.SelMonth.get("code")]);
							this.refreshDate(null, this.SelMonth.get("code"))
						}
					}
					if (g == b) {
						this.SelYear.set("code", this.SelYear.get("code") / 1 + 1);
						this.SelYear.set("value", this.SelYear.get("code") + this.options.yearCap);
						this.refreshDate(this.SelYear.get("code"))
					}
					this.giveOutValue()
				}
			}
				.bind(this))
		},
		show : function (a) {
			this.dateInput = a;
			$extend(this.options, {
				autoCtrl : this.dateInput.get("autoCtrl"),
				isShow : this.dateInput.get("isShow"),
				toZero : this.dateInput.get("toZero"),
				name : this.dateInput.get("name"),
				defaultValue : this.dateInput.get("defaultValue"),
				dataformat : this.dateInput.get("dataformat"),
				dateControl : this.dateInput.get("dateControl")
			});
			this.dateInput.set("show", "true");
			this.createCalendar();
			this.options.onShow = this.dateInput.get("onShow") || this.dateInput.retrieve("onShow");
			if ($defined(this.options.onShow) && $chk(this.options.onShow)) {
				this.getFunc(this.options.onShow)[0](this)
			}
			if (this.bcContainer2.get("cdtype")) {
				xyposition(this.dateInput, this.bcContainer2)
			} else {
				this.datepopDiv.setStyles({
					display : ""
				});
				xyposition(this.dateInput, this.datepopDiv);
				this.datepopDiv.fade("in")
			}
			this.dateBtn.addClass("dateBtn_active")
		},
		dateContentDiv : null,
		boxtd : null,
		imgtd : null,
		build_input : function (b, a) {
			this.dateContentDiv = Sword.utils.createTable(this, true, true);
			this.dateInput = new Element("input", {
					rule : b,
					type : "text",
					widget : "calendar",
					name : this.options.name,
					defaultValue : this.options.defaultValue,
					msg : this.options.msg,
					dataformat : this.options.dataformat,
					"class" : "swordform_item_oprate swordform_item_input",
					widgetGetValue : "true",
					returnRealValue : this.options.returnRealValue,
					showOptions : this.options.showOptions,
					isShowCloseBtn : this.options.isShowCloseBtn,
					isShowEraseBtn : this.options.isShowEraseBtn,
					isShowTodayBtn : this.options.isShowTodayBtn,
					isShow : this.options.isShow,
					toZero : this.options.toZero,
					autoCtrl : this.options.autoCtrl,
					dateControl : a.get("dateControl"),
					styles : {
						"float" : "left",
						"margin-left" : "2px"
					},
					oValue : " "
				}).inject(this.boxtd);
			this.dateInput.store("widgetObj", this);
			if (a.get("onHide")) {
				this.dateInput.set("onHide", a.get("onHide"))
			}
			if (a.get("onChange")) {
				this.dateInput.set("_onChange", a.get("onChange"));
				if (this.parent && this.parent.name != "SwordGrid") {
					a.set({
						onChange : "",
						onchange : ""
					})
				}
			}
			if (this.options.isReadonly == "true" || this.options.edit == "false") {
				this.dateInput.set("readonly", true)
			}
			if (this.options.disable == "true") {
				this.dateInput.set("disabled", true);
				this.dateInput.setStyle("cursor", "default")
			}
			if (this.options.showCurDate == "true") {
				this.oldDate = new Date();
				this.dateInput.value = SwordDataFormat.formatDateToString(this.oldDate, this.dateInput.get("dataformat"));
				this.dateInput.set("realvalue", this.dateInput.value);
				this.dateInput.set("oValue", this.dateInput.value)
			} else {
				if ($chk(this.options.defaultValue)) {
					this.dateInput.value = this.options.defaultValue;
					this.dateInput.set("realvalue", this.dateInput.value);
					this.dateInput.set("oValue", this.dateInput.value)
				}
			}
		},
		hide : function () {
			if (!$chk(this.dateInput)) {
				return
			}
			if (this.dateInput.get("dataformat") == "yyyy-MM-dd") {
				this.validateText(this.dateInput.value)
			}
			if (this.dateInput.get("show") == "true") {
				this.dateInput.set("realvalue", this.dateInput.value);
				if (this.bcContainer2.get("cdtype")) {
					this.hideCalendar2();
					this.isOnHide = true
				} else {
					if (this.SelMonthPopDiv) {
						this.SelMonthPopDiv.setStyle("display", "none")
					}
					if (this.SelYearPopDiv) {
						this.SelYearPopDiv.setStyle("display", "none")
					}
					this.datepopDiv.setStyles({
						left : "-500px",
						top : "-500px"
					});
					this.datepopDiv.fade("out")
				}
				this.dateBtn.removeClass("dateBtn_active");
				if (this.dateInput.get("oValue") == null) {
					this.dateInput.set("oValue", " ")
				}
				if (this.dateInput.get("rule")) {
					var d = this.validate.validate(this.dateInput);
					if (!d) {
						return
					}
				}
				if (this.formObj && this.formObj.active && this.validate.validate(this.dateInput)) {
					this.formObj.pop_grid_obj.OpenFormUpdateCell(this.formObj.pop_grid_gridname, this.dateInput.get("name"), this.formObj.getValue(this.dateInput.get("name")))
				}
				var c = this.execGridOnFinished();
				var b = this.dateInput.get("oValue");
				if (!$chk(b)) {
					b = " "
				}
				if (b.trim() != this.dateInput.value) {
					var a;
					if (this.parent && this.parent.name == "SwordGrid") {
						a = this.dateInput.retrieve("onChange")
					}
					var a = this.dateInput.get("onChange") || this.dateInput.get("_onChange");
					if (a) {
						this.getFunc(a)[0](this.dateInput, this, c)
					}
					this.dateInput.set("oValue", this.dateInput.value)
				}
				if (!this.isOnHide && this.dateInput.get("onHide")) {
					this.getFunc(this.dateInput.get("onHide"))[0](this.dateInput)
				}
				this.dateInput.set("show", "false");
				this.defaultValidate(this.dateInput.value, this.dateInput)
			}
		},
		validateText : function (m) {
			var f = this.options.yearNames.beginYear;
			var d = this.options.yearNames.endYear;
			var s = this.dateInput.get("showOptions").split(",");
			var b = this.dateInput.get("dateControl");
			if (s[0] == "true" && s[1] == "true") {
				var k = "";
				var h = "";
				var l = "";
				var c = 0;
				var a = 0;
				if (m.test("^\\d{4}-\\d{1,2}-\\d{0,2}$")) {
					k = m.substring(0, 4);
					h = m.substring(5, 7);
					if (h.contains("-")) {
						h = h.substring(0, 1);
						if (h.toInt() == 0) {
							h = "01"
						} else {
							h = "0" + h
						}
						c = 7
					} else {
						if (h.toInt() > 12) {
							h = "12"
						} else {
							if (h.toInt() == 0) {
								h = "01"
							}
						}
						c = 8
					}
					a = m.length
				} else {
					if (m.test("^\\d{5,7}-\\d{0,2}$")) {
						k = m.substring(0, 4);
						h = m.substring(4, 7);
						if (h.contains("-")) {
							h = h.replace(/-/g, "");
							c = 7
						} else {
							c = 8
						}
						if (h.toInt() > 12) {
							h = "12"
						} else {
							if (h.toInt() == 0) {
								h = "01"
							}
						}
						a = m.length
					} else {
						if (m.test("^\\d{4}-\\d{2,5}$")) {
							k = m.substring(0, 4);
							var g = m.substring(5, m.length);
							var r = g.length;
							if (r == 2) {
								h = g.substring(0, 2);
								if (h.toInt() > 12) {
									h = "12"
								} else {
									if (h.toInt() == 0) {
										h = "01"
									}
								}
								c = 6;
								a = 7
							} else {
								if (r == 3) {
									var q = g.substring(0, 1).toInt();
									var p = g.substring(1, 2).toInt();
									if (q == 0) {
										if (p == 0) {
											h = "01"
										} else {
											if (p != 0) {
												h = "0" + p
											}
										}
										c = 7;
										a = 8
									} else {
										if (q == 1) {
											if (p < 3) {
												h = q + p
											} else {
												h = "0" + h
											}
										} else {
											h = "0" + q;
											c = 6;
											a = 8
										}
									}
								} else {
									var h = g.substring(0, 2);
									c = 7;
									a = 9;
									if (h.toInt() > 12) {
										h = "12"
									} else {
										if (h.toInt() == 0) {
											h = "01"
										}
									}
								}
							}
						} else {
							if (m.test("^\\d{6,10}$")) {
								k = m.substring(0, 4);
								var g = m.substring(4, m.length);
								var r = g.length;
								var q = m.substring(4, 5).toInt();
								if (r == 2) {
									if (q == 0) {
										q = 1
									}
									h = "0" + q;
									c = 9;
									a = 10
								} else {
									if (r == 3) {
										var p = g.substring(1, 2).toInt();
										if (q == 0) {
											if (p == 0) {
												h = "01"
											} else {
												if (p != 0) {
													h = "0" + p
												}
											}
											c = 6;
											a = 7
										} else {
											if (q == 1) {
												if (p < 3) {
													h = q + p
												} else {
													h = "0" + h
												}
											} else {
												h = "0" + q;
												c = 5;
												a = 7
											}
										}
									} else {
										if (r >= 4) {
											var h = g.substring(0, 2);
											c = 7;
											a = 9;
											if (h.toInt() > 12) {
												h = "12"
											} else {
												if (h.toInt() == 0) {
													h = "01"
												}
											}
										}
									}
								}
							}
						}
					}
				}
				if (k != "" && h != "") {
					if (k.toInt() < f.toInt()) {
						k = f
					} else {
						if (k.toInt() > d.toInt()) {
							k = d
						}
					}
					if (h.length == 1) {
						h = "0" + h
					}
					var n = parseInt(this._getDays(k, h));
					if (b == "minDay") {
						l = "-01"
					} else {
						if (b == "maxDay") {
							l = "-" + n
						} else {
							if (s[2] == "true") {
								if (c == m.length) {
									l = "-01"
								} else {
									var l = m.substring(c, a);
									if (l.toInt() > n) {
										l = n
									} else {
										if (l.toInt() == 0) {
											l = "01"
										}
									}
									if (l.length == 1) {
										l = "0" + l
									}
									l = "-" + l
								}
							} else {
								l = ""
							}
						}
					}
					if (h.length == 1) {
						h = "0" + h
					}
					this.dateInput.value = k + "-" + h + l
				} else {
					this.dateInput.value = ""
				}
			} else {
				if (s[0] == "true" && s[1] == "false") {
					if (m.test("^\\d{1,10}$")) {
						var k = "";
						if (m.length > 3) {
							k = m.substring(0, 4)
						} else {
							k = m
						}
						if (k.toInt() < f.toInt()) {
							k = f
						} else {
							if (k.toInt() > d.toInt()) {
								k = d
							}
						}
						this.dateInput.value = k
					} else {
						this.dateInput.value = ""
					}
				} else {
					if (s[0] == "false" && s[1] == "true" && s[2] == "false") {
						if (m.test("^\\d{1,10}")) {
							var h = "";
							if (m.length > 2) {
								h = m.substring(0, 2)
							} else {
								h = m
							}
							if (h.toInt() > 12) {
								h = "12"
							} else {
								if (h.toInt() == 0) {
									h = "01"
								}
							}
							if (h.length == 1) {
								h = "0" + h
							}
							this.dateInput.value = h
						} else {
							this.dateInput.value = ""
						}
					}
				}
			}
			this.dateInput.set("realvalue", this.dateInput.value)
		},
		execGridOnFinished : function () {
			if ($defined(this.grid_onFinished)) {
				var a = this.grid_onFinished(this.dateInput.get("value"));
				this.grid_onFinished = null;
				return a
			}
		},
		build_inputBtn : function () {
			this.dateBtn = this.imgtd;
			this.dateBtn.addClass("dateBtn").addEvents({
				mouseover : function (a) {
					this.dateBtn.addClass("dateBtn_active")
				}
				.bind(this),
				mouseout : function (a) {
					this.dateBtn.removeClass("dateBtn_active")
				}
				.bind(this)
			});
			if ($defined(this.parent) && this.parent.isVal() && $defined(this.options.rule)) {
				Sword.utils.createElAfter(this.dateContentDiv.getChildren()[0].getChildren()[0], this.dateInput)
			}
			if (this.options.disable == "true") {
				this.disable(this.dateInput)
			}
			this.addEventToEl("div")
		},
		ymCtTh : null,
		build_firstPopDiv : function () {
			var d = this.dateInput.get("showOptions").split(",");
			if (this.datepopDiv) {
				if (!$chk(this.ymContainer)) {
					if (d[0] == "true" || d[1] == "true") {
						this.build_YearAndMonth();
						this.ymCtTh.setStyle("display", "")
					}
				} else {
					if (d[0] == "false" && d[1] == "false") {
						this.ymContainer.setStyle("display", "none");
						this.ymCtTh.setStyle("display", "none")
					} else {
						this.ymContainer.setStyle("display", "");
						this.ymCtTh.setStyle("display", "")
					}
				}
				if (d[2] == "true") {
					this.DivTbody.setStyle("display", "");
					if (!this.buildWeek) {
						this.build_popSelectDate()
					}
					this.giveDataTopopDiv_selectDay(this.oldDate.getFullYear(), this.oldDate.getMonth().toInt() + 1, this.oldDate.getDate())
				} else {
					this.DivTbody.setStyle("display", "none")
				}
				this.build_popCloseBtn();
				return
			}
			this.datepopDiv = new Element("div", {
					"class" : "dp_cal"
				}).inject(document.body);
			this.DivTable = new Element("table").inject(this.datepopDiv);
			var k = new Element("thead").inject(this.DivTable);
			var h = new Element("tr").inject(k);
			this.ymCtTh = new Element("th", {
					colspan : "7"
				}).inject(h);
			if (d[0] == "true" || d[1] == "true") {
				this.build_YearAndMonth()
			} else {
				this.ymCtTh.setStyle("display", "none")
			}
			this.SelYear = new Element("input", {
					id : "yearSelect"
				});
			this.SelYear.addEvents({
				blur : function (p) {
					var l = p.target;
					var m = l.value.split(this.options.yearCap)[0];
					var n = this.options.yearNames.beginYear.toInt();
					var q = this.options.yearNames.endYear.toInt();
					if (m < n) {
						m = n
					}
					if (m > q) {
						m = q
					}
					this.SelYear.set("code", m);
					this.SelYear.set("value", m + this.options.yearCap);
					this.SelYear.setStyle("display", "").empty();
					this.SelYear.setStyle("background", "transparent");
					this.refreshDate(m);
					this.giveOutValue()
				}
				.bind(this),
				keydown : function (l) {
					var m = l.code;
					if ((m < 48 || m > 57) && m != 8) {
						return false
					}
				}
				.bind(this),
				keyup : function (l) {
					if (l.code == 13) {
						this.dateInput.focus();
						this.SelYearPopDiv.setStyle("display", "none")
					}
				}
				.bind(this)
			});
			this.SelYear.set("value", this.oldDate.getFullYear() + this.options.yearCap);
			this.SelYear.set("code", this.oldDate.getFullYear());
			this.SelMonth = new Element("input", {
					id : "monthSelect",
					readOnly : true
				});
			this.SelMonth.set("value", this.options.monthNames[this.oldDate.getMonth()]);
			this.SelMonth.set("code", this.oldDate.getMonth());
			var b = new Element("tr").inject(k);
			var g = new Element("th", {
					colspan : "7"
				}).inject(b);
			this.SelHour = new Element("select", {
					id : "hourSelect"
				});
			this.SelHour.set("title", "时");
			var c = new Element("option", {
					value : this.oldDate.getHours()
				}).appendText(this.oldDate.getHours());
			c.inject(this.SelHour);
			this.SelHour.inject(g);
			this.SelMinute = new Element("select", {
					id : "minuteSelect"
				});
			this.SelMinute.set("title", "分");
			var f = new Element("option", {
					value : this.oldDate.getMinutes()
				}).appendText(this.oldDate.getMinutes());
			f.inject(this.SelMinute);
			this.SelMinute.inject(g);
			this.SelSecond = new Element("select", {
					id : "secondSelect"
				});
			var a = new Element("option", {
					value : this.oldDate.getSeconds()
				}).appendText(this.oldDate.getSeconds());
			a.inject(this.SelSecond);
			this.SelSecond.inject(g);
			this.SelSecond.set("title", "秒");
			this.DivTbody = new Element("tbody").inject(this.DivTable);
			if (d[2] == "true") {
				this.build_popSelectDate()
			}
			this.build_popCloseBtn()
		},
		build_popCloseBtn : function () {
			var m = this.dateInput.get("isShowCloseBtn");
			var a = this.dateInput.get("isShowEraseBtn");
			var k = this.dateInput.get("isShowTodayBtn");
			var b;
			if (m == "true" || a == "true" || k == "true") {
				b = "true"
			}
			if (this.CloseBtn != null) {
				this.CloseBtn.destroy();
				this.CloseBtn = null
			}
			if (b == "true") {
				this.CloseBtn = new Element("table").inject(this.datepopDiv);
				var f = new Element("tbody").inject(this.CloseBtn);
				var h = new Element("tr", {
						name : "dayTr"
					}).inject(f);
				var d = new Element("th", {
						colspan : "7"
					}).inject(h);
				if (m == "true") {
					var g = new Element("div", {
							"class" : "dp_error"
						}).inject(d);
					g.addEvent("click", function (p) {
						var n = p.target;
						this.giveOutValue()
					}
						.bind(this))
				}
				if (k == "true") {
					var c = new Element("div", {
							"class" : "dp_todayBtn"
						}).inject(d);
					c.addEvent("click", function () {
						this.oldDate = new Date();
						this.giveOutValue()
					}
						.bind(this))
				}
				if (a == "true") {
					var l = new Element("div", {
							"class" : "dp_clear"
						}).inject(d);
					l.addEvent("click", function (n) {
						this.dateInput.set("value", "");
						this.dateInput.set("realvalue", "");
						this.dateInput.set("oValue", "")
					}
						.bind(this))
				}
			}
		},
		SelYearPopDiv : null,
		SelMonthPopDiv : null,
		build_popSelectYear : function () {
			this.SelYear.setStyle("display", "").empty();
			this.SelYear.setStyle("background", "transparent");
			this.SelYear.set("code", this.oldDate.getFullYear());
			this.SelYear.set("value", this.oldDate.getFullYear() + this.options.yearCap);
			if (this.SelYearPopDiv) {
				return
			}
			this.SelYearPopDiv = new Element("div").addClass("selPopDiv").setStyle("display", "none").inject($(document.body));
			this.build_year()
		},
		getYearMonthDayNum : function (a, b) {
			var c = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
			if (new Date(a, 1, 29).getDate() == 29) {
				c[1] = 29
			}
			return c[b - 1]
		},
		refreshDate : function (a, c) {
			var g;
			if (a != null && c != null) {
				if (this.dateInput.get("showOptions").split(",")[2] == "true") {
					this.giveDataTopopDiv_selectDay(a, c.toInt() + 1, this.oldDate.getDate())
				}
				this.oldDate.setMonth(c);
				this.oldDate.setFullYear(a)
			} else {
				if (c) {
					if (this.dateInput.get("showOptions").split(",")[2] == "true") {
						g = this.oldDate.getDate();
						var d = this.oldDate.getFullYear();
						var b = c.toInt() + 1;
						var f = this.getYearMonthDayNum(d, b);
						if (g > f) {
							g = f
						}
						this.giveDataTopopDiv_selectDay(d, b, g)
					}
					this.oldDate.setDate(g);
					this.oldDate.setMonth(c)
				} else {
					if (a) {
						if (this.dateInput.get("showOptions").split(",")[2] == "true") {
							this.giveDataTopopDiv_selectDay(a, this.oldDate.getMonth().toInt() + 1, this.oldDate.getDate())
						}
						this.oldDate.setFullYear(a)
					}
				}
			}
			this.build_popCloseBtn()
		},
		mtbody : null,
		ytbody : null,
		yctbody : null,
		build_popSelectMonth : function () {
			this.SelMonth.setStyle("display", "").empty();
			this.SelMonth.setStyle("background", "transparent");
			this.SelMonth.set("code", this.oldDate.getMonth());
			this.SelMonth.set("value", this.options.monthNames[this.oldDate.getMonth()]);
			if (this.SelMonthPopDiv) {
				return
			}
			this.SelMonthPopDiv = new Element("div").addClass("selPopDiv").setStyle("display", "none").inject($(document.body));
			if (Browser.Engine.trident4) {
				var b = new Element("iframe");
				b.setStyles({
					width : "100%",
					border : "0px",
					height : "60px",
					filter : "alpha(opacity=0)",
					"-moz-opacity" : "0",
					position : "absolute",
					"z-index" : "-1"
				});
				b.inject(this.SelMonthPopDiv)
			}
			var h = new Element("table").set({
					cellpadding : "3",
					cellspacing : "0",
					nowrap : "nowrap",
					width : "80px"
				}).inject(this.SelMonthPopDiv);
			this.mtbody = new Element("tbody").inject(h);
			var f = new Element("tr");
			var k = new Element("td").addClass("yttd");
			k.addEvent("click", function (n) {
				var m = n.target;
				var l = m.get("code");
				this.SelMonthPopDiv.setStyle("display", "none");
				this.SelMonth.set("code", l);
				this.SelMonth.set("value", m.get("text"));
				this.SelMonth.setStyle("background", "transparent");
				this.refreshDate(null, l);
				this.giveOutValue();
				return false
			}
				.bind(this));
			k.addEvent("mouseover", function (n) {
				var m = new Event(n);
				var l = $(m.target);
				l.addClass("td_mouseover")
			});
			k.addEvent("mouseout", function (n) {
				var m = new Event(n);
				var l = $(m.target);
				l.removeClass("td_mouseover")
			});
			for (var d = 0; d < 6; d++) {
				var a = f.clone().inject(this.mtbody);
				var c = k.clone().inject(a);
				c.set({
					text : this.options.monthNames[d],
					code : d
				});
				c.cloneEvents(k);
				var g = k.clone().inject(a);
				g.set({
					text : this.options.monthNames[d + 6],
					code : d + 6
				});
				g.cloneEvents(k)
			}
			f.destroy();
			k.destroy()
		},
		build_year : function () {
			this.SelYearPopDiv.empty();
			if (Browser.Engine.trident4) {
				var g = new Element("iframe");
				g.setStyles({
					width : "100%",
					border : "0px",
					height : "60px",
					filter : "alpha(opacity=0)",
					"-moz-opacity" : "0",
					position : "absolute",
					"z-index" : "-1"
				});
				g.inject(this.SelYearPopDiv)
			}
			var a = new Element("table").set({
					cellpadding : "3",
					cellspacing : "0",
					nowrap : "nowrap",
					width : "80px"
				}).inject(this.SelYearPopDiv);
			this.ytbody = new Element("tbody").inject(a);
			var n = new Element("tr");
			var f = new Element("td").addClass("yttd");
			f.addEvent("click", function (v) {
				this.SelYearPopDiv.setStyle("display", "none");
				var w = v.target.get("text");
				this.SelYear.set("code", w);
				this.SelYear.set("value", w + this.options.yearCap);
				this.SelYear.setStyle("background", "transparent");
				this.refreshDate(w);
				this.giveOutValue();
				return false
			}
				.bind(this));
			f.addEvent("mouseover", function (x) {
				var w = new Event(x);
				var v = $(w.target);
				v.addClass("td_mouseover")
			});
			f.addEvent("mouseout", function (x) {
				var w = new Event(x);
				var v = $(w.target);
				v.removeClass("td_mouseover")
			});
			var k = this.SelYear.get("code") / 1;
			var b = this.options.yearNames.beginYear.toInt();
			var s = this.options.yearNames.endYear.toInt();
			for (var l = 0; l < 5; l++) {
				var u = n.clone().inject(this.ytbody);
				var c = f.clone().inject(u);
				c.set("text", k - 5 + l);
				c.cloneEvents(f);
				var r = f.clone().inject(u);
				var t = k + l;
				if (t > s) {
					t = b - 1 + l
				}
				r.set("text", t);
				r.cloneEvents(f)
			}
			var p = new Element("table").set({
					id : "asdf",
					nowrap : "nowrap",
					width : "80px"
				}).inject(this.SelYearPopDiv);
			this.yctbody = new Element("tbody").inject(p);
			var d = n.clone().inject(this.yctbody);
			var q = f.clone().addClass("yttd").inject(d);
			q.cloneEvents(f, "mouseover");
			q.cloneEvents(f, "mouseout");
			q.set("text", "←");
			q.addEvent("click", function () {
				a.getElements("td.yttd").each(function (w, v) {
					w.set("text", w.get("text") / 1 - 10)
				});
				return false
			}
				.bind(this));
			var m = f.clone().inject(d);
			m.cloneEvents(f, "mouseover");
			m.cloneEvents(f, "mouseout");
			m.set("text", "×");
			m.addEvent("click", function () {
				this.SelYearPopDiv.setStyle("display", "none");
				this.SelYear.setStyle("background", "transparent");
				return false
			}
				.bind(this));
			var h = f.clone().inject(d);
			h.cloneEvents(f, "mouseover");
			h.cloneEvents(f, "mouseout");
			h.set("text", "→");
			h.addEvent("click", function () {
				a.getElements("td.yttd").each(function (w, v) {
					w.set("text", w.get("text") / 1 + 10)
				});
				return false
			}
				.bind(this));
			n.destroy();
			f.destroy()
		},
		build_popSelectDate : function () {
			var a = new Element("tr").inject(this.DivTbody);
			this.build_popTRWeek(a);
			this.build_popTRDays(this.DivTbody, this.oldDate.getFullYear(), this.oldDate.getMonth(), this.oldDate.getDate())
		},
		build_popSelectHour : function () {
			this.SelHour.setStyle("display", "").empty();
			for (var a = 0; a < 24; a++) {
				var b = new Element("option", {
						value : a
					}).appendText(a);
				b.inject(this.SelHour);
				if (this.oldDate.getHours() == a) {
					b.selected = true
				}
			}
			this.SelHour.addEvent("change", function (f) {
				var d = f.target;
				var c = d.getSelected()[0].value;
				this.oldDate.setHours(c)
			}
				.bind(this))
		},
		build_popSelectMinute : function () {
			this.SelMinute.setStyle("display", "").empty();
			for (var a = 0; a < 60; a++) {
				var b = new Element("option", {
						value : a
					}).appendText(a);
				b.inject(this.SelMinute);
				if (this.oldDate.getMinutes() == a) {
					b.selected = true
				}
			}
			this.SelMinute.addEvent("change", function (f) {
				var d = f.target;
				var c = d.getSelected()[0].value;
				this.oldDate.setMinutes(c)
			}
				.bind(this))
		},
		build_popSelectSecond : function () {
			this.SelSecond.setStyle("display", "").empty();
			for (var a = 0; a < 60; a++) {
				var b = new Element("option", {
						value : a
					}).appendText(a);
				b.inject(this.SelSecond);
				if (this.oldDate.getSeconds() == a) {
					b.selected = true
				}
			}
			this.SelSecond.addEvent("change", function (f) {
				var d = f.target;
				var c = d.getSelected()[0].value;
				this.oldDate.setSeconds(c)
			}
				.bind(this))
		},
		build_popTRWeek : function (c) {
			for (var a = 0; a < this.options.weekNames.length; a++) {
				var b = new Element("th").appendText(this.options.weekNames[a]);
				b.inject(c)
			}
			this.buildWeek = true
		},
		build_popTRDays : function (d, g, f, a) {
			this.testMonthDaysFebruary(g);
			var c = (1 - (7 + new Date(g, f, 1).getDay() - this.getWeekStartDay()) % 7);
			var h;
			while (c <= this.options.monthDays[f]) {
				h = new Element("tr", {
						name : "dayTr"
					});
				for (i = 0; i < 7; i++) {
					if ((c <= this.options.monthDays[f]) && (c > 0)) {
						var b = new Element("td").appendText(c).inject(h);
						b.addEvent("mouseover", function () {
							$(this).addClass("dp_roll")
						});
						b.addEvent("mouseout", function () {
							$(this).removeClass("dp_roll")
						});
						b.addEvent("click", function (m) {
							var k = this.options.monthDays.filter(function (p, n) {
									if (this.SelMonth.get("code") == n) {
										return p
									}
								}
									.bind(this))[0];
							var l = m.target;
							if (this.options.dateControl == "minDay") {
								if (l.innerHTML.toInt() != 1) {
									this.dateInput.getParent("div").set("title", "只能是当前选择月的月初");
									this.dateInput.set("ovalue", "").set("value", "").focus();
									return
								} else {
									this.dateInput.getParent("div").set("title", "")
								}
							}
							if (this.options.dateControl == "maxDay") {
								if (l.innerHTML.toInt() != k) {
									this.dateInput.getParent("div").set("title", "只能是当前选择月的月末");
									this.dateInput.set("ovalue", "").set("value", "").focus();
									return
								} else {
									this.dateInput.getParent("div").set("title", "")
								}
							}
							this.oldDate.setDate(l.innerHTML.toInt());
							this.giveOutValue()
						}
							.bind(this))
					} else {
						b = new Element("td", {
								"class" : "dp_empty"
							}).inject(h)
					}
					if ((c == this.oldDate.getDate()) && (f == this.oldDate.getMonth()) && (g == this.oldDate.getFullYear())) {
						b.addClass("dp_selected")
					}
					if ((c == new Date().getDate()) && (f == new Date().getMonth()) && (g == new Date().getFullYear())) {
						b.addClass("dp_today")
					}
					c++
				}
				h.inject(d)
			}
		},
		testMonthDaysFebruary : function (a) {
			if (this.isLeapYear(a)) {
				this.options.monthDays[1] = 29
			} else {
				this.options.monthDays[1] = 28
			}
		},
		isLeapYear : function (a) {
			return (a % 4 == 0 && a % 100 != 0) || (a % 400 == 0)
		},
		getWeekStartDay : function () {
			return 7
		},
		giveDataTopopDiv : function (a) {
			this.giveDataTopopDiv_selectYear(a.getFullYear());
			this.giveDataTopopDiv_selectMonth(a.getMonth().toInt());
			this.giveDataTopopDiv_selectHour(a.getHours());
			this.giveDataTopopDiv_selectMinute(a.getMinutes());
			this.giveDataTopopDiv_selectSecond(a.getSeconds())
		},
		giveDataTopopDiv_selectYear : function (a) {},
		giveDataTopopDiv_selectMonth : function (a) {},
		giveDataTopopDiv_selectHour : function (a) {
			this.SelHour.getSelected.selected = false;
			this.SelHour.getElement("option[value=" + a + "]").selected = true
		},
		giveDataTopopDiv_selectMinute : function (a) {
			this.SelMinute.getSelected.selected = false;
			this.SelMinute.getElement("option[value=" + a + "]").selected = true
		},
		giveDataTopopDiv_selectSecond : function (a) {
			this.SelSecond.getSelected.selected = false;
			this.SelSecond.getElement("option[value=" + a + "]").selected = true
		},
		giveDataTopopDiv_selectDay : function (b, c, a) {
			this.remove_popTRDays(this.DivTbody);
			this.build_popTRDays(this.DivTbody, b, c.toInt() - 1, a)
		},
		remove_popTRDays : function (a) {
			a.getElements("tr[name=dayTr]").each(function (c, b) {
				c.destroy()
			})
		},
		giveOutValue : function () {
			this.dateInput.value = SwordDataFormat.formatDateToString(this.oldDate, this.dateInput.get("dataformat"));
			this.dateInput.set("realvalue", this.dateInput.value)
		},
		getValue : function (c) {
			var b,
			a = c.get("dataformat");
			if ($defined(c.get("realvalue"))) {
				b = c.get("realvalue")
			} else {
				b = c.get("value")
			}
			if (c.get("returnRealValue") == "false") {
				b = SwordDataFormat.formatStringToString(b, a, c.get("submitDateformat") || this.submitDateformat)
			} else {
				b = $defined(c.get("value")) ? c.get("value") : ""
			}
			return b
		},
		getShowValue : function (c, b) {
			var a = c.get("dataformat") || this.defaultdataformat;
			if (!$chk(b)) {
				if (c.get("showCurDate") == "true") {
					return SwordDataFormat.formatDateToString(new Date(), a)
				} else {
					return b
				}
			}
			if (b.split(".").length == 2) {
				b = b.split(".")[0]
			}
			return SwordDataFormat.formatStringToString(b, this.submitDateformat, a)
		},
		getRealValue : function (c, b) {
			if (!$chk(b)) {
				return b
			}
			if (b.split(".").length == 2) {
				b = b.split(".")[0]
			}
			var a = c.get("dataformat");
			if (c.get("returnRealValue") == "false") {
				b = SwordDataFormat.formatStringToString(b, a, c.get("submitDateformat") || this.submitDateformat)
			}
			return b
		},
		clear : function () {
			this.dateInput.destroy();
			this.dateBtn.destroy();
			this.datepopDiv.fade("out")
		},
		hand_Input1 : function (a) {
			var f = a.target;
			try {
				var h = a.code;
				if (((h > 47) && (h < 58)) || ((h > 96) && (h < 106))) {
					var c = f.value;
					var d = String.fromCharCode(h);
					if (c.length == 0) {
						if (["1", "2"].contains(d)) {
							f.value = (d == "1") ? 199 : 20
						}
						return false
					} else {
						if (c.length == 1) {
							if (c == 1) {
								f.value = 19
							} else {
								f.value = c + d
							}
							return false
						} else {
							if (c.length == 3) {
								f.value = c + d + "-";
								return false
							} else {
								if (c.length == 4) {
									if (parseInt(d) > 1) {
										f.value = c.substring(0, 4) + "-0" + d + "-";
										return false
									} else {
										f.value = c.substring(0, 4) + "-" + d;
										return false
									}
								} else {
									if (c.length == 5) {
										if (parseInt(d) > 1) {
											f.value = c.substring(0, 5) + "0" + d + "-";
											return false
										}
									} else {
										if (c.length == 6) {
											if (parseInt(c.substring(5, 6) + d) > 12) {
												f.value = c.substring(0, 5) + "12-"
											} else {
												if (parseInt(c.substring(5, 6) + d) == 0) {
													f.value = c + 1 + "-"
												} else {
													f.value = c + d + "-"
												}
											}
											return false
										} else {
											if (c.length == 7) {
												if (c.substring(5, 7) == "02" && parseInt(d) > 2) {
													f.value = c + "-";
													return false
												} else {
													if (c.substring(5, 7) != "02" && parseInt(d) > 3) {
														f.value = c.substring(0, 7) + "-0" + d;
														return false
													} else {
														f.value = c.substring(0, 7) + "-" + d;
														return false
													}
												}
											} else {
												if (c.length == 8) {
													if (c.substring(5, 7) == "02" && parseInt(d) > 2) {
														return false
													} else {
														if (parseInt(d) > 3) {
															f.value = c.substring(0, 8) + "0" + d;
															return false
														}
													}
												} else {
													if (c.length == 9) {
														var b = c.substring(8, 9) + d;
														var l = parseInt(b);
														var k = parseInt(this._getDays(c.substring(0, 4), c.substring(5, 7)));
														if (l > k) {
															f.value = c.substring(0, 8) + k
														} else {
															if (l == 0) {
																f.value = c + 1
															} else {
																f.value = c + d
															}
														}
														return false
													} else {
														if (c.length >= 10) {
															f.value = (c + d).substring(0, 10);
															return false
														} else {
															return true
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				} else {
					return (h == 8 || h == 37 || h == 39 || (a.control && h == 86) || (a.shift && h == 36))
				}
			} catch (g) {}

		},
		hand_Input : function (q) {
			var k = q.target;
			try {
				var v = q.code;
				var a = k.value;
				var h = this.getCursortPosition(k);
				var f = a.length;
				var n = document.selection.createRange().text.length;
				var d = this.dateInput.get("showOptions").split(",");
				var b = this.options.dateControl;
				if ((v >= 96) && (v < 106)) {
					v = v - 48
				}
				var p = String.fromCharCode(v);
				if (((v > 47) && (v < 58))) {
					if (h == f && n == 0) {
						if (f == 2) {
							if (d[0] == "false" && d[1] == "true" && d[2] == "false") {
								return false
							}
						} else {
							if (f == 3) {
								var c = "";
								if (d[1] == "true") {
									c = "-"
								}
								var m = a + p;
								if (m.toInt() < this.options.yearNames.beginYear.toInt()) {
									k.value = this.options.yearNames.beginYear + c
								} else {
									if (m.toInt() > this.options.yearNames.endYear.toInt()) {
										k.value = this.options.yearNames.endYear + c
									} else {
										k.value = a + p + c
									}
								}
								return false
							} else {
								if (f == 4) {
									if (d[1] == "true") {
										if (parseInt(p) > 1 && d[2] == "true") {
											k.value = a.substring(0, 4) + "-0" + p + "-";
											return false
										} else {
											k.value = a.substring(0, 4) + "-0" + p;
											return false
										}
									} else {
										return false
									}
								} else {
									if (f == 5) {
										if (parseInt(p) > 1) {
											var d = this.dateInput.get("showOptions").split(",");
											var c = "";
											if (d[2] == "true") {
												c = "-"
											}
											k.value = a + "0" + p + c;
											return false
										}
									} else {
										if (f == 6) {
											var d = this.dateInput.get("showOptions").split(",");
											var c = "";
											if (d[2] == "true") {
												c = "-"
											}
											var w = (a.substring(5, 6) + p).toInt();
											if (w > 12) {
												k.value = a.substring(0, 5) + "12" + c
											} else {
												if (w == 0) {
													k.value = a + 1 + c
												} else {
													k.value = a + p + c
												}
											}
											return false
										} else {
											if (f == 7) {
												if (d[2] == "true") {
													if (a.substring(5, 7) == "02" && parseInt(p) > 2) {
														k.value = a + "-";
														return false
													} else {
														if (a.substring(5, 7) != "02" && parseInt(p) > 3) {
															k.value = a.substring(0, 7) + "-0" + p;
															return false
														} else {
															k.value = a.substring(0, 7) + "-" + p;
															return false
														}
													}
												} else {
													return false
												}
											} else {
												if (f == 8) {
													if (a.substring(5, 7) == "02" && parseInt(p) > 2) {
														k.value = a.substring(0, 8) + "0" + p;
														return false
													} else {
														if (parseInt(p) > 3) {
															k.value = a.substring(0, 8) + "0" + p;
															return false
														}
													}
												} else {
													if (f == 9) {
														var w = a.substring(8, 9) + p;
														var l = w.toInt();
														var g = parseInt(this._getDays(a.substring(0, 4), a.substring(5, 7)));
														if (l > g) {
															k.value = a.substring(0, 8) + g;
															return false
														} else {
															if (l == 0) {
																k.value = a + 1;
																return false
															}
														}
													} else {
														if (f >= 10) {
															if (n < 10) {
																k.value = (a + p).substring(0, 10);
																return false
															} else {
																a = p;
																k.value = "";
																return true
															}
														} else {
															return true
														}
													}
												}
											}
										}
									}
								}
							}
						}
					} else {
						if (d[1] == "true") {
							if (d[2] == "true") {
								if (f >= 10) {
									if (n < 10) {
										k.value = (a + p).substring(0, 10);
										return false
									} else {
										a = p;
										k.value = "";
										return true
									}
								} else {
									return true
								}
							} else {
								var u = 7;
								if (d[0] == "false") {
									u = 2
								}
								if (b == "minDay" || b == "maxDay") {
									u = 10
								}
								if (f >= u) {
									if (n < u) {
										k.value = (a + p).substring(0, u);
										return false
									} else {
										a = p;
										k.value = "";
										return true
									}
								} else {
									return true
								}
							}
						} else {
							if (d[0] == "true") {
								if (f > 4) {
									if (n < 4) {
										k.value = (a + p).substring(0, 4);
										return false
									} else {
										a = p;
										k.value = "";
										return true
									}
								} else {
									return true
								}
							}
						}
						return true
					}
				} else {
					if (v == 229) {
						if (n > 0) {
							k.value = "";
							return true
						}
						if (d[1] == "true") {
							var u = 7;
							if (b == "minDay" || b == "maxDay") {
								u = 10
							}
							if (d[2] == "true" || u == 10) {
								if (f == 4) {
									k.value = a + "-"
								} else {
									if (f == 6) {
										var r = a.substring(5, 6);
										if (r > 1) {
											k.value = a + "-"
										}
									} else {
										if (f == 7) {
											var r = a.substring(6, 7);
											if (r < 3) {
												k.value = a + "-"
											}
										}
									}
								}
								if (f >= 10) {
									return false
								}
							} else {
								if (d[0] == "false") {
									if (f >= 2) {
										return false
									}
								} else {
									if (f >= u) {
										return false
									}
								}
							}
						} else {
							if (f > 3) {
								return false
							}
						}
					} else {
						return (v == 8 || v == 37 || v == 39 || (q.control && v == 86) || (q.shift && v == 36) || v == 229)
					}
				}
			} catch (s) {}

		},
		hand_Input_nctrl : function (b) {
			try {
				var h = b.code;
				if ((h >= 96) && (h < 106)) {
					h = h - 48
				}
				if (((h > 47) && (h < 58)) || (h == 189 && !b.shift) || (!Browser.Engine.trident && h == 45)) {
					var d = b.target,
					c = d.value,
					a = c.length,
					f = d.get("dataformat").length;
					var l = this.getTextRangeIndex(d);
					var k;
					if (Browser.Engine.trident) {
						k = c.substring(0, l[1]) + (h == 189 ? "-" : String.fromCharCode(h)) + c.substring(l[0], a)
					} else {
						k = c.substring(0, l[0]) + (h == 45 ? "-" : String.fromCharCode(h)) + c.substring(l[1], a)
					}
					if (a <= f - 1) {
						this.defaultValidate(k, d);
						return true
					} else {
						if (a == f) {
							if (l[1] - l[0] == 0) {
								return false
							}
							this.defaultValidate(k, d);
							return true
						}
					}
				} else {
					return (h == 8 || h == 37 || h == 39 || (b.control && h == 86) || (b.shift && h == 36))
				}
			} catch (g) {}

		},
		_getDays : function (b, a) {
			a = parseInt(a, 10) + 1;
			return (new Date(b + "/" + a + "/0")).getDate()
		},
		defaultValidate : function (b, a) {
			if (this.options.autoCtrl != "true") {
				if (!a.get("rule") || !a.get("rule").contains("date")) {
					if ($chk(b) && !SwordDataFormat.isDate(b, a.get("dataformat"))) {
						this.validate.showIntimeMes(a, "格式不符合" + a.get("dataformat"));
						this.validate.showIntimeError(a)
					} else {
						if (!a.get("rule")) {
							this.validate.showIntimeCorrect(a);
							this.validate.tooltips.hide(a.get("name"))
						}
					}
				}
			}
		},
		keyEvents : function (d) {
			if (d.key == "backspace") {
				var b = d.target;
				if (b.get("readonly")) {
					return false
				}
				var k;
				var h = b.value,
				f = h.length;
				if (this.options.autoCtrl == "true") {
					var g = this.getCursortPosition(b);
					var a = document.selection.createRange().text.length;
					if (a == 0) {
						a = 1
					}
					h = h.substring(0, g - a) + h.substring(g, h.length);
					b.set("value", h);
					b.set("realvalue", h);
					var c = b.createTextRange();
					c.collapse(true);
					c.moveEnd("character", g - a);
					c.moveStart("character", g - a);
					c.select()
				} else {
					var l = this.getTextRangeIndex(d.target);
					if (Browser.Engine.trident) {
						if (l[1] == l[0]) {
							k = h.substring(0, l[1] - 1) + h.substring(l[1], f)
						} else {
							k = h.substring(0, l[1]) + h.substring(l[0], f)
						}
					} else {
						if (l[1] == l[0]) {
							k = h.substring(0, l[1] - 1) + h.substring(l[1], f)
						} else {
							k = h.substring(0, l[0]) + h.substring(l[1], f)
						}
					}
				}
				this.defaultValidate(k, b);
				return true
			}
		},
		getCursortPosition : function (a) {
			var c = 0;
			if (document.selection) {
				a.focus();
				var b = document.selection.createRange();
				b.moveStart("character", -a.value.length);
				c = b.text.length
			} else {
				if (a.selectionStart || a.selectionStart == "0") {
					c = a.selectionStart
				}
			}
			return (c)
		},
		getTextRangeIndex : function (d) {
			var b = [];
			if ($defined(document.selection)) {
				var c = document.selection.createRange();
				var a = d.createTextRange();
				c.setEndPoint("StartToStart", a);
				b[0] = c.text.length;
				c = document.selection.createRange();
				a = d.createTextRange();
				c.setEndPoint("EndToStart", a);
				b[1] = c.text.length
			} else {
				b[0] = d.selectionStart;
				b[1] = d.selectionEnd
			}
			return b
		},
		setSelYear : function (a) {
			this.SelYear.set("value", a + this.options.yearCap);
			this.SelYear.set("code", a)
		},
		getBoxEl : function (a) {
			return a.getPrevious().getElement(".swordform_item_oprate")
		},
		getImgEl : function (a) {
			return a.getParent().getNext()
		},
		disable : function (b) {
			if ($defined(b)) {
				var a = this.getImgEl(b);
				b.set("disabled", true).addClass("calendar_input_disable").setStyle("background-color", "");
				a.addClass("dateBtn_disable")
			}
		},
		enable : function (c) {
			if ($defined(c)) {
				var a = this.getImgEl(c);
				c.erase("disabled").removeClass("calendar_input_disable");
				a.removeClass("dateBtn_disable");
				c.setStyle("cursor", "");
				var b = c.get("rule");
				if ($defined(b) && b.contains("must")) {
					c.setStyle("background-color", "#fffadb")
				}
			}
		},
		addEventToEl : function (a) {
			if (a == "input") {
				this.dateInput.addEvent("click", function (d) {
					var c = $(new Event(d).target);
					if (c.get("isShow") == "false") {
						return
					}
					if (Browser.Engine.trident) {
						var b = c.createTextRange();
						b.moveEnd("character", c.value.length);
						b.moveStart("character", 0);
						b.select()
					}
					this.show(c)
				}
					.bind(this));
				this.dateInput.addEvent((Browser.Engine.trident || Browser.Engine.webkit) ? "keydown" : "keypress", this.keyEvents.bind(this));
				this.dateInput.addEvent((Browser.Engine.trident || Browser.Engine.webkit) ? "keydown" : "keypress", this.options.autoCtrl == "true" ? this.hand_Input.bind(this) : this.hand_Input_nctrl.bind(this))
			} else {
				this.dateBtn.addEvent("click", function (d) {
					var c = $(new Event(d).target);
					if (c.hasClass("dateBtn_disable")) {
						return
					}
					if (Browser.Engine.trident4) {
						var b = c.getParent("td").getElement("input.swordform_item_oprate");
						this.dateInput = $(b);
						this.dateBtn = c.getParent("td").getElement(".dateBtn")
					} else {
						this.dateBtn = c;
						this.dateInput = this.getBoxEl(this.dateBtn)
					}
				}
					.bind(this))
			}
		}
	});
var SwordFileUpload = new Class({
		Implements : [Events, Options],
		name : "fileUploadCommit",
		options : {
			postData : null
		},
		ExtraDataKey : "postData",
		postDataInput : null,
		formKey : "FileUploadCommitForm",
		iframeKey : "FileUploadCommitIframe",
		commitForm : null,
		commitIframe : null,
		initialize : function (a) {
			new Element("iframe", {
				id : "FileUploadCommitIframe",
				name : "FileUploadCommitIframe",
				styles : {
					display : "none"
				}
			}).inject(document.body)
		},
		initParam : function (a) {
			$extend(this.options, a);
			return this
		},
		commit : function (a, k) {
			this.createUploadForm();
			this.commitForm.getElements("div.uploadGroup").each(function (l) {
				l.destroy()
			});
			var d,
			g,
			c;
			$$("div.uploadGroup").each(function (l) {
				if (l.get("keepfile") != "true") {
					d = l.clone(true);
					d.getElement("input").cloneEvents(l.getElement("input"));
					g = l.getParent();
					g.insertBefore(d, l);
					c = l.retrieve("parent").getWidget(l.get("name"));
					c.resetElStatus(d);
					c.parent.fieldElHash.set(l.get("name"), d)
				} else {
					l.store("pNode", l.getParent())
				}
				l.setStyle("display", "none").inject(this.commitForm)
			}, this);
			var h;
			var f = h = this.options.postData.ctrl;
			if ($defined(f)) {
				var b = f.lastIndexOf("?");
				if (b != -1) {
					h = h.replace("?", "&")
				}
			}
			this.commitForm.set("action", "upload.sword?ctrl=" + ($defined(h) ? h : ""));
			if (a == "false") {
				this.options.postData.data = this.options.postData.data.combine([{
								sword : "attr",
								name : "uploadRedirect",
								value : "true"
							}
						]);
				if ($defined(k) && k.contains("form_")) {
					this.commitForm.set("target", k.split("_")[1])
				} else {
					this.commitForm.set("target", "FileUploadCommitIframe")
				}
			}
			if ($defined(this.postDataInput)) {
				this.postDataInput.set("value", JSON.encode(this.options.postData))
			} else {
				this.postDataInput = new Element("input", {
						type : "hidden",
						name : "postData",
						value : JSON.encode(this.options.postData)
					}).inject(this.commitForm)
			}
			this.commitForm.submit();
			this.commitForm.getChildren("div.uploadGroup").each(function (l) {
				if (l.get("keepfile") == "true") {
					l.setStyle("display", "").inject(l.retrieve("pNode"))
				}
			})
		},
		createUploadForm : function () {
			if (!$defined(this.commitForm)) {
				this.commitForm = new Element("form", {
						name : this.formKey,
						id : this.formKey,
						method : "post",
						display : "none",
						encoding : "multipart/form-data",
						enctype : "multipart/form-data"
					}).inject(document.body)
			}
			return this.commitForm
		}
	});
Swiff.Uploader = new Class({
		Extends : Swiff,
		Implements : Events,
		$family : {
			name : "SwordFile2"
		},
		options : {
			path : jsR.rootPath + "swordweb/widgets/SwordFileUpload2/Swiff.Uploader.swf",
			target : null,
			zIndex : 9999,
			callBacks : null,
			params : {
				wMode : "opaque",
				menu : "false",
				allowScriptAccess : "always"
			},
			typeFilter : null,
			multiple : true,
			queued : true,
			verbose : false,
			height : 30,
			width : 100,
			passStatus : null,
			url : 'upload.sword?ctrl=FileHandleCtrl_save&swordFileMaxSize=-1&swordUploadMaxSize=-1&postData={"ctrl":"FileHandleCtrl_save"}',
			method : null,
			data : null,
			mergeData : true,
			fieldName : null,
			fileSizeMin : 1,
			fileSizeMax : 4 * 1024 * 1024,
			allowDuplicates : false,
			afterLoadWidget : true,
			timeLimit : (Browser.Platform.linux) ? 0 : 30,
			policyFile : null,
			buttonImage : null,
			fileListMax : 0,
			fileListSizeMax : 0,
			instantStart : false,
			appendCookieData : false,
			fileClass : null,
			downloadCtrl : null,
			deleteCtrl : null,
			dataName : null,
			name : null,
			onDeleteBefore : $empty,
			onDownLoadBefore : $empty,
			onFileClick : $empty,
			onFileDbClick : $empty,
			onFileRightClick : $empty,
			onFileMouseOver : $empty,
			onFileMouseOut : $empty,
			onLoad : $empty,
			onFail : $empty,
			onStart : $empty,
			onQueue : $empty,
			onComplete : $empty,
			onBrowse : $empty,
			onDisabledBrowse : $empty,
			onCancel : $empty,
			onSelect : $empty,
			onSelectSuccess : $empty,
			onSelectFail : $empty,
			onButtonEnter : $empty,
			onButtonLeave : $empty,
			onButtonDown : $empty,
			onButtonDisable : $empty,
			onFileStart : $empty,
			onFileStop : $empty,
			onFileRequeue : $empty,
			onFileOpen : $empty,
			onFileProgress : $empty,
			onFileComplete : $empty,
			onFileRemove : $empty,
			onFileSuccess : $empty,
			onBeforeStart : $empty,
			onBeforeStop : $empty,
			onBeforeRemove : $empty
		},
		initData : function () {},
		initialize : function (b) {
			this.addEvent("load", this.initializeSwiff, true).addEvent("select", this.processFiles, true).addEvent("complete", this.update, true).addEvent("fileRemove", function (d) {
				this.fileList.erase(d)
			}
				.bind(this), true);
			this.setOptions(b);
			if (this.options.callBacks) {
				Hash.each(this.options.callBacks, function (f, d) {
					this.addEvent(d, f)
				}, this)
			}
			this.options.callBacks = {
				fireCallback : this.fireCallback.bind(this)
			};
			var c = this.options.path;
			if (!c.contains("?")) {
				c += "?noCache=" + $time()
			}
			this.options.container = this.box = new Element("span", {
					"class" : "swiff-uploader-box"
				}).inject($(this.options.container) || document.body);
			this.target = $(this.options.target);
			if (this.target) {
				var a = window.getScroll();
				this.box.setStyles({
					position : "absolute",
					visibility : "visible",
					zIndex : this.options.zIndex,
					overflow : "hidden",
					height : 1,
					width : 1,
					top : a.y,
					left : a.x
				});
				this.parent(c, {
					params : {
						wMode : "transparent"
					},
					height : "100%",
					width : "100%"
				});
				this.target.addEvent("mouseenter", this.reposition.bind(this, []));
				this.addEvents({
					buttonEnter : this.targetRelay.bind(this, ["mouseenter"]),
					buttonLeave : this.targetRelay.bind(this, ["mouseleave"]),
					buttonDown : this.targetRelay.bind(this, ["mousedown"]),
					buttonDisable : this.targetRelay.bind(this, ["disable"])
				});
				this.reposition();
				window.addEvent("resize", this.reposition.bind(this, []))
			} else {
				this.parent(c)
			}
			if (!Browser.Engine.trident4) {
				this.inject(this.box)
			}
			this.fileList = [];
			this.size = this.uploading = this.bytesLoaded = this.percentLoaded = 0;
			if (Browser.Plugins.Flash.version < 9) {
				this.fireEvent("fail", ["flash"])
			} else {
				this.verifyLoad.delay(1000, this)
			}
		},
		verifyLoad : function () {
			if (this.loaded) {
				return
			}
			if (!this.object.parentNode) {
				this.fireEvent("fail", ["disabled"])
			} else {
				if (this.object.style.display == "none") {
					this.fireEvent("fail", ["hidden"])
				} else {
					if (!this.object.offsetWidth) {
						this.fireEvent("fail", ["empty"])
					}
				}
			}
		},
		fireCallback : function (b, a) {
			if (b.substr(0, 4) == "file") {
				if (a.length > 1) {
					this.update(a[1])
				}
				var f = a[0];
				var c = this.findFile(f.id);
				this.fireEvent(b, c || f, 5);
				if (c) {
					var d = b.replace(/^file([A-Z])/, function (h, g) {
							return g.toLowerCase()
						});
					c.update(f).fireEvent(d, [f], 10)
				}
			} else {
				this.fireEvent(b, a, 5)
			}
			this._render()
		},
		update : function (a) {
			$extend(this, a);
			this.fireEvent("queue", [this], 10);
			return this
		},
		findFile : function (b) {
			for (var a = 0; a < this.fileList.length; a++) {
				if (this.fileList[a].id == b) {
					return this.fileList[a]
				}
			}
			return null
		},
		initializeSwiff : function () {
			this.remote("xInitialize", {
				typeFilter : this.options.typeFilter,
				multiple : this.options.multiple,
				queued : this.options.queued,
				verbose : this.options.verbose,
				width : this.options.width,
				height : this.options.height,
				passStatus : this.options.passStatus,
				url : this.options.url,
				method : this.options.method,
				data : this.options.data,
				mergeData : this.options.mergeData,
				fieldName : this.options.fieldName,
				fileSizeMin : this.options.fileSizeMin,
				fileSizeMax : this.options.fileSizeMax,
				allowDuplicates : this.options.allowDuplicates,
				timeLimit : this.options.timeLimit,
				policyFile : this.options.policyFile,
				buttonImage : this.options.buttonImage
			});
			this.loaded = true;
			this.appendCookieData()
		},
		targetRelay : function (a) {
			if (this.target) {
				this.target.fireEvent(a)
			}
		},
		_render : function () {
			if (!this.form) {
				return
			}
			var a = this.form.options.pNode;
			a.setStyle("zoom", 0);
			a.setStyle("zoom", 1)
		},
		reposition : function (a) {
			a = a || (this.target && this.target.offsetHeight) ? this.target.getCoordinates(this.box.getOffsetParent()) : {
				top : window.getScrollTop(),
				left : -9999,
				width : 40,
				height : 40
			};
			this.box.setStyles(a);
			this.fireEvent("reposition", [a, this.box, this.target])
		},
		setOptions : function (a) {
			if (a) {
				if (a.url) {
					a.url = Swiff.Uploader.qualifyPath(a.url)
				}
				if (a.buttonImage) {
					a.buttonImage = Swiff.Uploader.qualifyPath(a.buttonImage)
				}
				this.parent(a);
				if (this.loaded) {
					this.remote("xSetOptions", a)
				}
			}
			return this
		},
		setEnabled : function (a) {
			this.remote("xSetEnabled", a)
		},
		start : function () {
			this.fireEvent("beforeStart");
			this.remote("xStart")
		},
		stop : function () {
			this.fireEvent("beforeStop");
			this.remote("xStop")
		},
		remove : function () {
			this.fireEvent("beforeRemove");
			this.remote("xRemove")
		},
		fileStart : function (a) {
			this.remote("xFileStart", a.id)
		},
		fileStop : function (a) {
			this.remote("xFileStop", a.id)
		},
		fileRemove : function (a) {
			this.remote("xFileRemove", a.id)
		},
		fileRequeue : function (a) {
			this.remote("xFileRequeue", a.id)
		},
		appendCookieData : function () {
			var a = this.options.appendCookieData;
			if (!a) {
				return
			}
			var c = {};
			document.cookie.split(/;\s*/).each(function (d) {
				d = d.split("=");
				if (d.length == 2) {
					c[decodeURIComponent(d[0])] = decodeURIComponent(d[1])
				}
			});
			var b = this.options.data || {};
			if ($type(a) == "string") {
				b[a] = c
			} else {
				$extend(b, c)
			}
			this.setOptions({
				data : b
			})
		},
		processFiles : function (k, g, b) {
			var f = this.options.fileClass || Swiff.Uploader.File;
			var d = [],
			h = [];
			if (k) {
				k.each(function (l) {
					l.name = decodeURIComponent(l.name);
					var a = new f(this, l);
					if (!a.validate()) {
						a.remove.delay(10, a);
						d.push(a)
					} else {
						this.size += l.size;
						this.fileList.push(a);
						h.push(a);
						a.render()
					}
				}, this);
				this.fireEvent("selectSuccess", [h], 10)
			}
			if (g || d.length) {
				d.extend((g) ? g.map(function (a) {
						if (a.name) {
							a.name = decodeURIComponent(a.name)
						}
						return new f(this, a)
					}, this) : []).each(function (a) {
					a.invalidate().render()
				});
				var c = this;
				d.each(function (a) {
					new Element("li", {
						"class" : "file-invalid",
						events : {
							click : function () {
								this.destroy();
								c._render()
							}
						}
					}).adopt(new Element("span", {
							html : a.validationErrorMessage || a.validationError
						})).inject(this.list, "bottom")
				}, this);
				this.fireEvent("selectFail", [d], 10)
			}
			this.update(b);
			if (this.options.instantStart && h.length) {
				this.start()
			}
			this._render()
		}
	});
$extend(Swiff.Uploader, {
	STATUS_QUEUED : 0,
	STATUS_RUNNING : 1,
	STATUS_ERROR : 2,
	STATUS_COMPLETE : 3,
	STATUS_STOPPED : 4,
	log : function () {
		if (window.console && console.info) {
			console.info.apply(console, arguments)
		}
	},
	unitLabels : {
		b : [{
				min : 1,
				unit : "B"
			}, {
				min : 1024,
				unit : "kB"
			}, {
				min : 1048576,
				unit : "MB"
			}, {
				min : 1073741824,
				unit : "GB"
			}
		],
		s : [{
				min : 1,
				unit : "s"
			}, {
				min : 60,
				unit : "m"
			}, {
				min : 3600,
				unit : "h"
			}, {
				min : 86400,
				unit : "d"
			}
		]
	},
	formatUnit : function (a, k, b) {
		var g = Swiff.Uploader.unitLabels[(k == "bps") ? "b" : k];
		var c = (k == "bps") ? "/s" : "";
		var f,
		d = g.length,
		m;
		if (a < 1) {
			return "0 " + g[0].unit + c
		}
		if (k == "s") {
			var h = [];
			for (f = d - 1; f >= 0; f--) {
				m = Math.floor(a / g[f].min);
				if (m) {
					h.push(m + " " + g[f].unit);
					a -= m * g[f].min;
					if (!a) {
						break
					}
				}
			}
			return (b === false) ? h : h.join(b || ", ")
		}
		for (f = d - 1; f >= 0; f--) {
			m = g[f].min;
			if (a >= m) {
				break
			}
		}
		return (a / m).toFixed(1) + " " + g[f].unit + c
	},
	createFileUi : function (d, a, b) {
		var c = {};
		c.element = new Element("li", {
				"class" : "file",
				id : "file-" + d
			});
		c.title = new Element("span", {
				"class" : "file-title",
				text : a
			});
		if (a.contains(".jpg") || a.contains(".JPG") || a.contains(".bmp") || a.contains(".png") || a.contains(".jpeg") || a.contains(".gif")) {
			c.detail = new Element("span", {
					"class" : "file-detail"
				})
		}
		c.del = new Element("span", {
				"class" : "file-delete",
				text : " "
			});
		c.element.adopt(c.title, c.detail, c.del);
		return c
	},
	uiAddOverOutEvent : function (a, b) {
		if (a.element) {
			a.element.addEvents({
				mouseover : function () {
					if (a.progress) {
						return
					}
					a.del.setStyle("visibility", "visible");
					if (a.detail) {
						a.detail.setStyle("visibility", "visible")
					}
				}
				.bind(this),
				mouseout : function () {
					if (a.progress) {
						return
					}
					a.del.setStyle("visibility", "hidden");
					if (a.detail) {
						a.detail.setStyle("visibility", "hidden")
					}
				}
				.bind(this)
			})
		}
	},
	uiAddEvent : function (a, b) {
		this.uiAddOverOutEvent(a, b);
		if (a.element) {
			a.element.addEvents("click", function () {
				this.remove();
				return false
			}
				.bind(b))
		}
		if (a.cancel) {
			a.cancel.addEvent("click", function () {
				this.remove();
				return false
			}
				.bind(b))
		}
		if (a.del) {
			a.del.addEvent("click", function () {
				if (this.isTmp(a)) {
					Swiff.Uploader.deleteTmp(this.res.getAttr("fileId"), this.base, function () {
						this.remove()
					}
						.bind(this))
				} else {
					this.remove();
					if ($chk(a.element.get("datamap"))) {
						var c = this.base.options.deleteCtrl || this.base.options.deleteTid;
						if ($chk(c)) {
							Swiff.Uploader.deleteF(c, this.base, this.getSubmitData(a), this.base.form, function () {
								var d = a.element.get("id");
								this.onRemove();
								this.base.fileList.each(function (h, g, f) {
									if (h && h.id == d) {
										f.splice(g, 1)
									}
								})
							}
								.bind(this))
						} else {
							alert("服务初始化的文件数据必须走服务删除(请定义deleteCtrl或者deleteTid)")
						}
					}
				}
			}
				.bind(b))
		}
		if (a.detail) {
			a.detail.addEvents({
				click : function (c) {
					if (["jpg", "JPG", "bmp", "png", "jpeg", "gif"].contains(this.extension)) {
						Swiff.Uploader.preview(c, this.base, this)
					}
				}
				.bind(b)
			})
		}
		if (a.title) {
			a.title.addEvents({
				click : function (c) {
					if (!a.element.getParent("div").hasClass("sword_file_upload2_disable")) {
						this.isStopClick = false;
						this.base.fireEvent("onFileClick", [c, this.base, this]);
						if (this.base.imgView) {
							this.base.imgView.setStyle("display", "none")
						}
						if (!this.isStopClick) {
							if (this.isTmp(a)) {
								Swiff.Uploader.downloadTmp(this.res.getAttr("fileId"), c.target.get("text"))
							} else {
								if (this.base.options.downloadCtrl) {
									Swiff.Uploader.download(this.base.options.downloadCtrl, this.base, this.getSubmitData(a), this.base.form)
								}
							}
						}
					}
				}
				.bind(b),
				dblclick : function (c) {
					this.base.fireEvent("onFileDbClick", [c, this.base, this])
				}
				.bind(b),
				mouseenter : function (c) {
					this.base.fireEvent("onFileMouseOver", [c, this.base, this])
				}
				.bind(b),
				mouseleave : function (c) {
					this.base.fireEvent("onFileMouseOut", [c, this.base, this])
				}
				.bind(b),
				mousedown : function (c) {
					if (c.event.button == 2) {
						c.preventDefault();
						this.base.fireEvent("onFileRightClick", [c, this.base, this]);
						document.oncontextmenu = function () {
							return false
						}
					}
				}
				.bind(b)
			})
		}
	},
	deleteTmp : function (b, d, a) {
		var c = $submit(null, null, {
				ctrl : "FileHandleCtrl_clearOne",
				onSubmitAfter : a
			});
		c.pushData("fileId", b);
		d.fireEvent("onDeleteBefore", [c, d]);
		if (c.isContinue) {
			c.submit()
		}
	},
	downloadTmp : function (a, c) {
		var b = $submit(null, null, {
				ctrl : "FileHandleCtrl_downloadOne",
				postType : "download"
			});
		b.pushData("fileId", a);
		b.pushData("fileName", c);
		b.submit()
	},
	download : function (l, f, h, g) {
		var d = $submit(null, null, {
				ctrl : l,
				postType : "download"
			});
		if (g) {
			var c = JSON.decode(h);
			var b = {
				name : f.options.name,
				sword : "SwordForm",
				data : {}

			};
			for (var a in c) {
				b.data[a] = {
					value : c[a]
				}
			}
			d.pushData(b)
		} else {
			d.pushData(h)
		}
		f.fireEvent("onDownLoadBefore", [d, f]);
		d.submit()
	},
	deleteF : function (b, d, g, l, c) {
		var n = b.contains("Ctrl") ? {
			ctrl : b,
			postType : "ajax",
			onSuccess : c
		}
		 : {
			tid : tid,
			postType : "ajax",
			onSubmitAfter : c
		};
		var h = $submit(null, null, n);
		if (l) {
			var m = JSON.decode(g);
			var a = {
				name : d.options.name,
				sword : "SwordForm",
				data : {}

			};
			for (var f in m) {
				a.data[f] = {
					value : m[f]
				}
			}
			h.pushData(a)
		} else {
			h.pushData(g)
		}
		d.fireEvent("onDeleteBefore", [h, d]);
		if (h.isContinue) {
			h.submit()
		}
	},
	preview : function (f, d, b) {
		var c = f.event;
		if (!$chk(c.fileSrc)) {
			var a = JSON.decode(f.target.getParent().get("dataMap"));
			if (a) {
				c.fileSrc = a.path
			} else {
				c.fileSrc = "swordIntimeUpTmp/" + b.res.data[0].value
			}
		}
		if (!d.imgView) {
			d.imgView = new Element("img", {
					title : "点击消失",
					events : {
						click : function () {
							this.setStyle("display", "none")
						}
					}
				}).inject(document.body)
		}
		d.imgView.set("src", "").set("src", c.fileSrc).addClass("sword_file_img_preview").setStyles({
			display : "",
			top : c.clientY + 10,
			left : c.clientX - 200
		})
	}
});
Swiff.Uploader.qualifyPath = (function () {
	var a;
	return function (b) {
		(a || (a = new Element("a"))).href = b;
		return a.href
	}
})();
Swiff.Uploader.File = new Class({
		Implements : Events,
		initialize : function (b, a) {
			this.base = b;
			this.update(a)
		},
		update : function (a) {
			return $extend(this, a)
		},
		validate : function () {
			var a = this.base.options;
			if (a.fileListMax && this.base.fileList.length >= a.fileListMax) {
				this.validationError = "fileListMax";
				return false
			}
			if (a.fileListSizeMax && (this.base.size + this.size) > a.fileListSizeMax) {
				this.validationError = "fileListSizeMax";
				return false
			}
			return true
		},
		invalidate : function () {
			this.invalid = true;
			this.base.fireEvent("fileInvalid", this, 10);
			return this.fireEvent("invalid", this, 10)
		},
		render : function () {
			return this
		},
		setOptions : function (a) {
			if (a) {
				if (a.url) {
					a.url = Swiff.Uploader.qualifyPath(a.url)
				}
				this.base.remote("xFileSetOptions", this.id, a);
				this.options = $merge(this.options, a)
			}
			return this
		},
		start : function () {
			this.base.fileStart(this);
			return this
		},
		stop : function () {
			this.base.fileStop(this);
			return this
		},
		remove : function () {
			this.base.fileRemove(this);
			return this
		},
		requeue : function () {
			this.base.fileRequeue(this)
		}
	});
if (!window.SwordUpload2) {
	var SwordUpload2 = {}

}
SwordUpload2.Attach = new Class({
		Extends : Swiff.Uploader,
		options : {
			queued : false,
			instantStart : true
		},
		initialize : function (g, f, d, c) {
			if (g) {
				this.list = g.getElement(f);
				this.selects = g.getElements(d)
			} else {
				this.list = $(f);
				this.selects = $(d) ? $$($(d)) : $$(d)
			}
			c.target = this.selects[0];
			c.fileClass = c.fileClass || SwordUpload2.Attach.File;
			this.parent(c);
			this.addEvent("onFileRequeue", function (h) {
				h.ui.element.getElement(".file-error").destroy();
				h.ui.cancel.set("html", "取消").removeEvents().addEvent("click", function () {
					h.remove();
					return false
				});
				this.start()
			}
				.bind(this));
			var b = this;
			this.selects.addEvents({
				click : function () {
					return false
				},
				mouseenter : function () {
					this.addClass("hover");
					b.reposition()
				},
				mouseleave : function () {
					this.removeClass("hover");
					this.blur()
				},
				mousedown : function () {
					this.focus()
				}
			});
			if (this.selects.length == 2) {
				this.selects[1].setStyle("display", "none");
				this.addEvents({
					selectSuccess : this.onSelectSuccess,
					fileRemove : this.onFileRemove
				})
			}
			if (this.list && this.list.getChildren().length > 0) {
				var a = this.options.fileClass || Swiff.Uploader.File;
				this.list.getChildren().each(function (k) {
					var m = JSON.decode(k.get("dataMap"));
					m.status = null;
					if (!m.size) {
						m.size = 0
					}
					var h = new a(this, m);
					h.addEvents({
						open : h.onOpen,
						remove : h.onRemove,
						requeue : h.onRequeue,
						progress : h.onProgress,
						stop : h.onStop,
						complete : h.onComplete,
						error : h.onError
					});
					this.size += m.size;
					var l = {};
					l.element = k;
					l.del = k.getElement("span.file-delete");
					l.title = k.getElement("span.file-title");
					l.detail = k.getElement("span.file-detail");
					h.ui = l;
					this.fileList.push(h);
					Swiff.Uploader.uiAddEvent(l, h)
				}
					.bind(this))
			}
		},
		onSelectSuccess : function () {
			if (this.fileList.length > 0) {
				this.selects[0].setStyle("display", "none");
				this.selects[1].setStyle("display", "inline");
				this.target = this.selects[1];
				this.reposition()
			}
		},
		onFileRemove : function () {
			if (this.fileList.length == 0) {
				this.selects[0].setStyle("display", "inline");
				this.selects[1].setStyle("display", "none");
				this.target = this.selects[0];
				this.reposition()
			}
		},
		start : function () {
			if (Browser.Platform.linux && window.confirm(MooTools.lang.get("SwordUpload2", "linuxWarning"))) {
				return this
			}
			return this.parent()
		},
		getValue : function () {
			if (this.fileList.length == 0) {
				return ""
			}
			var a = [];
			this.fileList.each(function (c) {
				var b = {
					name : decodeURIComponent(c.name),
					fileId : $chk(c.res) ? c.res.getAttr("fileId") : c.id,
					size : c.size,
					status : c.status,
					dataMap : $chk(c.ui.element.get("dataMap")) ? JSON.decode(c.ui.element.get("dataMap")) : null
				};
				a.push(b)
			});
			return JSON.encode(a)
		},
		commit : function () {
			if (this.fileList.length == 0) {
				return ""
			}
			this.fileList.each(function (a) {
				a.status = null
			})
		},
		disable : function (a) {
			if (!a.hasClass("sword_file_upload2_disable")) {
				a.addClass("sword_file_upload2_disable")
			}
		},
		enable : function (a) {
			if (a.hasClass("sword_file_upload2_disable")) {
				a.removeClass("sword_file_upload2_disable")
			}
		},
		readonly : function () {
			var a = this.con;
			if (!a.hasClass("sword_file_upload2_readonly")) {
				a.addClass("sword_file_upload2_readonly")
			}
		},
		editable : function () {
			var a = this.con;
			if (a.hasClass("sword_file_upload2_readonly")) {
				a.removeClass("sword_file_upload2_readonly")
			}
		},
		stop : function (a) {
			a.isStopClick = true
		},
		reset : function () {
			this.initData({
				initPage : false
			})
		},
		initData : function (b) {
			if (b.initpage != true) {
				var a = this.options.fileClass || Swiff.Uploader.File;
				this.list.getChildren().each(function (c) {
					c.destroy()
				});
				this.fileList.each(function (d, c) {
					if (d.isTmp(d.ui)) {
						Swiff.Uploader.deleteTmp(d.res.getAttr("fileId"), d.base, function () {
							this.remove()
						}
							.bind(d))
					} else {
						d.remove()
					}
				});
				this.size = 0;
				if (!$chk(b.data)) {
					return
				}
				b.data.each(function (f) {
					f.status = null;
					if (!f.size) {
						f.size = 0
					}
					var h = f.name;
					if (h && h.indexOf(".") != -1) {
						var d = h.split(".");
						var g = d[d.length - 1];
						f.extension = g
					}
					if (!$chk(f.id)) {
						f.id = Math.random()
					}
					var c = new a(this, f);
					this.size += f.size;
					this.fileList.push(c);
					c.render();
					c.ui.element.set("dataMap", JSON.encode(f));
					c.ui.cancel.destroy();
					c.ui.progress.element.destroy();
					c.ui.progress = null
				}
					.bind(this))
			}
		}
	});
SwordUpload2.Attach.File = new Class({
		Extends : Swiff.Uploader.File,
		render : function () {
			if (this.invalid) {
				if (this.validationError) {
					var b = MooTools.lang.get("SwordUpload2", "validationErrors")[this.validationError] || this.validationError;
					this.validationErrorMessage = b.substitute({
							name : this.name,
							size : Swiff.Uploader.formatUnit(this.size, "b"),
							fileSizeMin : Swiff.Uploader.formatUnit(this.base.options.fileSizeMin || 0, "b"),
							fileSizeMax : Swiff.Uploader.formatUnit(this.base.options.fileSizeMax || 0, "b"),
							fileListMax : this.base.options.fileListMax || 0,
							fileListSizeMax : Swiff.Uploader.formatUnit(this.base.options.fileListSizeMax || 0, "b")
						})
				}
				this.remove();
				return
			}
			this.addEvents({
				open : this.onOpen,
				remove : this.onRemove,
				requeue : this.onRequeue,
				progress : this.onProgress,
				stop : this.onStop,
				complete : this.onComplete,
				error : this.onError
			});
			this.ui = Swiff.Uploader.createFileUi(this.id, this.name, this.size);
			this.ui.cancel = new Element("a", {
					"class" : "file-cancel",
					text : "取消",
					href : "#"
				}).inject(this.ui.element);
			this.ui.element.inject(this.base.list).highlight();
			var a = new Element("img", {
					"class" : "file-progress",
					src : jsR.rootPath + "swordweb/widgets/SwordFileUpload2/progress_bar.gif"
				}).inject(this.ui.title, "after");
			this.ui.progress = new Fx.ProgressBar(a, {
					fit : true
				}).set(0);
			Swiff.Uploader.uiAddEvent(this.ui, this);
			this.base.reposition();
			return this.parent()
		},
		isTmp : function (a) {
			if (this.base.form) {
				if (!$chk(a.element.get("dataMap"))) {
					return true
				} else {
					return false
				}
			}
			if (!this.grid) {
				return false
			}
			if (this.grid.manager.getRow(this.grid.cell).get("status") == "insert") {
				return true
			}
			var b = this.grid.manager.getOneRowData(this.grid.cell);
			var c = this.grid.name;
			if (!b.tds[c]) {
				return false
			}
			return b.tds[c].tmp == true
		},
		getSubmitData : function (b) {
			if (this.grid) {
				return this.grid.manager.getRowsGridData([this.grid.cell])
			}
			if (this.base.form) {
				var a = b.element.get("dataMap");
				return $chk(a) ? a : ""
			}
		},
		onOpen : function () {
			this.ui.element.addClass("file-uploading");
			if (this.ui.progress) {
				this.ui.progress.set(0)
			}
		},
		onRemove : function () {
			this.ui = this.ui.element.destroy();
			this.base.fireEvent("fileRemove", [this])
		},
		onProgress : function () {
			if (this.ui.progress) {
				this.ui.progress.start(this.progress.percentLoaded)
			}
		},
		onStop : function () {
			this.remove()
		},
		onComplete : function () {
			this.ui.element.removeClass("file-uploading");
			if (this.response.error) {
				var c = MooTools.lang.get("SwordUpload2", "errors")[this.response.error] || "{error} #{code}";
				this.errorMessage = c.substitute($extend({
							name : decodeURIComponent(this.name)
						}, this.response));
				this.ui.cancel.set("html", "重试").removeEvents().addEvent("click", function () {
					this.requeue();
					return false
				}
					.bind(this));
				new Element("span", {
					html : this.errorMessage,
					"class" : "file-error"
				}).inject(this.ui.cancel, "after");
				this.base.fireEvent("fileError", [this, this.response, this.errorMessage]);
				this.fireEvent("error", [this, this.response, this.errorMessage]);
				return
			}
			if (this.ui.progress) {
				this.ui.progress = this.ui.progress.cancel().element.destroy()
			}
			this.ui.cancel = this.ui.cancel.destroy();
			var a = this.response.text || "";
			this.ui.element.highlight("#e6efc2");
			var b = new Element("div").set("html", a).getElement("div[id=SwordPageData]").get("data");
			b = JSON.decode(b);
			b.getAttr = pc.getAttrFunc;
			this.res = b;
			this.base.fireEvent("fileSuccess", [this, this.res])
		},
		onError : function () {
			this.ui.element.addClass("file-failed")
		}
	});
(function () {
	var a = {
		fileName : "{name}",
		cancel : "取消",
		cancelTitle : "单机进行取消",
		validationErrors : {
			duplicate : "文件 <em>{name}</em> 已经上传过了，请不要重复上传.",
			sizeLimitMin : "文件 <em>{name}</em> (<em>{size}</em>) 太小了，不满足最小文件限制： {fileSizeMin}.",
			sizeLimitMax : "文件 <em>{name}</em> (<em>{size}</em>) 太大了， 请上传小于 <em>{fileSizeMax}</em> 的文件.",
			fileListMax : "文件 <em>{name}</em> 没有上传, 超过了最大数量限制： <em>{fileListMax} files</em> ，请删除已经上传的文件再上传.",
			fileListSizeMax : "文件 <em>{name}</em> (<em>{size}</em>) 太大了, 超过了上传文件总大小 <em>{fileListSizeMax}</em> ，请删除一些或者挑小一些的文件上传.",
			typeMismatch : "文件 <em>{name}</em> 类型不符合要求"
		},
		errors : {
			httpStatus : "出错了，服务器返回的状态码： #{code}",
			securityError : "Security error occured ({text})",
			ioError : "Error caused a send or load operation to fail ({text})"
		},
		linuxWarning : "Warning: Due to a misbehaviour of Adobe Flash Player on Linux,\nthe browser will probably freeze during the upload process.\nDo you want to start the upload anyway?"
	};
	if (MooTools.lang) {}
	else {
		MooTools.lang = {
			get : function (c, b) {
				return a[b]
			}
		}
	}
})();
function file2OptionsReset(g, f) {
	var a = {};
	for (var d in g) {
		var c = f.getAttribute(d);
		if (c == "true") {
			a[d] = true;
			continue
		}
		if (c == "false") {
			a[d] = false;
			continue
		}
		if ("typeFilter" == d && c) {
			a[d] = JSON.decode(c);
			continue
		}
		if ((/^on[A-Z]/).test(d) && c) {
			var b = sword_getFunc(c);
			if (b.length > 0) {
				a[d] = b[0]
			}
			continue
		}
		a[d] = ($chk(c) && $defined(c)) ? c : g[d]
	}
	return a
}
function initUp4Template(k, h, l, a) {
	var f = SwordUpload2.Attach.prototype.options;
	var d = file2OptionsReset(f, h);
	var c = new SwordUpload2.Attach(k, "[name=up-list]", "[name=up-attach]", d);
	c.form = a;
	c.con = l;
	var g = h.get("rule");
	if (g) {
		c.con.set("rule", g)
	}
	var b = h.get("msg");
	if (b) {
		c.con.set("msg", b)
	}
	c.con.store("upManager", c);
	return c
}
function initIntimeUp(b, a, l) {
	var k = l.get("addCaption") || "添加文件";
	var g = SwordUpload2.Attach.prototype.options;
	var f = file2OptionsReset(g, l);
	var m = l.get("title") || "";
	if (m) {
		m = 'title="' + m + '"'
	}
	b.set("html", "<div " + m + ' name="' + a + '" class="sword_file_upload2" style="background-color:;"> <ul name="up-list" class="up-list"></ul> <a style=" color:blue;text-decoration: underline;" name="up-attach" >' + k + "</a></div>");
	var d = new SwordUpload2.Attach(b, "[name=up-list]", "[name=up-attach]", f);
	d.con = b.getElement("div.sword_file_upload2");
	var h = l.get("rule");
	if (h) {
		d.con.set("rule", h)
	}
	var c = l.get("msg");
	if (c) {
		d.con.set("msg", c)
	}
	d.con.store("upManager", d);
	return d
}
var SwordForm$Layout = {
	deflayer : {
		cols : 2,
		item : {
			trs : [[{
						name : "caption"
					}, {
						name : "name"
					}
				]]
		}
	},
	layer0 : {
		cols : 1,
		item : {
			trs : [[{
						name : "caption"
					}, {
						name : "name"
					}
				]]
		}
	},
	layer1 : {
		cols : 2,
		item : {
			trs : [[{
						name : "caption"
					}, {
						name : "name"
					}
				]]
		}
	},
	layer2 : {
		cols : 3,
		item : {
			trs : [[{
						name : "caption"
					}, {
						name : "name"
					}
				]]
		}
	},
	layer3 : {
		cols : 1,
		item : {
			trs : [[{
						name : "caption"
					}, {
						name : "name"
					}, {
						name : "des"
					}
				]]
		}
	},
	layer4 : {
		cols : 2,
		item : {
			trs : [[{
						name : "caption"
					}, {
						name : "name"
					}, {
						name : "des"
					}
				]]
		}
	}
};
var SwordForm = SwordForm_plex = new Class({
		Implements : [Events, Options],
		Extends : PageContainer,
		name : "SwordForm",
		$family : {
			name : "SwordForm"
		},
		options : {
			sword : null,
			name : null,
			caption : null,
			layout : null,
			pNode : null,
			panel : "false",
			beanname : null,
			userDefine : null,
			onFinish : $empty,
			size : null,
			css : null,
			isValidate : "",
			vType : null,
			topPanel : false,
			btmPanel : false,
			requiredSign : "caption",
			edit : null,
			isShowTogdiv : false,
			togclick : null,
			valfocus : true,
			noNextEvent : null
		},
		userSize : null,
		idx : 0,
		Vobj : null,
		itemsDiv : [],
		defAtts : ["caption", "name", "des"],
		elmodel : ["div", "item", "div"],
		hasFile : false,
		wrapDiv : null,
		lazyInitData : new Hash(),
		fieldElHash : null,
		initDataObj : null,
		isHasFile : function () {
			return this.hasFile
		},
		initParam : function (a) {
			this.fieldElHash = new Hash();
			this.htmlOptions(a);
			this.tooltips = new SwordToolTips();
			if (a.getElements("div[type='file']").length > 0) {
				this.hasFile = true
			}
			this.Vobj = new SwordValidator();
			this.options.vType = this.options.vType || "intime";
			this.Vobj.initParam(this.options.vType);
			this.createForm(a)
		},
		createForm : function (htmlNode) {
			this.options.pNode.set({
				"class" : "swordfrom_div",
				align : "center"
			});
			if (this.options.userDefine == "true") {
				this.setEventDelegator()
			} else {
				this.userSize = JSON.decode(this.options.size);
				var dftsize = $extend({
						ButtonWidth : 75,
						ButtonWidth : 75,
						CaptionWidth : 80,
						TdWidth : 250,
						FiledWidth : 145,
						DesWidth : 170,
						VimgWidth : 17,
						VimgHeight : 21,
						VFiledWidth : 180
					}, this.userSize);
				var dftcss = $extend({
						caption : null,
						text : null
					}, JSON.decode(this.options.css));
				this.wrapDiv = new Element("div", {
						align : "center",
						"class" : "swordfrom_wrap_div"
					}).inject(this.options.pNode);
				if (this.options.topPanel == "true") {
					var div = new Element("div", {
							"class" : "swordform_panel_top"
						}).inject(this.wrapDiv);
					div.set("html", "<div class='l'></div><div class='r'></div>")
				}
				if (this.options.panel == "true") {
					var panelDiv = new SwordPanel({
							pNode : this.wrapDiv,
							caption : this.options.caption
						}).initParam();
					if (this.options.isShowTogdiv == "true") {
						new Element("div", {
							"class" : "x-tool",
							title : "收缩",
							events : {
								click : function (e) {
									var tar = new Event(e).target;
									this.toggleFormDisplay(tar)
								}
								.bind(this)
							}
						}).inject(panelDiv.tc, "top")
					}
				}
				var blocks = htmlNode.getChildren(">div[type='block']");
				var allitems = htmlNode.getChildren(">div[console!='submit'][console!='reset'][console!='button']");
				if (!$chk(blocks) || blocks.length == 0) {
					blocks = ["noblcok"]
				}
				var hiddens = [];
				var allayer = SwordForm$Layout[this.options.layout] || SwordForm$Layout.deflayer;
				blocks.each(function (block) {
					var items,
					fieldset,
					layer;
					if (block == "noblcok") {
						layer = allayer;
						items = allitems;
						items.each(function (item, index) {
							this.itemsDiv[index] = item.clone()
						}
							.bind(this));
						fieldset = new FormBlockArea({
								pNode : this.wrapDiv,
								caption : "",
								isHide : "false",
								name : "",
								isShow : "true"
							}).initParam()
					} else {
						items = block.getChildren(">div");
						fieldset = new FormBlockArea({
								pNode : this.wrapDiv,
								caption : block.get("caption"),
								isHide : block.get("isHide"),
								name : block.get("name"),
								isShow : block.get("isShow")
							}).initParam();
						layer = ($defined(block.get("layout"))) ? eval(block.get("layout")) : allayer
					}
					var itemDiv = new Element("div", {
							"class" : "swordform_items_div",
							height : "auto"
						}).inject(fieldset);
					items = items.filter(function (its) {
							if (its.get("type") == "hidden") {
								hiddens.include(its)
							}
							return its.get("type") != "hidden"
						}, this);
					var ems = items.splitForm(layer.cols);
					ems.each(function (em, idx) {
						var div = new Element("div", {
								"class" : "swordform_row_div"
							}).inject(itemDiv);
						div.addClass(((idx + 1) % 2 == 0) ? "swordform_row_shuang" : "swordform_row_dan");
						em.each(function (e, index, em) {
							if (!$chk(e.get("name")) && e.get("type") != "userdefine") {
								return
							}
							var isLast = (index + 1 == em.length);
							this._parseRow(div, e, layer, isLast, dftsize, dftcss)
						}
							.bind(this));
						em.each(function (el) {
							if (el.get("show") == "false") {
								this.unDisplayItem(el.get("name"))
							}
						}
							.bind(this))
					}
						.bind(this))
				}, this);
				var hiddenDiv = new Element("div", {
						styles : {
							display : "none"
						}
					}).inject(this.wrapDiv);
				hiddens.each(function (hids) {
					this._parseRow(hiddenDiv, hids, allayer, false, dftsize, dftcss)
				}, this);
				if (this.options.btmPanel == "true") {
					var div = new Element("div", {
							"class" : "swordform_panel_btm"
						}).inject(this.wrapDiv);
					div.set("html", "<div class='l'></div><div class='r'></div>")
				}
				var bts = this.options.pNode.getChildren(">div[console]");
				var tr;
				bts.each(function (buton, idx) {
					if (idx == 0) {
						tr = this.createConsole(this.wrapDiv)
					}
					this.createButton(tr, buton)
				}
					.bind(this));
				this.getFieldEls().filter(function (el) {
					return (el.get("tag").toLowerCase() != "textarea")
				}).each(function (item) {
					item.addEvent("keyup", this.nextFocus.bind(this))
				}
					.bind(this));
				this.lazyInitData.each(function (v, k) {
					this.getWidget(k).initData(v, "ie6")
				}
					.bind(this));
				if (this.options.edit == "false") {
					this.disable()
				}
			}
		},
		setEventDelegator : function () {
			this.eDelegator = new SwordEventDelegator({
					container : this.options.pNode
				});
			[".swordform_item_oprate", ".dateBtn", ".swordselect-selimg", ".tree-select-selimg"].each(function (a) {
				this.eDelegator.add("click", this.itemElClick.bind(this), a)
			}
				.bind(this));
			this.options.pNode.onfocusout = function (b) {
				b = new Event(b);
				var a = $(b.target);
				if (a.get("tag") == "td") {
					a = a.getChildren()[0]
				}
				if (a) {
					if (a.hasClass("swordform_item_oprate") || $chk(a.get("ruleType"))) {
						this.itemElBlur(b, a)
					}
				}
			}
			.bind(this);
			this.options.pNode.onfocusin = function (b) {
				b = new Event(b);
				var a = $(b.target);
				if (a.get("tag") == "td") {
					a = a.getChildren()[0]
				}
				if (a) {
					if (a.get("disabled") == true) {
						return
					}
					if (a.hasClass("swordform_item_oprate") || $chk(a.get("ruleType"))) {
						this.itemElFocus(b, a)
					}
				}
			}
			.bind(this);
			this.eDelegator.add("dblclick", this.itemElDblClick.bind(this), ".swordform_item_oprate");
			this.eDelegator.add("keydown", this.itemElKeydown.bind(this), ".swordform_item_oprate");
			this.eDelegator.add("keyup", this.itemElKeyup.bind(this), ".swordform_item_oprate")
		},
		itemElFocus : function (c, b) {
			var a = b.get("widget") || b.get("type");
			pc.formItems[a].runEventFocus(c, b, this)
		},
		itemElClick : function (d, c) {
			var b = $(d.target);
			if (b.get("tag") == "td") {
				c = b.getPrevious().getElement("input")
			} else {
				if (b.get("tag") == "div") {
					var f = b.getParent().getPrevious();
					if ($chk(f)) {
						c = f.getElement("input")
					}
				}
			}
			if (c.get("disabled") == true || c.get("disable") == "true") {
				return
			}
			var a = c.get("widget") || c.get("type");
			if (a) {
				pc.formItems[a].runEventClick(d, c, this)
			}
		},
		itemElBlur : function (c, b) {
			var a = b.get("widget") || b.get("type");
			if (b.get("disabled") == true || b.get("disable") == "true") {
				return
			}
			if (a) {
				pc.formItems[a].runEventBlur(c, b, this)
			}
		},
		itemElDblClick : function (c, b) {
			if (b.get("disable") == "true") {
				return
			}
			var a = b.get("widget") || b.get("type");
			pc.formItems[a].runEventDblClick(c, b, this)
		},
		itemElKeydown : function (c, b) {
			var a = b.get("widget") || b.get("type");
			pc.formItems[a].runEventKeydown(c, b, this)
		},
		itemElKeyup : function (c, b) {
			if (b.get("disable") == "true") {
				return
			}
			var a = b.get("widget") || b.get("type");
			pc.formItems[a].runEventKeyup(c, b, this);
			this.nextFocus(c)
		},
		toggleFormDisplay : function (c, d) {
			var b = this.options.pNode;
			if (!c) {
				c = b.getElement("div.x-tool")
			}
			var f = $splat(b.getElement("div.swordform_block") || b.getChildren("table"));
			var a = b.getElement("div[sword=SwordToolBar]");
			if (a) {
				f.include(a)
			}
			if (c.hasClass("x-tool-s") && !d) {
				c.set("title", "收缩");
				c.removeClass("x-tool-s");
				c.getParent("div.swordform-panel-box").setStyle("border-bottom", "none");
				f.each(function (h, g) {
					if (h.hasClass("x-tool-dis") && h.getStyle("display") == "none") {
						h.setStyle("display", "");
						h.removeClass("x-tool-dis")
					}
				}
					.bind(this))
			} else {
				c.set("title", "展开");
				c.addClass("x-tool-s");
				c.getParent("div.swordform-panel-box").setStyle("border-bottom", "1px #7F9DB9 solid");
				f.each(function (h, g) {
					if (h.getStyle("display") != "none") {
						h.setStyle("display", "none");
						h.addClass("x-tool-dis")
					}
				}
					.bind(this))
			}
		},
		refreshForm : function () {
			var a = 0;
			var b = this.options.pNode.getElements("div.swordform_row_div");
			b.each(function (f, c) {
				this.reSizeRow(f);
				var d = 0;
				f.getElements(".swordform_item_div").each(function (k, g) {
					var h;
					if (k.getFirst() && k.getFirst().get("tag") == "table") {
						h = k.getFirst().getWidth().toInt()
					} else {
						h = k.getWidth().toInt()
					}
					d += h
				}
					.bind(this));
				if (d > a) {
					a = d
				}
			}
				.bind(this));
			b.setStyle("width", a)
		},
		_parseRow : function (b, h, k, g, d, a) {
			var c = new Element("div", {
					"class" : "swordform_item_div",
					idx : this.idx
				}).inject(b);
			this.idx = this.idx + 1;
			var l = new Element("table", {
					"class" : "swordform_item_table",
					cellspacing : 0,
					cellpadding : 0,
					border : 0
				}).inject(c);
			var f = new Element("tbody").inject(l);
			k.item.trs.each(function (m) {
				var n = new Element("tr", {
						"class" : "swordform_item_tr"
					}).inject(f);
				m.each(function (u) {
					var v = new Element("td", {
							"class" : "swordform_item_" + u.name + "_td",
							colspan : $defined(u.colspan) ? u.colspan : 1,
							rowspan : $defined(u.rowspan) ? u.rowspan : 1
						}).inject(n);
					var p = this.elmodel[this.defAtts.indexOf(u.name)];
					if (p == "item") {
						if ($defined(h.get("cols"))) {
							var t = h.get("cols") / 1;
							v.setStyle("width", (d.TdWidth * t + d.CaptionWidth * (t - 1)))
						} else {
							v.setStyle("width", d.TdWidth)
						}
						if (g) {
							v.setStyle("border-right", 0)
						}
						this._parseItem(v, h)
					} else {
						if (u.name == "des" && h.get("desType") != null) {
							var q = $(h.get("desType"));
							q.clone().cloneEvents(q).inject(v)
						} else {
							var r = new Element(p, {
									"for" : h.get("name"),
									text : h.get(u.name),
									"class" : "swordform_item_text_" + u.name
								}).inject(v);
							if (u.name == "caption") {
								var s = h.get("rule");
								if ($chk(a.caption) && $defined(a.caption)) {
									r.set("style", a.caption)
								}
								r.setStyle("width", d.CaptionWidth);
								r.set("text", h.get(u.name));
								if ($defined("rule") && $chk(s)) {
									if (s.indexOf("must") > -1 && this.options.requiredSign == "caption") {
										r.innerHTML += "<span style='color:red'>*</span>"
									}
								}
							}
						}
					}
				}
					.bind(this))
			}
				.bind(this))
		},
		_itemSwitch : function (c, q, s) {
			var k = this.options.name,
			h = k + "_" + c,
			m = $(h),
			n = m.get("type"),
			l = m.get("rule"),
			f;
			if (q == "hidden" || n == "hidden") {
				alert("hidden类型不能进行类型转换！");
				return
			} else {
				f = this.options.pNode.getElement("div[name='" + c + "'][type]");
				if (!f) {
					return
				}
				if (f.get("type") == q) {
					if (s) {
						for (var r in s) {
							m.set(r, s[r])
						}
						var p = s.rule;
						if ($defined(p) && l != p) {
							if (p.contains("must")) {
								m.setStyle("background-color", "#fffadb")
							} else {
								m.setStyle("background-color", "")
							}
						}
					}
					return
				}
				this.fieldElHash.erase(h);
				m.getParent(".swordform_field_wrap").destroy();
				f.set("type", q);
				if (s) {
					for (var r in s) {
						f.set(r, s[r])
					}
				}
				xRule = f.get("rule");
				SwordForm_Template.formObj = this;
				SwordForm_Template.fName = k;
				var b = SwordForm_Template.getItemHtml(q, f, "");
				var a = $(document.createElement("div"));
				a.innerHTML = b;
				a.getChildren()[0].inject(f, "before");
				m = $(h);
				var g = m.get("widget");
				this.fieldElHash.set(h, m);
				if (g) {
					var d = pc.formItems[g] ? pc.formItems[g].initWidget : null;
					if (d) {
						d(c, m, this)
					}
				}
			}
		},
		isVal : function () {
			return (this.options.isValidate == "true") || (this.options.vType == "elafter")
		},
		getEl : function (b) {
			var c = $unlink(this.el);
			for (var a in c) {
				c[a] = b.get(a) || c[a];
				if (a == "opts") {
					c[a] = b.getChildren(">div")
				}
				if ($type(c[a]) == "function" && (/^on[A-Z]/).test(a)) {
					c[a] = new Function("param", c[a])
				}
			}
			return c
		},
		select : function (d, b, a) {
			var c = pageContainer.getSelect();
			c.setValidate(this.Vobj);
			c.initParam(b, this);
			this.setWidget(a, c);
			return c.box
		},
		label : function (f, d, a) {
			this.setWidget(a, null);
			var g = new Element("div", {
					"class" : "swordform_field_wrap"
				}).inject(f);
			var c = new Element("label", this.getEl(d)).set({
					text : d.get("defValue"),
					"class" : "swordform_item_oprate swordform_item_label"
				}).inject(g);
			if (this.isVal() && $defined(d.get("rule"))) {
				Sword.utils.createElAfter(g)
			}
			var b = Sword.utils.parseCss(d.get("css"), c);
			Sword.utils.setWidth(b, null, g, c, false);
			return c
		},
		textarea : function (h, f, b) {
			var g = {};
			var k = this.divTable = Sword.utils.createTable(g, false, false);
			k.inject(h);
			f.pNode = g.boxtd;
			var a = new Textarea(f);
			this.setWidget(b, a);
			var d = a.initParam(this, k);
			a.initEvent();
			var c = Sword.utils.parseCss(a.options.css, a.box);
			Sword.utils.setWidth(c, this.userSize, k, a.box, false);
			return d
		},
		selectsolely : function (b, a) {
			return this.select(b, a)
		},
		checkbox : function (d, b, a) {
			var f = new Element("div", {
					"class" : "swordform_field_wrap"
				}).inject(d);
			b.pNode = f;
			var c = new SwordGroupFields(b);
			c.initParam(b, this);
			this.setWidget(a, c);
			return c.wrap
		},
		radio : function (c, b, a) {
			return this.checkbox(c, b, a)
		},
		multiselect : function (b, a) {
			return this.checkbox(b, a)
		},
		file : function (d, c, a) {
			var f = new Element("div", {
					"class" : "swordform_field_wrap"
				}).inject(d);
			c.pNode = f;
			var b = new fileUpload(c).initParam(c, this);
			this.setWidget(a, b);
			if (this.isVal() && $defined(c.get("rule"))) {
				Sword.utils.createElAfter(f)
			}
			return b.wrap
		},
		file2 : function (f, d, b) {
			var g = new Element("div", {
					"class" : "swordform_field_wrap"
				}).inject(f);
			var a = initIntimeUp(g, b, d);
			this.setWidget(b, a);
			var c = a.con;
			c.addClass("swordform_item_oprate");
			c.set("widgetGetValue", "true");
			c.set("widget", "true");
			if (this.isVal() && $defined(d.get("rule"))) {
				Sword.utils.createElAfter(g)
			}
			return c
		},
		hidden : function (c, b, a) {
			return this.text(c, b, a)
		},
		password : function (c, b, a) {
			return this.text(c, b, a)
		},
		text : function (c, n, b) {
			this.setWidget(b, null);
			var f = {};
			var a = Sword.utils.createTable(f, false, false).inject(c);
			var d = {
				type : n.get("type"),
				sf : n.get("submitformat"),
				d : n.get("defValue") || "",
				f : n.get("format") || "",
				r : n.get("rule") || "",
				n : b,
				m : n.get("msg"),
				t : n.get("tipTitle"),
				b : n.get("biztid"),
				bc : n.get("bizctrl"),
				ph : n.get("placeholder")
			};
			if (d.ph == "true") {
				f.boxtd.innerHTML = ["<input type='", d.type, "' bizctrl='", d.bc, "' submitformat=\"", d.sf, "\" defValue='", d.d, "' tipTitle='", d.t, "' biztid='", d.b, "' msg='", d.m, "' format=\"", d.f, "\" value='", d.d, "' rule='", d.r, "' id='", (this.options.name + "_" + d.n), "' placeholder='", d.ph, "'  name='", d.n, "' class='swordform_item_oprate swordform_item_input swordform_item_input_placeholder' >"].join("")
			} else {
				f.boxtd.innerHTML = ["<input type='", d.type, "' bizctrl='", d.bc, "' submitformat=\"", d.sf, "\" defValue='", d.d, "' tipTitle='", d.t, "' biztid='", d.b, "' msg='", d.m, "' format=\"", d.f, "\" value='", d.d, "' rule='", d.r, "' id='", (this.options.name + "_" + d.n), "' placeholder='", d.ph, "'  name='", d.n, "' class='swordform_item_oprate swordform_item_input' >"].join("")
			}
			var k = f.boxtd.getChildren("input")[0];
			var l = k._getPosition().y;
			this.cellTip(k, b);
			k.addEvent("focus", function () {
				k.select();
				this.showTip(b, k)
			}
				.bind(this));
			k.addEvent("blur", function () {
				if (k.get("placeholder") == "true") {
					if (k.get("value") == "") {
						k.set("value", k.get("defvalue"));
						k.addClass("swordform_item_input_placeholder");
						this.Vobj.validate(k)
					} else {
						if (k.get("value") != k.get("defvalue")) {
							this.Vobj.validate(k)
						}
					}
				}
			}
				.bind(this));
			k.addEvent((Browser.Engine.trident || Browser.Engine.webkit) ? "keydown" : "keypress", function (p) {
				if (k.get("placeholder") == "true" && k.get("value") == k.get("defvalue")) {
					k.set("value", "");
					k.removeClass("swordform_item_input_placeholder")
				}
			}
				.bind(this));
			if ((n.get("rule") || "").indexOf("must") > -1 && this.options.requiredSign == "field") {
				new Element("span", {
					styles : {
						color : "red",
						"float" : "right"
					},
					html : "*"
				}).inject(f.boxtd)
			}
			if ((n.get("rule") || "").indexOf("must") > -1 && this.options.requiredSign == "caption" && this.options.userDefine == "true") {
				var h = this.wrapDiv.getElement("*[span=" + b + "]");
				if (h) {
					var m = h.getElement("span.red");
					if (!m) {
						h.grab(new Element("span", {
								"class" : "red",
								html : "*"
							}), "top")
					}
				}
			}
			if (this.isVal() && $defined(n.get("rule"))) {
				Sword.utils.createElAfter(a)
			}
			var g = Sword.utils.parseCss(n.get("css"), k);
			Sword.utils.setWidth(g, this.userSize, a, k, false);
			return k
		},
		SwordSubmit : function (d, b, a) {
			var c = pageContainer.create("SwordSubmit");
			c.initParam(b)
		},
		date : function (f, b, a) {
			var d = pageContainer.getCalendar();
			d.setValidate(this.Vobj);
			var c = d.initParam(b, this);
			this.setWidget(a, d);
			return d.dateInput
		},
		pulltree : function (f, d, b) {
			var b = d.get("name");
			var c = this.options.pNode.getElement("div[name=" + b + "]");
			c.pNode = c.getParent();
			var a = pageContainer.create("SwordTree");
			this.setWidget(b, a);
			pc.setWidget4loaddata(b, a);
			a.setValidate(this.Vobj);
			c.setProperty("select", "true");
			a.initParam(c, this);
			a.initData(c, this);
			a.select.selBox.getParent("table").inject(f)
		},
		validatecode : function (d, c, a) {
			var b = pageContainer.getValidateCode();
			b.initParam(c)
		},
		userdefine : function (c, b, a) {
			if (c.getPrevious() && !$defined(b.get("caption"))) {
				c.getPrevious().destroy()
			}
			c.setStyle("width", "");
			var d = new Element("div", {
					"class" : "swordform_userdefine_wrap"
				}).inject(c);
			b.getChildren().each(function (f) {
				f.clone(true).inject(d);
				f.setStyle("display", "none")
			}
				.bind(this));
			d.getElements("div[type][name]").each(function (g) {
				this._parseItem(d, g);
				var f = d.getLast();
				g.getParent().insertBefore(f, g);
				g.destroy();
				f.setStyle("float", "left")
			}
				.bind(this));
			if (this.isVal() && $defined(b.get("rule"))) {
				Sword.utils.createElAfter(d)
			}
		},
		_parseItem : function (g, f) {
			var b = f.get("type");
			var c = f.get("name");
			if (!$defined(b)) {
				b = "text"
			}
			var d;
			g.store("space", this.wrapDiv);
			f.pNode = g;
			d = this[b](g, f, c);
			var a = ($defined(f.get("biztid")) || $defined(f.get("bizctrl")));
			if ($defined(d)) {
				if (Browser.Engine.trident) {
					if (Browser.Engine.trident4) {
						sword_convertHTML(d, f);
						this.addFormatEvent(d);
						if (!a && $defined(f.get("rule")) && f.get("rule") != "" && b != "select" && b != "date") {
							this.Vobj._add(d)
						}
					} else {
						this.addFormatEvent(d);
						sword_convertHTML(d, f);
						if (!a && $defined(f.get("rule")) && f.get("rule") != "" && b != "select" && b != "date") {
							this.Vobj._add(d)
						}
					}
				} else {
					if (!a && $defined(f.get("rule")) && f.get("rule") != "" && b != "select" && b != "date") {
						this.Vobj._add(d)
					}
					this.addFormatEvent(d);
					sword_convertHTML(d, f)
				}
				if (a) {
					d.addEvent("blur", function (k) {
						var h = new Event(k).target;
						this.validate($(h).get("name"))
					}
						.bind(this))
				}
				if (d.hasClass("swordform_item_oprate")) {
					this.fieldElHash.set(this.options.name + "_" + f.get("name"), d)
				}
				if (!a && $defined(f.get("rule")) && f.get("rule").contains("must") && !(d.disabled || f.get("disable") == "true")) {
					this.getFieldEl(c).setStyle("background-color", "#fffadb")
				}
				if (["text", "textarea"].contains(b) && (d.disabled || f.get("disable") == "true")) {
					this.disable(c)
				}
				if (f.get("show") == "false") {
					d.setStyle("display", "none")
				}
			}
		},
		bizValidate : function (a) {
			var c = a.get("rule");
			if (c) {
				if (!this.Vobj.validate(a)) {
					return
				}
			}
			if (!$defined(a.get("value"))) {
				return
			}
			var b = this.getReq({
					tid : a.get("biztid"),
					ctrl : a.get("bizctrl"),
					widgets : [this.getSubmitData()]
				});
			var d;
			pc.postReq({
				async : false,
				req : b,
				onSuccess : function (f) {
					if (f.success) {
						d = true;
						a.removeClass("invalid");
						this.Vobj.intimeValidate_Biz(a, f.valiMsg || "校验成功!", true)
					} else {
						d = false;
						a.addClass("invalid");
						this.Vobj.intimeValidate_Biz(a, f.valiMsg || "校验失败!", false)
					}
				}
				.bind(this),
				onError : function () {
					d = false;
					if (this.options.vType == "elafter") {}
					else {}

				}
			});
			return d
		},
		getExtraAtt : function () {
			return this.item.trs.flatten().filter(function (a) {
				return (!this.defAtts.contains(a.name))
			}, this)
		},
		createConsole : function (f) {
			var b = new Element("div", {
					"class" : "swordform_btns_ct"
				}).inject(f, "bottom");
			var d = new Element("div", {
					"class" : "swordform_panel_btns swordform_panel_btns_center"
				}).inject(b);
			var c = new Element("table", {
					cellspacing : "0"
				}).inject(d);
			var a = new Element("tbody").inject(c);
			return new Element("tr").inject(a)
		},
		createButton : function (b, l) {
			var d = new Element("td", {
					"class" : "swordform_panel_btn_td"
				}).inject(b);
			var m = new Element("table", {
					"class" : "swordform_btn_wrap swordform_btn",
					styles : {
						width : "75px"
					},
					cellspacing : "0",
					cellpadding : "0",
					border : "0"
				}).inject(d);
			var f = new Element("tbody").inject(m);
			var k = new Element("tr").inject(f);
			var c = new Element("td", {
					"class" : "swordform_btn_left",
					html : "<i>&nbsp;</i>"
				}).inject(k);
			var h = new Element("td", {
					"class" : "swordform_btn_center"
				}).inject(k);
			var a = new Element("em").inject(h);
			var g = new Element("button", {
					"class" : "swordform_btn_text",
					tid : l.get("tid"),
					ctrl : l.get("ctrl"),
					click : l.get("onClick"),
					onClickBefore : l.get("onClickBefore"),
					onClickAfter : l.get("onClickAfter"),
					console : l.get("console"),
					isRedirect : l.get("isRedirect"),
					notClearProperties : l.get("notClearProperties")
				}).inject(a).appendText(l.getAttribute("caption"));
			g.set({
				events : {
					mouseover : function (p) {
						var n = new Event(p).target.getParent(".swordform_btn_wrap");
						n.addClass("swordform_btn_over")
					},
					mouseout : function (p) {
						var n = new Event(p).target.getParent(".swordform_btn_wrap");
						n.removeClass("swordform_btn_over")
					}
				}
			});
			g.addEvent("click", function (s) {
				var n = new Event(s).target;
				var r = n.get("onClickBefore");
				var q = n.get("click");
				var v = n.get("onclickAfter");
				if ($defined(r)) {
					this.getFunc(r)[0]()
				}
				if ($defined(q) && $chk(q) && n.get("console") != "reset") {
					if ($defined(q)) {
						this.getFunc(q)[0]()
					}
					if ($defined(v)) {
						this.getFunc(v)[0]()
					}
				} else {
					if (n.get("console") == "submit") {
						if (!this.validate()) {
							return
						}
						var p = this.getReq({
								tid : n.get("tid"),
								ctrl : n.get("ctrl"),
								widgets : [this.getSubmitData()]
							});
						if (this.hasFile && n.get("isRedirect") != "false") {
							var u = this.getUploadCommit().initParam({
									postData : p
								});
							u.commit()
						} else {
							pc.postReq({
								req : p,
								onSuccess : function (w) {
									if (v) {
										this.getFunc(v)[0](p, w)
									}
								}
								.bind(this),
								onError : function (w) {
									if (v) {
										this.getFunc(v)[0](p, w)
									}
								}
								.bind(this)
							})
						}
					} else {
						if (n.get("console") == "reset") {
							var t = n.get("notClearProperties");
							this.reset(t);
							if ($defined(v)) {
								this.getFunc(v)[0]()
							}
						} else {
							if ($defined(q)) {
								this.getFunc(q)[0]()
							}
							if ($defined(v)) {
								this.getFunc(v)[0]()
							}
						}
					}
				}
			}
				.bind(this));
			new Element("td", {
				"class" : "swordform_btn_right",
				html : "<i>&nbsp;</i>"
			}).inject(k)
		},
		renderForm : function (a, b) {
			var c = (b || {
				data : {}

			}).data;
			this.initDataObj = c;
			SwordForm_Template.realRender(a || this.options.pNode, this, c);
			this.initEventForPanel();
			this.fireEvent("onFinish", b)
		},
		delayEWfRF : function () {
			this.fieldElHash.getKeys().each(function (c) {
				var f = $(c),
				a = f.get("name"),
				d = f.get("widget");
				this.fieldElHash.set(c, f);
				if (d) {
					if (d == "submit") {
						if (pc.widgets.get(a)) {
							return
						}
					}
					if (this.getWidget(a)) {
						return
					}
					var b = pc.formItems[d] ? pc.formItems[d].initWidget : null;
					if (b) {
						b(a, f, this)
					}
				}
			}
				.bind(this))
		},
		initData : function (g, b, a) {
			var f = (g || {
				data : {}

			}).data,
			c = a;
			this.initDataObj = f;
			if (!$chk(g) || !g.data) {
				return
			}
			this.fieldElHash.getKeys().each(function (k) {
				var l = $(k),
				h = l.get("name"),
				d = f[h];
				if (d) {
					this.setValue(h, d.value, b)
				}
			}
				.bind(this));
			if (c) {
				this.fieldElHash.getKeys().each(function (k) {
					var l = $(k),
					h = l.get("name"),
					d = f[h];
					this.setValue(h, d ? d.value : "", b)
				}
					.bind(this))
			}
		},
		getInitSubmitData : function () {
			var a = {
				sword : this.options.sword,
				name : this.options.name + "_init",
				data : this.initDataObj
			};
			return a
		},
		getSubmitData : function () {
			var b = {
				sword : this.options.sword,
				name : this.options.name,
				data : {}

			};
			var a = this.getFieldEls();
			a.each(function (c) {
				if ($type(c) == "string") {
					c = $(c)
				}
				if (c.get("widgetGetValue") == "true") {
					b.data[c.get("name")] = {
						value : this.getWidget(c.get("name")).getValue(c) || ""
					}
				} else {
					if (c.get("widget") == "select") {
						b.data[c.get("name")] = {
							value : c.get("realvalue") || ""
						}
					} else {
						b.data[c.get("name")] = {
							value : c.get("realvalue") || c.get("value") || ""
						}
					}
				}
			}, this);
			return b
		},
		getPopFormData : function () {
			var b = {
				sword : this.options.sword,
				name : this.options.name,
				data : {}

			};
			var a = this.getFieldEls();
			a.each(function (d) {
				if ($type(d) == "string") {
					d = $(d)
				}
				if (d.get("widgetGetValue") == "true") {
					b.data[d.get("name")] = {
						value : this.getWidget(d.get("name")).getValue(d) || "",
						showvalue : d.get("value")
					}
				} else {
					if (d.get("widget") == "select") {
						var c = d.retrieve("allDb") || d.get("allDb");
						var f = "";
						if ($chk(c)) {
							if (typeof c == "string") {
								c = JSON.decode(c)
							}
							for (o in c) {
								f = f + "|" + o + "," + c[o]
							}
							f = f.substring("1")
						} else {
							f = d.get("realvalue")
						}
						b.data[d.get("name")] = {
							value : f || ""
						}
					} else {
						b.data[d.get("name")] = {
							value : d.get("realvalue") || d.get("value") || "",
							showvalue : d.get("realvalue") || d.get("value") || ""
						}
					}
				}
			}, this);
			return b
		},
		getGridData : function (a) {
			var b = {
				beanname : this.options.beanname,
				sword : "SwordGrid",
				name : a || "",
				trs : [{
						tds : this.getSubmitData().data
					}
				]
			};
			return b
		},
		getFormData : function () {
			var a = this.getSubmitData().data;
			var b = new Hash();
			for (var c in a) {
				b.include(c, a[c].value)
			}
			return b
		},
		validate : function (c) {
			var h = $chk(c) ? [this.getFieldEl(c)] : this.getFieldEls();
			var f = true,
			b = h.length;
			for (var d = 0; d < b; d++) {
				var a = h[d];
				if ($type(a) == "string") {
					a = $(a)
				}
				if ($defined(a.get("rule"))) {
					if (!this.Vobj.validate(a)) {
						f = false
					}
				}
				if (!f) {
					try {
						if (!$chk(c)) {
							(function () {
								a.focus()
							}).delay(1);
							if (a.get("type") == "select") {
								a.show()
							}
						}
						if ((a.get("readonly") || item.getAttribute("readonly")) && (Browser.Engine.trident4 || Browser.Engine.trident5)) {
							$(document.body).scrollTo(0, a._getPosition().y - 20)
						}
					} catch (g) {}

					break
				}
			}
			return f
		},
		getField : function (a) {
			return this.getWidget(a) || this.getFieldEl(a)
		},
		getFieldEl : function (b, a) {
			var d;
			if ($defined(a)) {
				d = b
			} else {
				d = this.options.name + "_" + b
			}
			var c = this.fieldElHash.get(d);
			if ($type(c) == "element") {
				return c
			}
			return $(d) || this.fieldElHash.getValues().filter(function (f) {
				return f.get("name") == b
			})[0]
		},
		destroyFieldEl : function (a) {
			if (!$defined(a)) {
				this.fieldElHash.empty()
			}
			a = $splat(a);
			a.each(function (b) {
				this.fieldElHash.erase(b)
			}
				.bind(this))
		},
		getFieldEls : function () {
			return this.fieldElHash.getValues()
		},
		getFieldElNames : function () {
			return this.fieldElHash.getKeys()
		},
		nextFocus : function (u) {
			u = Event(u);
			var w = $(u.target).type;
			if ((u.key == "enter" && w != "textarea") || (u.key == "esc" && w == "textarea")) {
				var x = u.target.get("name");
				if ($(u.target).get("widget") == "calendar") {
					var k = this.getField(x);
					k.hide();
					var g = k.dateInput;
					g.set("realvalue", g.value);
					if (g.get("oValue") != g.value) {
						var q = g.get("_onChange");
						if (q) {
							this.getFunc(q)[0](g, this)
						}
						g.set("oValue", g.value)
					}
				}
				if (this.options.valfocus == "false") {
					var d = u.target.get("rule");
					if ($chk(d)) {
						var v = this.validate(x);
						if (!v) {
							try {
								(function () {
									u.target.focus()
								}).delay(1)
							} catch (u) {}

							return
						}
					}
				}
				var r = null;
				if (this.options.userDefine != "true") {
					var n = u.target.getParent(".swordform_item_div").getAttribute("idx").toInt() + 1;
					var m = null;
					while (r == null) {
						try {
							m = this.options.pNode.getElements(".swordform_item_div[idx='" + (n) + "']")[0];
							if (!m) {
								return
							}
							r = m.getElement(".swordform_item_oprate");
							if (!this.focusable(r)) {
								r = null
							}
							n++
						} catch (u) {
							break
						}
					}
				} else {
					var p = this.options.name + "_" + x;
					var a = this.getFieldEls(),
					f = a.length;
					var n = this.getFieldElNames().indexOf(p) + 1;
					while (n != f && n != null && r == null) {
						r = a[n];
						if ($type(r) == "string") {
							r = $(r)
						}
						if (["radio", "checkbox"].contains(r.get("type"))) {
							r = r.getElements("input")[0]
						}
						if (!this.focusable(r)) {
							r = null
						}
						if (n == a.length - 1) {
							n = null
						} else {
							n++
						}
					}
				}
				if ($defined(r)) {
					try {
						(function () {
							r.focus();
							r.focus()
						}).delay(1)
					} catch (u) {}

				} else {
					if ($chk(this.options.noNextEvent)) {
						this.getFunc(this.options.noNextEvent)[0]()
					} else {
						($(u.target.get("id")) || $(u.target)).blur()
					}
				}
			}
			if (u.key == "left" || u.key == "right") {
				var b = $(u.target);
				var s = b.getParent(),
				c = s.getParent(),
				h = "input";
				if (b.get("type") == "checkbox") {
					if (u.key == "left") {
						var l = s.getPrevious() ? s.getPrevious().getElement(h) : null;
						if (l) {
							l.focus()
						} else {
							l = c.getLast().getElement(h);
							if (l) {
								l.focus()
							}
						}
					}
					if (u.key == "right") {
						var l = s.getNext() ? s.getNext().getElement(h) : null;
						if (l) {
							l.focus()
						} else {
							l = c.getFirst().getElement(h);
							if (l) {
								l.focus()
							}
						}
					}
				}
			}
		},
		isHide : function (a) {
			return a && a.getHeight() == 0 && a.getWidth() == 0
		},
		focusable : function (a) {
			return !(this.isHide(a) || a.get("disabled") || a.get("disable") == "true" || a.get("readonly") || a.get("_show") == "false" || ["file", "hidden"].contains(a.get("type")) || !["input", "textarea", "file"].contains(a.get("tag")))
		},
		toggleBlock : function (a) {
			var b = this.options.pNode.getElements(".swordform_block[name='" + a + "']")[0];
			if ($defined(b)) {
				if (b.getStyle("display") == "none") {
					b.setStyle("display", "")
				} else {
					b.setStyle("display", "none")
				}
			}
		},
		hideBlock : function (a) {
			var b = this.options.pNode.getElements(".swordform_block[name='" + a + "']")[0];
			if ($defined(b)) {
				b.setStyle("display", "none")
			}
		},
		showBlock : function (a) {
			var b = this.options.pNode.getElements(".swordform_block[name='" + a + "']")[0];
			if ($defined(b)) {
				b.setStyle("display", "")
			}
		},
		unDisplayItem : function (a) {
			if ($type(a) == "string") {
				a = [a]
			}
			a = a || [];
			a.each(function (c, b) {
				var d = this.getFieldEl(c);
				if ($defined(d) && (d.get("_show") == "true" || !d.get("_show"))) {
					d.set("_show", "false");
					var f = d.getParent("div.swordform_item_div");
					if (f) {
						if (f.getParent().getChildren().length == 1) {
							f.getParent().setStyle("display", "none")
						}
						f.setStyle("display", "none");
						this.reSizeRow(f.getParent())
					} else {
						if (d.getParent("table.swordform_field_wrap")) {
							d.getParent("table.swordform_field_wrap").setStyle("display", "none")
						}
					}
				}
			}
				.bind(this))
		},
		displayItem : function (a) {
			if ($type(a) == "string") {
				a = [a]
			}
			a = a || [];
			a.each(function (c, b) {
				var d = this.getFieldEl(c);
				if ($defined(d) && (d.get("_show") == "false" || !d.get("_show"))) {
					d.set("_show", "true");
					d.setStyle("display", "");
					var f = d.getParent("div.swordform_item_div");
					if (f) {
						if (f.getParent().getChildren().length == 1) {
							f.getParent().setStyle("display", "")
						}
						f.setStyle("display", "");
						this.reSizeRow(f.getParent())
					} else {
						if (d.getParent("table.swordform_field_wrap")) {
							d.getParent("table.swordform_field_wrap").setStyle("display", "")
						}
					}
				}
			}
				.bind(this))
		},
		setValue : function (O, I, E) {
			var N = $(this.options.name + "_" + O);
			if (!$chk(N)) {
				return
			}
			var G = N.get("widget") || N.get("type");
			var H = ["label", "text", "calendar", "select", "pulltree", "pullbigtree", "radio", "checkbox"];
			var n = I,
			y = I,
			c = "";
			if (H.contains(G)) {
				var J = {
					radio : null,
					checkbox : null,
					pulltree : null,
					pullbigtree : null,
					text : "format",
					label : "format",
					select : "sbmitcontent",
					calendar : "submitDateformat"
				};
				var K = J[G],
				M = N.get(K);
				if (K === null) {
					var P = I ? I.split(",") : [];
					if (G == "pulltree" || G == "pullbigtree") {
						var b = "",
						A = "";
						if (I) {
							if (I.contains("code") && I.contains("caption")) {
								if (I.contains("checkPath") || I.contains(";")) {
									var a = I.split(";");
									var f = "",
									B = "",
									d = "";
									a.each(function (t, Q) {
										var R = t.split("|");
										if (Q != 0) {
											f = f + R[1].split(":")[1] + ",";
											B = B + R[0].split(":")[1] + ",";
											d = d + R[2].split(":")[1] + "|"
										} else {
											f = R[1].split(":")[1] + ",";
											B = R[0].split(":")[1] + ",";
											d = R[2].split(":")[1] + "|"
										}
									});
									y = f.substring(0, f.length - 1);
									n = B.substring(0, B.length - 1);
									b = d.substring(0, d.length - 1)
								} else {
									var q = I.split("|");
									if (I.contains("codePath")) {
										A = q[2].substring("codePath,".length)
									}
									y = q[1].split(",")[1];
									n = q[0].split(",")[1]
								}
								c = n
							} else {
								var q = I.split(",");
								var k = [];
								var F;
								if ($chk(E)) {
									F = E.getData(O)
								}
								if (!$chk(F)) {
									F = pc.getInitData(O)
								}
								if (!$chk(F)) {
									F = this.getField(O).options.dataStr
								}
								var s = 0;
								var z = "";
								if ($chk(F)) {
									var D = this.getField(O);
									if (D) {
										var h = D.options.cascadeSign.id;
										var l = D.options.displayTag;
										var w = D.options.selectRealKey;
										var u = [];
										if (w.contains("|")) {
											u = w.split("|")
										}
										s = u.length;
										q.each(function (t) {
											var R = F.data;
											var Q = function (T, S) {
												T.each(function (V) {
													if (V[h] == t) {
														if (s > 0) {
															u.each(function (W, X) {
																z = z + V[W] + "|"
															});
															z = z.substring(0, z.length - 1);
															z = z + ","
														}
														S.push(V[l])
													} else {
														for (var U in V) {
															if ($type(V[U]) == "array") {
																Q(V[U], S);
																break
															}
														}
													}
												})
											};
											Q(R, k)
										})
									}
								}
								if (s > 0) {
									z = z.substring(0, z.length - 1);
									n = z
								} else {
									n = q.join(",")
								}
								y = k.join(",");
								this.getField(O).select.setRealValue(n);
								c = q.join(",")
							}
							N.set({
								code : c,
								checkPath : b,
								codePath : A
							})
						}
					} else {
						var L = N.getElements(".formselect-list-item");
						L.each(function (t) {
							var R = t.removeClass("formselect-selected").getElement("input");
							R.set("checked", false);
							var Q = t.get("code");
							if (P.contains(Q)) {
								R.set("checked", true);
								t.addClass("formselect-selected")
							}
						});
						return
					}
				} else {
					if (K == "format") {
						if (M) {
							y = sword_fmt.formatText(N, I, "", M).value
						}
						if (G == "label") {
							N.set("text", y)
						}
					} else {
						if (K == "submitDateformat") {
							var v = N.get("dataformat") || "yyyy-MM-dd";
							if (M) {
								n = SwordDataFormat.formatStringToString(I, M || v, M)
							}
							y = SwordDataFormat.formatStringToString(I, v, v);
							N.set("oValue", n)
						} else {
							var m = {},
							x = N.get("inputdisplay");
							if (I.contains("code") && I.contains("caption")) {
								I = I.toHash();
								I.each(function (Q, t) {
									m[t] = Q
								}, this);
								y = m.caption;
								c = n = m.code;
								if (M) {
									n = M.substitute(m)
								}
								if (x) {
									y = x.substitute(m)
								}
							} else {
								var C = N.get("dataname"),
								p;
								var g;
								if ($chk(E) && C) {
									g = E.getDataByDataName(C)
								}
								if (!$chk(g) && C) {
									g = pc.getInitDataByDataName(C)
								}
								if (N.get("isAll") != "false" && !g) {
									g = SwordSelectTemplate.getCacheSelData(N)
								}
								h = N.get("codeSign") || "code";
								captionSign = N.get("captionSign") || "caption";
								pcodeSign = N.get("pcodeSign") || "pcode";
								x = N.get("inputdisplay");
								M = N.get(K);
								if (g && g.data) {
									p = g.data;
									m = p.filter(function (t) {
											return t[h] == I
										})[0]
								} else {
									p = $$("div[name='" + N.get("name") + "'][type]")[0].getChildren(">div");
									m = p.filter(function (t) {
											return t.get(h) == I
										})[0];
									var r = null;
									if (m) {
										r = {};
										r[h] = m.get(h);
										r[captionSign] = m.get(captionSign);
										m = r
									}
								}
								if (m) {
									y = m[captionSign],
									c = n = m[h];
									if (M) {
										n = M.substitute(m)
									}
									if (x) {
										y = x.substitute(m)
									}
								}
							}
							N.set("code", c);
							N.store("allDb", m)
						}
					}
				}
				N.set({
					realvalue : n,
					value : y
				})
			} else {
				N.set({
					realvalue : I,
					value : I
				})
			}
		},
		getValue : function (d) {
			var k = $(this.options.name + "_" + d);
			if (!$chk(k)) {
				return ""
			}
			var h = k.get("widget");
			if (h == "radio" || h == "checkbox") {
				var c = [];
				var g = k.get("sbmitcontent");
				if (!$defined(g)) {
					g = "{code}"
				}
				k.getElements(".formselect-selected").each(function (l) {
					c.push(g.substitute({
							code : l.get("code"),
							caption : l.get("caption")
						}))
				});
				return c.join(",")
			} else {
				if (h == "select") {
					var a = k.get("codeSign");
					var b = k.get("captionSign");
					var f = k.retrieve("allDb") || JSON.decode(k.get("allDb")) || {};
					f.code = f.code || f[a] || "";
					f.caption = f.caption || f[b] || "";
					return f || {}

				} else {
					if (h == "file" || h == "file2") {
						return this.getField(d).getValue()
					}
				}
			}
			return k.get("realvalue") || k.get("code") || k.get("value")
		},
		getTextValue : function (a) {
			return $(this.options.name + "_" + a).value
		},
		setTextValue : function (a, b) {
			$(this.options.name + "_" + a).value = b
		},
		reSizeRow : function (c) {
			if (!$defined(c)) {
				return
			}
			var b = c.getHeight();
			var a = 0;
			c.getElements(".swordform_item_table").each(function (f) {
				var d = f.getSize().y;
				if (a == 0) {
					a = d
				} else {
					a = (a < d) ? d : a
				}
			});
			if (a > b) {
				c.setStyle("height", a)
			}
		},
		clearField : function (a) {
			var b = this.getFieldEl(a);
			if (!$defined(b)) {
				return
			}
			if (b.get("widget") == "true" || b.get("widget") == "calendar") {
				var c = this.getWidget(a);
				if ($defined(c) && $defined(c.reset)) {
					c.reset()
				} else {
					b.set("value", "");
					if (b.getAttribute("realvalue")) {
						b.set("code", "");
						b.set("realvalue", "");
						b.set("oValue", "")
					}
					if (b.get("oValue")) {
						b.set("oValue", "")
					}
					this.Vobj.clearElTip(b)
				}
			} else {
				if (b.retrieve("allDb")) {
					b.store("allDb", null)
				}
				b.set("value", "");
				if (b.getAttribute("realvalue")) {
					b.set("code", "");
					b.set("realvalue", "");
					b.set("oValue", "")
				}
				this.Vobj.clearElTip(b)
			}
		},
		reset : function (c, b) {
			c = c || [],
			isNH = b === true;
			var a = this.getFieldEls();
			a.each(function (k) {
				if ($type(k) == "string") {
					k = $(k)
				}
				var g = k.get("type"),
				d = k.get("name"),
				m = k.get("widget");
				if (isNH && g == "hidden") {
					return
				} else {
					if (c.indexOf(d) == -1) {
						k.set("value", "");
						k.set("realvalue", "");
						if (k.get("oValue")) {
							k.set("oValue", "")
						}
						if (k.get("code")) {
							k.set("code", "")
						}
						if (g == "label" || g == "textarea") {
							k.set("text", "")
						} else {
							if (g == "radio" || g == "checkbox") {
								var f = k.getElements(".formselect-list-item");
								f.each(function (n) {
									n.removeClass("formselect-selected").getElement("input").set("checked", false)
								})
							} else {
								if (m == "pulltree" || m == "pullbigtree") {
									var h = this.getField(d);
									if (h) {
										h.clearCheckedStatus()
									}
								} else {
									if (m == "select") {
										k.set("allDb", null);
										if (k.retrieve("allDb")) {
											k.store("allDb", null)
										}
									}
								}
							}
						}
						this.Vobj.clearElTip(k)
					} else {
						var l = k.get("defValue");
						if (l != null) {
							this.setValue(d, l)
						}
						this.Vobj.clearElTip(k)
					}
				}
			}
				.bind(this))
		},
		resetAll : function (c, b) {
			c = c || [],
			isNH = b === true;
			var a = this.getFieldEls();
			a.each(function (k) {
				if ($type(k) == "string") {
					k = $(k)
				}
				var g = k.get("type"),
				d = k.get("name"),
				m = k.get("widget");
				if (isNH && g == "hidden") {
					return
				} else {
					if (c.indexOf(d) == -1) {
						k.set("value", "");
						k.set("realvalue", "");
						if (k.get("oValue")) {
							k.set("oValue", "")
						}
						if (k.get("code")) {
							k.set("code", "")
						}
						if (g == "label" || g == "textarea") {
							k.set("text", "")
						} else {
							if (g == "radio" || g == "checkbox") {
								var f = k.getElements(".formselect-list-item");
								f.each(function (n) {
									n.removeClass("formselect-selected").getElement("input").set("checked", false)
								})
							} else {
								if (m == "pulltree" || m == "pullbigtree") {
									var h = this.getField(d);
									if (h) {
										h.clearCheckedStatus()
									}
								} else {
									if (m == "select") {
										k.set("allDb", null);
										if (k.retrieve("allDb")) {
											k.store("allDb", null)
										}
									}
								}
							}
						}
						this.Vobj.clearElTip(k);
						var l = k.get("defValue");
						if (l != null) {
							this.setValue(d, l)
						}
						this.Vobj.clearElTip(k)
					}
				}
			}
				.bind(this))
		},
		getSubmitData4Grid : function () {
			var b = {
				beanname : this.options.beanname,
				sword : this.options.sword,
				name : this.options.name,
				data : {}

			};
			var a = this.getFieldEls();
			a.each(function (c) {
				if ($type(c) == "string") {
					c = $(c)
				}
				if (c.get("widgetGetValue") == "true") {
					b.data[c.get("name")] = {
						value : this.getWidget(c.get("name")).getValue(c)
					}
				} else {
					b.data[c.get("name")] = {
						value : c.get("value")
					}
				}
			}, this);
			return b
		},
		addFormatEvent : function (a) {
			if (!$defined(a)) {
				return
			}
			if (a.get("tag") == "label" || (a.get("tag") == "input" && a.get("type") == "text")) {}
			else {
				return
			}
			if (!a.get("format") && !a.get("submitformat") && !a.get("tipTitle")) {
				return
			}
			if (a.get("tag") == "label") {
				return
			}
			a.addEvents({
				focus : function () {
					if (a.get("tag") == "label") {
						a.set("text", a.get("oValue"))
					} else {
						a.set("value", a.get("oValue"))
					}
				}
				.bind(this),
				blur : function () {
					if (a.get("tipTitle")) {
						this.tooltips.hide(a.get("name"))
					}
					var c = (a.get("tag") == "label") ? a.get("text") : a.get("value");
					a.set("oValue", c);
					a.set("realvalue", c);
					var b = this.validate(a.get("name"));
					if (b == true) {
						this.initFormatVal(a)
					}
				}
				.bind(this)
			})
		},
		initFormatVal : function (a) {
			if (!a.get("format") && !a.get("submitformat")) {
				return
			} else {
				a.set("oValue", (a.get("tag") == "label") ? a.get("text").trim() : a.get("value").trim());
				a.set("realvalue", this.getFormatVal(a, "submitformat"));
				a.set(((a.get("tag") == "label") ? "text" : "value"), this.getFormatVal(a))
			}
		},
		getFormatVal : function (a, b) {
			var c = a.get(b);
			if (!$defined(b)) {
				c = a.get("format")
			}
			if (!$defined(c)) {
				return a.get("oValue")
			}
			return sword_fmt.formatText(a, (a.get("tag") == "label") ? a.get("text").trim() : a.get("value").trim(), "", c).value
		},
		cancelVal : function () {
			this.Vobj.cancelV()
		},
		activeVal : function () {
			this.Vobj.activeV()
		},
		deleteSelectOptions : function (c) {
			var b = this.getFieldEl(c);
			if ($chk(b.get("dataname"))) {
				pc.deleteDataByDataName(b.get("dataname"))
			}
			if ($chk(b.get("name"))) {
				pc.deleteDataByWidgetName(b.get("name"))
			}
			var a = this.getWidget(c).CacheData;
			if (a && a.has(c)) {
				a.erase(c)
			}
		},
		disable : function (b) {
			if ($type(b) == "string") {
				b = [b]
			}
			b = b || [];
			if (b.length == 0) {
				b = this.getFieldElNames()
			} else {
				var a = this.options.name;
				b = b.map(function (c) {
						return a + "_" + c
					})
			}
			b.each(function (f, d) {
				var g = this.getFieldEl(f, true),
				k = g.get("widget") || g.get("type");
				if (k == "radio" || k == "checkbox") {
					g.set("disabled", "true");
					g.getElements("input").each(function (l) {
						l.set("disabled", "true")
					})
				} else {
					if (k == "pulltree" || k == "pullbigtree") {
						g.set("disabled", "true");
						g.addClass("tree_input_disable").setStyle("background-color", "");
						var h = g.getParent().getNext();
						h.addClass("tree_selimg_disable")
					} else {
						if (k == "select") {
							g.set("disabled", "true");
							g.addClass("select_input_disable").setStyle("background-color", "");
							var h = g.getParent().getNext();
							h.addClass("swordselect-selimg-disable")
						} else {
							if (k == "calendar") {
								g.set("disabled", "true");
								var c = g.getParent().getNext();
								g.addClass("calendar_input_disable").setStyle("background-color", "");
								c.addClass("dateBtn_disable")
							} else {
								if (k == "textarea") {
									g.set("reaonly", "reaonly");
									g.addClass("swordform_item_input_disable swordform_textarea_readonly")
								} else {
									if (k == "text") {
										g.set("readonly", "readonly");
										g.set("disable", "true");
										g.addClass("swordform_item_input_disable").setStyle("background-color", "")
									} else {
										g.set("disabled", "true");
										g.addClass("swordform_item_input_disable").setStyle("background-color", "")
									}
								}
							}
						}
					}
				}
			}
				.bind(this))
		},
		enable : function (b) {
			if ($type(b) == "string") {
				b = [b]
			}
			b = b || [];
			if (b.length == 0) {
				b = this.getFieldElNames()
			} else {
				var a = this.options.name;
				b = b.map(function (c) {
						return a + "_" + c
					})
			}
			b.each(function (f, d) {
				var g = this.getFieldEl(f, true),
				m = g.get("name"),
				l = g.get("rule"),
				k = g.get("widget") || g.get("type");
				g.erase("disabled");
				tsType = ["pulltree", "pullbigtree", "file2", "radio", "checkbox"];
				if (k == "radio" || k == "checkbox") {
					g.erase("disabled").getElements("input").each(function (n) {
						n.erase("disabled", "true")
					})
				} else {
					if (k == "pulltree" || k == "pullbigtree") {
						g.removeClass("tree_input_disable");
						var h = g.getParent().getNext();
						h.removeClass("tree_selimg_disable")
					} else {
						if (k == "select") {
							g.removeClass("select_input_disable");
							var h = g.getParent().getNext();
							h.removeClass("swordselect-selimg-disable")
						} else {
							if (k == "calendar") {
								var c = g.getParent().getNext();
								g.removeClass("calendar_input_disable");
								c.removeClass("dateBtn_disable")
							} else {
								if (k == "textarea") {
									g.erase("readonly");
									g.removeClass("swordform_item_input_disable swordform_textarea_readonly")
								} else {
									g.erase("readonly");
									g.erase("disable");
									g.erase("disabled").removeClass("swordform_item_input_disable")
								}
							}
						}
					}
				}
				if (l && l.contains("must")) {
					g.setStyle("background-color", "#fffadb")
				}
			}
				.bind(this))
		},
		cellTip : function (a, b) {},
		showTip : function (b, a) {
			if ($chk(a.get("tipTitle"))) {
				this.tooltips.show(b, a, {
					flag : "top",
					className : "warning",
					autoHidden : false
				})
			}
		},
		initEventForPanel : function () {
			if (this.options.panel == "true") {
				var a = $(this.options.name + "_panelTog");
				a.addEvent("click", function (c) {
					var b = new Event(c).target;
					this.toggleFormDisplay(b);
					if ($defined(this.options.togclick)) {
						this.getFunc(this.options.togclick)[0]()
					}
				}
					.bind(this))
			}
		},
		initEventForTemplate : function () {
			this.initEventForPanel();
			this.addEventForElType();
			this.addEventForAllEl()
		},
		addEventForAllEl : function (a) {
			if (!$chk(a)) {
				this.getFieldEls().filter(function (b) {
					return (b.get("tag").toLowerCase() != "textarea")
				}).addEvent("keyup", this.nextFocus.bind(this));
				this.getFieldEls().each(function (b) {
					if (b.get("type") == "text") {
						b.addEvent("focus", function () {
							b.select();
							this.showTip(b.get("name"), b)
						}
							.bind(this))
					}
					this.allElEvent(b)
				}
					.bind(this))
			} else {
				if (a.get("tag").toLowerCase() != "textarea") {
					a.addEvent("keyup", this.nextFocus.bind(this))
				}
				this.allElEvent(a)
			}
		},
		allElEvent : function (d) {
			var b = d.get("tag");
			var c = b == "input" || d.get("tag") == "textarea" ? d : d.getElement("input");
			if (c && b != "select" && b != "date" && $chk(d.get("rule"))) {
				this.Vobj._add(d)
			}
			var a = ($defined(d.get("biztid")) || $defined(d.get("bizctrl")));
			if (a) {
				d.addEvent("blur", function (g) {
					var f = new Event(g).target;
					this.validate($(f).get("name"))
				}
					.bind(this))
			}
			this.addFormatEvent(d)
		},
		addEventForElType : function (b) {
			if (!$chk(b)) {
				var a = this.getFieldEls();
				a.each(function (c) {
					this.addTypeEventEl(c)
				}
					.bind(this))
			} else {
				this.addTypeEventEl(b)
			}
		},
		addTypeEventEl : function (b) {
			var a = b.get("widget") || b.get("type");
			if (a != "hidden") {
				pc.formItems[a].addEvent(b.getParent(), b, this)
			}
		},
		addInitWidget : function (a) {
			var c = this.getFieldEl(a);
			var d = c.get("widget") || c.get("type");
			if (pc.formItems[d]) {
				if (d == "submit") {
					if (pc.widgets.get(a)) {
						return
					}
				}
				var b = pc.formItems[d] ? pc.formItems[d].initWidget : null;
				if (b) {
					return b(a, c, this)
				} else {
					return null
				}
			}
		},
		setSRang4El : function (b) {
			if (b.createTextRange) {
				var a = b.createTextRange(),
				c = b.get("value").length;
				a.collapse(true);
				a.moveEnd("character", c);
				a.moveStart("character", 0);
				a.select()
			}
		}
	});
var fileUpload = new Class({
		Implements : [Events, Options],
		name : "fileUpload",
		options : {
			pNode : null,
			name : null,
			rule : null,
			css : null,
			isMulti : "true",
			maxSize : 0,
			size : null,
			keepfile : "false",
			vType : null
		},
		initialize : function (a) {
			this.htmlOptions(a)
		},
		uploadButton : null,
		uploadContent : null,
		uploadTempContent : null,
		uploadLoading : null,
		selectFile : null,
		uploadForm : null,
		iframeKey : "FileUploadCommitIframe",
		wrap : null,
		innerWrap : null,
		parent : null,
		box : null,
		initParam : function (b, a) {
			this.parent = a;
			this.wrap = new Element("div", {
					name : this.options.name,
					"class" : "uploadGroup formselect-list swordform_item_oprate",
					widgetGetValue : "true",
					rule : this.options.rule,
					widget : true,
					keepfile : this.options.keepfile,
					styles : {
						"float" : "left"
					}
				}).inject(this.options.pNode);
			this.wrap.store("parent", a);
			this.innerWrap = new Element("div", {
					"class" : "formselect-list-inner"
				}).inject(this.wrap);
			this.parseFileRow("init");
			sword_convertHTML(this.box, b);
			if (b.get("size")) {
				this.options.size = b.get("size");
				this.box.set("size", this.options.size)
			}
			this.options.vType = this.options.vType || "intime";
			return this
		},
		reset : function () {
			this.innerWrap.getElements("input[type='file']").each(function (a) {
				a.set("value", "")
			})
		},
		disable : function (a) {
			a.getElements("input").set("disabled", true)
		},
		enable : function (a) {
			a.getElements("input").set("disabled", false)
		},
		resetElStatus : function (a) {
			this.wrap = a.store("parent", this.parent);
			this.innerWrap = this.wrap.getFirst();
			this.innerWrap.getElements("input[type='button']").each(function (b) {
				if (b.get("value") == "增加") {
					this.box = b.addEvent("click", function () {
							this.parseFileRow("add");
							this.parent.reSizeRow(this.options.pNode.getParents("div.swordform_row_div")[0])
						}
							.bind(this))
				} else {
					if (b.get("value") == "取消") {
						b.addEvent("click", function (c) {
							new Event(c).target.getParent("div").destroy();
							this.parent.reSizeRow(this.options.pNode.getParents("div.swordform_row_div")[0])
						}
							.bind(this))
					}
				}
			}
				.bind(this))
		},
		getValue : function () {
			var a = "";
			this.wrap.getElements("input[type='file']").each(function (b) {
				a = ((a == "") ? a : (a + ",")) + b.get("value")
			});
			return a
		},
		parseFileRow : function (d, c) {
			var g = new Element("div", {
					"class" : "formselect-list-item"
				}).inject(this.innerWrap);
			var a = new Element("input", {
					type : "file",
					name : c.get("name"),
					rule : c.get("rule")
				}).inject(g);
			this.box = a;
			if (c.get("size") != null) {
				this.box.set("size", c.get("size"))
			}
			this.box.addEvent("change", this.fileValidator.bind(this));
			var f = new Element("span", {
					"class" : "fileuploadloaded"
				}).inject(g);
			if (d == "init" && c.get("isMulti") == "true") {
				var b = new Element("input", {
						type : "button",
						value : "增加",
						events : {
							click : function () {
								if (this.options.maxSize > 0 && this.innerWrap.getChildren().length >= this.options.maxSize) {
									alert("您最多只能上传" + this.options.maxSize + "个文件。");
									return
								}
								this.parseFileRow("add", c);
								this.parent.reSizeRow(this.options.pNode.getParents("div.swordform_row_div")[0])
							}
							.bind(this)
						}
					}).inject(g)
			} else {
				if (d == "add") {
					var b = new Element("input", {
							type : "button",
							value : "取消",
							events : {
								click : function (h) {
									new Event(h).target.getParent("div").destroy();
									this.parent.reSizeRow(this.options.pNode.getParents("div.swordform_row_div")[0])
								}
								.bind(this)
							}
						}).inject(g)
				}
			}
		},
		initEvent : function () {
			var a = this.box.getParent().getElement('input[type="button"]');
			a.addEvent("click", function (b) {
				if (this.options.maxSize > 0 && this.innerWrap.getChildren().length >= this.options.maxSize) {
					alert("您最多只能上传" + this.options.maxSize + "个文件。");
					return
				}
				this.parseFileRow("add");
				this.parent.reSizeRow(this.options.pNode.getParents("div.swordform_row_div")[0])
			}
				.bind(this))
		},
		fileValidator : function (g) {
			var f = new Event(g).target;
			var d = f.get("value");
			if ($defined(f.get("rule"))) {
				var b = new SwordValidator();
				b.initParam(this.options.vType);
				if ($chk(d)) {
					var c = b.doValidate(f);
					if (c.state == true) {
						b.clearElTip(f)
					} else {
						b.tooltips.createTip(f, c.msg)
					}
				} else {
					b.clearElTip(f)
				}
			}
			var a = f.get("_onchange");
			if (a) {
				this.getFunc(a)[0](d)
			}
		},
		initData : function () {},
		loading : function () {
			var c = this.selectFile.getPosition();
			if (this.uploadContent.getStyle("display") == "none") {
				this.uploadContent.setStyles({
					display : "",
					height : "35px"
				});
				this.uploadLoading.setStyles({
					display : "",
					left : c.x + 10,
					top : c.y + this.selectFile.getHeight(),
					width : "300px",
					height : "35px"
				})
			} else {
				var d = this.uploadContent.getPosition();
				var a = this.uploadContent.getWidth();
				var b = this.uploadContent.getHeight();
				this.uploadLoading.setStyles({
					display : "",
					left : d.x,
					top : d.y,
					width : a + 5,
					height : b + 35
				})
			}
		},
		endLoding : function () {
			this.uploadLoading.setStyle("display", "none")
		},
		setupSize : function (a) {
			var b = new Array("B", " KB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB");
			var c = 0;
			while (a >= 1024) {
				a = a / 1024;
				c++
			}
			if (c > 0) {
				return a.toFixed(2) + b[c]
			} else {
				return a + b[c]
			}
		}
	});
var FormBlockArea = new Class({
		Implements : [Events, Options],
		name : "formblock",
		options : {
			pNode : null,
			caption : null,
			isHide : null,
			name : null,
			isShow : null
		},
		initialize : function (a) {
			this.setOptions(a)
		},
		legendFx : null,
		fieldset : null,
		legend : null,
		initParam : function () {
			var c = new Element("div", {
					"class" : "swordform_block",
					name : this.options.name
				}).inject(this.options.pNode);
			var a = new Element("div", {
					"class" : "swordform_block_top"
				}).inject(c);
			a.set("html", "<div class='l'></div><div class='r'></div>");
			var d = new Element("div", {
					"class" : "swordform_block_center"
				}).inject(c);
			var b = new Element("div", {
					"class" : "ll"
				}).inject(d);
			var g = new Element("div", {
					"class" : "rr"
				}).inject(b);
			var f = new Element("div", {
					"class" : "swordform_block_bottom"
				}).inject(c);
			f.set("html", "<div class='l'></div><div class='r'></div>");
			if (this.options.isShow == "false") {
				c.setStyle("display", "none")
			}
			return g
		}
	});
var SwordPanel = new Class({
		Implements : [Events, Options],
		name : "SwordPanel",
		options : {
			pNode : null,
			caption : null
		},
		tc : null,
		initialize : function (a) {
			this.setOptions(a)
		},
		initParam : function () {
			var a = new Element("div", {
					"class" : "swordform-panel-box"
				}).inject(this.options.pNode);
			var b = new Element("div", {
					"class" : "swordform-panel-tl"
				}).inject(a);
			var c = new Element("div", {
					"class" : "swordform-panel-tr"
				}).inject(a);
			this.tc = new Element("div", {
					"class" : "swordform-panel-title"
				}).appendText(this.options.caption || "").inject(a);
			return this
		},
		updateTitle : function (a) {
			this.tc.set("text", a)
		}
	});
var Textarea = new Class({
		Implements : [Events, Options],
		name : "textarea",
		options : {
			css : null,
			scroll : false,
			pNode : null,
			name : null,
			rule : null,
			bizValidate : "false",
			biztid : null,
			bizctrl : null,
			msg : null,
			defValue : null,
			edit : null,
			maxLength : null
		},
		defWidth : 500,
		defHeight : 120,
		box : null,
		countSpan : null,
		parent : null,
		initialize : function (a) {
			if (a) {
				this.htmlOptions(a)
			}
		},
		initParam : function (a) {
			this.parent = a;
			this.box = new Element("textarea", {
					"class" : "swordform_item_oprate swordform_item_textarea",
					name : this.options.name,
					rule : this.options.rule,
					bizValidate : this.options.bizValidate,
					biztid : this.options.biztid,
					bizctrl : this.options.bizctrl,
					msg : this.options.msg,
					widget : "true"
				}).inject(this.options.pNode);
			if ((this.options.rule || "").indexOf("must") > -1 && a.options.requiredSign == "field") {
				new Element("span", {
					styles : {
						color : "red",
						"float" : "left"
					},
					html : "*"
				}).inject(this.options.pNode)
			}
			if (this.options.edit == "false") {
				this.box.set("disabled", true)
			}
			if (a.isVal() && $defined(this.options.rule)) {
				Sword.utils.createElAfter(this.options.pNode)
			}
			if ($defined(this.options.maxLength)) {
				var b = new Element("div", {
						html : "您还可以输入<span class='textarea_maxLength_count'>" + this.options.maxLength + "</span>字",
						"class" : "textarea_maxLength_wrap"
					}).inject(this.options.pNode);
				this.countSpan = b.getElement("span.textarea_maxLength_count")
			}
			if ($defined(this.options.defValue)) {
				this.initData(this.options.defValue)
			}
			return this.box
		},
		maxLengthCount : function (e) {
			if (this.getStringUTFLength(this.getValue()) > this.options.maxLength / 1) {
				if (e) {
					try {
						with (window.event || e) {
							cancelBubble = true;
							keyCode = 0;
							returnValue = false
						}
					} catch (ex) {}

				}
				this.box.set("value", this.leftUTFString(this.getValue(), this.options.maxLength / 1))
			}
			var len = this.options.maxLength / 1 - this.getStringUTFLength(this.getValue());
			this.countSpan.set("text", (len >= 0) ? len : 0);
			if (len == 0) {
				this.countSpan.getParent().setStyle("color", "red")
			} else {
				this.countSpan.getParent().setStyle("color", "#333")
			}
			if (e.key == "esc") {
				this.parent.nextFocus(e);
				return
			}
			if (e.type == "blur") {
				this.box.set("realvalue", this.box.get("value"))
			}
		},
		leftUTFString : function (c, a) {
			if (this.getStringUTFLength(c) <= a) {
				return c
			}
			var b = c.substring(0, a);
			while (this.getStringUTFLength(b) > a) {
				b = b.substring(0, b.length - 1)
			}
			return b
		},
		getStringUTFLength : function (b) {
			var a = b.replace(/[\u4e00-\u9fa5]/g, "  ");
			return a.length
		},
		initData : function (a) {
			if (!$defined(a)) {
				a = ""
			}
			a = a.replace(/&apos;/g, "'");
			this.box.set("value", a);
			if ($defined(this.options.maxLength)) {
				this.maxLengthCount()
			}
			return this.box
		},
		getValue : function () {
			return this.box.get("value")
		},
		reset : function () {
			this.initData("");
			this.parent.Vobj.clearElTip(this.box)
		},
		focus : function () {
			this.box.focus()
		},
		initEvent : function () {
			if ($defined(this.options.maxLength)) {
				this.box.addEvent("blur", this.maxLengthCount.bind(this));
				this.box.addEvent("change", this.maxLengthCount.bind(this));
				this.box.addEvent("keyup", this.maxLengthCount.bind(this))
			}
		}
	});
var SwordGroupFields = new Class({
		Implements : [Events, Options],
		name : "groupfields",
		options : {
			tag : null,
			pNode : null,
			data : null,
			dataname : null,
			validate : null,
			name : null,
			rule : null,
			type : null,
			colWidth : null,
			col : 1,
			onClickBefore : null,
			onClickAfter : null,
			sbmitcontent : null,
			msg : null,
			defValue : null,
			disable : "false"
		},
		initialize : function (a) {
			this.htmlOptions(a)
		},
		wrap : null,
		innerWrap : null,
		parent : null,
		initParam : function (b, a) {
			this.parent = a;
			this.options.validate = a.Vobj;
			this.options.tag = b.get("type");
			this.options.opts = b.getChildren(">div");
			this.wrap = new Element("div", {
					name : this.options.name,
					"class" : "formselect-list swordform_item_oprate",
					rule : this.options.rule,
					widget : "true",
					msg : this.options.msg,
					widgetGetValue : "true",
					ruleType : this.options.type + "Group"
				}).inject(this.options.pNode);
			this.innerWrap = new Element("div", {
					defValue : this.options.defValue,
					"class" : "formselect-list-inner"
				}).inject(this.wrap);
			if ((this.options.rule || "").indexOf("must") > -1 && a.options.requiredSign == "field") {
				new Element("span", {
					styles : {
						color : "red",
						"float" : "left"
					},
					html : "*"
				}).inject(this.options.pNode)
			}
			if (this.options.opts.length > 0 && this.parent.options.userDefine != "true") {
				this.initOptionsData(this.options.opts)
			}
			if (a.isVal() && $defined(this.options.rule)) {
				Sword.utils.createElAfter(this.options.pNode)
			}
			if (this.options.disable == "true") {
				this.disable()
			}
			return this
		},
		initalizeData : null,
		initalized : false,
		initData : function (b) {
			var a = this.innerWrap.get("defValue");
			if (b == "" && $defined(a)) {
				b = a
			}
			if (b.indexOf(",") == -1) {
				b = b + ",1"
			}
			b = b.toHash();
			if ($type(b) == "hash") {
				this.initalizeData = b;
				this.reset();
				b.each(function (d, c) {
					if (d / 1 == 1) {
						var f = this.innerWrap.getElement("input[value='" + c + "']");
						if (f) {
							f.set("checked", true);
							f.getParent().addClass("formselect-selected")
						}
					}
				}, this)
			}
			this.initalizeData = null
		},
		initOptionsData : function (a) {
			this.clearOptions();
			a.each(function (g, b) {
				var h = new Element("div", {
						"class" : "formselect-list-item"
					}).inject(this.innerWrap);
				if ($defined(this.options.colWidth)) {
					h.setStyles({
						width : this.options.colWidth
					})
				}
				var f,
				d;
				if ($type(g) == "element") {
					f = g.get("code");
					d = g.get("caption")
				} else {
					f = g.code;
					d = g.caption
				}
				h.set({
					code : f,
					caption : d
				});
				if (this.options.tag != "multiselect") {
					var c = new Element("input", {
							type : this.options.type,
							rule : this.options.rule,
							ruleType : this.options.type + "Group",
							name : this.options.name
						}).inject(h);
					c.setStyle("cursor", "pointer");
					h.addEvent("click", function (l) {
						if (this.options.disable == "true") {
							return
						}
						var k = new Event(l).target;
						if (this.options.rule) {
							this.options.validate.tooltips.hide(this.options.name);
							this.options.validate.intimeValidate(k)
						}
						if (["div", "span"].contains(k.get("tag"))) {
							return
						}
						if ($defined(this.options.onClickBefore)) {
							this.getFunc(this.options.onClickBefore)[0](f, d, k)
						}
						if (c.get("type") == "checkbox") {
							if (c.get("checked")) {
								if (k != c) {
									if (!$chk(c.get("disabled"))) {
										c.set("checked", false)
									}
									c.getParent().removeClass("formselect-selected")
								} else {
									c.getParent().addClass("formselect-selected")
								}
							} else {
								if (k != c) {
									if (!$chk(c.get("disabled"))) {
										c.set("checked", true)
									}
									c.getParent().addClass("formselect-selected")
								} else {
									c.getParent().removeClass("formselect-selected")
								}
							}
						} else {
							if (!$chk(c.get("disabled"))) {
								this.reset();
								c.getParent().addClass("formselect-selected");
								c.set("checked", true)
							}
						}
						if ($defined(this.options.onClickAfter)) {
							this.getFunc(this.options.onClickAfter)[0](f, d, k)
						}
					}
						.bind(this));
					if (this.options.rule) {
						this.options.validate._add(c)
					}
					c.set("value", f)
				} else {
					h.addEvent("click", function () {
						if (this.options.disable == "true") {
							return
						}
						if ($defined(this.options.onClickBefore)) {
							this.getFunc(this.options.onClickBefore)[0](f, d)
						}
						h.getParent().getElements("div").each(function (k) {
							k.removeClass("formselect-selected")
						}, this);
						h.addClass("formselect-selected");
						if ($defined(this.options.onClickAfter)) {
							this.getFunc(this.options.onClickAfter)[0](f, d)
						}
					}
						.bind(this))
				}
				new Element("span", {
					text : d,
					title : d
				}).inject(h)
			}, this);
			if (this.options.defValue != null) {
				this.initData(this.options.defValue)
			}
			return this
		},
		initEvent : function () {
			var a = this.innerWrap.getElements("div.formselect-list-item");
			a.each(function (c, b) {
				if ($defined(this.options.colWidth)) {
					c.setStyles({
						width : this.options.colWidth
					})
				}
				c.addEvent("click", function (h) {
					var g = c.get("code");
					var f = c.get("caption");
					if (this.options.disable == "true") {
						return
					}
					var d = $(new Event(h).target);
					if (this.options.rule) {
						this.options.validate.tooltips.hide(this.options.name);
						this.options.validate.intimeValidate(d)
					}
					if (["div", "span"].contains(d.get("tag"))) {
						return
					}
					if ($defined(this.options.onClickBefore)) {
						this.getFunc(this.options.onClickBefore)[0](g, f, d)
					}
					if (d.get("type") == "checkbox") {
						if (d.get("checked")) {
							d.getParent().addClass("formselect-selected")
						} else {
							d.getParent().removeClass("formselect-selected")
						}
					} else {
						if (!$chk(d.get("disabled"))) {
							this.reset();
							d.getParent().addClass("formselect-selected");
							d.set("checked", true)
						}
					}
					if ($defined(this.options.onClickAfter)) {
						this.getFunc(this.options.onClickAfter)[0](g, f, d)
					}
				}
					.bind(this))
			}, this)
		},
		validate : function () {},
		getValue : function (c) {
			var a = "",
			b;
			this.wrap.getElements("div.formselect-list-item").filter(function (d) {
				b = d.getElements("input")[0];
				if (c == false) {
					return ($defined(b)) ? b.get("checked") != true : !d.hasClass("formselect-selected")
				}
				return ($defined(b)) ? b.get("checked") == true : d.hasClass("formselect-selected")
			}).each(function (d) {
				if (a == "") {
					a += this.genarateContent({
						code : d.get("code"),
						caption : d.get("caption")
					})
				} else {
					a += "," + this.genarateContent({
						code : d.get("code"),
						caption : d.get("caption")
					})
				}
			}
				.bind(this));
			return a
		},
		getAllValue : function (c) {
			var a = [],
			b;
			this.wrap.getElements("div.formselect-list-item").filter(function (d) {
				b = d.getElements("input")[0];
				if (c == false) {
					return ($defined(b)) ? b.get("checked") != true : !d.hasClass("formselect-selected")
				}
				return ($defined(b)) ? b.get("checked") == true : d.hasClass("formselect-selected")
			}).each(function (d) {
				a.include({
					code : d.get("code"),
					caption : d.get("caption")
				})
			}
				.bind(this));
			return a
		},
		genarateContent : function (b) {
			var a = this.options.sbmitcontent;
			if (!$defined(a)) {
				a = "{code}"
			}
			return a.substitute(b)
		},
		reset : function () {
			this.wrap.getElements("div.formselect-list-item").each(function (a) {
				if (a.getElement("input")) {
					a.getElement("input").set("checked", false)
				}
				a.removeClass("formselect-selected")
			})
		},
		getChildrenEl : function () {
			var a = this.options.name || this.innerWrap.get("name");
			var b = this.options.type || this.innerWrap.get("type");
			return this.innerWrap.getElements("input[name=" + a + "][type=" + b + "]")
		},
		disable : function () {
			this.options.disable = "true";
			this.getChildrenEl().set("disabled", true)
		},
		enable : function () {
			this.options.disable = "false";
			this.getChildrenEl().set("disabled", false)
		},
		clearOptions : function () {
			this.innerWrap.getElements("*").each(function (a) {
				a.destroy()
			})
		}
	});
var frameLayer1 = {
	oldOptions : {
		north : {
			styles : {
				position : "absolute",
				left : 0,
				top : 0,
				width : 1400,
				height : 52,
				zIndex : 0
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "false",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		west : {
			styles : {
				position : "absolute",
				left : 0,
				top : 57,
				width : 300,
				height : 645
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		westDragDiv : {
			styles : {
				position : "absolute",
				left : 300,
				top : 57,
				width : 5,
				height : 645
			},
			el : null
		},
		center : {
			styles : {
				position : "absolute",
				left : 305,
				top : 57,
				width : 890,
				height : 645
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		eastDragDiv : {
			styles : {
				position : "absolute",
				left : 1195,
				top : 57,
				width : 5,
				height : 645
			},
			el : null
		},
		east : {
			styles : {
				position : "absolute",
				left : 1200,
				top : 57,
				width : 200,
				height : 645
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		southDragDiv : {
			styles : {
				position : "absolute",
				left : 0,
				top : 702,
				width : 1400,
				height : 5
			},
			el : null
		},
		south : {
			styles : {
				position : "absolute",
				left : 0,
				top : 707,
				width : 1400,
				height : 150
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		}
	},
	newOptions : {
		north : {
			styles : {
				position : "absolute",
				left : 0,
				top : 0,
				width : 1400,
				height : 52
			}
		},
		west : {
			styles : {
				position : "absolute",
				left : 0,
				top : 57,
				width : 300,
				height : 645
			}
		},
		westDragDiv : {
			styles : {
				position : "absolute",
				left : 300,
				top : 57,
				width : 5,
				height : 645
			}
		},
		center : {
			styles : {
				position : "absolute",
				left : 305,
				top : 57,
				width : 890,
				height : 645
			}
		},
		eastDragDiv : {
			styles : {
				position : "absolute",
				left : 1195,
				top : 57,
				width : 5,
				height : 645
			}
		},
		east : {
			styles : {
				position : "absolute",
				left : 1200,
				top : 57,
				width : 200,
				height : 645
			}
		},
		southDragDiv : {
			styles : {
				position : "absolute",
				left : 0,
				top : 702,
				width : 1400,
				height : 5
			}
		},
		south : {
			styles : {
				position : "absolute",
				left : 0,
				top : 707,
				width : 1400,
				height : 150
			}
		}
	}
};
var frameLayer2 = {
	oldOptions : {
		north : {
			styles : {
				position : "absolute",
				left : 0,
				top : 0,
				width : 1400,
				height : 62,
				zIndex : 0
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "false",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		west : {
			styles : {
				position : "absolute",
				left : 0,
				top : 68,
				width : 300,
				height : 785
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		westDragDiv : {
			styles : {
				position : "absolute",
				left : 300,
				top : 68,
				width : 5,
				height : 785
			},
			el : null
		},
		center : {
			styles : {
				position : "absolute",
				left : 305,
				top : 68,
				width : 1095,
				height : 785
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		}
	},
	newOptions : {
		north : {
			styles : {
				position : "absolute",
				left : 0,
				top : 0,
				width : 1400,
				height : 62
			}
		},
		west : {
			styles : {
				position : "absolute",
				left : 0,
				top : 96,
				width : 300,
				height : 760
			}
		},
		westDragDiv : {
			styles : {
				position : "absolute",
				left : 300,
				top : 96,
				width : 5,
				height : 760
			}
		},
		center : {
			styles : {
				position : "absolute",
				left : 305,
				top : 96,
				width : 1095,
				height : 760
			}
		}
	}
};
var frameLayer3 = {
	oldOptions : {
		west : {
			styles : {
				position : "absolute",
				left : 0,
				top : 1,
				width : 300,
				height : 852
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		westDragDiv : {
			styles : {
				position : "absolute",
				left : 300,
				top : 0,
				width : 5,
				height : 852
			},
			el : null
		},
		center : {
			styles : {
				position : "absolute",
				left : 305,
				top : 1,
				width : 1092,
				height : 852
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		}
	},
	newOptions : {
		west : {
			styles : {
				position : "absolute",
				left : 0,
				top : 0,
				width : 300,
				height : 857
			}
		},
		westDragDiv : {
			styles : {
				position : "absolute",
				left : 300,
				top : 0,
				width : 5,
				height : 857
			}
		},
		center : {
			styles : {
				position : "absolute",
				left : 305,
				top : 0,
				width : 1095,
				height : 857
			}
		}
	}
};
var frameLayer4 = {
	oldOptions : {
		north : {
			styles : {
				position : "absolute",
				left : 0,
				top : 0,
				width : 1397,
				height : 91,
				zIndex : 0
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "false",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		west : {
			styles : {
				position : "absolute",
				left : 0,
				top : 97,
				width : 250,
				height : 725
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		westDragDiv : {
			styles : {
				position : "absolute",
				left : 250,
				top : 97,
				width : 5,
				height : 725
			},
			el : null
		},
		center : {
			styles : {
				position : "absolute",
				left : 255,
				top : 97,
				width : 1143,
				height : 725
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		southDragDiv : {
			styles : {
				position : "absolute",
				left : 0,
				top : 822,
				width : 1400,
				height : 5
			},
			el : null
		},
		south : {
			styles : {
				position : "absolute",
				left : 0,
				top : 827,
				width : 1397,
				height : 30
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		}
	},
	newOptions : {
		north : {
			styles : {
				position : "absolute",
				left : 0,
				top : 0,
				width : 1400,
				height : 92
			}
		},
		west : {
			styles : {
				position : "absolute",
				left : 0,
				top : 97,
				width : 300,
				height : 725
			}
		},
		westDragDiv : {
			styles : {
				position : "absolute",
				left : 300,
				top : 97,
				width : 5,
				height : 725
			}
		},
		center : {
			styles : {
				position : "absolute",
				left : 305,
				top : 97,
				width : 1095,
				height : 725
			}
		},
		south : {
			styles : {
				position : "absolute",
				left : 0,
				top : 827,
				width : 1400,
				height : 30
			}
		}
	}
};
var frameLayer5 = {
	oldOptions : {
		north : {
			styles : {
				position : "absolute",
				left : 0,
				top : 0,
				width : 1400,
				height : 120,
				zIndex : 0
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "false",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		center : {
			styles : {
				position : "absolute",
				left : 0,
				top : 125,
				width : 1195,
				height : 697
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		eastDragDiv : {
			styles : {
				position : "absolute",
				left : 1195,
				top : 125,
				width : 5,
				height : 697
			},
			el : null
		},
		east : {
			styles : {
				position : "absolute",
				left : 1200,
				top : 125,
				width : 200,
				height : 697
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		},
		southDragDiv : {
			styles : {
				position : "absolute",
				left : 0,
				top : 822,
				width : 1400,
				height : 5
			},
			el : null
		},
		south : {
			styles : {
				position : "absolute",
				left : 0,
				top : 827,
				width : 1400,
				height : 30
			},
			el : null,
			elSwordWidgetHash : new Hash(),
			scrollDiv : null,
			scrollDivBtn : null,
			scrollBtn : null,
			isScroll : "true",
			isFix : "false",
			fixLength : 0,
			elTween : null,
			scrollDivTween : null,
			scrollRegionAboveFlag : false
		}
	},
	newOptions : {
		north : {
			styles : {
				position : "absolute",
				left : 0,
				top : 0,
				width : 1400,
				height : 80
			}
		},
		center : {
			styles : {
				position : "absolute",
				left : 0,
				top : 85,
				width : 1195,
				height : 697
			}
		},
		eastDragDiv : {
			styles : {
				position : "absolute",
				left : 1195,
				top : 85,
				width : 5,
				height : 697
			}
		},
		east : {
			styles : {
				position : "absolute",
				left : 1200,
				top : 85,
				width : 200,
				height : 697
			}
		},
		southDragDiv : {
			styles : {
				position : "absolute",
				left : 0,
				top : 822,
				width : 1400,
				height : 5
			}
		},
		south : {
			styles : {
				position : "absolute",
				left : 0,
				top : 827,
				width : 1400,
				height : 30
			}
		}
	}
};
var SwordFrame = new Class({
		Implements : [Options, Events],
		Extends : PageContainer,
		options : {
			pNode : null,
			name : "SwordFrame",
			panelScrollSize : 22,
			dragDivSize : 5,
			el : null,
			width : 1400,
			height : 857,
			isScroll : "true",
			layout : null
		},
		dimensionOptions : frameLayer1,
		widthRate : 1,
		heightRate : 1,
		cloneDiv : null,
		initialize : function (a) {
			this.setOptions(a)
		},
		initParam : function (node) {
			this.htmlOptions(node);
			this.options.pNode = $(document.body).setStyles({
					overflow : "hidden",
					height : "100%",
					width : "100%"
				});
			$(document.body).set("scroll", "no");
			if ($defined(this.options.layout)) {
				this.dimensionOptions = eval(this.options.layout)
			}
			this.parseNode(node);
			this.refresh();
			this.addRegionEvent()
		},
		initData : function () {},
		parseNode : function (a) {
			this.options.el = a;
			a.getChildren("div").each(function (b) {
				var c = b.get("region");
				if ($defined(c)) {
					this.buildRegion(b, c);
					if (c != "center") {
						this.buildScrollBtn(b, c);
						this.buildScrollDiv(b, c);
						this.buildDragDiv(b, c)
					}
				}
			}
				.bind(this))
		},
		prepareRegionOptions : function (b, c) {
			for (var a in this.dimensionOptions.oldOptions[c].styles) {
				if ($defined(b.get(a)) && a != "position") {
					this.dimensionOptions.oldOptions[c].styles[a] = b.get(a);
					this.dimensionOptions.newOptions[c].styles[a] = b.get(a)
				}
				if ($defined(b.get("isFix")) && b.get("isFix") == "true" && $defined(b.get("fixLength"))) {
					this.dimensionOptions.oldOptions[c]["isFix"] = "true";
					this.dimensionOptions.oldOptions[c]["fixLength"] = b.get("fixLength")
				}
			}
		},
		buildRegion : function (a, b) {
			this.prepareRegionOptions(a, b);
			this.buildElSwordWidgetHash(a, b);
			a.setStyles({
				position : this.dimensionOptions.oldOptions[b].styles.position,
				left : this.dimensionOptions.oldOptions[b].styles.left,
				top : this.dimensionOptions.oldOptions[b].styles.top,
				width : this.dimensionOptions.oldOptions[b].styles.width,
				height : this.dimensionOptions.oldOptions[b].styles.height,
				"z-index" : this.dimensionOptions.oldOptions[b].styles.zIndex
			});
			this.dimensionOptions.oldOptions[b].el = a;
			this.dimensionOptions.oldOptions[b].elTween = new Fx.Tween(this.dimensionOptions.oldOptions[b].el, {
					duration : 200,
					transition : Fx.Transitions.linear
				})
		},
		buildElSwordWidgetHash : function (a, b) {
			a.getChildren("div[swordType=SwordFramePanel]").each(function (c) {
				var d = pageContainer.create("SwordFramePanel");
				d.initParam(c);
				this.dimensionOptions.oldOptions[b].elSwordWidgetHash.set(c.get("id"), d)
			}
				.bind(this));
			a.getChildren("div[swordType=SwordFrameTab]").each(function (d) {
				var c = pageContainer.create("SwordFrameTab");
				c.initParam(d);
				this.dimensionOptions.oldOptions[b].elSwordWidgetHash.set(d.get("id"), c)
			}
				.bind(this))
		},
		buildScrollBtn : function (b, c) {
			if (this.options.isScroll != "false") {
				var a = new Element("div", {
						"class" : "title_div",
						styles : {
							"z-index" : 1
						}
					});
				if (c != "east") {
					this.dimensionOptions.oldOptions[c].scrollBtn = new Element("div", {
							"class" : "x-tool x-tool-collapse-" + c,
							styles : {
								position : "inherit",
								"z-index" : 1
							}
						}).inject(a)
				} else {
					this.dimensionOptions.oldOptions[c].scrollBtn = new Element("div", {
							"class" : "x-tool x-tool-collapse-" + c,
							styles : {
								position : "absolute",
								"z-index" : 1
							}
						}).inject(a)
				}
				a.inject(b, "top");
				this.refreshScrollBtn(c);
				this.dimensionOptions.oldOptions[c].scrollBtn.addEvent("click", function (d) {
					if (this.dimensionOptions.oldOptions[c].el.get("collapse") == "true") {
						this.scrollRegionInDiv(c)
					} else {
						this.scrollRegionOutDiv(c)
					}
				}
					.bind(this))
			}
		},
		buildScrollDiv : function (a, b) {},
		buildDragDiv : function (a, b) {
			if ($defined(this.dimensionOptions.oldOptions[b + "DragDiv"])) {
				this.dimensionOptions.oldOptions[b + "DragDiv"].el = new Element("div", {
						"class" : "x-layout-split",
						styles : {
							position : this.dimensionOptions.oldOptions[b + "DragDiv"].styles.position,
							width : this.dimensionOptions.oldOptions[b + "DragDiv"].styles.width,
							height : this.dimensionOptions.oldOptions[b + "DragDiv"].styles.height,
							top : this.dimensionOptions.oldOptions[b + "DragDiv"].styles.top,
							left : this.dimensionOptions.oldOptions[b + "DragDiv"].styles.left,
							"z-index" : 10002
						},
						events : {
							mousedown : function (c) {
								if (!new Event(c).rightClick) {
									this.cloneDiv = new Element("div", {
											id : "yuantongaaaaaa",
											styles : {
												position : "absolute",
												width : document.body.getScrollSize().x,
												height : document.body.getScrollSize().y,
												top : 0,
												left : 0,
												background : "white",
												"z-index" : 5555,
												filter : "Alpha(opacity=0)",
												opacity : 0.5
											}
										}).inject(document.body);
									this.cloneDiv.addEvent("mouseup", function () {
										this.dimensionOptions.oldOptions[b + "DragDiv"].el.fireEvent("mouseup", this)
									}
										.bind(this))
								}
							}
							.bind(this),
							mouseup : function () {
								if ($defined(this.cloneDiv)) {
									this.cloneDiv.destroy()
								}
							}
							.bind(this)
						}
					}).inject(this.options.el);
				new Drag(this.dimensionOptions.oldOptions[b + "DragDiv"].el, {
					handle : this.dimensionOptions.oldOptions[b + "DragDiv"].el,
					onStart : function () {}

					.bind(this),
					onDrag : function () {
						this.dimensionOptions.oldOptions[b + "DragDiv"].el.setStyle("background-color", "gray");
						this.onJudgeDragDiv(b)
					}
					.bind(this),
					onComplete : function () {
						this.dimensionOptions.oldOptions[b + "DragDiv"].el.setStyle("background-color", "");
						this.completeDragDiv(b);
						var d = document.getElementById("yuantongaaaaaa");
						if (d != null) {
							d.parentNode.removeChild(d)
						}
						var c = this.cloneDiv.getParent();
						if ($defined(c)) {
							if ($defined(c.get("tag"))) {
								this.cloneDiv.destroy();
								this.cloneDiv = null
							}
						}
					}
					.bind(this)
				});
				if (b == "north" || b == "south") {
					this.dimensionOptions.oldOptions[b + "DragDiv"].el.addClass("x-splitbar-v")
				} else {
					if (b == "west" || b == "east") {
						this.dimensionOptions.oldOptions[b + "DragDiv"].el.addClass("x-splitbar-h")
					}
				}
			}
		},
		onJudgeDragDiv : function (a) {
			switch (a) {
			case "west":
				this.dimensionOptions.oldOptions[a + "DragDiv"].el.setStyles({
					top : this.dimensionOptions.oldOptions[a].el.getStyle("top").toFloat()
				});
				break;
			case "east":
				this.dimensionOptions.oldOptions[a + "DragDiv"].el.setStyles({
					top : this.dimensionOptions.oldOptions[a].el.getStyle("top").toFloat()
				});
				break;
			case "north":
				this.dimensionOptions.oldOptions[a + "DragDiv"].el.setStyles({
					left : this.dimensionOptions.oldOptions[a].el.getStyle("left").toFloat()
				});
				break;
			case "south":
				this.dimensionOptions.oldOptions[a + "DragDiv"].el.setStyles({
					left : this.dimensionOptions.oldOptions[a].el.getStyle("left").toFloat()
				});
				break;
			default:
				break
			}
		},
		completeDragDiv : function (d) {
			switch (d) {
			case "west":
				var c = this.dimensionOptions.newOptions[d + "DragDiv"].styles.left - this.dimensionOptions.oldOptions[d + "DragDiv"].el.getStyle("left").toFloat();
				this.dimensionOptions.newOptions[d + "DragDiv"].styles.left = this.dimensionOptions.oldOptions[d + "DragDiv"].el.getStyle("left").toFloat();
				var a = this.dimensionOptions.newOptions.west.styles.width;
				this.dimensionOptions.newOptions.west.styles.width = a - c < 0 ? 0 : a - c;
				this.dimensionOptions.oldOptions.west.el.setStyle("width", this.dimensionOptions.newOptions.west.styles.width);
				this.refreshScrollBtn("west");
				this.dimensionOptions.newOptions.center.styles.left = this.dimensionOptions.newOptions.center.styles.left - c;
				this.dimensionOptions.newOptions.center.styles.width = this.dimensionOptions.newOptions.center.styles.width + c;
				this.dimensionOptions.oldOptions.center.el.setStyles({
					left : this.dimensionOptions.newOptions.center.styles.left,
					width : this.dimensionOptions.newOptions.center.styles.width
				});
				break;
			case "east":
				var c = this.dimensionOptions.newOptions[d + "DragDiv"].styles.left - this.dimensionOptions.oldOptions[d + "DragDiv"].el.getStyle("left").toFloat();
				this.dimensionOptions.newOptions[d + "DragDiv"].styles.left = this.dimensionOptions.oldOptions[d + "DragDiv"].el.getStyle("left").toFloat();
				this.dimensionOptions.newOptions.east.styles.width = this.dimensionOptions.newOptions.east.styles.width + c;
				this.dimensionOptions.oldOptions.east.el.setStyle("width", this.dimensionOptions.newOptions.east.styles.width);
				this.dimensionOptions.newOptions.east.styles.left = this.dimensionOptions.newOptions.east.styles.left - c;
				this.dimensionOptions.oldOptions.east.el.setStyle("left", this.dimensionOptions.newOptions.east.styles.left);
				this.refreshScrollBtn("east");
				this.dimensionOptions.newOptions.center.styles.width = this.dimensionOptions.newOptions.center.styles.width - c;
				this.dimensionOptions.oldOptions.center.el.setStyles({
					width : this.dimensionOptions.newOptions.center.styles.width
				});
				break;
			case "north":
				var b = this.dimensionOptions.newOptions[d + "DragDiv"].styles.top - this.dimensionOptions.oldOptions[d + "DragDiv"].el.getStyle("top").toFloat();
				this.dimensionOptions.newOptions[d + "DragDiv"].styles.top = this.dimensionOptions.oldOptions[d + "DragDiv"].el.getStyle("top").toFloat();
				if ($defined(this.dimensionOptions.oldOptions.center.el)) {
					this.dimensionOptions.newOptions.center.styles.height = this.dimensionOptions.newOptions.center.styles.height + b;
					this.dimensionOptions.oldOptions.center.el.setStyle("height", this.dimensionOptions.newOptions.center.styles.height);
					this.dimensionOptions.newOptions.center.styles.top = this.dimensionOptions.newOptions.center.styles.top - b;
					this.dimensionOptions.oldOptions.center.el.setStyle("top", this.dimensionOptions.newOptions.center.styles.top);
					this.refreshOtherRefHeight("center", -b)
				}
				if ($defined(this.dimensionOptions.oldOptions.west.el)) {
					this.dimensionOptions.newOptions.west.styles.height = this.dimensionOptions.newOptions.west.styles.height + b;
					this.dimensionOptions.oldOptions.west.el.setStyle("height", this.dimensionOptions.newOptions.west.styles.height);
					this.dimensionOptions.oldOptions.westDragDiv.el.setStyle("height", this.dimensionOptions.newOptions.west.styles.height);
					this.dimensionOptions.newOptions.west.styles.top = this.dimensionOptions.newOptions.west.styles.top - b;
					this.dimensionOptions.oldOptions.west.el.setStyle("top", this.dimensionOptions.newOptions.west.styles.top);
					this.dimensionOptions.oldOptions.westDragDiv.el.setStyle("top", this.dimensionOptions.newOptions.west.styles.top);
					this.refreshOtherRefHeight("west", -b)
				}
				if ($defined(this.dimensionOptions.oldOptions.east.el)) {
					this.dimensionOptions.newOptions.east.styles.height = this.dimensionOptions.newOptions.east.styles.height + b;
					this.dimensionOptions.oldOptions.east.el.setStyle("height", this.dimensionOptions.newOptions.east.styles.height);
					this.dimensionOptions.oldOptions.eastDragDiv.el.setStyle("height", this.dimensionOptions.newOptions.east.styles.height);
					this.dimensionOptions.newOptions.east.styles.top = this.dimensionOptions.newOptions.east.styles.top - b;
					this.dimensionOptions.oldOptions.east.el.setStyle("top", this.dimensionOptions.newOptions.east.styles.top);
					this.dimensionOptions.oldOptions.eastDragDiv.el.setStyle("top", this.dimensionOptions.newOptions.east.styles.top);
					this.refreshOtherRefHeight("east", -b)
				}
				if ($defined(this.dimensionOptions.oldOptions.north.el)) {
					this.dimensionOptions.newOptions.north.styles.height = this.dimensionOptions.newOptions.north.styles.height - b;
					this.dimensionOptions.oldOptions.north.el.setStyle("height", this.dimensionOptions.newOptions.north.styles.height);
					this.refreshOtherRefHeight("north", b)
				}
				this.refreshScrollBtn("west");
				this.refreshScrollBtn("east");
				this.refreshScrollBtn("north");
				break;
			case "south":
				var b = this.dimensionOptions.newOptions[d + "DragDiv"].styles.top - this.dimensionOptions.oldOptions[d + "DragDiv"].el.getStyle("top").toFloat();
				this.dimensionOptions.newOptions[d + "DragDiv"].styles.top = this.dimensionOptions.oldOptions[d + "DragDiv"].el.getStyle("top").toFloat();
				if ($defined(this.dimensionOptions.oldOptions.center.el)) {
					this.dimensionOptions.newOptions.center.styles.height = this.dimensionOptions.newOptions.center.styles.height - b;
					this.dimensionOptions.oldOptions.center.el.setStyle("height", this.dimensionOptions.newOptions.center.styles.height);
					this.refreshOtherRefHeight("center", b)
				}
				if ($defined(this.dimensionOptions.oldOptions.west.el)) {
					this.dimensionOptions.newOptions.west.styles.height = this.dimensionOptions.newOptions.west.styles.height - b;
					this.dimensionOptions.oldOptions.west.el.setStyle("height", this.dimensionOptions.newOptions.west.styles.height);
					this.dimensionOptions.oldOptions.westDragDiv.el.setStyle("height", this.dimensionOptions.newOptions.west.styles.height);
					this.refreshOtherRefHeight("west", b)
				}
				if ($defined(this.dimensionOptions.oldOptions.east.el)) {
					this.dimensionOptions.newOptions.east.styles.height = this.dimensionOptions.newOptions.east.styles.height - b;
					this.dimensionOptions.oldOptions.east.el.setStyle("height", this.dimensionOptions.newOptions.east.styles.height);
					this.dimensionOptions.oldOptions.eastDragDiv.el.setStyle("height", this.dimensionOptions.newOptions.east.styles.height);
					this.refreshOtherRefHeight("east", b)
				}
				if ($defined(this.dimensionOptions.oldOptions.south.el)) {
					this.dimensionOptions.newOptions.south.styles.top = this.dimensionOptions.newOptions.south.styles.top - b;
					this.dimensionOptions.oldOptions.south.el.setStyle("top", this.dimensionOptions.newOptions.south.styles.top);
					this.dimensionOptions.newOptions.south.styles.height = this.dimensionOptions.newOptions.south.styles.height + b;
					this.dimensionOptions.oldOptions.south.el.setStyle("height", this.dimensionOptions.newOptions.south.styles.height);
					this.refreshOtherRefHeight("south", -b)
				}
				this.refreshScrollBtn("west");
				this.refreshScrollBtn("east");
				this.refreshScrollBtn("south");
				break;
			default:
				break
			}
		},
		refresh : function () {
			this.widthRate = $(document.body).getSize().x / this.options.width;
			this.heightRate = $(document.body).getSize().y / this.options.height;
			for (var a in this.dimensionOptions.newOptions) {
				this.refreshOptionsElRegionAndDragDiv(a);
				this.refreshScrollDiv(a);
				this.refreshScrollBtn(a);
				this.refreshScrollRegionAboveFlag(a)
			}
			this.refreshFix()
		},
		refreshOptionsElRegionAndDragDiv : function (b) {
			for (var a in this.dimensionOptions.newOptions[b].styles) {
				if (a != "position") {
					if (a == "left" || a == "width") {
						this.dimensionOptions.newOptions[b].styles[a] = this.dimensionOptions.oldOptions[b].styles[a] * this.widthRate
					} else {
						if (a == "top" || a == "height") {
							this.dimensionOptions.newOptions[b].styles[a] = this.dimensionOptions.oldOptions[b].styles[a] * this.heightRate
						}
					}
					this.dimensionOptions.oldOptions[b].el.setStyle(a, this.dimensionOptions.newOptions[b].styles[a])
				}
			}
			if (!b.contains("DragDiv")) {
				this.dimensionOptions.oldOptions[b].el.set("heightRate", this.heightRate);
				this.dimensionOptions.oldOptions[b].el.set("widthRate", this.widthRate)
			}
		},
		refreshFix : function () {
			var c = this.dimensionOptions.oldOptions;
			var d = this.dimensionOptions.newOptions;
			var a = 0;
			var b = 0;
			if ($defined(c.north) && c.north["isFix"] == "true") {
				a = c.north["fixLength"] - d.north.styles.height;
				c.north.el.setStyle("height", (c.north["fixLength"]).toFloat());
				if ($defined(c.west) && $defined(c.west.el)) {
					c.west.el.setStyle("top", Math.max(0, d.west.styles.top + a));
					c.west.el.setStyle("height", Math.max(0, d.west.styles.height - a))
				}
				if ($defined(c.westDragDiv) && $defined(c.westDragDiv.el)) {
					c.westDragDiv.el.setStyle("top", Math.max(0, d.westDragDiv.styles.top + a));
					c.westDragDiv.el.setStyle("height", Math.max(0, d.westDragDiv.styles.height - a))
				}
				if ($defined(c.east) && $defined(c.east.el)) {
					c.east.el.setStyle("top", Math.max(0, d.west.styles.top + a));
					c.east.el.setStyle("height", Math.max(0, d.west.styles.height - a))
				}
				if ($defined(c.eastDragDiv) && $defined(c.eastDragDiv.el)) {
					c.eastDragDiv.el.setStyle("top", Math.max(0, d.eastDragDiv.styles.top + a));
					c.eastDragDiv.el.setStyle("height", Math.max(0, d.eastDragDiv.styles.height - a))
				}
				if ($defined(c.center.el) && $defined(c.center.el)) {
					c.center.el.setStyle("top", Math.max(0, d.center.styles.top + a));
					c.center.el.setStyle("height", Math.max(0, d.center.styles.height - a))
				}
			}
			if ($defined(c.south) && c.south["isFix"] == "true") {
				b = c.south["fixLength"] - d.south.styles.height;
				c.south.el.setStyle("top", Math.max(0, d.south.styles.top - b));
				c.south.el.setStyle("height", Math.max(0, c.south["fixLength"]));
				if ($defined(c.west) && $defined(c.west.el)) {
					c.west.el.set("heightMinus", b + a);
					c.west.el.setStyle("height", Math.max(0, d.west.styles.height - b - a))
				}
				if ($defined(c.westDragDiv) && $defined(c.westDragDiv.el)) {
					c.westDragDiv.el.setStyle("height", Math.max(0, d.westDragDiv.styles.height - b - a))
				}
				if ($defined(c.east) && $defined(c.east.el)) {
					c.east.el.set("heightMinus", b + a);
					c.east.el.setStyle("height", Math.max(0, d.west.styles.height - b - a))
				}
				if ($defined(c.eastDragDiv) && $defined(c.eastDragDiv.el)) {
					c.eastDragDiv.el.setStyle("height", Math.max(0, d.eastDragDiv.styles.height - b - a))
				}
				if ($defined(c.center.el) && $defined(c.center.el)) {
					c.center.el.set("heightMinus", b + a);
					c.center.el.setStyle("height", Math.max(0, d.center.styles.height - b - a))
				}
			}
			if ($defined(c.west) && $defined(c.west.scrollDiv)) {
				c.west.scrollDiv.setStyles({
					height : c.west.el.getStyle("height"),
					top : c.west.el.getStyle("top")
				})
			}
			if ($defined(c.east) && $defined(c.east.scrollDiv)) {
				c.east.scrollDiv.setStyles({
					height : c.east.el.getStyle("height"),
					top : c.east.el.getStyle("top")
				})
			}
		},
		refreshScrollDiv : function (a) {
			return;
			if (!a.contains("DragDiv") && a != "center") {
				switch (a) {
				case "west":
					this.dimensionOptions.oldOptions[a].scrollDiv.setStyles({
						width : this.options.panelScrollSize,
						height : this.dimensionOptions.newOptions[a].styles.height,
						left : this.dimensionOptions.newOptions[a].styles.left - this.options.panelScrollSize.toFloat() - 10,
						top : this.dimensionOptions.newOptions[a].styles.top
					});
					break;
				case "east":
					this.dimensionOptions.oldOptions[a].scrollDiv.setStyles({
						width : this.options.panelScrollSize,
						height : this.dimensionOptions.newOptions[a].styles.height,
						left : this.dimensionOptions.newOptions[a].styles.left.toFloat() + this.dimensionOptions.newOptions[a].styles.width.toFloat() + 10,
						top : this.dimensionOptions.newOptions[a].styles.top
					});
					break;
				case "north":
					this.dimensionOptions.oldOptions[a].scrollDiv.setStyles({
						height : this.options.panelScrollSize,
						width : this.dimensionOptions.newOptions[a].styles.width,
						left : this.dimensionOptions.newOptions[a].styles.left,
						top : this.dimensionOptions.newOptions[a].styles.top.toFloat() - this.options.panelScrollSize.toFloat() - 10
					});
					break;
				case "south":
					this.dimensionOptions.oldOptions[a].scrollDiv.setStyles({
						height : this.options.panelScrollSize,
						width : this.dimensionOptions.newOptions[a].styles.width,
						left : this.dimensionOptions.newOptions[a].styles.left,
						top : this.dimensionOptions.newOptions[a].styles.top.toFloat() + this.dimensionOptions.newOptions[a].styles.height.toFloat() + 10
					});
					break;
				default:
					break
				}
			}
		},
		refreshScrollBtn : function (a) {
			if (!a.contains("DragDiv") && a != "center" && this.options.isScroll != "false") {
				if (a != "east") {
					this.dimensionOptions.oldOptions[a].scrollBtn.setStyle("left", this.dimensionOptions.newOptions[a].styles.width - 25);
					this.dimensionOptions.oldOptions[a].scrollBtn.setStyle("top", 5)
				}
			}
		},
		refreshScrollRegionAboveFlag : function (a) {
			this.dimensionOptions.oldOptions[a].scrollRegionAboveFlag = false
		},
		refreshOtherRefHeight : function (d, b) {
			var c = this.dimensionOptions.oldOptions[d].el.getElements("div[sword='SwordFrameTab']");
			c.each(function (g) {
				var f = pageContainer.getWidget(g.get("name"));
				f.refreshTabContentByNum(b)
			}
				.bind(this));
			var a = this.dimensionOptions.oldOptions[d].el.getElements("div[sword='SwordFramePanel']");
			a.each(function (g) {
				var f = pageContainer.getWidget(g.get("name"));
				f.refreshPanelContentByNum(b)
			}
				.bind(this))
		},
		addRegionEvent : function () {
			if (Browser.Engine.trident) {
				this.tempRegion = new Element("div", {
						styles : {
							width : "100%",
							height : "100%"
						}
					}).inject(document.body);
				this.tempRegion.addEvent("resize", function () {
					this.refresh()
				}
					.bind(this))
			} else {
				window.addEvent("resize", function () {
					this.refresh()
				}
					.bind(this))
			}
		},
		scrollRegionOutDiv : function (c) {
			this.dimensionOptions.oldOptions[c].el.set("collapse", "true");
			this.dimensionOptions.oldOptions[c].scrollBtn.setStyle("display", "block");
			if ($defined(this.dimensionOptions.oldOptions[c + "DragDiv"])) {
				this.dimensionOptions.oldOptions[c + "DragDiv"].el.setStyle("z-index", "-1")
			}
			var a = this.options.layout;
			if (a == "frameLayer1") {
				if (c == "west" || c == "east") {
					if (this.dimensionOptions.oldOptions.west.el.get("collapse") == "true" && this.dimensionOptions.oldOptions.east.el.get("collapse") == "true") {
						this.dimensionOptions.oldOptions.eastDragDiv.el.setStyle("display", "none");
						this.dimensionOptions.oldOptions.westDragDiv.el.setStyle("display", "none")
					}
				}
			} else {
				if (a == "frameLayer2" || a == "frameLayer3" || a == "frameLayer4") {
					if (c == "west") {
						if (this.dimensionOptions.oldOptions.west.el.get("collapse") != "true") {
							this.dimensionOptions.oldOptions.westDragDiv.el.setStyle("display", "none")
						}
					}
				} else {
					if (a == "frameLayer5") {
						if (c == "east") {
							if (this.dimensionOptions.oldOptions.east.el.get("collapse") != "true") {
								this.dimensionOptions.oldOptions.eastDragDiv.el.setStyle("display", "none")
							}
						}
					}
				}
			}
			if (c == "south") {
				if (this.dimensionOptions.oldOptions.south.el.get("collapse") == "true") {
					this.dimensionOptions.oldOptions.southDragDiv.el.setStyle("display", "none")
				}
			}
			switch (c) {
			case "west":
				this.dimensionOptions.oldOptions[c].el.setStyle("left", this.dimensionOptions.newOptions[c].styles.left - this.dimensionOptions.newOptions[c].styles.width + 22);
				this.dimensionOptions.oldOptions.center.el.setStyles({
					left : this.dimensionOptions.oldOptions.center.el.getStyle("left").toFloat() - this.dimensionOptions.newOptions[c].styles.width + this.options.panelScrollSize,
					width : this.dimensionOptions.oldOptions.center.el.getStyle("width").toFloat() + this.dimensionOptions.newOptions[c].styles.width - this.options.panelScrollSize
				});
				this.dimensionOptions.oldOptions[c].scrollBtn.set("class", "x-tool x-tool-collapse-east");
				break;
			case "east":
				this.dimensionOptions.oldOptions[c].el.setStyle("left", this.dimensionOptions.newOptions[c].styles.left + this.dimensionOptions.newOptions[c].styles.width - 22);
				this.dimensionOptions.oldOptions.center.el.setStyles({
					width : this.dimensionOptions.oldOptions.center.el.getStyle("width").toFloat() + this.dimensionOptions.newOptions[c].styles.width - this.options.panelScrollSize
				});
				this.dimensionOptions.oldOptions[c].scrollBtn.set("class", "x-tool x-tool-collapse-west");
				this.dimensionOptions.oldOptions[c].scrollBtn.setStyles({
					top : "0",
					left : 0,
					position : "absolute"
				});
				break;
			case "north":
				this.dimensionOptions.oldOptions[c].el.setStyle("top", this.dimensionOptions.newOptions[c].styles.top - this.dimensionOptions.newOptions[c].styles.height + 22);
				if ($defined(this.dimensionOptions.oldOptions.center.el)) {
					this.dimensionOptions.oldOptions.center.el.setStyles({
						top : this.dimensionOptions.oldOptions.center.el.getStyle("top").toFloat() - this.dimensionOptions.newOptions[c].styles.height + this.options.panelScrollSize,
						height : this.dimensionOptions.oldOptions.center.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[c].styles.height - this.options.panelScrollSize
					});
					this.refreshOtherRefHeight("center", -this.dimensionOptions.newOptions[c].styles.height + this.options.panelScrollSize)
				}
				if (a != "frameLayer5") {
					if ($defined(this.dimensionOptions.oldOptions.west.el)) {
						this.dimensionOptions.oldOptions.west.el.setStyles({
							top : this.dimensionOptions.oldOptions.west.el.getStyle("top").toFloat() - this.dimensionOptions.newOptions[c].styles.height + this.options.panelScrollSize,
							height : this.dimensionOptions.oldOptions.west.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[c].styles.height - this.options.panelScrollSize
						});
						this.refreshOtherRefHeight("west", -this.dimensionOptions.newOptions[c].styles.height + this.options.panelScrollSize);
						this.dimensionOptions.oldOptions.westDragDiv.el.setStyles({
							top : this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("top").toFloat() - this.dimensionOptions.newOptions[c].styles.height + this.options.panelScrollSize,
							height : this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[c].styles.height - this.options.panelScrollSize
						})
					}
				}
				if ($defined(this.dimensionOptions.oldOptions.east)) {
					this.dimensionOptions.oldOptions.east.el.setStyles({
						top : this.dimensionOptions.oldOptions.east.el.getStyle("top").toFloat() - this.dimensionOptions.newOptions[c].styles.height + this.options.panelScrollSize,
						height : this.dimensionOptions.oldOptions.east.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[c].styles.height - this.options.panelScrollSize
					});
					this.refreshOtherRefHeight("east", -this.dimensionOptions.newOptions[c].styles.height + this.options.panelScrollSize);
					this.dimensionOptions.oldOptions.eastDragDiv.el.setStyles({
						top : this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("top").toFloat() - this.dimensionOptions.newOptions[c].styles.height + this.options.panelScrollSize,
						height : this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[c].styles.height - this.options.panelScrollSize
					})
				}
				var b = this.dimensionOptions.oldOptions[c].el.getStyle("top").toFloat() * -1;
				this.dimensionOptions.oldOptions[c].scrollBtn.set("class", "x-tool  x-tool-collapse-south");
				this.dimensionOptions.oldOptions[c].scrollBtn.setStyles({
					top : b,
					position : "absolute"
				});
				break;
			case "south":
				this.dimensionOptions.oldOptions[c].el.setStyle("top", this.dimensionOptions.newOptions[c].styles.top + this.dimensionOptions.newOptions[c].styles.height - this.options.panelScrollSize);
				if ($defined(this.dimensionOptions.oldOptions.center)) {
					if ($defined(this.dimensionOptions.oldOptions.center.el)) {
						this.dimensionOptions.oldOptions.center.el.setStyles({
							height : this.dimensionOptions.oldOptions.center.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[c].styles.height - this.options.panelScrollSize
						});
						this.refreshOtherRefHeight("center", -this.dimensionOptions.newOptions[c].styles.height + this.options.panelScrollSize)
					}
				}
				this.dimensionOptions.oldOptions[c].scrollBtn.set("class", "x-tool x-tool-collapse-north");
				if ($defined(this.dimensionOptions.oldOptions.west)) {
					if ($defined(this.dimensionOptions.oldOptions.west.el)) {
						this.dimensionOptions.oldOptions.west.el.setStyles({
							height : this.dimensionOptions.oldOptions.west.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[c].styles.height - this.options.panelScrollSize
						});
						this.refreshOtherRefHeight("west", -this.dimensionOptions.newOptions[c].styles.height + this.options.panelScrollSize);
						this.dimensionOptions.oldOptions.westDragDiv.el.setStyles({
							height : this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[c].styles.height - this.options.panelScrollSize
						})
					}
				}
				if ($defined(this.dimensionOptions.oldOptions.east)) {
					if ($defined(this.dimensionOptions.oldOptions.east.el)) {
						this.dimensionOptions.oldOptions.east.el.setStyles({
							height : this.dimensionOptions.oldOptions.east.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[c].styles.height - this.options.panelScrollSize
						});
						this.refreshOtherRefHeight("east", -this.dimensionOptions.newOptions[c].styles.height + this.options.panelScrollSize);
						this.dimensionOptions.oldOptions.eastDragDiv.el.setStyles({
							height : this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("height").toFloat() + this.dimensionOptions.newOptions[c].styles.height - this.options.panelScrollSize
						})
					}
				}
				break;
			default:
				break
			}
		},
		scrollRegionInDiv : function (b) {
			this.dimensionOptions.oldOptions[b].scrollBtn.setStyle("display", "block");
			if ($defined(this.dimensionOptions.oldOptions[b + "DragDiv"])) {
				this.dimensionOptions.oldOptions[b + "DragDiv"].el.setStyle("z-index", "10002")
			}
			this.dimensionOptions.oldOptions[b].el.set("collapse", "false");
			var a = this.options.layout;
			if (a == "frameLayer1") {
				if (b == "west" || b == "east") {
					if (this.dimensionOptions.oldOptions.west.el.get("collapse") != "true" && this.dimensionOptions.oldOptions.east.el.get("collapse") != "true") {
						this.dimensionOptions.oldOptions.eastDragDiv.el.setStyle("display", "");
						this.dimensionOptions.oldOptions.westDragDiv.el.setStyle("display", "")
					}
				}
			} else {
				if (a == "frameLayer2" || a == "frameLayer3" || a == "frameLayer4") {
					if (b == "west") {
						if (this.dimensionOptions.oldOptions.west.el.get("collapse") != "true") {
							this.dimensionOptions.oldOptions.westDragDiv.el.setStyle("display", "")
						}
					}
				} else {
					if (a == "frameLayer5") {
						if (b == "east") {
							if (this.dimensionOptions.oldOptions.east.el.get("collapse") != "true") {
								this.dimensionOptions.oldOptions.eastDragDiv.el.setStyle("display", "")
							}
						}
					}
				}
			}
			if (b == "south") {
				if (this.dimensionOptions.oldOptions.south.el.get("collapse") != "true") {
					this.dimensionOptions.oldOptions.southDragDiv.el.setStyle("display", "")
				}
			}
			switch (b) {
			case "west":
				this.dimensionOptions.oldOptions[b].el.setStyle("left", this.dimensionOptions.newOptions[b].styles.left);
				this.dimensionOptions.oldOptions.center.el.setStyles({
					left : this.dimensionOptions.oldOptions.center.el.getStyle("left").toFloat() + this.dimensionOptions.newOptions[b].styles.width - this.options.panelScrollSize,
					width : this.dimensionOptions.oldOptions.center.el.getStyle("width").toFloat() - this.dimensionOptions.newOptions[b].styles.width + this.options.panelScrollSize
				});
				this.dimensionOptions.oldOptions[b].scrollBtn.set("class", "x-tool x-tool-expand-east");
				break;
			case "east":
				this.dimensionOptions.oldOptions[b].el.setStyle("left", this.dimensionOptions.newOptions[b].styles.left);
				this.dimensionOptions.oldOptions.center.el.setStyles({
					width : this.dimensionOptions.oldOptions.center.el.getStyle("width").toFloat() - this.dimensionOptions.newOptions[b].styles.width + this.options.panelScrollSize
				});
				this.dimensionOptions.oldOptions[b].scrollBtn.set("class", "x-tool x-tool-collapse-east");
				this.dimensionOptions.oldOptions[b].scrollBtn.setStyles({
					top : 5,
					left : this.dimensionOptions.newOptions[b].styles.width - 25,
					position : "inherit"
				});
				break;
			case "north":
				this.dimensionOptions.oldOptions[b].el.setStyle("top", this.dimensionOptions.newOptions[b].styles.top);
				if ($defined(this.dimensionOptions.oldOptions.center.el)) {
					this.dimensionOptions.oldOptions.center.el.setStyles({
						top : this.dimensionOptions.oldOptions.center.el.getStyle("top").toFloat() + this.dimensionOptions.newOptions[b].styles.height - this.options.panelScrollSize,
						height : this.dimensionOptions.oldOptions.center.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[b].styles.height + this.options.panelScrollSize
					});
					this.refreshOtherRefHeight("center", this.dimensionOptions.newOptions[b].styles.height - this.options.panelScrollSize)
				}
				if (a != "frameLayer5") {
					if ($defined(this.dimensionOptions.oldOptions.west.el)) {
						this.dimensionOptions.oldOptions.west.el.setStyles({
							top : this.dimensionOptions.oldOptions.west.el.getStyle("top").toFloat() + this.dimensionOptions.newOptions[b].styles.height - this.options.panelScrollSize,
							height : this.dimensionOptions.oldOptions.west.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[b].styles.height + this.options.panelScrollSize
						});
						this.dimensionOptions.oldOptions.westDragDiv.el.setStyles({
							top : this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("top").toFloat() + this.dimensionOptions.newOptions[b].styles.height - this.options.panelScrollSize,
							height : this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[b].styles.height + this.options.panelScrollSize
						});
						this.refreshOtherRefHeight("west", this.dimensionOptions.newOptions[b].styles.height - this.options.panelScrollSize)
					}
				}
				if ($defined(this.dimensionOptions.oldOptions.east)) {
					this.dimensionOptions.oldOptions.east.el.setStyles({
						top : this.dimensionOptions.oldOptions.east.el.getStyle("top").toFloat() + this.dimensionOptions.newOptions[b].styles.height - this.options.panelScrollSize,
						height : this.dimensionOptions.oldOptions.east.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[b].styles.height + this.options.panelScrollSize
					});
					this.dimensionOptions.oldOptions.eastDragDiv.el.setStyles({
						top : this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("top").toFloat() + this.dimensionOptions.newOptions[b].styles.height - this.options.panelScrollSize,
						height : this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[b].styles.height + this.options.panelScrollSize
					});
					this.refreshOtherRefHeight("east", this.dimensionOptions.newOptions[b].styles.height - this.options.panelScrollSize)
				}
				this.dimensionOptions.oldOptions[b].scrollBtn.set("class", "x-tool x-tool-collapse-north");
				this.dimensionOptions.oldOptions[b].scrollBtn.setStyles({
					top : "5px",
					position : "inherit"
				});
				break;
			case "south":
				this.dimensionOptions.oldOptions[b].el.setStyle("top", this.dimensionOptions.newOptions[b].styles.top);
				if ($defined(this.dimensionOptions.oldOptions.center)) {
					if ($defined(this.dimensionOptions.oldOptions.center.el)) {
						this.dimensionOptions.oldOptions.center.el.setStyles({
							height : this.dimensionOptions.oldOptions.center.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[b].styles.height + this.options.panelScrollSize
						});
						this.refreshOtherRefHeight("center", this.dimensionOptions.newOptions[b].styles.height - this.options.panelScrollSize)
					}
				}
				this.dimensionOptions.oldOptions[b].scrollBtn.set("class", "x-tool x-tool-collapse-south");
				if ($defined(this.dimensionOptions.oldOptions.west)) {
					if ($defined(this.dimensionOptions.oldOptions.west.el)) {
						this.dimensionOptions.oldOptions.west.el.setStyles({
							height : this.dimensionOptions.oldOptions.west.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[b].styles.height + this.options.panelScrollSize
						});
						this.dimensionOptions.oldOptions.westDragDiv.el.setStyles({
							height : this.dimensionOptions.oldOptions.westDragDiv.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[b].styles.height + this.options.panelScrollSize
						});
						this.refreshOtherRefHeight("west", this.dimensionOptions.newOptions[b].styles.height - this.options.panelScrollSize)
					}
				}
				if ($defined(this.dimensionOptions.oldOptions.east)) {
					if ($defined(this.dimensionOptions.oldOptions.east.el)) {
						this.dimensionOptions.oldOptions.east.el.setStyles({
							height : this.dimensionOptions.oldOptions.east.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[b].styles.height + this.options.panelScrollSize
						});
						this.dimensionOptions.oldOptions.eastDragDiv.el.setStyles({
							height : this.dimensionOptions.oldOptions.eastDragDiv.el.getStyle("height").toFloat() - this.dimensionOptions.newOptions[b].styles.height + this.options.panelScrollSize
						});
						this.refreshOtherRefHeight("east", this.dimensionOptions.newOptions[b].styles.height - this.options.panelScrollSize)
					}
				}
				break;
			default:
				break
			}
		},
		scrollRegionOutAboveDiv : function (a) {
			this.dimensionOptions.oldOptions[a].el.setStyle("z-index", 1);
			this.dimensionOptions.oldOptions[a].scrollRegionAboveFlag = false;
			this.dimensionOptions.oldOptions[a].scrollBtn.setStyle("display", "block");
			switch (a) {
			case "west":
				this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left + this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.left - this.dimensionOptions.newOptions[a].styles.width);
				break;
			case "east":
				this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left - this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.left + this.dimensionOptions.newOptions[a].styles.width);
				break;
			case "north":
				this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top + this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.top - this.dimensionOptions.newOptions[a].styles.height);
				break;
			case "south":
				this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top - this.options.panelScrollSize, this.dimensionOptions.newOptions[a].styles.top + this.dimensionOptions.newOptions[a].styles.height);
				break;
			default:
				break
			}
		},
		scrollRegionInAboveDiv : function (a) {
			this.dimensionOptions.oldOptions[a].el.setStyle("z-index", 10);
			this.dimensionOptions.oldOptions[a].scrollRegionAboveFlag = true;
			this.dimensionOptions.oldOptions[a].scrollBtn.setStyle("display", "none");
			switch (a) {
			case "west":
				this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left - this.dimensionOptions.newOptions[a].styles.width, this.dimensionOptions.newOptions[a].styles.left + this.options.panelScrollSize);
				break;
			case "east":
				this.dimensionOptions.oldOptions[a].elTween.start("left", this.dimensionOptions.newOptions[a].styles.left + this.dimensionOptions.newOptions[a].styles.width, this.dimensionOptions.newOptions[a].styles.left - this.options.panelScrollSize);
				break;
			case "north":
				this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top - this.dimensionOptions.newOptions[a].styles.height, this.dimensionOptions.newOptions[a].styles.top + this.options.panelScrollSize);
				break;
			case "south":
				this.dimensionOptions.oldOptions[a].elTween.start("top", this.dimensionOptions.newOptions[a].styles.top + this.dimensionOptions.newOptions[a].styles.height, this.dimensionOptions.newOptions[a].styles.top - this.options.panelScrollSize);
				break;
			default:
				break
			}
		}
	});
var SwordFramePanel = new Class({
		Implements : [Options, Events],
		type : "SwordFramePanel",
		options : {
			pNode : null,
			src : null,
			pos : "false",
			left : null,
			top : null,
			width : null,
			height : 400,
			zIndex : 5000,
			isCloseBtn : "false",
			isCollapse : "false",
			isDrag : "false",
			isPin : "false",
			isResize : "false",
			title : "panel"
		},
		panelDiv : null,
		panelHeaderDiv : null,
		panelHeaderCloseDiv : null,
		panelHeaderPinDiv : null,
		panelHeaderCollapseContentDiv : null,
		panelHeaderCollapseContentTween : null,
		panelHeaderTitleSpan : null,
		panelContentBodyDiv : null,
		panelResizeDiv : null,
		initialize : function (a) {
			this.setOptions(a)
		},
		initParam : function (a) {
			this.htmlOptions(a);
			this.options.src = a.getChildren();
			this.create(a);
			this.refreshPanelContentByRate();
			this.BuildRefreshPanelContentHeightEvent()
		},
		initData : function () {},
		create : function (a) {
			if ($defined(a)) {
				this.options.pNode = a.getParent()
			}
			if (!$defined(this.options.pNode)) {
				this.options.pNode = document.body
			}
			this.buildPanel();
			this.panelDiv.replaces(a)
		},
		buildPanel : function () {
			this.buildPanelHeader();
			this.buildPanelContent();
			this.buildPanelResizeDiv();
			this.buildPanelDrag()
		},
		buildPanelDrag : function () {
			if (this.options.isDrag == "true") {
				this.panelHeaderDiv.setStyle("cursor", "move");
				new Drag(this.options.pNode, {
					handle : this.panelHeaderDiv,
					onStart : function (a) {
						this.options.left = a.getPosition().x || a.getCoordinates().left;
						this.options.top = a.getPosition().y || a.getCoordinates().top
					}
					.bind(this),
					onDrag : function (a) {
						if (this.options.isDrag == "false") {
							a.setStyles({
								left : this.options.left,
								top : this.options.top
							})
						} else {
							a.setStyles({
								"z-index" : 10000
							})
						}
					}
					.bind(this),
					onComplete : function (a) {
						if (this.options.isDrag == "false") {
							a.setStyles({
								left : this.options.left,
								top : this.options.top
							})
						} else {
							this.options.left = a.getPosition().x;
							this.options.top = a.getPosition().y;
							a.setStyles({
								"z-index" : 0
							})
						}
					}
					.bind(this)
				})
			}
		},
		buildPanelHeader : function () {
			this.panelDiv = new Element("div", {
					"class" : "x-panel"
				}).inject(this.options.pNode);
			if (this.options.pos == "absolute") {
				this.panelDiv.setStyles({
					position : "absolute",
					left : this.options.left,
					top : this.options.top,
					width : this.options.width,
					height : this.options.height,
					"z-index" : this.options.zIndex
				})
			}
			this.panelHeaderDiv = new Element("div", {
					"class" : "x-panel-header x-unselectable"
				}).inject(this.panelDiv);
			if (this.options.isCloseBtn == "true") {
				this.panelHeaderCloseDiv = new Element("div", {
						"class" : "x-tool x-tool-close"
					}).inject(this.panelHeaderDiv);
				this.panelHeaderCloseDiv.addEvent("click", function () {
					this.panelDiv.setStyle("display", "none")
				}
					.bind(this))
			}
			if (this.options.isPin == "true") {
				this.panelHeaderPinDiv = new Element("div", {
						"class" : "x-tool x-tool-pin-over"
					}).inject(this.panelHeaderDiv);
				this.panelHeaderPinDiv.addEvent("click", function () {
					if (this.options.isDrag == "true" && this.panelHeaderPinDiv.hasClass("x-tool-pin-over")) {
						this.options.isDrag = "false";
						this.panelHeaderPinDiv.removeClass("x-tool-pin-over");
						this.panelHeaderPinDiv.addClass("x-tool-pin")
					} else {
						this.options.isDrag = "true";
						this.panelHeaderPinDiv.removeClass("x-tool-pin");
						this.panelHeaderPinDiv.addClass("x-tool-pin-over")
					}
				}
					.bind(this))
			}
			if (this.options.isCollapse == "true") {
				this.panelHeaderCollapseContentDiv = new Element("div", {
						"class" : "x-tool x-tool-toggle"
					}).inject(this.panelHeaderDiv);
				this.panelHeaderCollapseContentDiv.addEvent("click", function () {
					if (this.panelContentBodyDiv.getStyle("display") == "block") {
						this.panelHeaderDiv.addClass("x-panel-collapsed");
						this.panelHeaderCollapseContentTween.start("display", "block", "none")
					} else {
						this.panelHeaderDiv.removeClass("x-panel-collapsed");
						this.panelHeaderCollapseContentTween.start("display", "none", "block")
					}
				}
					.bind(this))
			}
			this.panelHeaderTitleSpan = new Element("div", {
					"class" : "x-panel-header-text",
					text : this.options.title
				}).inject(this.panelHeaderDiv)
		},
		setTitle : function (a) {
			this.panelHeaderTitleSpan.set("text", a)
		},
		buildPanelContent : function () {
			var a = this.options.height.toFloat() - this.panelHeaderDiv.getSize().y.toFloat();
			if (a < 0) {
				a = 0
			}
			this.panelContentBodyDiv = new Element("div", {
					name : "panelContentBodyDiv",
					"class" : "x-panel-body",
					styles : {
						width : "100%",
						"overflow-x" : "hidden",
						height : a
					}
				}).inject(this.panelDiv);
			this.panelHeaderCollapseContentTween = new Fx.Tween(this.panelContentBodyDiv, {
					duration : 200,
					transition : Fx.Transitions.linear
				});
			this.options.src.each(function (c, b) {
				this.panelContentBodyDiv.adopt(c)
			}
				.bind(this))
		},
		buildPanelResizeDiv : function () {
			if (this.options.isResize == "true") {
				this.panelResizeDiv = new Element("div", {
						"class" : "x-panel-bottom-resize"
					}).inject(this.panelContentBodyDiv);
				this.panelResizeDiv.addEvent("mousedown", function (h) {
					var b = new Element("div", {
							styles : {
								position : "absolute",
								"z-index" : 999999,
								left : this.panelDiv.getPosition().x,
								top : this.panelDiv.getPosition().y,
								width : this.panelDiv.getSize().x,
								height : this.panelDiv.getSize().y,
								border : "1px solid red"
							}
						}).inject(document.body);
					var f = h.client.x;
					var d = h.client.y;
					var c = this.panelDiv.getSize().x;
					var k = this.panelDiv.getSize().y;
					var g = function (q) {
						var p = q.client.x;
						var n = q.client.y;
						b.setStyle("width", c + p - f);
						b.setStyle("height", k + n - d)
					};
					var m = g.bind(this);
					document.addEvent("mousemove", m);
					var l = function (q) {
						var n = b.getStyle("width").toFloat();
						var p = b.getStyle("height").toFloat();
						if (n < 3) {
							n = 3
						}
						if (p < 37) {
							p = 37
						}
						this.panelDiv.setStyles({
							width : n,
							height : p
						});
						this.panelContentBodyDiv.setStyles({
							height : p - 30
						});
						b.destroy();
						document.removeEvent("mousemove", m);
						document.removeEvent("mouseup", a)
					};
					var a = l.bind(this);
					document.addEvent("mouseup", a)
				}
					.bind(this))
			}
		},
		refreshPanelContentByRate : function () {
			var c = this.panelDiv.getParent();
			if ($defined(c) && c.get("tag") != "body") {
				while (true) {
					if ($defined(c.getProperty("region"))) {
						break
					} else {
						c = c.getParent()
					}
					if (c.get("tag") == "body") {
						break
					}
				}
				if (c.get("tag") != "body") {
					var b = c.getProperty("heightRate").toFloat();
					var a = 0;
					if ($defined(this.options.pNode.getProperty("heightMinus"))) {
						a = (this.options.pNode.getProperty("heightMinus")).toFloat()
					}
					var d = this.options.height * b - 30 - a;
					if (d < 0) {
						d = 0
					}
					this.panelContentBodyDiv.setStyles({
						height : d
					})
				}
			} else {
				return
			}
		},
		BuildRefreshPanelContentHeightEvent : function () {
			window.addEvent("resize", function (a) {
				this.refreshPanelContentByRate()
			}
				.bind(this))
		},
		refreshPanelContentByNum : function (a) {
			var b = this.panelContentBodyDiv.getStyle("height").toFloat();
			this.panelContentBodyDiv.setStyles({
				height : b - a
			})
		},
		collapse : function () {
			this.panelHeaderDiv.addClass("x-panel-collapsed");
			this.panelContentBodyDiv.setStyle("display", "none")
		},
		extend : function () {
			this.panelHeaderDiv.removeClass("x-panel-collapsed");
			this.panelContentBodyDiv.setStyle("display", "block")
		}
	});
var SwordFrameTabItem = new Class({
		Implements : [Options, Events],
		type : "SwordFrameTabItem",
		options : {
			id : "",
			title : "默认的tab页卡",
			src : "",
			lsrc : "",
			tabContentType : "iframe",
			isCloseBtn : "true",
			tabItemWidth : 120,
			autoWidth : "false",
			isActive : "true",
			isShowMenuItem : ["true", "true", "true", "true"],
			onIframeLoaded : $empty,
			onClose : $empty,
			onSelect : $empty,
			onMouseon : $empty,
			onMouseleave : $empty,
			submit : null,
			onActive : $empty,
			tempData : null
		},
		refSwordFrameTab : null,
		tabItemLI : null,
		tabItemInputCloseA : null,
		tabItemLISpanWidth : null,
		tabItemLISpanTitle : null,
		tabContent : null,
		tabContextMenu : null,
		tabItemCssWidth : 20,
		initialize : function (a) {
			if (!a.get) {
				a.get = function (b) {
					return this[b]
				}
			}
			this.htmlOptions(a)
		},
		buildItemLI : function () {
			this.tabItemLI = new Element("li", {
					name : "tabItem_" + this.options.id,
					"class" : "sty_b"
				});
			this.tabItemLI.addEvents({
				mouseover : function () {
					this.fireEvent("onMouseon", [this.tabItemLI])
				}
				.bind(this),
				mouseout : function () {
					this.fireEvent("onMouseleave", [this.tabItemLI])
				}
				.bind(this)
			});
			this.tabItemLI.addEvent("contextmenu", function (h) {
				if (!this.refSwordFrameTab.windowClick) {
					window.document.addEvent("click", function (m) {
						this.refSwordFrameTab.tabItems.each(function (p, n) {
							if ($defined(p.tabContextMenu)) {
								p.tabContextMenu.foldFlag = false;
								p.tabContextMenu.menuZeroLevelDiv.destroy();
								p.tabContextMenu = null
							}
						}
							.bind(this))
					}
						.bind(this));
					this.refSwordFrameTab.windowClick = true
				}
				var g = this.tabItemLI.getPosition().x + this.tabItemLI.getSize().x / 5;
				var f = this.tabItemLI.getPosition().y + this.tabItemLI.getSize().y / 5;
				var l = [];
				this.options.isShowMenuItem.each(function (n, m) {
					if (n == "false") {
						l.include(m + "")
					}
				});
				var c = [{
						pcode : null,
						code : "0",
						caption : i18n.tabMenuFresh,
						imgName : "recycle.png"
					}, {
						pcode : null,
						code : "1",
						caption : i18n.tabMenuClose,
						imgName : "delete.png"
					}, {
						pcode : null,
						code : "2",
						caption : i18n.tabMenuCloseAll,
						imgName : "star_red.png"
					}, {
						pcode : null,
						code : "3",
						caption : i18n.tabMenuCloseOthers,
						imgName : "flag_red.png"
					}
				];
				var d = c.filter(function (m) {
						return !l.contains(m.code)
					});
				var k = d || c;
				var b = [];
				k.each(function (m) {
					b.include(JSON.encode(m))
				});
				this.tabContextMenu = new SwordMenu({
						name : "tabContextMenu",
						pos : "absolute",
						left : g,
						top : f,
						isInput : "false",
						width : 200,
						itemWidth : "120px",
						dataStr : "{ 'data': [" + b.toString() + "],'name': 'SwordTreeJSON1','sword': 'SwordTree'}",
						dataType : "json",
						type : "vertical",
						pNode : document.body,
						isShow : false,
						onSelect : this.onSelectMenuItem.bind(this)
					});
				this.tabContextMenu.build();
				this.fold.delay(3000, this);
				h.preventDefault()
			}
				.bind(this));
			if (this.refSwordFrameTab.options.autoWidth != "true") {
				this.tabItemLI.setStyles({
					width : this.options.tabItemWidth
				})
			} else {
				this.options.tabItemWidth = 300
			}
			if (this.options.isActive == "true") {
				this.tabItemLI.addClass("sty_a")
			} else {
				this.tabItemLI.addClass("sty_b")
			}
			this.tabItemLI.addEvent("click", function () {
				if (this.options.tabContentType == "iframe" && $chk(this.options.lsrc) && !$chk(this.tabContent.get("src"))) {
					this.tabContent.set("src", this.options.lsrc);
					this.options.src = this.options.lsrc;
					this.options.lsrc = ""
				}
				this.refSwordFrameTab.activeTabItem(this.options.id);
				this.fireEvent("onSelect", [this.refSwordFrameTab, this.options.id]);
				this.fireEvent("onActive", [this.refSwordFrameTab, this.options.id])
			}
				.bind(this));
			this.tabItemLI.addEvent("dblclick", function () {
				this.refSwordFrameTab.fireEvent("onDbclick", [this.refSwordFrameTab, this.options.id])
			}
				.bind(this));
			this.tabItemLISpanWidth = new Element("div", {
					title : this.options.title,
					"class" : "text"
				}).inject(this.tabItemLI);
			this.tabItemLISpanWidth.setStyle("padding", "0 5px");
			var a = new Element("span", {
					text : this.computeTitleSize(this.options.title)
				}).inject(this.tabItemLISpanWidth);
			if (this.refSwordFrameTab.options.autoWidth != "true") {
				if (this.options.tabItemWidth / 1 > 25) {
					a.setStyle("width", this.options.tabItemWidth - 25)
				} else {
					a.setStyle("width", 1)
				}
			}
			if (this.options.isCloseBtn == "true") {
				this.tabItemLI.addClass("sty_b");
				this.tabItemInputCloseA = new Element("div", {
						"class" : "esc"
					}).inject(this.tabItemLISpanWidth, "bottom");
				if (this.refSwordFrameTab.options.autoWidth != "true") {
					this.tabItemInputCloseA.setStyle("float", "right")
				}
				this.tabItemInputCloseA.addEvent("click", function (c) {
					this.refSwordFrameTab.removeTabItem(this.options.id);
					var b = this.refSwordFrameTab.getLastTabItem();
					if ($chk(b)) {
						this.refSwordFrameTab.curTabItem = b;
						this.refSwordFrameTab.activeTabItem(this.refSwordFrameTab.curTabItem.options.id);
						this.refSwordFrameTab.scrollLeft()
					}
					c.stopPropagation()
				}
					.bind(this))
			}
		},
		computeTitleSize : function (c) {
			var b = 0;
			if (c.length > 5 && this.refSwordFrameTab.options.autoWidth != "true") {
				for (var a = 0; a < c.length; a++) {
					if (/^[\u4e00-\u9fa5]+$/i.test(c.charAt(a))) {
						b = b + 2
					} else {
						b++
					}
				}
			}
			return b > 0 ? (c.substring(0, 5) + "..") : c
		},
		fold : function () {
			if ($defined(this.tabContextMenu) && this.tabContextMenu.foldFlag) {
				this.tabContextMenu.menuZeroLevelDiv.destroy();
				this.tabContextMenu = null
			}
		},
		buildContent : function (b) {
			if (this.options.tabContentType == "iframe") {
				this.tabContent = new Element(this.options.tabContentType, {
						name : "tabContent_" + this.options.id,
						frameborder : 0,
						border : 0,
						marginwidth : 0,
						marginheight : 0,
						scrolling : "auto",
						allowtransparency : "yes"
					}).inject(b);
				this.tabContent.setStyles({
					width : "100%",
					height : "100%"
				});
				if (this.options.src) {
					this.tabContent.setProperty("src", pageContainer.AddBaseCode2URL(this.options.src))
				} else {
					if (this.options.submit) {
						var c = this.options.submit;
						var a = "tabContent_" + this.options.id;
						c.isContinue = true;
						c.initSubmitWidget(c.container);
						c.doBeforeEvents();
						c.options.postType = "form_" + a;
						c.submit()
					}
				}
				this.refSwordFrameTab.iframeLoad = false;
				if (!Browser.Engine.trident) {
					this.tabContent.addEvent("load", function () {
						this.fireEvent("onIframeLoaded", this);
						this.refSwordFrameTab.iframeLoad = true
					}
						.bind(this))
				} else {
					this.tabContent.addEvent("readystatechange", function () {
						try {
							if (this.tabContent.readyState == "complete") {
								this.fireEvent("onIframeLoaded", this);
								this.refSwordFrameTab.iframeLoad = true
							}
						} catch (d) {}

					}
						.bind(this))
				}
			} else {
				if (this.options.tabContentType == "div") {
					this.tabContent = new Element(this.options.tabContentType, {
							name : "tabContent_" + this.options.id
						});
					this.tabContent.setStyles({
						width : "100%",
						height : "100%"
					});
					this.tabContent = $(this.options.src)
				} else {
					if (this.options.tabContentType == "innerHTML") {
						this.tabContent = new Element("div", {
								name : "tabContent_" + this.options.id
							});
						this.tabContent.setStyles({
							width : "100%",
							height : "100%"
						});
						this.options.src.each(function (f, d) {
							this.tabContent.adopt(f)
						}
							.bind(this))
					}
				}
			}
			if (this.options.isActive == "true") {
				this.tabContent.setStyles({
					"z-index" : 10,
					display : "block"
				})
			} else {
				this.tabContent.setStyles({
					"z-index" : 1,
					display : "none"
				})
			}
		},
		onSelectMenuItem : function (a) {
			if (a.getProperty("caption") == "" + i18n.tabMenuFresh) {
				if ($defined(window.frames["tabContent_" + this.options.id])) {
					document.getElementsByName("tabContent_" + this.options.id)[0].src = this.options.src
				} else {
					alert("刷新按钮不支持div")
				}
			} else {
				if (a.getProperty("caption") == "" + i18n.tabMenuClose) {
					this.refSwordFrameTab.removeTabItem(this.options.id);
					this.refSwordFrameTab.scrollLeft()
				} else {
					if (a.getProperty("caption") == "" + i18n.tabMenuCloseOthers) {
						this.refSwordFrameTab.tabItems.each(function (c, b) {
							if (b != this.options.id) {
								this.refSwordFrameTab.removeTabItem(b)
							}
						}
							.bind(this));
						this.refSwordFrameTab.scrollLeft()
					} else {
						if (a.getProperty("caption") == "" + i18n.tabMenuCloseAll) {
							this.refSwordFrameTab.tabItems.each(function (c, b) {
								this.refSwordFrameTab.removeTabItem(b)
							}
								.bind(this));
							this.refSwordFrameTab.scrollLeft()
						}
					}
				}
			}
			this.refSwordFrameTab.fireEvent("onMenuClick", this.refSwordFrameTab, this, a, this.options.id)
		},
		active : function () {
			if ($defined(this.tabItemLI) && $defined(this.tabContent)) {
				this.tabItemLI.addClass("sty_a");
				this.tabItemLI.removeClass("sty_b");
				this.tabContent.setStyles({
					"z-index" : 10,
					display : "block"
				})
			}
		},
		unactive : function () {
			if ($defined(this.tabItemLI) && $defined(this.tabContent)) {
				this.tabItemLI.addClass("sty_b");
				this.tabItemLI.removeClass("sty_a");
				this.tabContent.setStyles({
					"z-index" : 1,
					display : "none"
				})
			}
		},
		add : function (a) {
			if (!$defined(this.tabItemLI) && !$defined(this.tabContent)) {
				this.buildItemLI();
				this.buildContent(a)
			}
		},
		remove : function () {
			if ($defined(this.tabItemLI) && $defined(this.tabContent)) {
				if ($defined(this.tabItemLI) && $defined(this.tabContent)) {
					try {
						var a = function (d) {
							d.each(function (g) {
								try {
									if (g) {
										if (g.contentWindow && g.contentWindow.$$) {
											var f = g.contentWindow.$$("iframe");
											if (f.lenght > 0) {
												a(f)
											}
										}
										if (Browser.Engine.trident) {
											g.set("src", "");
											g.src = "";
											g.destroy()
										} else {
											if (Browser.Engine.webkit) {
												g.set("src", "about:blank");
												g.src = "about:blank";
												top.injectIfame(g)
											}
										}
									}
								} catch (h) {}

							}
								.bind(this))
						};
						if (this.tabContent.contentWindow.$$) {
							var c = this.tabContent.contentWindow.$$("iframe");
							a(c)
						}
						a = null;
						if (Browser.Engine.trident) {
							this.tabContent.set("src", "");
							this.tabContent.src = "";
							this.tabContent.destroy();
							CollectGarbage()
						} else {
							if (Browser.Engine.webkit) {
								this.tabContent.set("src", "about:blank");
								this.tabContent.src = "about:blank";
								top.injectIfame(this.tabContent)
							}
						}
					} catch (b) {}

					this.tabItemLI.destroy()
				}
			}
		}
	});
var SwordFrameTab = new Class({
		Implements : [Options, Events],
		type : "SwordFrameTab",
		options : {
			pNode : null,
			pos : "false",
			width : null,
			height : 200,
			left : null,
			top : null,
			maxTabNum : 10,
			defaultSelectId : null,
			tabType : "scroll",
			tabDirection : "top",
			items : null,
			autoWidth : "false",
			onDbclick : $empty,
			onActived : $empty,
			onMenuClick : $empty
		},
		initialize : function (a) {},
		initParam : function (a) {
			this.htmlOptions(a);
			this.parseFrameTabItems(a);
			this.create(a);
			this.refreshTabContentByRate();
			this.BuildRefreshTabContentHeightEvent()
		},
		parseFrameTabItems : function (b) {
			var a = {};
			b.getChildren().each(function (h, d) {
				var g = h.getProperty("id");
				var c = {};
				for (var f in SwordFrameTabItem.prototype.options) {
					if (f != "id") {
						if ($defined(h.getProperty(f))) {
							c[f] = h.getProperty(f)
						} else {
							c[f] = SwordFrameTabItem.prototype.options[f]
						}
					}
				}
				if (!$defined(h.getProperty("tabContentType"))) {
					c.tabContentType = "innerHTML";
					c.src = h.getChildren()
				}
				a[g] = c
			});
			this.options.items = a
		},
		initData : function () {},
		tabItems : new Hash(),
		curTabItem : null,
		tabDiv : null,
		tabHeaderDiv : null,
		tabItemScrollLeftDiv : null,
		tabItemScrollRightDiv : null,
		tabItemContentDiv : null,
		tabItemContentUL : null,
		tabContentDiv : null,
		windowClick : null,
		iframeLoad : true,
		create : function (a) {
			if ($defined(a)) {
				this.options.pNode = a.getParent()
			}
			if (!$defined(this.options.pNode)) {
				this.options.pNode = document.body
			}
			this.buildTab();
			this.loadDefaultItems();
			this.tabDiv.replaces(a)
		},
		loadDefaultItems : function () {
			if ($defined(this.options.items)) {
				var a = new Hash(this.options.items);
				a.each(function (c, b) {
					c.id = b;
					this.addTabItem(c)
				}
					.bind(this))
			}
			if ($defined(this.options.defaultSelectId)) {
				if (this.tabItems.has(this.options.defaultSelectId) == true) {
					this.activeTabItem(this.options.defaultSelectId)
				}
			}
		},
		isScroll : function () {
			if ($defined(this.curTabItem)) {
				if (this.getDisplayTabItems().getKeys().length * this.curTabItem.options.tabItemWidth > this.tabItemContentDiv.getSize().x) {
					return true
				} else {
					return false
				}
			} else {
				return false
			}
		},
		activeScroll : function () {
			if (this.isScroll() == false) {
				this.tabItemScrollRightDiv.addClass("right_a");
				this.tabItemScrollLeftDiv.addClass("left_a")
			} else {
				this.tabItemScrollRightDiv.removeClass("right_a");
				this.tabItemScrollLeftDiv.removeClass("left_a")
			}
		},
		scrollRight : function () {
			if ($defined(this.curTabItem)) {
				if ((this.tabItemContentDiv.getSize().x) > this.getDisplayTabItems().getKeys().length * this.curTabItem.options.tabItemWidth) {}
				else {
					this.getFirstDisplayTabItem().tabItemLI.setStyle("display", "none")
				}
			}
		},
		scrollLeft : function () {
			if (this.getFirstTabItem() == this.getFirstDisplayTabItem()) {}
			else {
				if ($defined(this.curTabItem)) {
					this.getLastUnDisplayTabItem().tabItemLI.setStyle("display", "")
				}
			}
		},
		addTabItem : function (a) {
			if ($defined(this.tabItems.get(a.id))) {
				this.unactiveAllTabItem();
				this.curTabItem = this.tabItems.get(a.id);
				this.activeTabItem(this.curTabItem.options.id);
				if (this.options.tabType == "scroll") {
					this.activeScroll()
				}
			} else {
				if ($defined(this.options.maxTabNum) && this.tabItems.getKeys().length >= this.options.maxTabNum) {
					this.isTabNumOut();
					return
				} else {
					this.unactiveAllTabItem();
					if ($defined(this.curTabItem)) {
						this.curTabItem.unactive()
					}
					this.curTabItem = new SwordFrameTabItem(a);
					this.curTabItem.refSwordFrameTab = this;
					this.curTabItem.add(this.tabContentDiv);
					this.tabItems.set(a.id, this.curTabItem);
					this.curTabItem.tabItemLI.inject(this.tabItemContentUL);
					if (a.tabContentType != "iframe") {
						this.curTabItem.tabContent.inject(this.tabContentDiv)
					}
					this.curTabItem.tabContent.setStyles({
						height : (this.tabContentDiv.getStyle("height").toInt()) * 0.9999
					});
					this.activeTabItem(this.curTabItem.options.id);
					if (this.options.tabType == "scroll") {
						this.activeScroll()
					}
				}
			}
			this.fireEvent("onActive", [this.curTabItem.refSwordFrameTab, this.curTabItem.options.id])
		},
		isTabNumOut : function () {
			alert("为了使浏览器不至于过慢，请您关闭一些tab页卡，最好不要超过" + this.options.maxTabNum + "个!")
		},
		removeTabItem : function (c) {
			var b = this.tabItems.get(c);
			if (b.options.isCloseBtn == "false") {
				return
			}
			this.tabItems.erase(c);
			b.remove();
			var a = this.getLastTabItem();
			if ($defined(a)) {
				this.curTabItem.unactive();
				a.active();
				this.curTabItem = a
			} else {
				this.curTabItem = null
			}
			if (this.options.tabType == "scroll") {
				this.activeScroll()
			}
			b.fireEvent("onClose", [this, c])
		},
		removeCurrentTabItem : function () {
			if ($defined(this.curTabItem)) {
				this.removeTabItem(this.curTabItem.options.id)
			}
		},
		removeAllTabItem : function (a) {
			if (a) {
				this.tabItems.each(function (c, b) {
					if (b != a) {
						this.removeTabItem(b)
					}
				}
					.bind(this))
			} else {
				this.tabItems.each(function (c, b) {
					this.removeTabItem(b)
				}
					.bind(this))
			}
		},
		activeTabItem : function (a) {
			this.curTabItem.unactive();
			this.curTabItem = this.tabItems.get(a);
			this.curTabItem.active();
			this.fireEvent("onActived", [this, this.curTabItem, a])
		},
		unactiveAllTabItem : function () {
			this.tabItems.each(function (b, a) {
				this.unactiveTabItem(a)
			}
				.bind(this))
		},
		setCurTabItemTitle : function (b) {
			var a = this.curTabItem.tabItemLISpanWidth.set("title", b);
			a.getElement("span").set("text", this.curTabItem.computeTitleSize.run(b, this.curTabItem))
		},
		unactiveTabItem : function (a) {
			this.tabItems.get(a).unactive();
			this.curTabItem = null
		},
		getFirstTabItem : function () {
			var a = this.tabItemContentUL.getFirst("li");
			return this.getTabItemByLi(a)
		},
		getDisplayTabItems : function () {
			var d = new Hash();
			var a = this.tabItemContentUL.getChildren("li");
			for (var b = 0; b < a.length; b++) {
				if (a[b].getStyle("display") != "none") {
					var c = this.getTabItemByLi(a[b]);
					d.set(c.options.id, c)
				}
			}
			return d
		},
		getFirstDisplayTabItem : function () {
			var a = this.tabItemContentUL.getChildren("li");
			for (var b = 0; b < a.length; b++) {
				if (a[b].getStyle("display") != "none") {
					return this.getTabItemByLi(a[b])
				}
			}
		},
		getLastUnDisplayTabItem : function () {
			var a = this.tabItemContentUL.getChildren("li");
			for (var b = a.length; b >= 0; b--) {
				if ($defined(a[b]) && a[b].getStyle("display") == "none") {
					return this.getTabItemByLi(a[b])
				}
			}
		},
		getLastTabItem : function () {
			var a = $(this.tabItemContentUL).getLast("li");
			return this.getTabItemByLi(a)
		},
		getPreviousTabItem : function (c) {
			var a = this.tabItemContentUL.getElement("li[name=tabItem_" + c + "]");
			var b = a.getPrevious("li");
			return this.getTabItemByLi(b)
		},
		getNextTabItem : function (c) {
			var a = this.tabItemContentUL.getElement("li[name=tabItem_" + c + "]");
			var b = a.getNext("li");
			return this.getTabItemByLi(b)
		},
		getTabItemByLi : function (a) {
			if ($defined(a)) {
				var b = a.getProperty("name");
				b = b.substring(b.indexOf("_") + 1, b.length);
				return this.tabItems.get(b)
			} else {
				return null
			}
		},
		buildTab : function () {
			this.buildTabItemDiv();
			this.buildTabItemHeaderDiv();
			this.buildTabItemScrollOrPlainDiv();
			this.buildTabItemULDiv();
			this.buildTabContentDiv()
		},
		buildTabItemDiv : function () {
			this.tabDiv = new Element("div", {
					name : "tabDiv",
					"class" : "frametabDiv",
					styles : {
						height : this.options.height
					}
				}).inject($(this.options.pNode));
			if (this.options.pos == "absolute") {
				this.tabDiv.setStyles({
					position : "absolute",
					left : this.options.left,
					top : this.options.top,
					width : this.options.width,
					height : this.options.height,
					"z-index" : this.options.zIndex
				})
			}
		},
		buildTabItemHeaderDiv : function () {
			this.tabHeaderDiv = new Element("div", {
					"class" : "ftable"
				}).inject(this.tabDiv)
		},
		buildTabItemScrollOrPlainDiv : function () {
			if (this.options.tabType == "plain") {}
			else {
				if (this.options.tabType == "scroll") {
					this.tabItemScrollRightDiv = new Element("div", {
							"class" : "right",
							styles : {
								visibility : "visible"
							}
						}).inject(this.tabHeaderDiv);
					this.tabItemScrollRightDiv.addEvent("click", function () {
						if (!this.tabItemScrollRightDiv.hasClass("right_a")) {
							this.scrollRight()
						}
					}
						.bind(this));
					this.tabItemScrollLeftDiv = new Element("div", {
							"class" : "left",
							styles : {
								visibility : "visible"
							}
						}).inject(this.tabHeaderDiv);
					this.tabItemScrollLeftDiv.addEvent("click", function () {
						this.scrollLeft()
					}
						.bind(this))
				}
			}
		},
		buildTabItemULDiv : function () {
			this.tabItemContentDiv = new Element("div", {
					"class" : "tab_box",
					styles : {
						left : "0"
					}
				}).inject(this.tabHeaderDiv);
			this.tabItemContentUL = new Element("ul", {}).inject(this.tabItemContentDiv)
		},
		buildTabContentDiv : function () {
			this.tabContentDiv = new Element("div", {
					name : "tabContentDiv",
					"class" : "x-tab-panel-body",
					styles : {
						height : this.options.height.toFloat() - 30,
						overflow : "hidden"
					}
				}).inject(this.tabDiv)
		},
		refreshTabContentByRate : function () {
			if ($defined(this.options.pNode) && $defined(this.options.pNode.getProperty("heightRate"))) {
				var a = 0;
				if ($defined(this.options.pNode.getProperty("heightMinus"))) {
					a = (this.options.pNode.getProperty("heightMinus")).toFloat()
				}
				var b = this.options.pNode.getProperty("heightRate").toFloat();
				this.tabDiv.setStyles({
					height : Math.max(0, this.options.height * b - a)
				});
				this.tabContentDiv.setStyles({
					height : Math.max(0, (this.options.height * b - 30 - a))
				});
				this.tabItems.each(function (d, c) {
					d.tabContent.setStyles({
						height : Math.max(0, (this.options.height * b - 30 - a) * 0.9999)
					})
				}
					.bind(this))
			}
		},
		BuildRefreshTabContentHeightEvent : function () {
			window.addEvent("resize", function (a) {
				this.refreshTabContentByRate()
			}
				.bind(this))
		},
		refreshTabContentByNum : function (a) {
			var b = this.tabDiv.getStyle("height").toFloat();
			this.tabDiv.setStyles({
				height : b - a
			});
			var c = this.tabContentDiv.getStyle("height").toFloat();
			this.tabContentDiv.setStyles({
				height : b - a - 30
			})
		},
		refreshTabItemById : function (a) {
			if (this.tabItems.get(a).tabContent.readyState == "complete") {
				this.tabItems.get(a).tabContent.contentWindow.location.reload()
			}
		},
		refreshCurrentTabItem : function () {
			this.tabItems.get(this.curTabItem.options.id).tabContent.contentWindow.location.reload()
		},
		getTabcontent : function (a) {
			return this.tabItems.get(a).tabContent
		},
		addModalTabItem : function (a) {
			this.addTabItem(a)
		}
	});
var SwordGrid = new Class({
		Implements : [Events, Options],
		Extends : PageContainer,
		$family : {
			name : "SwordGrid"
		},
		name : "SwordGrid",
		options : {
			sword : null,
			name : null,
			caption : null,
			itemX : 200,
			itemY : 29,
			dataY : -1,
			dataX : "100%",
			rows : 20,
			totalRows : 0,
			initTotalRows : 0,
			pageNum : 1,
			ptidexport : null,
			fenye : true,
			minItemX : 20,
			showHeader : true,
			beanname : null,
			dataFontSize : null,
			dragWidth : "false",
			fzbtId : "",
			headerHeight : 34,
			dragColumn : "false",
			autoHeight : "true",
			showConsole : "true",
			checkMoudle : "true",
			consoleY : "35px",
			headerY : -1,
			consoleStyle : "button",
			issort : "false",
			cache : "true",
			scrollX : -1,
			wordBreak : "false",
			ptid : null,
			type : "common",
			treeSignCol : null,
			treePcode : "pcode",
			treeCode : "code",
			treeEffect : false,
			extendLayer : 2,
			treeIt : null,
			vType : "intime",
			pNode : null,
			sGrid_div : null,
			items : null,
			data : null,
			gridData : null,
			fenyeType : "page",
			nextOrder : "row",
			showHJ : "false",
			rowCheckValidator : false,
			treeRootNum : "false",
			collapse : "false",
			isRowEdit : "false",
			onAfterCreateConsole : $empty,
			onAfterCreateRow : $empty,
			onAfterInsertRow : $empty,
			valfocus : "true",
			noNextEvent : null,
			onAfterCreateCell : $empty,
			onAfterInitData : $empty,
			onRowClick : $empty,
			onRowDbClick : $empty,
			onRowRightClick : $empty,
			onAfterCreateHeader : $empty,
			onAllCheckClick : $empty,
			treeInsert_getCode : function (d, c, b) {
				if (d == null && c == null && b / 1 == 1) {
					return 1
				} else {
					if (d == null && c != null && b / 1 == 1) {
						return c.length + 1
					} else {
						if (d != null && c != null) {
							var a = Math.pow(100, b / 1) + c.length + 1;
							var f = d.getValue(this.options.treeCode);
							return "" + f + a
						}
					}
				}
				return -1
			},
			treeInsert_getRootPcode : function (a) {
				return 0
			},
			onBeforeDelete : $empty,
			onAfterDelete : $empty
		},
		nextEls : [],
		dbActive : false,
		clickDDtime : 260,
		treeInsertChild : function (b, a, c) {
			return this.insertRow(b, a, c, "child")
		},
		treeInsertBrother : function (b, a, c) {
			return this.insertRow(b, a, c, "brother")
		},
		createCode : function (c, b, a) {
			if ($type(this.options.treeInsert_getCode) == "function") {
				return this.options.treeInsert_getCode.run([c, b, a], this)
			} else {
				return this.getFunc(this.options.treeInsert_getCode)[0](c, b, a)
			}
		},
		createRootPcode : function (a) {
			if ($type(this.options.treeInsert_getRootPcode) == "function") {
				return this.options.treeInsert_getRootPcode.run([a], this)
			} else {
				return this.getFunc(this.options.treeInsert_getRootPcode)[0](a)
			}
		},
		setDataFontSize : function (a) {
			if (!$defined(a)) {
				if (this.options.dataFontSize != null) {
					this.dataDiv().setStyle("font-size", this.options.dataFontSize);
					this.header().getElements("div.sGrid_header_text_div").setStyle("font-size", this.options.dataFontSize)
				}
				return
			}
		},
		showColumn : function (a) {
			this.getCells(a).setStyle("display", "").set("show", "true");
			this.getHeaderEl(a).setStyle("display", "").set("show", "true");
			this.getItemElByName(a).setStyle("display", "").set("show", "true");
			this.buildXY()
		},
		hideColumn : function (a) {
			this.getCells(a).setStyle("display", "none").set("show", "false");
			this.getHeaderEl(a).setStyle("display", "none").set("show", "false");
			this.getItemElByName(a).set("show", "false");
			if ($chk(this.hjRow)) {
				this.gethjRowEl(a).setStyle("display", "none").set("show", "false")
			}
			this.buildXY()
		},
		sortColumn : function (b, a) {
			var k = this.getHeaderEl(b)[0];
			if (k.get("dragBoder") == "true") {
				return
			}
			if (this.totalRows() <= 0) {
				return
			}
			var d = this.getSwordSort();
			var h = d.options.sortName;
			var g = b;
			var f = d.options.sortFlag;
			if (h != g) {
				f = "asc"
			} else {
				f == "asc" ? f = "desc" : f = "asc"
			}
			d.options.sortFlag = a || f;
			d.options.sortName = g;
			d.options.sortType = k.get("sortType");
			var c = this.getSortData();
			d.setData(c);
			this.options.sGrid_data_div.empty();
			if (this.options.data) {
				this.options.data = null
			}
			this.hjDataOs.each(function (l) {
				l.value = 0
			});
			this.removeAllError();
			if (!this.isServer()) {
				this.options.initTotalRows = 0
			}
			this.options.pageNum = 1;
			this.clearCache = true;
			this.loadPage(1, "sort");
			this.clearCache = false
		},
		dataDivFxScroll : null,
		checkError : function (c, b) {
			if ($type(b) == "string") {
				b = [b]
			}
			var a = true;
			b.each(function (d) {
				if (!this.vObj.doValidate(c.getCell(d)).state) {
					a = false
				}
			}
				.bind(this));
			return a
		},
		errorCells : new Array(),
		addError : function (b, a) {
			return
		},
		removeRowError : function (a) {
			this.celltooltips.hide()
		},
		removeAllError : function () {
			this.celltooltips.hide()
		},
		isError : function () {
			if (this.validate()) {
				return false
			}
			return true
		},
		isUpdate : function () {
			if (this.getUpdateRows().length == 0) {
				return false
			}
			return true
		},
		isInsert : function () {
			if (this.getInsertRows().length == 0) {
				return false
			}
			return true
		},
		isDelete : function () {
			if (this.getDeleteRows().length == 0) {
				return false
			}
			return true
		},
		isAllSave : function () {
			return !this.isUpdate() && !this.isInsert() && !this.isDelete()
		},
		getUpdateRows : function () {
			return this.dataDiv().getChildren('div[status="update"][row]')
		},
		getInsertRows : function () {
			return this.dataDiv().getChildren('div[status="insert"][row]')
		},
		getDeleteRows : function () {
			return this.dataDiv().getChildren('div[status="delete"][row]')
		},
		getCheckedEls : function (b) {
			var a = this.dataDiv().getElements('input[name="' + b + '"][type="checkbox"][checked]');
			if (a.length == 0) {
				a = this.dataDiv().getElements('input[name="' + b + '"][type="radio"][checked]')
			}
			return a
		},
		getStatusRows : function () {
			return this.getUpdateRows().combine(this.getInsertRows().combine(this.getDeleteRows()))
		},
		getStatusGirdData : function () {
			if (this.isCP()) {
				var a = new Array();
				this.data().each(function (b) {
					if ($chk(b) && $chk(b.status)) {
						a.push(b)
					}
				}, this);
				a.combine(this.getRowsData(this.getInsertRows()));
				return {
					sword : this.options.sword,
					name : this.options.name,
					beanname : this.options.beanname,
					trs : a
				}
			} else {
				return this.getRowsGirdData(this.getStatusRows())
			}
		},
		getStatusGridData : function () {
			return this.getStatusGirdData()
		},
		getCurPageGirdData : function () {
			return this.getRowsGirdData(this.dataDiv().getChildren())
		},
		getCurPageGridData : function () {
			return this.getCurPageGirdData()
		},
		_inCache : function (b) {
			if ((this.rows() * (this.pageNum() - 1) - 1) < b && b < (this.rows() * this.pageNum())) {
				return true
			}
			for (var c = 0, a = this.cachePages.length; c < a; c++) {
				if ((this.rows() * (this.cachePages[c] - 1) - 1) < b && b < (this.rows() * this.cachePages[c])) {
					return true
				}
			}
			return false
		},
		getAllGridData : function () {
			var a = this.getCurPageGirdData();
			if (this.totalPage() > 1 && this.options.cache == "true" && this.options.type != "tree" && !this.isServer()) {
				this.data().each(function (c, b) {
					if (c.init != "load") {
						c.getValue = this.render._getValue;
						a.trs.push(c)
					}
				}, this)
			} else {
				this.data().each(function (c, b) {
					if (!this._inCache(b)) {
						c.getValue = this.render._getValue;
						a.trs.include(c)
					}
				}, this)
			}
			return a
		},
		getSortData : function () {
			var b = this.dataDiv().getElements("div.sGrid_data_row_div");
			var a = new Array();
			b.each(function (d) {
				var f = d.retrieve("rowData");
				var c = d.getElements("div.sGrid_data_row_item_div");
				c.each(function (u) {
					var v = u.get("type");
					var g = u.get("name");
					var x = u.get("title");
					var l = u.get("realvalue");
					if (v == "select") {
						var k = u.get("code");
						var s = f.tds[g];
						if (s) {
							var n = s.value;
							if (n && k) {
								var m = "code," + k + "|caption," + x;
								var t = u.get("sbmitcontent");
								if (t) {
									var w = l.split("|");
									var p;
									if (t.contains("|")) {
										p = t.toHash()
									} else {
										p = new Hash();
										p.set(t, null)
									}
									var r = "";
									var q = 0;
									p.each(function (y, h) {
										if (h != "{code}" && h != "{caption}") {
											h = h.substring(1, h.length - 1);
											r = "|" + h + "," + w[q]
										}
										q = q + 1
									});
									m = m + r
								}
								f.tds[g].value = m
							}
						}
					} else {
						if (v == "pulltree") {
							if (l && x) {
								var m = "code," + l + "|caption," + x;
								f.tds[g].value = m
							}
						}
					}
				});
				a.push(f)
			}, this);
			this.data().each(function (d, c) {
				if (!this._inCache(c)) {
					a.push(d)
				}
			}, this);
			return a
		},
		getColumnSum : function (c, a) {
			var d = 0;
			var b = this.getAllGridData().trs;
			b.each(function (h, g) {
				var f = h.getValue(c);
				f = f ? f / 1 : 0;
				if (["delete", "insert", "update"].contains(a)) {
					if (h.status == a) {
						d = accAdd(f, d)
					}
				} else {
					d = accAdd(f, d)
				}
			});
			return d
		},
		getStatusRowsData : function () {
			return this.getRowsData(this.getStatusRows())
		},
		createNewRowNum : function () {
			return this.options.totalRows + 1
		},
		validate : function (x, n) {
			var g = this.options.sGrid_data_div.getElements("div.sGrid_data_row_div[status!='delete']");
			if ($chk(n)) {
				g = n
			}
			var f = false;
			if (!$chk(g) || g.length == 0) {
				return !f
			}
			var l = g.length;
			var q = g[0].getChildren().length;
			for (var v = 0; v < l; v++) {
				var h = g[v];
				var d = h.getChildren();
				for (var C = 0; C < q; C++) {
					var a = d[C];
					if (a.get("rule")) {
						var p = this.vObj.doValidate(a);
						if (!p.state) {
							var B = h.get("pageNum");
							if (this.dataInCache(B)) {
								if (B <= 0 || B > this.totalPage()) {
									swordAlert("" + i18n.gridTarNotExist1 + B + i18n.gridTarNotExist2);
									return
								}
								if (this.options.fenye != "false" && this.options.pageNum != B) {
									this.options.lastPageNum = this.options.pageNum;
									this.options.pageNum = B;
									this.delayBuildData()
								}
								if (a.get("disable") == "true") {
									var D = "第" + (v + 1) + '行的"' + a.get("caption") + '"列值为：' + a.get("realvalue") + ',该值不符合"' + p.msg + '"';
									this.alertError("您要提交的表格<strong>[" + this.options.name + "]</strong>数据有错误:<br/><strong>[" + D + "]</strong><br/>请修改正确后再提交 ！")
								} else {
									var t = this.getDataDivFxScroll();
									var k = this.eDelegator._listener.get("click");
									if (k) {
										k.each(function (c) {
											if (c.condition.indexOf(a.get("eventdele")) > 0) {
												var r = new Event();
												if (c.args) {
													c.fn(r, a, c.args)
												} else {
													c.fn(r, a);
													this.dataDiv().getChildren(".sGrid_data_row_click_div").each(function (s) {
														s.removeClass("sGrid_data_row_click_div")
													});
													h.addClass("sGrid_data_row_click_div")
												}
											}
										}, this);
										event.cancelBubble = true
									}
									var b = a.getElement("input");
									if (!b) {
										return
									}
									var m = window.refToFormTooltip.getTopPos(b);
									var w = window.refToFormTooltip.getTopPos(this.scrollDiv) + 25;
									var z = this.scrollDiv.getHeight() - 25;
									var u = m - w;
									if (u >= 0) {
										if (u >= z) {
											m = u + z / 2 - 90
										} else {
											m = null
										}
									} else {
										if (Browser.Engine.trident6 || Browser.Engine.trident7) {
											m = u - z / 2 - 25
										} else {
											m = u - z / 2 + 285
										}
									}
									if ($chk(m)) {
										t.set(0, m)
									}
									try {
										b.focus()
									} catch (A) {}

									this.vObj.validate(b)
								}
							}
							f = true;
							break
						}
					}
				}
				if (f) {
					break
				}
			}
			return !f
		},
		validateCheckedRow : function (a) {
			var b = this.getCheckedRow(a);
			if (b == null) {
				return true
			}
			return this.validate(false, b)
		},
		setText : function (n, g, h, d) {
			if (n.get("createInput") == "true") {
				var k = n.getElement("input[type=text]");
				k.set("value", h);
				var f = n.get("type");
				if (f == "text") {
					n.set("value", g);
					n.set("createInput", "false")
				}
			} else {
				var a = n.getLast();
				if ($chk(a) && a.get("name") == "treeSignDiv") {
					var b = n.getChildren();
					var l = [];
					b.each(function (q, p) {
						l[p] = q.clone().cloneEvents(q)
					});
					n.set("text", g);
					for (var c = l.length - 1; c >= 0; c--) {
						n.grab(l[c], "top")
					}
				} else {
					if (d == "backspace") {
						n.set("value", g)
					} else {
						n.set("html", g);
						n.set("text", g)
					}
					if (n.get("type") == "date") {
						n.set("showvalue", g);
						n.set("realvalue", h)
					}
				}
			}
			if (n.get("type") == "password") {
				var m = this.dealPassword(h);
				n.set("showvalue", m);
				n.set("text", m)
			}
		},
		updateCell : function (c, d, g, b, a) {
			var f = this.getRow(c);
			if (!f) {
				return
			}
			this.update(f, c, d, g || d, b, a)
		},
		update : function (p, q, I, A, m, y) {
			if (!p) {
				return
			}
			var f = p.get("status") == "insert";
			var H;
			if ($type(q) == "string") {
				H = p.getCell(q)
			} else {
				H = q;
				q = H.get("name")
			}
			var J = this.getOneRowData(p);
			var N = J.tds[q];
			if (N == undefined) {
				J.tds[q] = {};
				N = J.tds[q]
			}
			if (N.originValue == undefined) {
				N.originValue = N.value || ""
			}
			var t = N.originValue;
			var r = $chk(H);
			if (r) {
				var P = H.get("type");
				if (P == "select" && m != true) {
					var h = this.getItemElByName(q);
					if (h.length > 0) {
						var K = this.getSelect().dm2mc(H.get("switched") == "true" ? H : h[0], I);
						if (!K && this.ssids) {
							var M = this.ssids.filter(function (Q) {
									return Q.contains(q)
								})[0];
							if (M) {
								K = $(M).retrieve("allDb");
								if (K) {
									K.realvalue = K.code
								}
							}
						}
						if ($type(K) == "object") {
							H.set("html", K.caption);
							H.set("code", K.code);
							H.set("caption", K.caption);
							H.set("realvalue", K.realvalue);
							A = K.caption;
							if (I && I.contains("|")) {
								N.lazydata = I;
								I = K.code
							}
						} else {
							H.set("html", I);
							H.set("caption", I);
							H.set("code", I);
							H.set("realvalue", I);
							N.lazydata = null
						}
					}
				}
				if ((P == "pulltree" || P == "pullbigtree") && m != true) {
					var D = $w(H.get("treename"));
					if ($chk(I)) {
						if (I.contains("code") && I.contains("caption")) {
							var n = I.split("|");
							if (I.contains("codePath")) {
								H.set("codePath", n[2].substring("codePath,".length))
							}
							A = n[1].split(",")[1];
							H.set("realvalue", n[0].split(",")[1])
						} else {
							if (D.gridShow != true) {
								D.select.show();
								D.options.pNode.setStyle("display", "none");
								D.select.hide();
								D.gridShow = true;
								this.addNextFocusEvent(D.select.selBox)
							}
							var x = I.split(",");
							var d = D.options.cascadeSign.id;
							var G = D.options.displayTag;
							var E = D.options.treeType;
							if (x.length == 0) {
								var O = new Hash();
								O.set(d, I);
								var z = D.getTreeNode(O);
								var F = "";
								var v = I;
								if (z) {
									F = z.get(G);
									v = z.get(d)
								} else {
									F = I
								}
								A = F;
								H.set("realvalue", v)
							} else {
								var a = "";
								var g = "";
								var u = [];
								x.each(function (V, S, R) {
									var U = new Hash();
									U.set(d, V);
									var T = D.getTreeNode(U);
									var Q = (S == R.length - 1) ? "" : ",";
									if (T) {
										g += T.get(G) + Q;
										a += T.get(d) + Q;
										u.push(T)
									} else {
										g += V + Q;
										a += V + Q
									}
								});
								A = g;
								H.set("realvalue", a);
								if (E == "1") {
									D.setCheckedList(u)
								}
							}
						}
					}
				}
				if (P == "text" || P == "label") {
					H.set("realvalue", I);
					if (this.hjRow && this.gethjD(q)) {
						var s = N.value ? N.value / 1 : 0;
						var C = accAdd(accSubtr(this.getHj(q), s), I);
						if ($type(C) == "number" && this.hjDataOs.length > 0) {
							this.gethjD(q).value = C;
							this.rereshHjRowData()
						}
					}
				}
				if (P == "password") {
					H.set("realvalue", this.dealPassword(I));
					H.store("realvalue", I)
				}
				if (P == "radio") {
					if (I == "1" || I == "true") {
						H.getElement("input").set("checked", true)
					}
					if (this.isradioSetChecked) {
						this.radioSetChecked(H)
					}
				}
				var w = H.get("format");
				if ($chk(w)) {
					var L = sword_fmt.convertText(H, I).value;
					this.setSuitableValue(H, L, I, y);
					H.set("realvalue", I);
					H.set("showvalue", L)
				} else {
					if (P == "date") {
						var k = this.getCalendar().getShowValue(H, A || I);
						var l = sword_fmt.convertText(H, k).value;
						this.setSuitableValue(H, l, I, y);
						H.set("realvalue", I);
						H.set("showvalue", l)
					} else {
						this.setSuitableValue(H, A, I, y)
					}
				}
			}
			if (f) {
				J.tds[q] = {
					value : I
				};
				p.store("rowData", J);
				return
			}
			var y = "";
			if (r) {
				if (H.get("type") == "select") {
					var c = H.get("code");
					if (c == null) {
						c = ""
					}
					if (t != c) {
						if (r) {
							H.addClass("sGrid_data_cell_update_div")
						}
						y = "update"
					} else {
						if (r) {
							H.removeClass("sGrid_data_cell_update_div")
						}
					}
				} else {
					if (H.get("type") == "date") {
						if (A == null) {
							A = ""
						}
						if (t != A) {
							if (r) {
								H.addClass("sGrid_data_cell_update_div")
							}
							y = "update"
						} else {
							if (r) {
								H.removeClass("sGrid_data_cell_update_div")
							}
						}
					} else {
						if (t != I) {
							if (r) {
								H.addClass("sGrid_data_cell_update_div")
							}
							y = "update"
						} else {
							if (r) {
								H.removeClass("sGrid_data_cell_update_div")
							}
						}
					}
				}
			} else {
				if (t != I) {
					y = "update"
				}
			}
			var B = "";
			if (p.get("status") == "delete") {
				B = "delete"
			} else {
				if (y == "update") {
					B = "update"
				} else {
					for (var b in J.tds) {
						if (J.tds[b]["status"] == "update" && b != q) {
							B = "update";
							break
						}
					}
				}
			}
			p.set("status", B);
			if (r) {
				H.set("status", y)
			}
			N.value = I;
			N.originValue = t;
			N.status = y;
			J.status = B
		},
		updateRow : function (p, b) {
			var c = b.tds;
			var d = [];
			if ($chk(c)) {
				var n = p.getChildren();
				for (var f = 0; f < n.length; f++) {
					var m = n[f];
					var a = m.get("name");
					if (c[a]) {
						var g = m.get("type");
						var l = c[a]["value"];
						var h = c[a]["showvalue"];
						if (!$defined(h) && (g == "text" || g == "label") && m.get("format")) {
							h = sword_fmt.convertText(m, l).value
						} else {
							h = l
						}
						this.update(p, m, l, h);
						d.push(m.get("name"))
					}
				}
				for (var a in c) {
					if (d.contains(a)) {
						continue
					}
					var g = m.get("type");
					var k = m.get("name");
					var l = c[a]["value"];
					var h = c[a]["showvalue"];
					if (!$defined(h) && k == a && (g == "text" || g == "label") && m.get("format")) {
						h = sword_fmt.convertText(m, l).value
					} else {
						h = l
					}
					this.update(p, a, l, h)
				}
			}
		},
		updateData : function (p, v) {
			var n = this,
			l = n.data().indexOf(p),
			r = Math.ceil((l + 1) / n.rows()),
			s = (l + 1) - ((r - 1) * n.rows()),
			q = n.cachePages.contains(r) || r == n.pageNum();
			if (q) {
				var u = n.dataDiv().getFirst("div[rowNum=" + s + "][pageNum=" + r + "]");
				if (u) {
					this.updateRow(u, v)
				}
			} else {
				var f = p;
				var k = v.tds;
				for (var b in k) {
					var a = k[b]["value"];
					var c = f.tds[b];
					if (c == undefined) {
						f.tds[b] = {};
						c = f.tds[b]
					}
					if (c.originValue == undefined) {
						c.originValue = c.value || ""
					}
					var t = c.originValue;
					var m = "";
					var h = "";
					if (t != a) {
						h = "update"
					}
					if (f.status == "delete") {
						m = "delete"
					} else {
						if (h == "update") {
							m = "update"
						} else {
							for (var d in f.tds) {
								if (f.tds[d]["status"] == "update" && d != b) {
									m = "update";
									break
								}
							}
						}
					}
					c.value = a;
					c.originValue = t;
					c.status = h;
					f.status = m
				}
			}
		},
		useWhere : function (a) {
			if (!$chk(a)) {
				return false
			}
			if (this.dataDiv().getChildren(":not(.sGrid_data_row_delete_div)").length == 0) {
				return false
			}
			return true
		},
		addRowN : 1,
		insertRowN : 0,
		totalRowNum : 0,
		totalRNOP : 0,
		insertRow : function (s, q, u, v, n) {
			if (!$chk(u)) {
				u = this.createNewRowNum()
			}
			this.insertRowN++;
			if (!$chk(s)) {
				var t = {};
				var p = {
					tds : t,
					getValue : function () {}

				};
				s = p
			}
			if (!$chk(q)) {
				q = this.items()
			}
			var k = null;
			if (this.options.type == "tree") {
				if (!$chk(v)) {
					swordAlert("树形表格请使用treeInsertChild或者treeInsertBrother来新增行。");
					return
				}
				var a = this.getCheckedRow();
				if (this.dataDiv().getChildren("div[status!=delete][row]").length <= 0) {
					var b = this.createCode(null, null, 1);
					var d = this.createRootPcode(null);
					s.tds[this.options.treeCode] = {
						value : b
					};
					s.tds[this.options.treePcode] = {
						value : d
					};
					k = this.createTreeRow(s, u - 1, null, 1, "leaf", "insert", q);
					k.inject(this.dataDiv())
				} else {
					if (a == null) {
						swordAlert("" + i18n.gridInsert);
						return
					} else {
						if (v == "child") {
							var m = this.getOneRowData(a);
							var d = m.getValue(this.options.treeCode);
							var c = a.getElement("[code=" + d + "]");
							var l = c.get("treeLevel") / 1 + 1;
							if (c.get("signType") == "plus") {
								this.treeClick(c)
							}
							var w = this.getRowsData(this.dataDiv().getElements("[pcode=" + d + "]"));
							var b = this.createCode(m, w, l);
							s.tds[this.options.treeCode] = {
								value : b
							};
							s.tds[this.options.treePcode] = {
								value : d
							};
							k = this.createTreeRow(s, u - 1, null, l, "leaf", "insert", q);
							k.inject(a, "after");
							var h = c.getElement("[name=treeSignDiv]");
							if (h.hasClass("grid_sign_leaf")) {
								c.set("childNodesCreated", true);
								h.removeClass("grid_sign_leaf");
								h.addClass("grid_sign_minus");
								c.set("signType", "minus")
							}
						} else {
							if (v == "brother") {
								var f = a.getElement("[name=" + this.options.treeSignCol + "]");
								var l = f.get("treeLevel") / 1;
								var d = f.get("pcode");
								var m = this.getOneRowData(this.dataDiv().getElement("[code=" + d + "]"));
								var w = this.getRowsData(this.dataDiv().getElements("[treeLevel=" + l + "]"));
								var b = this.createCode(m, w, l);
								s.tds[this.options.treeCode] = {
									value : b
								};
								s.tds[this.options.treePcode] = {
									value : d
								};
								k = this.createTreeRow(s, u - 1, null, l, "leaf", "insert", q);
								if (n && ["top", "bottom"].contains(n)) {
									k.inject(this.dataDiv(), n)
								} else {
									k.inject(a, "before")
								}
							}
						}
					}
				}
			} else {
				var a;
				if (this.useWhere(n)) {
					if (["before", "after"].contains(n)) {
						a = this.getCheckedRow();
						if (!a) {
							swordAlert("请先选择行！");
							return
						}
					}
				}
				k = this.createRow(u, s, q, "insert");
				var g = k.getElement("[type='rowNum']");
				if (this.useWhere(n)) {
					if (["before", "after"].contains(n)) {
						k.inject(a, n);
						if (g) {
							var r = a.getElement("[type='rowNum']").get("text");
							if (!a.getPrevious()) {
								a.getElement("[type='rowNum']").set("text", 1);
								r = 1
							}
							if ("before" == n) {
								g.set("text", r);
								this.refreshFa(k)
							} else {
								g.set("text", r / 1 + 1);
								if (k.getNext()) {
									this.refreshFa(k)
								}
							}
						}
					} else {
						if (["top", "bottom"].contains(n)) {
							k.inject(this.dataDiv(), n);
							if (n == "top") {
								if (k.getNext() && g) {
									g.set("text", 1);
									this.refreshFa(k)
								}
							}
							n == "top" ? this.getDataDivFxScroll().toTop() : this.getDataDivFxScroll().toBottom()
						}
					}
				} else {
					k.inject(this.dataDiv());
					this.getDataDivFxScroll().toBottom()
				}
				k.addClass("sGrid_data_row_insert_div")
			}
			this.options.totalRows = this.options.totalRows / 1 + 1;
			this.refreshConsole();
			this.buildXY();
			this.fireEvent("onAfterInsertRow", [s, k, q, this]);
			return k
		},
		insert : function (a) {
			var b = a;
			if ($type(a) != "array") {
				b = [a]
			}
			if (this.isServer()) {}
			else {}

			this.insertData = []
		},
		deleting : function (b) {
			var d = this.getRow(b);
			this.refreshFd(d);
			var c = d.retrieve("rowData");
			var a = d.get("status");
			d.addClass("sGrid_data_row_delete_div");
			if (a == "insert") {
				this.deleteRow(b);
				return null
			} else {
				this.options.totalRows = this.options.totalRows - 1;
				this.addRowN = this.addRowN - 1;
				d.set("status", "delete");
				d.getElements('input[type="checkbox"][checked]').set("checked", false);
				c.status = "delete";
				this.hjDataOs.each(function (g) {
					if (c.tds[g.name]) {
						var f = c.tds[g.name].value;
						if (f) {
							g.value = accSubtr(g.value, f)
						}
					}
				});
				this.buildXY();
				this.scrollHeader();
				this.rereshHjRowData();
				this.refreshConsole();
				return d
			}
		},
		refreshFd : function (f) {
			var c = 0,
			d = 30;
			var b = function (l) {
				if (l) {
					var m = "pagenum",
					h = l.get(m);
					var k = l.getElement("[type='rowNum']");
					if (k) {
						k.set("text", k.get("text") - 1)
					}
					var g = l.getNext("[status!='delete']");
					if (g && g.get(m) == h) {
						this.refreshFd(g)
					}
				}
			}
			.bind(this);
			var a = function (k) {
				if (k) {
					var h = k.getElement("[type='rowNum']");
					if (h) {
						h.set("text", h.get("text") - 1)
					}
					var g = k.getNext("[status!='delete']");
					if (c < d) {
						c++;
						if (g) {
							this.refreshFd(g)
						}
					} else {
						c = 0;
						setTimeout(function () {
							this.refreshFd(g)
						}
							.bind(this), 1)
					}
				}
			}
			.bind(this);
			if ((this.options.fenye + "") == "false") {
				this.refreshFd = a;
				this.refreshFd(f);
				c = 0
			} else {
				this.refreshFd = b;
				this.refreshFd(f)
			}
		},
		refreshFa : function (f) {
			var c = 0,
			d = 30;
			var b = function (k) {
				if (k) {
					var l = "pagenum",
					h = k.get(l);
					var g = k.getNext("[status!='delete']");
					if (g && g.get(l) == h) {
						g.getElement("[type='rowNum']").set("text", k.getElement("[type='rowNum']").get("text") / 1 + 1);
						this.refreshFa(g)
					}
				}
			}
			.bind(this);
			var a = function (h) {
				if (h) {
					var g = h.getNext("[status!='delete']");
					if (g) {
						g.getElement("[type='rowNum']").set("text", h.getElement("[type='rowNum']").get("text") / 1 + 1);
						if (c < d) {
							c++;
							this.refreshFa(g)
						} else {
							c = 0;
							setTimeout(function () {
								this.refreshFa(g)
							}
								.bind(this), 1)
						}
					}
				}
			}
			.bind(this);
			if ((this.options.fenye + "") == "false") {
				this.refreshFa = a;
				this.refreshFa(f);
				c = 0
			} else {
				this.refreshFa = b;
				this.refreshFa(f)
			}
		},
		rollback : function (a) {
			if ($type(a) == "array") {
				a.each(function (b) {
					this.rollbackRow(b)
				}, this)
			} else {
				this.rollbackRow(a)
			}
		},
		rollbackRow : function (b) {
			var a = b.get("status");
			if (a == "update") {
				b.getChildren('*[status="update"]').each(function (c) {
					var d = this.getCellOriginValue(c);
					this.updateCell(c, d)
				}, this)
			} else {
				if (a == "insert") {}
				else {
					if (a == "delete") {}

				}
			}
		},
		getCellOriginValue : function (a) {
			var d = a.get("name");
			var c = this.getOneRowData(a);
			var b = c.tds[d];
			if (b == undefined) {
				return ""
			}
			if (b.originValue == undefined) {
				return b.value || ""
			}
			return b.originValue
		},
		commit : function (a) {
			if (arguments.length == 0) {
				a = this.getStatusRows()
			}
			if ($type(a) == "array") {
				a.each(function (b) {
					this.commitRow(b)
				}, this)
			} else {
				this.commitRow(a)
			}
			this.data().each(function (d, c) {
				if (!this._inCache(c)) {
					var b = d.status;
					if ($chk(b)) {
						d.status = ""
					}
				}
			}, this)
		},
		commitRow : function (b) {
			var a = b.get("status");
			if (a == "update") {
				this.commitUpdateRow(b)
			} else {
				if (a == "insert") {
					this.commitInsertRow(b)
				} else {
					if (a == "delete") {
						this.commitDeleteRow(b)
					}
				}
			}
		},
		commitUpdateRow : function (l) {
			var h = this.getOneRowData(l);
			var d = h.tds;
			for (var a in d) {
				var b = d[a]["status"];
				if (b == "update") {
					var k = "";
					var g = l.getCell(a);
					if ($defined(g)) {
						var f = g.get("type");
						if (f == "select") {
							k = g.get("code") || ""
						} else {
							if (f == "date") {
								k = g.get("text") || ""
							} else {
								if (f == "checkbox" || f == "radio") {
									k = g.getElement("input[type=" + f + "]").get("checked") ? "1" : "0"
								} else {
									if (f == "file2") {
										var c = g.retrieve("up");
										k = c.getValue();
										d[a].tmp = undefined
									} else {
										if (f == "password") {
											k = g.retrieve("realvalue") || ""
										} else {
											k = g.get("realvalue") || ""
										}
									}
								}
							}
						}
					} else {
						k = d[a]["value"]
					}
					d[a]["originValue"] = k;
					d[a]["status"] = ""
				}
			}
			h.status = "";
			l.set("status", "")
		},
		commitInsertRow : function (c) {
			var b = this.data().length;
			if (b < this.options.initTotalRows) {
				b = this.options.initTotalRows
			}
			var a = this.getOneRowData(c);
			a.status = "";
			c.store("rowData", a);
			this.data()[b] = a;
			c.set("rowNum", b + 1);
			c.set("status", "");
			c.removeClass("sGrid_data_row_insert_div");
			this.createRebuildButton()
		},
		commitDeleteRow : function (a) {
			a.set("status", "");
			this.deleteRow(a)
		},
		fenyeType : function () {
			return this.options.fenyeType
		},
		isServer : function () {
			if (this.fenyeType() == "server") {
				return true
			}
			return false
		},
		isPage : function () {
			return !this.isServer()
		},
		itemX : function () {
			return this.options.itemX / 1
		},
		itemY : function () {
			return this.options.itemY / 1
		},
		dataY : function () {
			return this.options.dataY / 1
		},
		panel : function () {
			return this.options.panel
		},
		header : function () {
			return this.options.sGrid_header_div
		},
		dataDiv : function () {
			return this.options.sGrid_data_div
		},
		console : function () {
			return this.options.sGrid_console_div
		},
		consoleItems : function () {
			return this.options.consoleItems
		},
		sGrid_div : function () {
			return this.options.sGrid_div
		},
		earseEvent : function (b, a) {
			a.each(function (d) {
				var c = b.get(d);
				if (c) {
					if (Browser.Engine.trident4 || Browser.Engine.trident5) {
						c += "";
						c = c.substring(c.indexOf("{") + 1, c.lastIndexOf("}"))
					}
					b.set("_" + d, c);
					b.erase(d)
				}
			})
		},
		items : function () {
			var b = this.options.pNode.getChildren(">div:not([console])[name]");
			if (this.intiItems) {
				return b
			}
			this.intiItems = true;
			this.selPuls = [];
			b.each(function (g) {
				var f = g.get("type");
				this.earseEvent(g, ["onblur", "onclick"]);
				if ((["edit", "detail", "delete", "deleting"].contains(g.get("act")) && !["a"].contains(f)) || ["button"].contains(f)) {
					g.set("buttonEl", "true")
				} else {
					g.set("dataEl", "true")
				}
				g.addClass("sGrid_data_row_item_div");
				g.set("style", g.get("css"));
				g.setStyle("width", this.getItemX(g));
				g.set("TemplateStyle", g.get("style"));
				var d = g.get("name");
				if (f == "select") {
					g.set("codeSign", g.get("codeSign") || "code");
					g.set("captionSign", g.get("captionSign") || "caption");
					g.set("pcodeSign", g.get("pcodeSign") || "pcode");
					var c = {
						name : d,
						type : f,
						sbmitcontent : g.get("sbmitcontent") || "{code}"
					};
					this.selPuls.push(c)
				} else {
					if (f == "pulltree" || f == "pullbigtree") {
						var c = {
							name : d,
							type : f,
							sbmitcontent : "{code}"
						};
						this.selPuls.push(c)
					}
				}
			}, this);
			var a = this.getLastShowItemEl();
			a.setStyle("border-right", "none").set("TemplateStyle", a.get("style"));
			return b
		},
		getItemElByName : function (a) {
			return this.options.pNode.getChildren("div:not([console])[name=" + a + "]'")
		},
		getLastShowItemEl : function () {
			var a = this.options.pNode.getChildren("div:not([console]):not([show=false])[name]");
			return a[a.length - 1]
		},
		pageNum : function () {
			return this.options.pageNum / 1
		},
		data : function () {
			if (!$chk(this.options.data)) {
				this.options.data = []
			}
			return this.options.data
		},
		getHeaderCheckboxs : function () {
			return this.header().getElements("input[type=checkbox]")
		},
		getHeaderCheckboxs_checked : function () {
			return this.header().getElements("input[type=checkbox][checked]")
		},
		getHeaderCheckboxs_noneChecked : function () {
			return this.header().getElements("input[type=checkbox]:not([checked])")
		},
		getHeaderCheckboxByName : function (a) {
			var b = this.header().getElement("div[_for=" + a + "]");
			if (b) {
				return b.getElement("input[type=checkbox]")
			}
			return null
		},
		allInCache : function () {
			if (!this.cache()) {
				return false
			}
			if (this.cachePages.length == this.totalPage()) {
				return true
			}
			if ((this.cachePages.length == this.totalPage() - 1) && !(this.cachePages.contains(this.pageNum()))) {
				return true
			}
			return false
		},
		totalRows : function () {
			return this.options.totalRows || this.data().filter(function (a) {
				return a.status != "delete"
			}).length
		},
		initTotalRows : function () {
			return this.options.initTotalRows / 1
		},
		totalPage : function () {
			if (this.options.fenye == "false") {
				return 1
			}
			var b = this.initTotalRows();
			if (b == 0) {
				return 1
			}
			var c = b % this.rows();
			var a = (b / this.rows()).toInt();
			if (c != 0) {
				a++
			}
			return a
		},
		rows : function () {
			if (this.options.fenye == "false") {
				var a = this.dataDiv().getChildren("div:[status!=delete][pageNum=" + 1 + "]");
				return a.length
			}
			return this.options.rows / 1
		},
		consolePage : function () {
			return this.options.sGrid_console_page_lable
		},
		consoleTotalPage : function () {
			return this.options.sGrid_console_totalPage_lable
		},
		consoleTotalRows : function () {
			return this.options.sGrid_console_totalRows_lable
		},
		consoleRows : function () {
			return this.options.sGrid_console_rows_lable
		},
		initialize : function () {},
		scrollHeader : function () {
			this.header().setStyle("top", this.scrollDiv.getScrollTop());
			if ($chk(this.fzbtTable)) {
				this.fzbtTable.setStyle("top", this.scrollDiv.getScrollTop())
			}
			if (this.hjRow) {
				this.scrollHjRow()
			}
		},
		autoScroll : false,
		nextRowScroll : false,
		dealScroll : function () {
			if (!this.autoScroll) {
				this.dealScroll4FloatBox()
			}
			this.scrollHeader()
		},
		dealScroll4FloatBox : function () {
			var c = this.getCheckedRow();
			if (c) {
				var b = c.getElement("input[type=text]");
				if (b) {
					var a = b.retrieve("widgetObj");
					if (a && !this.nextRowScroll) {
						a.hide();
						if (a.execGridOnFinished) {
							a.execGridOnFinished()
						}
					}
					if (this.nextRowScroll) {
						this.nextRowScroll = false
					}
				}
			}
		},
		initParam : function (a) {
			this.htmlOptions(a);
			this.options.cache = "true";
			this.cachePages.include(1);
			if (!window.validator) {
				window.validator = new SwordValidator();
				window.validator.initParam(this.options.vType)
			}
			this.vObj = window.validator;
			if (!window.tooltips) {
				window.tooltips = pageContainer.create("SwordToolTips")
			}
			this.celltooltips = window.tooltips;
			this.headerM = new Element("div", {
					"class" : "sGrid_header_item_div",
					styles : {
						"border-right-style" : "solid",
						"border-right-width" : "1px"
					}
				});
			this.options.pNode.getChildren("div[type=userdefine]").setStyle("display", "none");
			var n = this.options.pNode.getChildren("div[type=pulltree]");
			var x = this.options.pNode.getChildren("div[type=pullbigtree]").combine(n);
			x.each(function (z) {
				var y = z.get("treename"),
				c = z.get("dataname") || z.get("dataName");
				var A = $w(y);
				if (A) {
					A.options.pNode.setStyle("display", "none")
				}
			});
			this.options.consoleItems = this.options.pNode.getChildren(">div[console]");
			var s = new Element("div", {
					"class" : "sGrid_div"
				}).inject(this.options.pNode);
			this.options.sGrid_div = s;
			this.initEvents();
			if (this.options.caption) {
				this.createPanel(s, this.options.caption)
			}
			this.scrollDiv = new Element("div", {
					styles : {
						overflow : "auto",
						width : "100%"
					},
					events : {
						scroll : this.dealScroll.bind(this)
					}
				}).inject(this.sGrid_div());
			if (this.options.wordBreak == "true") {
				var w = (Browser.Engine.trident4 || Browser.Engine.trident5) ? "wordBreak_ie67" : "wordBreak";
				this.scrollDiv.addClass(w)
			}
			if (Browser.Engine.trident4 || Browser.Engine.trident5) {
				this.scrollDiv.setStyle("position", "relative");
				if (this.options.scrollX == -1) {
					this.scrollDiv.setStyle("overflow-x", "hidden")
				}
				var v = this.items();
				var k = v.length;
				var h = 0;
				for (var g = 0; g < k; g++) {
					var u = v[g];
					var d = u.get("x");
					var f = /^\d+(.\d+)?%$/;
					if (d != null && d != 0 && f.test(d)) {
						var m = Number(d.substring(0, d.length - 1));
						h = h + m;
						if (h > 99) {
							var q = m - (h - 98);
							q < 0 ? q = 0 + "%" : q = q + "%";
							u.set("x", q);
							u.setStyle("width", q);
							break
						}
					}
				}
			}
			var t = new Element("div", {
					"class" : "sGrid_header_div"
				}).inject(this.scrollDiv);
			if (this.options.wordBreak != "true") {
				t.setStyle("height", "34px")
			}
			if (this.options.headerY != -1) {
				t.setStyle("height", this.options.headerY)
			}
			this.options.sGrid_header_div = t;
			var r = new Element("div", {
					"class" : "sGrid_data_div"
				}).inject(this.scrollDiv);
			this.options.sGrid_data_div = r;
			var l = new Element("div", {
					"class" : "sGrid_console_div",
					styles : {
						height : this.options.consoleY
					}
				}).inject(this.sGrid_div());
			var p = new Element("div", {
					"class" : "page_left"
				}).inject(l);
			var b = new Element("div", {
					"class" : "page_right"
				}).inject(l);
			this.options.sGrid_console_div = l;
			this.options.sGrid_page_left = p;
			this.options.sGrid_page_right = b;
			if (this.options.showConsole != "true") {
				l.setStyle("display", "none")
			}
			this.clickDDtime = this.options.isRowEdit == "true" ? this.clickDDtime : 0;
			this.buildHeadr();
			this.setDataFontSize();
			this.createHjRow();
			this.buildConsole();
			this.buildXY();
			this.changeTableState();
			juicer.unregister(this.options.name + "pageNum");
			juicer.unregister(this.options.name + "dataHandler")
		},
		changeTableState : function () {
			if (this.options.collapse == "true") {
				this.collapseTable()
			}
		},
		hjDataOs : [],
		createHjRow : function () {
			if (this.options.showHJ == "true") {
				var a = this.options.sGrid_header_div.clone(false);
				a.removeClass("sGrid_header_div").addClass("sGrid_hj_row_div");
				this.items().each(function (c, b) {
					var d = c.clone();
					if (d.get("show") != "false") {
						d.removeClass("sGrid_data_row_item_div").addClass("sGrid_hj_row_item_div").setProperties({
							html : "-",
							realvalue : "-",
							title : "-",
							showvalue : "-",
							type : "label"
						}).inject(a)
					}
					if (d.get("isHjLabel") == "true") {
						d.setProperties({
							html : "合计",
							title : "合计"
						}).setStyle("text-align", "center").removeProperties("realvalue", "showvalue")
					}
					if (c.get("hj") == "true") {
						this.hjDataOs.push({
							name : c.get("name"),
							value : 0
						})
					}
				}
					.bind(this));
				a.setStyles({
					height : 29,
					border : "",
					"border-top" : 0
				}).inject(this.dataDiv(), "after");
				if (this.options.scrollX > "100%") {
					a.setStyle("width", this.options.scrollX)
				}
				if (Browser.Engine.trident6 || Browser.Engine.trident7) {
					this.hjRow = a.clone();
					this.hjRow.inject(a, "after");
					this.scrollHjRow()
				} else {
					this.hjRow = a
				}
				this.rereshHjRowData()
			}
		},
		rereshHjRowData : function () {
			if (this.hjRow) {
				this.hjRow.getElements("div").each(function (c, a) {
					var f = c.get("name");
					if (c.get("hj") && f) {
						var b = this.hjRow.getElement("div[name='" + f + "']");
						b.setStyle("text-align", "right");
						c.get("format") ? b.set("format", c.get("format")) : null;
						var d = html = $chk(this.getHj(f)) ? this.getHj(f) : "";
						if (b.get("format")) {
							d = sword_fmt.convertText(b, d).value
						}
						b.set({
							text : d,
							realvalue : html || "",
							title : d,
							isHj : "true"
						})
					}
				}
					.bind(this))
			}
		},
		scrollHjRow : function () {
			var d = this.scrollDiv.getHeight();
			var c = this.scrollDiv.getScrollHeight();
			var b = this.scrollDiv.getScrollTop();
			var a = 0;
			if (d <= c) {
				a = d - c + b;
				if (this.options.scrollX > "100%") {
					a = a - 17
				}
			}
			if (Browser.Engine.trident6 || Browser.Engine.trident7) {
				a = a - 29
			} else {
				if (Browser.Engine.trident8 || (!Browser.Engine.trident && window.hasOwnProperty("ActiveXObject"))) {
					if (a < 0 && this.hjRow.getStyle("top").toInt() < 0) {
						a = a - 30
					}
				}
			}
			this.hjRow.setStyle("top", a)
		},
		setX : function (f, a) {
			var d = this.getHeaderEl(f)[0];
			var b = this.getItemElByName(f)[0];
			d.setStyle("width", a);
			if ($chk(this.hjRow)) {
				var c = this.gethjRowEl(f)[0];
				c.setStyle("width", a);
				c.set("x", a)
			}
			this.dataDiv().getElements(".sGrid_data_row_item_div[name=" + f + "]").setStyle("width", a);
			b.set("x", a);
			b.setStyle("width", a);
			this.buildX()
		},
		getDragMaxX : function () {
			var a = 0;
			this.header().getChildren().getWidth().each(function (c) {
				a += c
			});
			var b = this.header().getWidth();
			return b - a - b * 0.01
		},
		getNextShow : function (a) {
			return a.getNext(":not([show=false])")
		},
		getNextMaxX : function (a) {
			return this.getNextShow(a) ? this.getNextShow(a).getWidth() - 20 : 0
		},
		getBorderDiv : function () {
			if (!$chk(this.borderDiv)) {
				this.borderDiv = new Element("div", {
						"class" : "sGrid_border_div"
					}).inject(document.body);
				this.borderDiv.drag = new Drag.Move(this.borderDiv, {
						snap : 0,
						onComplete : function (O) {
							var h = O.headerItemDiv;
							var P = O.stManager;
							var A = P.options.dataX;
							var z = parseFloat(P.options.minItemX);
							var t = z / P.header().getWidth() * 100;
							var q,
							B;
							var l = 100;
							var c = 0,
							u = 0,
							D = 0,
							k = 0,
							F = 0,
							L = 0;
							var E = false,
							f = false,
							J = false;
							var m = [];
							var s = 0,
							M = 0,
							K = 0;
							var a = [];
							var y = new Hash();
							P.items().each(function (n) {
								q = n.get("name");
								y.set(q, n)
							});
							var v = P.nextEls.length;
							var p = h.get("_for");
							var I = h.getWidth() - 1;
							var d = P.header().getWidth();
							var b = round(I / d * 100, 2);
							var H = O._getPosition().x - h._getPosition().x;
							var r = H;
							var g = 0;
							var C = P.getItemElByName(h.get("_for"))[0];
							if (C.get("x")) {
								if (C.get("x").contains("%")) {
									g = round(H / d * 100, 2);
									H = g + "%";
									J = true
								}
							}
							if (P.options.pNode.get("scrollx") && parseInt(P.options.pNode.get("scrollx")) > 100) {
								f = true
							} else {
								f = false;
								if (!A.contains("%")) {
									l = A
								}
							}
							if (r <= I) {
								c = accSubtr(I, r);
								if (v != 0) {
									D = c / v;
									for (var N = 0; N < v; N++) {
										k = P.nextEls[N].getWidth() - 1;
										u = round((k + D) / d * 100, 2) + "%";
										m.push(u);
										P.nextEls[N].setStyle("width", u);
										B = P.nextEls[N].get("_for");
										y.get(B).set("x", u).setStyle("width", u);
										a.push(B)
									}
								}
							} else {
								if (v != 0) {
									for (var N = 0; N < P.nextEls.length; N++) {
										k = P.nextEls[N].getWidth() - 1;
										if (k <= z) {
											P.nextEls.splice(N, 1);
											N--
										} else {
											B = P.nextEls[N].get("_for");
											a.push(B)
										}
									}
								}
								v = P.nextEls.length;
								if (v != 0) {
									c = accSubtr(r, I);
									D = round(accDiv(c, v), 2);
									for (var N = 0; N < v; N++) {
										if (N == (v - 1)) {
											var G = P.nextEls[N].get("_for");
											P.items().each(function (n) {
												if (n.get("name") != G) {
													if (p == n.get("name")) {
														F = round(accAdd(g, F), 2)
													} else {
														if ($chk(n.get("x"))) {
															F = round(accAdd(F, n.get("x").substring(0, n.get("x").length - 1)), 2)
														}
													}
												}
											});
											u = round(accSubtr(l, F), 2);
											if (u <= t) {
												var w = round(accSubtr(t, u), 2);
												L = round(s / d * 100, 2);
												if (L > 0 && L != t && (L - w) > t) {
													L = accSubtr(L, w) + "%";
													m[M] = L;
													P.nextEls[M].setStyle("width", L);
													y.get(a[M]).set("x", L).setStyle("width", L)
												} else {
													if (J) {
														H = accSubtr(g, w);
														if (H <= t) {
															H = b
														}
														H = H + "%"
													}
												}
												u = t
											}
											u = u + "%"
										} else {
											k = P.nextEls[N].getWidth() - 1;
											u = accSubtr(k, D);
											if (u <= z) {
												u = z
											}
											if (s < u) {
												s = u;
												M = N
											}
											u = round(u / d * 100, 2) + "%"
										}
										m.push(u);
										P.nextEls[N].setStyle("width", u);
										y.get(a[N]).set("x", u).setStyle("width", u)
									}
								} else {
									if (f) {
										K = P.options.scrollX;
										K = parseInt(K.substring(0, K.length - 1)) + 50 + "%";
										P.options.scrollX = K;
										E = true;
										P.items().each(function (n) {
											if (p == n.get("name")) {
												F = round(accAdd(g, F), 2)
											} else {
												if ($chk(n.get("x"))) {
													F = round(accAdd(F, n.get("x").substring(0, n.get("x").length - 1)), 2)
												}
											}
										});
										if (l < F) {
											L = F - l;
											if (J) {
												H = g;
												H = accSubtr(H, L) + "%"
											}
										}
									} else {
										if (J) {
											H = b + "%"
										}
									}
								}
							}
							h.setStyle("width", H);
							P.dataDiv().getElements(".sGrid_data_row_item_div[name=" + h.get("_for") + "]").each(function (Q) {
								Q.setStyle("width", H);
								if (m.length != 0) {
									var Q = P.getNextShow(Q);
									var n = Q.get("name");
									for (var x = 0; x < m.length; ) {
										if (n == a[x]) {
											Q.setStyle("width", m[x]);
											x++
										}
										if (x != a.length) {
											Q = P.getNextShow(Q);
											n = Q.get("name")
										}
									}
								}
							});
							C.set("x", H);
							C.setStyle("width", H);
							if (P.hjRow) {
								if (E) {
									P.hjRow.setStyle("width", K)
								}
								fhjCell = P.hjRow.getElement("div[name='" + p + "']");
								fhjCell.setStyle("width", H);
								if (a.length != 0) {
									for (var N = 0; N < a.length; N++) {
										shjCell = P.hjRow.getElement("div[name='" + a[N] + "']");
										shjCell.setStyle("width", m[N])
									}
								}
							}
							P.buildX();
							O.setStyle("display", "none");
							if (Browser.Engine.trident4 || Browser.Engine.trident5) {
								P.getHeaderMaskDiv().setStyle("display", "none")
							}
						},
						onDrop : function (a, b) {},
						onCancel : function (a) {
							a.setStyle("display", "none")
						},
						onStart : function (b) {
							if (!Browser.Engine.trident4 && !Browser.Engine.trident5) {
								return
							}
							var a = b.stManager;
							a.getHeaderMaskDiv().setStyles({
								left : a.header().getPosition().x,
								top : a.header().getPosition().y,
								width : a.header().getWidth(),
								display : ""
							})
						}
					})
			}
			return this.borderDiv
		},
		getHeaderMaskDiv : function () {
			if (!this.headerMaskDiv) {
				this.headerMaskDiv = this.header().clone(false);
				this.headerMaskDiv.setStyles({
					position : "absolute",
					background : "white",
					border : 0,
					display : "none",
					height : this.header().getHeight(),
					opacity : 0.1
				});
				this.headerMaskDiv.inject(document.body)
			}
			return this.headerMaskDiv
		},
		buildHeadr : function () {
			if (this.options.showHeader == false || this.options.showHeader == "false") {
				this.header().setStyle("height", 0);
				this.header().setStyle("border", 0);
				this.header().setStyle("overflow", "hidden")
			}
			var a = this.getLastShowItemEl().get("name");
			this.items().each(function (q) {
				var b = q.get("name");
				var r = q.get("caption");
				var m = q.get("type");
				var p = q.get("allchk");
				var c = this.headerM.clone(false).set({
						_for : b,
						sortType : q.get("sortType") || "",
						type : m
					}).inject(this.header());
				if (q.get("x") == "0%" || m == "hidden") {
					c.setStyle("display", "none")
				}
				if (a == b) {
					c.setStyle("border-right", "none")
				}
				if (this.options.headerY != -1) {
					c.setStyles({
						height : this.options.headerY,
						"line-height" : (r && r.contains("<br>")) ? this.options.headerY / 2 : this.options.headerY
					})
				}
				if (m == "rowNum") {
					this.haveRowNum = true
				}
				if (m == "checkbox" && p != "false") {
					var g = new Element("input", {
							type : "checkbox",
							"class" : "sGrid_header_checkbox",
							events : {
								click : function (A) {
									var t = new Event(A).target;
									var s = t.get("checked");
									var y = this.dataDiv().getChildren("div[pageNum=" + this.pageNum() + "]"),
									C = y.length;
									if (this.isCP()) {
										q.set("userClicked", "true");
										q.set("checkAllFlag", "" + s)
									}
									if (C != 0) {
										var z = -1;
										var u = y[0].getChildren(),
										E = u.length;
										for (var x = 0; x < E; x++) {
											if (u[x].get("name") == b) {
												z = x;
												break
											}
										}
										if (z != -1) {
											for (var D = 0; D < C; D++) {
												var B = y[D].getChildren()[z].getFirst('input[name="' + b + '"][type="checkbox"]:not(:disabled)');
												if (B && !$chk(B.get("disabled"))) {
													B.set("checked", s);
													if (q.get("data") == "true") {
														this.updateCell(B.getParent(), s ? "1" : "0")
													}
												}
											}
										}
									}
									if (s && this.options.rowCheckValidator != false && this.options.rowCheckValidator != "false") {
										var F = this.getCheckedRow(b);
										if (F && F[0]) {
											var v = F[0].getElement(">.sGrid_data_row_item_checkbox:checked:not(:disabled)");
											if (v) {
												v.fireEvent("change", [v])
											}
										}
									}
									this.fireEvent("onAllCheckClick", [b, t])
								}
								.bind(this)
							}
						}).inject(c);
					if (this.options.headerY != -1) {
						g.setStyles({
							height : this.options.headerY,
							"line-height" : this.options.headerY
						})
					}
				}
				if (q.getAttribute("sort") != "false" && this.options.issort != "false") {
					if (!["checkbox", "button", "rowNum", "rowNumOnePage", "radio", "file2"].contains(m)) {
						if (!(q.get("tid") && q.get("type") != "a")) {
							c.addEvent("click", function (s) {
								this.sortColumn(b)
							}
								.bind(this));
							c.hoverClass("sGrid_header_item_div_hover")
						}
					}
				}
				if ((!["checkbox"].contains(m)) || (p == "false")) {
					var n = q.get("rule");
					var l = q.get("title") || r;
					var f = n ? n.contains("must") : false;
					new Element("div", {
						"class" : "sGrid_header_text_div",
						html : f ? "<span class='red'>*</span>" + r : r,
						title : l
					}).inject(c)
				}
				this.setItemX(q, c);
				if (this.options.dragWidth == true || this.options.dragWidth == "true") {
					if (["checkbox", "radio"].contains(m)) {}
					else {
						var h = new Element("div", {
								"class" : "sGrid_header_border_div"
							}).inject(c, "top");
						h.addEvent("mousedown", function (z) {
							var u = this.scrollDiv.getHeight();
							var B = c.getPosition().y;
							var t = c._getPosition().x;
							var s = this.getNextShow(c);
							var A = 0;
							var w = 0;
							this.nextEls = [];
							while (s) {
								this.nextEls.push(s);
								A = s.getWidth() - 10;
								w = Math.max(w, A);
								s = this.getNextShow(s)
							}
							var v = this.getBorderDiv();
							v.setStyles({
								height : u + "px",
								left : z.page.x,
								top : B,
								display : ""
							});
							v.headerItemDiv = c;
							v.stManager = this;
							v.drag.options.limit = {
								x : [t + this.options.minItemX / 1, z.page.x + w],
								y : [B, B]
							};
							v.drag.bound.start(z);
							z.stop()
						}
							.bind(this));
						h.addEvent("click", function (s) {
							s.stop()
						})
					}
				}
				if (q.get("show") == "false" || q.get("x") == 0) {
					c.set("show", "false");
					if (Browser.Engine.trident4) {
						c.setStyle("width", 0).setStyle("border", "0px").setStyle("height", 0)
					} else {
						c.setStyle("display", "none")
					}
				}
				if (q.get("type") == "select" && q.get("showVBC") == "true") {
					var d = q.get("dataName");
					var k = pageContainer.getInitDataByDataName(d);
					if ($chk(k)) {
						q.store("selectData", k)
					}
				}
			}
				.bind(this));
			if (this.options.dragColumn == true || this.options.dragColumn == "true") {
				new DragTable(this.header(), {
					clone : function (c, b, d) {
						return b.clone(false).set("name", null).setStyles({
							margin : "0px",
							position : "absolute",
							visibility : "hidden",
							width : b.getWidth(),
							height : b.getHeight(),
							border : "2px dotted black",
							"background-color" : "white",
							cursor : "move"
						}).inject(d).position(b.getPosition(b.getOffsetParent()))
					},
					revert : true,
					initialize : function () {},
					onStart : function (b) {
						b.addClass("sGrid_header_drag_start_div")
					},
					onSort : this.dragHeader.bind(this),
					onEnter : function (c, b) {
						b.addClass("sGrid_header_drag_enter_div")
					},
					onLeave : function (c, b) {
						b.removeClass("sGrid_header_drag_enter_div")
					}
				})
			}
			if ($chk(this.options.fzbtId)) {
				this.fzbtTable = $(this.options.fzbtId).addClass("sGrid_header_div");
				this.fzbtTable.set("style", "border-left:0px none;");
				this.fzbtTable.inject(this.options.sGrid_header_div, "before")
			}
			this.fireEvent("onAfterCreateHeader")
		},
		consoleInputRows : function () {
			if (!this.consoleInputRowsEl) {
				this.consoleInputRowsEl = new Element("input", {
						value : this.rows(),
						rule : "numberInt_must_contrast;>=1;<=50",
						msg : "大于0小于50的整数",
						styles : {
							width : 20
						}
					}).inject(this.consoleRows(), "after");
				this.vObj._add(this.consoleInputRowsEl);
				this.consoleInputRowsEl.addEvent("blur", function () {
					this.consoleRows().setStyle("display", "");
					this.consoleInputRowsEl.setStyle("display", "none");
					if (!this.vObj.validate(this.consoleInputRowsEl)) {
						this.vObj.clearElTip(this.consoleInputRowsEl);
						return
					}
					var a = this.consoleInputRowsEl.get("value") / 1;
					if (a == this.rows()) {
						return
					}
					this.options.rows = a;
					if (this.isServer()) {
						this.loadPage(1)
					} else {
						this.initData(this.options.gridData)
					}
				}
					.bind(this))
			}
			return this.consoleInputRowsEl
		},
		buildConsole : function () {
			this.autoInsertFunc = null;
			if (this.consoleItems()) {
				this.consoleItems().each(function (l, h) {
					var f = l.get("console");
					var d = l.get("tid");
					var a = l.get("ctrl");
					var c = l.get("check");
					var b = l.get("name");
					if (f == "delete") {
						var m = l.get("caption") || "删行";
						new Element("input", {
							"class" : "sGrid_console_item_button",
							type : "button",
							value : m,
							name : b,
							events : {
								click : function () {
									this.deleteRows({
										tid : d,
										ctrl : a,
										check : c,
										onSuccess : this.getFunc(l.get("onSuccess"))[0],
										onError : this.getFunc(l.get("onError"))[0],
										onDeleteAfter : this.getFunc(l.get("onDeleteAfter"))[0],
										postType : l.get("postType"),
										popMes : l.get("popMes"),
										delConfirm : l.get("delConfirm")
									})
								}
								.bind(this)
							}
						}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.options.sGrid_page_right)
					} else {
						if (f == "deleting") {
							var m = l.get("caption") || "删行";
							new Element("input", {
								"class" : "sGrid_console_item_button",
								value : m,
								type : "button",
								name : b,
								events : {
									click : function () {
										var p;
										if (!$defined(c)) {
											p = this.dataDiv().getChildren("div.sGrid_data_row_click_div:not([status=delete]):not([cache=true])")
										} else {
											p = this.dataDiv().getElements('div:not([status=delete]) div input[name="' + c + '"][type="checkbox"][checked]');
											if (p.length == 0) {
												p = this.dataDiv().getElements('div:not([status=delete]) div input[name="' + c + '"][type="radio"][checked]')
											}
										}
										if (p.length == 0) {
											swordAlert("请至少选择一行！");
											return
										}
										p.each(function (q) {
											this.deleting(q)
										}, this)
									}
									.bind(this)
								}
							}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.options.sGrid_page_right)
						} else {
							if (f == "insert") {
								var m = l.get("caption") || "增行";
								new Element("input", {
									"class" : "sGrid_console_item_button",
									value : m,
									type : "button",
									name : b,
									events : {
										click : function () {
											this.insertRow(this.getDataObjByInsertItem(l), this.combineItems(l), this.createNewRowNum(), null, l.get("where"))
										}
										.bind(this)
									}
								}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.options.sGrid_page_right);
								if (l.get("autoInsert") == "true") {
									this.autoInsertFunc = function () {
										this.insertRow(this.getDataObjByInsertItem(l), this.combineItems(l), this.createNewRowNum(), null, l.get("where"))
									}
								}
							} else {
								if (f == "treeInsertBrother") {
									var m = l.get("caption") || "添加兄弟节点";
									new Element("input", {
										"class" : "sGrid_console_item_button",
										value : m,
										type : "button",
										name : b,
										events : {
											click : function () {
												this.treeInsertBrother(this.getDataObjByInsertItem(l), this.combineItems(l), this.createNewRowNum())
											}
											.bind(this)
										}
									}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.options.sGrid_page_right);
									if (l.get("autoInsert") == "true") {
										this.autoInsertFunc = function () {
											this.treeInsertBrother(this.getDataObjByInsertItem(l), this.combineItems(l), this.createNewRowNum())
										}
									}
								} else {
									if (f == "treeInsertChild") {
										var m = l.get("caption") || "添加孩子结点";
										var n = function () {
											var q = 0;
											var s = this.getCheckedRow();
											if (s) {
												q = s.getElement("div[treeLevel]").get("treeLevel") / 1
											}
											var p = l.get("maxLevel") || -1;
											p = p / 1;
											if (p != -1 && q + 1 > p) {
												var r = l.get("maxMes") || "因为限制了增行的最大层数，所以不能在此处增行。";
												swordAlert(r);
												return
											}
											this.treeInsertChild(this.getDataObjByInsertItem(l), this.combineItems(l), this.createNewRowNum())
										}
										.bind(this);
										new Element("input", {
											"class" : "sGrid_console_item_button",
											value : m,
											type : "button",
											name : b,
											events : {
												click : function () {
													n()
												}
												.bind(this)
											}
										}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.options.sGrid_page_right);
										if (l.get("autoInsert") == "true") {
											this.autoInsertFunc = n
										}
									} else {
										if (f == "save") {
											var m = l.get("caption") || "保存";
											new Element("input", {
												"class" : "sGrid_console_item_button",
												value : m,
												name : b,
												type : "button",
												events : {
													click : function () {
														if (this.validate()) {
															if (l.get("onSubmitBefore")) {
																var p = this.getFunc(l.get("onSubmitBefore"))[0]();
																if (p == false) {
																	return
																}
															}
															var q = this.getReq({
																	tid : d,
																	ctrl : a,
																	widgets : [this.getStatusGirdData()]
																});
															var r = l.get("popMes") != "false";
															pc.postReq({
																req : q,
																postType : l.get("postType"),
																onSuccess : function (s) {
																	if (r) {
																		swordAlert("" + i18n.saveSuc)
																	}
																	this.commit();
																	if (l.get("onSuccess")) {
																		this.getFunc(l.get("onSuccess"))[0](q, s)
																	}
																}
																.bind(this),
																onError : function (s) {
																	if (r) {
																		this.alertError("" + i18n.saveFai)
																	}
																	if (l.get("onError")) {
																		this.getFunc(l.get("onError"))[0](q, s)
																	}
																}
																.bind(this)
															})
														}
													}
													.bind(this)
												}
											}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.options.sGrid_page_right)
										} else {
											if (f == "submitChecked") {
												var m = l.get("caption") || "" + i18n.save;
												var g = l.get("postType") == "download";
												new Element("input", {
													"class" : "sGrid_console_item_button",
													value : m,
													name : b,
													type : "button",
													events : {
														click : function () {
															var p = this.getItemElByName(c);
															if (this.isCP() && p.get("userClicked") == "true") {
																if (this.allInCache() || p.get("checkAllFlag") == "false") {
																	if (this.getCheckedEls(c).length == 0) {
																		this.alertError("" + i18n.gridInsert);
																		return
																	}
																}
															} else {
																if (this.getCheckedEls(c).length == 0) {
																	this.alertError("" + i18n.gridInsert);
																	return
																}
															}
															var q = this.getReq({
																	tid : d,
																	ctrl : a,
																	widgets : [this.getCheckedData(c)]
																});
															pageContainer.postReq({
																req : q,
																postType : l.get("postType"),
																onSuccess : function (r) {
																	if (l.get("onSuccess")) {
																		this.getFunc(l.get("onSuccess"))[0](q, r)
																	}
																}
																.bind(this),
																onError : function (r) {
																	if (l.get("onError")) {
																		this.getFunc(l.get("onError"))[0](q, r)
																	}
																}
																.bind(this)
															})
														}
														.bind(this)
													}
												}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.options.sGrid_page_right)
											} else {
												if (f == "curPageData" || f == "allData" || f == "allNoDeleteData") {
													var m = l.get("caption") || "" + i18n.save;
													new Element("input", {
														"class" : "sGrid_console_item_button",
														value : m,
														name : b,
														type : "button",
														events : {
															click : function () {
																var q;
																if (f == "curPageData") {
																	q = this.getCurPageGirdData()
																} else {
																	if (f == "allData") {
																		q = this.getAllGridData()
																	} else {
																		if (f == "allNoDeleteData") {
																			q = this.getAllNoDeleteGridData()
																		}
																	}
																}
																var p = this.getReq({
																		tid : d,
																		ctrl : a,
																		widgets : [q]
																	});
																pageContainer.postReq({
																	req : p,
																	postType : l.get("postType"),
																	onSuccess : function (r) {
																		this.commit();
																		if (l.get("onSuccess")) {
																			this.getFunc(l.get("onSuccess"))[0](p, r)
																		}
																	}
																	.bind(this),
																	onError : function (r) {
																		if (l.get("onError")) {
																			this.getFunc(l.get("onError"))[0](p, r)
																		}
																	}
																	.bind(this)
																})
															}
															.bind(this)
														}
													}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.options.sGrid_page_right)
												} else {
													if (f == "button") {
														var m = l.get("caption") || "" + i18n.button;
														new Element("input", {
															"class" : "sGrid_console_item_button",
															value : m,
															type : "button",
															name : b,
															events : {
																click : function () {
																	if (l.get("onClick")) {
																		this.getFunc(l.get("onClick"))[0]()
																	}
																}
																.bind(this)
															}
														}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.options.sGrid_page_right);
														if (l.get("autoInsert") == "true") {
															if (l.get("onClick")) {
																this.autoInsertFunc = this.getFunc(l.get("onClick"))[0]
															}
														}
													} else {
														if (f == "excel") {
															var m = l.get("caption") || "导出";
															new Element("input", {
																"class" : "sGrid_console_item_button",
																value : m,
																name : b,
																type : "button",
																events : {
																	click : function () {
																		var q = this.getGridExcelInfo();
																		var p = this.getReq({
																				tid : d,
																				ctrl : a,
																				widgets : q
																			});
																		pageContainer.postReq({
																			req : p,
																			postType : l.get("postType"),
																			onSuccess : function (r) {
																				this.commit();
																				if (l.get("onSuccess")) {
																					this.getFunc(l.get("onSuccess"))[0](p, r)
																				}
																			}
																			.bind(this),
																			onError : function (r) {
																				if (l.get("onError")) {
																					this.getFunc(l.get("onError"))[0](p, r)
																				}
																			}
																			.bind(this)
																		})
																	}
																	.bind(this)
																}
															}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.options.sGrid_page_right)
														} else {
															if (f == "up" || f == "down") {
																var k = "";
																if (f == "up") {
																	k = "上移"
																} else {
																	k = "下移"
																}
																new Element("input", {
																	"class" : "sGrid_console_item_button",
																	value : k,
																	type : "button",
																	name : b,
																	events : {
																		click : function () {
																			this.moveUpOrDownRow(f)
																		}
																		.bind(this)
																	}
																}).hoverClass("sGrid_console_item_button_hover").inject(this.toolpanel || this.options.sGrid_page_right)
															} else {
																throw new Error("gird[" + this.options.name + "]:SwordGrid无法处理控制台属性：" + f)
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}, this)
			}
			this.createConsolePageButton();
			if (this.isPage() && this.options.fenye != "false") {
				this.consoleRows().setStyles({
					cursor : "pointer",
					"text-decoration" : "underline",
					color : "blue"
				});
				this.consoleRows().addEvent("click", function () {
					this.consoleInputRows().setStyle("display", "");
					this.consoleInputRows().select();
					this.consoleRows().setStyle("display", "none")
				}
					.bind(this))
			}
			if (this.consoleButton_first) {
				this.consoleButton_first.addEvent("click", function () {
					if (this.pageNum() == 1) {
						swordAlert("" + i18n.gridFirst);
						return
					}
					this.loadPage(1)
				}
					.bind(this))
			}
			if (this.consoleButton_last) {
				this.consoleButton_last.addEvent("click", function () {
					if (this.pageNum() == this.totalPage()) {
						swordAlert("" + i18n.gridLast);
						return
					}
					this.loadPage(this.totalPage())
				}
					.bind(this))
			}
			if (this.consoleButton_next) {
				this.consoleButton_next.addEvent("click", function () {
					if (this.pageNum() + 1 > this.totalPage()) {
						swordAlert("" + i18n.gridLast);
						return
					}
					this.loadPage(this.pageNum() + 1)
				}
					.bind(this))
			}
			if (this.consoleButton_prev) {
				this.consoleButton_prev.addEvent("click", function () {
					if (this.pageNum() - 1 <= 0) {
						swordAlert("" + i18n.gridFirst);
						return
					}
					this.loadPage(this.pageNum() - 1)
				}
					.bind(this))
			}
			if (this.consoleButton_ok) {
				this.consoleButton_ok.addEvent("click", this.clickQueDing.bind(this))
			}
			this.fireEvent("onAfterCreateConsole", [this.console()])
		},
		deleteRows : function (k) {
			var p = k.popMes != "false";
			var l = k.delConfirm || ("" + i18n.gridDelConfirm);
			var x = k.delConfirm || ("" + i18n.gridDelConfirmTree);
			var t = k.tid;
			var n = k.ctrl;
			var v = k.check;
			var g = k.onSuccess;
			var h = k.onError;
			var y = k.onDeleteAfter;
			var m = k.postType;
			var d = this.getCheckedEls(v);
			if (!$chk(v)) {
				d = [this.getCheckedRow()];
				var w = this.getCheckedRow();
				if (w == null) {
					swordAlert("" + i18n.gridDelete);
					return
				}
				d = [w]
			} else {
				d = this.getCheckedEls(v);
				if (d.length == 0) {
					swordAlert("" + i18n.gridDelete);
					return
				}
			}
			if (this.options.type == "tree") {
				if (p) {
					if (!confirm("" + x)) {
						return
					}
				}
				if (d.length == 1) {
					var b = this.getRow(d[0]).getElement("[name=" + this.options.treeSignCol + "]");
					d.extend(this.treeGetAllChildCell(b))
				}
			} else {
				if (p) {
					if (!confirm(l)) {
						return
					}
				}
			}
			var u = [];
			d.each(function (B, z) {
				var A = this.deleting(B);
				if (A != null) {
					u[u.length] = A
				}
			}, this);
			if (u.length == 0) {
				if (y) {
					y()
				}
				return
			}
			if (!$chk(t)) {
				var f = null;
				var r = false;
				if (this.options.type == "tree") {
					var q = this.getRow(tempEls[0]).getElement("div[pcode]");
					if ($chk(q)) {
						var c = q.get("pcode");
						var s = this.dataDiv().getElements("[pcode=" + c + "]").length;
						f = this.getRow(tempEls[0]).getPrevious();
						if (s <= 1 && $chk(f)) {
							r = true
						}
					}
				}
				u.each(function (z) {
					if (z.get("status") == "insert") {
						this.deleteRow(z)
					}
					this.refreshConsole()
				}, this);
				if (r) {
					f.getElement("div[name='treeSignDiv']").removeClass("grid_sign_minus").addClass("grid_sign_leaf")
				}
				if (y) {
					y()
				}
				return
			}
			var a = this.getReq({
					tid : t,
					ctrl : n,
					widgets : [this.getRowsGirdData(u)]
				});
			pc.postReq({
				req : a,
				postType : m,
				onSuccess : function (C) {
					var D = null;
					var B = false;
					if (this.options.type == "tree") {
						var A = this.getRow(tempEls[0]).getElement("div[pcode]");
						if ($chk(A)) {
							var E = A.get("pcode");
							var z = this.dataDiv().getElements("[pcode=" + E + "]").length;
							D = this.getRow(tempEls[0]).getPrevious();
							if (z <= 1 && $chk(D)) {
								B = true
							}
						}
					}
					u.each(function (F) {
						this.deleteRow(F)
					}, this);
					if (B) {
						D.getElement("div[name='treeSignDiv']").removeClass("grid_sign_minus").addClass("grid_sign_leaf")
					}
					if (g) {
						g(a, C)
					}
				}
				.bind(this),
				onError : function (z) {
					u.each(function (A) {
						A.removeClass("sGrid_data_row_delete_div")
					}, this);
					if (h) {
						h(a, z)
					}
				}
				.bind(this)
			})
		},
		getCheckedData : function (h) {
			if (!$defined(h)) {
				var d = this.dataDiv().getChildren("div.sGrid_data_row_click_div");
				if (d.length <= 0) {
					return null
				}
				var g = this.getRowsGirdData(d);
				return g
			} else {
				var f = this.getItemElByName(h);
				if (this.isCP() && f.get("userClicked") == "true") {
					if (this.allInCache() || f.get("checkAllFlag") == "false") {
						return this.getRowsGirdData(this.getCheckedEls(h))
					} else {
						var b = new Array();
						for (var c = 1, a = this.totalPage(); c <= a; c++) {
							if (this.cachePages.contains(c) || c == this.pageNum()) {
								continue
							}
							b.extend(this.getOnePageData(c))
						}
						b.extend(this.getRowsData(this.getCheckedEls(h)));
						return {
							sword : this.options.sword,
							name : this.options.name,
							beanname : this.options.beanname,
							trs : b
						}
					}
				} else {
					return this.getRowsGirdData(this.getCheckedEls(h))
				}
			}
		},
		getCheckedRow : function (c) {
			if (!$defined(c)) {
				var a = this.dataDiv().getChildren(".sGrid_data_row_click_div");
				if (a.length <= 0) {
					return null
				}
				if (a[0].getStyle("display") == "none") {
					return null
				}
				return a[0]
			} else {
				var a = this.getCheckedEls(c);
				var b = [];
				a.each(function (d) {
					b[b.length] = this.getRow(d)
				}
					.bind(this));
				return b
			}
		},
		getCheckedRowData : function (c) {
			if (!$defined(c)) {
				var a = this.dataDiv().getChildren(".sGrid_data_row_click_div");
				if (a.length <= 0) {
					return null
				}
				var b = this.getOneRowData(a[0]);
				return b
			} else {
				return this.getCheckedData(c).trs
			}
		},
		combineItems : function (a) {
			this.insertItems = [];
			this.insertNewTpyes = [];
			this.insertNewRules = [];
			this.items().each(function (f) {
				var c = f.get("name");
				var d = a.getChildren(">div[name=" + c + "]")[0];
				var b = f.clone();
				if (d) {
					if (d.get("type") && d.get("type") != f.get("type")) {
						b.set("type", d.get("type"))
					}
					if (d.get("rule") && d.get("rule") != f.get("rule")) {
						b.set("rule", d.get("rule"))
					}
					if (d.get("disable") && d.get("disable") != f.get("disable")) {
						b.set("disable", d.get("disable"))
					}
				}
				if (f.get("act") && f.get("type") == "a") {
					b.set("act", "")
				}
				this.insertItems[this.insertItems.length] = b
			}, this);
			return this.insertItems
		},
		getDataObjByInsertItem : function (b) {
			var c = {};
			b.getChildren(">div").each(function (d) {
				var f = d.getAttribute("value");
				if (f) {
					c[d.get("name")] = {
						value : f
					}
				}
			});
			var a = {
				tds : c
			};
			return a
		},
		getRebuildButton : function () {
			return this.console().getElement(".sGrid_console_item_button_rebuild")
		},
		removeRebuildButton : function () {
			var a = this.getRebuildButton();
			if (a) {
				a.destroy()
			}
		},
		createRebuildButton : function () {
			return;
			if (this.options.fenye == "false") {
				return
			}
			if (this.getRebuildButton()) {
				return
			}
			var a = new Element("button", {
					"class" : "sGrid_console_item_button_rebuild",
					html : "重建此页",
					events : {
						click : function () {
							this.loadPage(this.pageNum())
						}
						.bind(this)
					}
				}).inject(this.options.sGrid_page_right);
			if (!window.tooltips) {
				window.tooltips = pageContainer.create("SwordToolTips");
				this.celltooltips = window.tooltips
			}
		},
		loadPage : function (b, a) {
			if (b <= 0 || b > this.totalPage()) {
				swordAlert("" + i18n.gridTarNotExist1 + b + i18n.gridTarNotExist2);
				return
			}
			this.addRowN = this.options.rows * (b - 1) + (this.insertRowN + 1);
			if (this.options.pageNum > b) {
				this.addRowN = this.addRowN - this.dataDiv().getElements(".sGrid_data_row_div[status='insert']").filter(function (c) {
						return c.get("pagenum") >= b
					}).length
			}
			if ($chk(a)) {
				this.addRowN = 1
			}
			this.options.lastPageNum = this.options.pageNum;
			this.options.pageNum = b;
			this.delayBuildData(null, a);
			this.getDataDivFxScroll().toTop();
			this.header().setStyle("top", 0);
			this.refreshConsole()
		},
		gethjD : function (a) {
			return this.hjDataOs.filter(function (b) {
				return b.name == a
			})[0]
		},
		getHj : function (b) {
			var p = 0;
			var h = function (v, u) {
				var t,
				s,
				c;
				try {
					t = v.toString().split(".")[1].length
				} catch (w) {
					t = 0
				}
				try {
					s = u.toString().split(".")[1].length
				} catch (w) {
					s = 0
				}
				c = Math.pow(10, Math.max(t, s));
				return (v * c + u * c) / c
			};
			var g = this.hjRow.getElement("div[name='" + b + "']");
			var r = g ? g.get("hjCheck") : null;
			var q = g.get("hjnum") ? g.get("hjnum") : 2;
			if (!r) {
				var a = this.gethjD(b);
				var l = this.hjDataOs.length > 0 && a ? a.value : 0;
				return l.toFixed(q)
			} else {
				var n = this.getCheckedRow(r);
				n.each(function (s) {
					s = s.getCell(b);
					var c = s.getParent("div.sGrid_data_row_div[status!='delete']");
					if (c) {
						var v = s.get("hjShowValue") ? "showvalue" : "realvalue";
						var t = s.get(v);
						if ($chk(t) && t.contains(",")) {
							t = t.replace(/,/g, "")
						}
						var u = s.getElement("input"),
						w = 0;
						if (u) {
							w = isNaN(parseFloat(u.get("value"))) ? 0 : parseFloat(t)
						} else {
							w = isNaN(parseFloat(s.get("html"))) ? 0 : parseFloat(t || s.get("html"))
						}
						p = h(p, w)
					}
				});
				var k = this.items();
				var f = false;
				for (var m = 0; m < k.length; m++) {
					var d = k[m];
					if (d.get("userClicked") == "true" && d.get("checkAllFlag") == "true") {
						f = true;
						break
					}
				}
				if (this.cache() && f) {
					this.data().each(function (u, t) {
						if (!this._inCache(t)) {
							var s = u.tds[b];
							if (s == undefined) {
								u.tds[b] = {};
								s = u.tds[b]
							}
							var c = s.value;
							if (!$chk(c)) {
								c = new String(0)
							}
							if (c.contains(",")) {
								c = c.replace(/,/g, "")
							}
							p = h(p, c)
						}
					}
						.bind(this))
				}
			}
			return p.toFixed(q)
		},
		getNoDeleteCells : function (a) {
			var b = [];
			this.dataDiv().getElements("div[name='" + a + "']").each(function (c) {
				if (c.getParent("div.sGrid_data_row_div[status!='delete']")) {
					b.push(c)
				}
			});
			return b
		},
		refreshConsole : function () {
			if (this.hjRow) {
				var d = function () {
					this.scrollHjRow();
					this.rereshHjRowData()
				};
				d.delay(100, this)
			}
			var b = this.totalRows() / 1;
			if (b == 0) {
				this.items().each(function (g) {
					if (g.get("userClicked") == "true" && g.get("checkAllFlag") == "true") {
						var f = this.getHeaderCheckboxByName(g.get("name"));
						if ($chk(f)) {
							f.set("checked", false);
							g.set("userClicked", "false");
							g.set("checkAllFlag", "false")
						}
					}
				}
					.bind(this))
			}
			var c = this.pageNum();
			var a = this.totalPage();
			this.consoleTotalRows().set("html", (this.options.treeRootNum == "true" && this.options.type == "tree") ? this.dataDiv().getElements("div.sGrid_data_row_item_div[treelevel=1]").length : b);
			if (this.options.fenye != "false") {
				if (b <= 0) {
					c = 1;
					a = 1
				}
				if (this.consolePage().get("tag") == "input") {
					this.consolePage().set("value", c)
				} else {
					this.consolePage().set("html", c)
				}
				this.consoleTotalPage().set("html", a);
				this.consoleRows().set("html", this.rows());
				this.removeRebuildButton()
			}
			if (this.options.fenye == "false") {
				return
			}
			if (b <= 0 || a == 1) {
				this.disableConsoleBtn(this.consoleButton_first, true);
				this.disableConsoleBtn(this.consoleButton_prev, true);
				this.disableConsoleBtn(this.consoleButton_next, true);
				this.disableConsoleBtn(this.consoleButton_last, true)
			} else {
				if (c == 1) {
					this.disableConsoleBtn(this.consoleButton_first, true);
					this.disableConsoleBtn(this.consoleButton_prev, true);
					this.disableConsoleBtn(this.consoleButton_next, false);
					this.disableConsoleBtn(this.consoleButton_last, false)
				} else {
					if (c == a) {
						this.disableConsoleBtn(this.consoleButton_first, false);
						this.disableConsoleBtn(this.consoleButton_prev, false);
						this.disableConsoleBtn(this.consoleButton_next, true);
						this.disableConsoleBtn(this.consoleButton_last, true)
					} else {
						this.disableConsoleBtn(this.consoleButton_first, false);
						this.disableConsoleBtn(this.consoleButton_prev, false);
						this.disableConsoleBtn(this.consoleButton_next, false);
						this.disableConsoleBtn(this.consoleButton_last, false)
					}
				}
			}
			this.consoleButton_first.removeClass("sGrid_console_item_button_hover");
			this.consoleButton_prev.removeClass("sGrid_console_item_button_hover");
			this.consoleButton_next.removeClass("sGrid_console_item_button_hover");
			this.consoleButton_last.removeClass("sGrid_console_item_button_hover")
		},
		disableConsoleBtn : function (b, a) {
			b.set("disabled", a);
			if (a) {
				b.addClass("sGrid_console_item_button_disabled")
			} else {
				b.removeClass("sGrid_console_item_button_disabled")
			}
		},
		setItemX : function (a, b) {
			b.setStyle("width", this.getItemX(a))
		},
		getItemX : function (a) {
			var b = a.get("x");
			if (!$chk(b)) {
				b = this.itemX()
			}
			b = "" + b;
			if (!(b.contains("%") || b.contains("px"))) {
				b += "px"
			}
			return b
		},
		doMask : function () {
			this.getMask().mask(this.sGrid_div())
		},
		doUnmask : function () {
			this.getMask().unmask()
		},
		delayBuildData : function (b, a) {
			this.doMask();
			this.buildData(b, a)
		},
		isCP : function () {
			return (this.cache() && this.isPage())
		},
		buildData : function (f, c) {
			this.clearData();
			if (!this.cachePages.contains(this.pageNum())) {
				this.cachePages.include(this.pageNum())
			}
			if (this.dataInCache()) {
				if (this.isCP()) {
					this.getHeaderCheckboxs_checked().set({
						checked : false,
						userClicked : "false",
						checkAllFlag : "false"
					});
					this.options.pNode.getChildren(">div:not([console])[name][type='checkbox']").set({
						checked : false,
						userClicked : "false",
						checkAllFlag : "false"
					})
				}
				var b = this.dataDiv().getChildren("div[pageNum=" + this.pageNum() + '][status!="delete"]');
				if (b.length > 0) {
					var d = b[0].getElement(".sGrid_data_row_item_rowNum");
					if (d && d.get("text") / 1 != this.addRowN) {
						b.each(function (g) {
							g.getElement(".sGrid_data_row_item_rowNum").set("text", this.addRowN++)
						}
							.bind(this))
					} else {
						var a = b[b.length - 1].getElement(".sGrid_data_row_item_rowNum");
						if (this.pageNum() == 1 && a) {
							this.addRowN = a.get("text") / 1 + 1
						}
					}
					b.setStyle("display", "").set("cache", "false")
				}
				this.buildXY();
				this.doUnmask()
			} else {
				if ($chk(c)) {
					this.sortPageData(this.buildData3.bind(this))
				} else {
					if (this.isPage()) {
						this.onePageData(this.buildData2.bind(this))
					} else {
						if ($chk(f)) {
							this.buildData2(f)
						} else {
							this.onePageData(this.buildData2.bind(this))
						}
					}
				}
			}
		},
		dataInCache : function () {
			if (!this.cache()) {
				return false
			}
			if (this.dataDiv().getChildren("div[pageNum=" + this.pageNum() + "]").length > 0) {
				return true
			}
			return false
		},
		getSignType : function (a, c) {
			var b;
			if (a > 0 || a == "all") {
				if (c.hasChildNodes()) {
					b = "minus"
				} else {
					b = "leaf"
				}
			} else {
				if (c.hasChildNodes()) {
					b = "plus"
				} else {
					b = "leaf"
				}
			}
			return b
		},
		createTree : function (d, b, g) {
			var f = null;
			if (b == "all") {
				if (d.getChildNodes().length == 0) {
					return
				}
				f = "all"
			} else {
				if (b == 0) {
					return
				}
				f = b - 1
			}
			var a = g.getElement("[name=treeSignDiv]").getParent();
			var c = a.get("treeLevel") / 1 + 1;
			a.set("childNodesCreated", true);
			d.getChildNodes().eachFromLast(function (m, l) {
				var h = this.getSignType(f, m);
				var k = m.node;
				var n = this.createTreeRow(k, k.rownum, m, c, h);
				n.inject(g, "after");
				this.createTree(m, f, n)
			}
				.bind(this))
		},
		createTreeRow : function (a, k, f, c, d, b, h) {
			if (!$defined(h)) {
				if (!this.treeItems) {
					this.treeItems = this.items()
				}
				h = this.treeItems
			}
			var l = this.createRow(k + 1, a, h, b);
			var g;
			if (this.options.treeSignCol) {
				g = l.getElement("[name=" + this.options.treeSignCol + "]")
			} else {
				g = l.getFirst()
			}
			g.set("treeLevel", c);
			g.set("signType", d);
			g.store("nodeIt", f);
			g.set("pcode", a.tds[this.options.treePcode]["value"]);
			g.set("code", a.tds[this.options.treeCode]["value"]);
			this.treeCell(g);
			if (b == "insert") {
				l.addClass("sGrid_data_row_insert_div")
			}
			return l
		},
		treeCell : function (a) {
			var d = a.get("treeLevel") / 1;
			var f = a.retrieve("nodeIt");
			var b = a.get("signType");
			var g = new Element("div", {
					"class" : "grid_sign_" + b,
					name : "treeSignDiv",
					events : {
						click : function (h) {
							this.treeClick(a, h);
							this.scrollHeader()
						}
						.bind(this)
					}
				});
			a.grab(g, "top");
			a.addClass("grid_sign_cell");
			for (var c = 1; c < d; c++) {
				a.grab(new Element("div", {
						"class" : "grid_sign_white"
					}), "top")
			}
		},
		treeClick : function (a, h) {
			if ($defined(h)) {}

			var g = a.get("signType");
			if (g == "leaf") {
				return
			}
			var f = a.getElement("[name=treeSignDiv]");
			var d = a.retrieve("nodeIt");
			var c = a.get("treeLevel") / 1;
			var b = a.get("childNodesCreated");
			if (b != "true") {
				if ($defined(d) && !d.hasChildNodes()) {
					return
				}
			}
			f.removeClass("grid_sign_" + g);
			if (g == "plus") {
				g = "minus"
			} else {
				g = "plus"
			}
			f.addClass("grid_sign_" + g);
			a.set("signType", g);
			if (g == "minus") {
				if (b != "true") {
					d.getChildNodes().eachFromLast(function (q, m) {
						var l = q.node;
						var p = this.createTreeRow(l, l.rownum, q, c + 1, this.getSignType(0, q));
						p.inject(this.getRow(a), "after");
						if (this.options.treeEffect == "true") {
							var k = p.getHeight();
							p.setStyle("opacity", 0);
							p.set("treeRealHeight", k);
							p.setStyle("height", 0);
							var n = new Fx.Tween(p, {
									onComplete : function () {
										p.tween("opacity", 1)
									}
								});
							n.start("height", k)
						}
					}
						.bind(this));
					a.set("childNodesCreated", true)
				} else {
					this.treeOpen(a)
				}
			} else {
				this.treeClose(a)
			}
			this.buildXY()
		},
		treeClose : function (a) {
			var b = a.get("code");
			this.dataDiv().getElements("[pcode=" + b + "]").each(function (d) {
				if (this.options.treeEffect == "true") {
					var f = this.getRow(d);
					var c = new Fx.Tween(f, {
							onComplete : function () {
								f.set("treeRealHeight", f.getHeight());
								var g = new Fx.Tween(f, {
										onComplete : function () {
											f.setStyle("display", "none")
										}
									});
								g.start("height", 0)
							}
						});
					c.start("opacity", 0)
				} else {
					if (Browser.Engine.trident4) {
						this.getRow(d).addClass("ieRemoveTreeBorder").getChildren().setStyles({
							display : "none"
						})
					} else {
						this.getRow(d).setStyle("display", "none")
					}
				}
				if (d.get("signType") == "minus") {
					this.treeClose(d)
				}
			}
				.bind(this))
		},
		treeOpen : function (a) {
			var b = a.get("code");
			this.dataDiv().getElements("[pcode=" + b + "]").each(function (c) {
				if (this.options.treeEffect == "true") {
					var f = this.getRow(c);
					f.setStyle("display", "");
					var d = new Fx.Tween(f, {
							onComplete : function () {
								f.tween("opacity", 1)
							}
						});
					d.start("height", f.get("treeRealHeight"))
				} else {
					if (Browser.Engine.trident4) {
						this.getRow(c).removeClass("ieRemoveTreeBorder").getChildren().setStyles({
							display : ""
						})
					} else {
						this.getRow(c).setStyle("display", "")
					}
				}
				if (c.get("signType") == "minus") {
					this.treeOpen(c)
				}
			}
				.bind(this))
		},
		treeGetAllChildCell : function (b) {
			this.treeClick(b);
			var a = [];
			var d = b.get("code");
			var c = this.dataDiv().getElements("[pcode=" + d + "]");
			a.extend(c);
			c.each(function (f) {
				a.extend(this.treeGetAllChildCell(f))
			}
				.bind(this));
			return a
		},
		buildData3 : function (d) {
			if (this.isCP()) {
				this.getHeaderCheckboxs_checked().set({
					checked : false,
					userClicked : "false",
					checkAllFlag : "false"
				});
				this.options.pNode.getChildren(">div:not([console])[name][type='checkbox']").set({
					checked : false,
					userClicked : "false",
					checkAllFlag : "false"
				})
			}
			if (true) {
				var b = this.getSwordSort();
				if ($chk(b.options.sortName)) {
					this.header().getChildren("div[issort=true]").each(function (f) {
						f.set("issort", "false");
						f.getElement(".sGrid_header_text_div").removeClass("sGrid_header_text_div_asc");
						f.getElement(".sGrid_header_text_div").removeClass("sGrid_header_text_div_desc")
					}, this);
					var a = b.options.sortFlag == "asc" ? "↑" : "↓";
					this.header().getChildren("div[_for=" + b.options.sortName + "]").each(function (f) {
						f.set("issort", "true");
						f.getElement(".sGrid_header_text_div").addClass("sGrid_header_text_div_" + b.options.sortFlag)
					}, this)
				}
			}
			if (!$chk(d)) {
				this.doUnmask();
				return
			}
			this.createRowItems = this.items();
			var c = this._getRender().render(d, this.createRowItems);
			this.lastBuildData()
		},
		buildData2 : function (d) {
			if (this.isCP()) {
				this.getHeaderCheckboxs_checked().set({
					checked : false,
					userClicked : "false",
					checkAllFlag : "false"
				});
				this.options.pNode.getChildren(">div:not([console])[name][type='checkbox']").set({
					checked : false,
					userClicked : "false",
					checkAllFlag : "false"
				})
			}
			if (true) {
				var b = this.getSwordSort();
				if ($chk(b.options.sortName)) {
					this.header().getChildren("div[issort=true]").each(function (f) {
						f.set("issort", "false");
						f.getElement(".sGrid_header_text_div").removeClass("sGrid_header_text_div_asc");
						f.getElement(".sGrid_header_text_div").removeClass("sGrid_header_text_div_desc")
					}, this);
					var a = b.options.sortFlag == "asc" ? "↑" : "↓";
					this.header().getChildren("div[_for=" + b.options.sortName + "]").each(function (f) {
						f.set("issort", "true");
						f.getElement(".sGrid_header_text_div").addClass("sGrid_header_text_div_" + b.options.sortFlag)
					}, this)
				}
			}
			if (!$chk(d)) {
				this.doUnmask();
				return
			}
			if (this.options.type == "tree") {
				d.each(function (g, f) {
					g.rownum = f
				}
					.bind(this));
				this.treeIt = SwordGrid.Iterator.newInstance(d, "jsonAptitude", {
						id : this.options.treeCode,
						pid : this.options.treePcode
					});
				this.treeIt.getRootNodes().eachFromLast(function (l, k) {
					var f = this.options.extendLayer == "all" ? "all" : this.options.extendLayer / 1;
					var g = this.getSignType(f, l);
					var h = l.node;
					var m = this.createTreeRow(h, h.rownum, l, 1, g);
					m.inject(this.dataDiv());
					this.createTree(l, f, m)
				}, this)
			} else {
				this.createRowItems = this.items();
				var c = this._getRender().render(d, this.createRowItems)
			}
			this.lastBuildData()
		},
		_getRender : function () {
			if (!this.render) {
				this.render = new SwordGridRender({
						gridObj : this
					})
			}
			return this.render
		},
		_addRowNum : function (a, c, b) {
			if (a.get("type") == "rowNum") {
				a.set("text", this.rows() * (this.pageNum() - 1) + (c - b))
			} else {
				if (a.get("type") == "rowNumOnePage") {
					a.set("text", c - b)
				}
			}
		},
		treeChildrenNodeData : function (d) {
			if (this.options.type == "tree") {
				var c = this.getCurPageGridData().trs;
				var f = [];
				for (var a = 0; a < c.length; a++) {
					var b = c[a].tds;
					if (b[this.options.treePcode].value == d) {
						f.include(b)
					}
				}
				return f
			}
		},
		treeChildrenNodeStatusData : function (f) {
			if (this.options.type == "tree") {
				var d = this.getCurPageGridData().trs;
				var a = new Array();
				for (var b = 0; b < d.length; b++) {
					var c = d[b].tds;
					if (c[this.options.treePcode].value == f) {
						a.push(d[b])
					}
				}
				return a
			}
		},
		lastBuildData : function () {
			this.buildXY();
			this.header().setStyle("top", "0px");
			this.doUnmask()
		},
		addGV : function (a) {
			if (a.getValue == undefined) {
				a.getValue = function (b) {
					var c = this.tds[b];
					if (!$defined(c)) {
						return null
					}
					return c.value
				}
			}
		},
		addCellApi : function (a, b, c) {
			a.setSuitableValue = function (g, f, d) {
				if (!["checkbox", "radio", "userdefine", "file2"].contains(a.get("type"))) {
					this.setText(a, g, f, d);
					if (!a.get("dateControl") || g != "") {
						a.set("title", g)
					}
					if (a.get("type") == "password") {
						a.set("title", this.dealPassword(g))
					}
				}
			}
			.bind(this)
		},
		setSuitableValue : function (a, c, b) {
			if (!["checkbox", "radio", "userdefine", "file2"].contains(a.get("type"))) {
				this.setText(a, c, b);
				if (!a.get("dateControl") || c != "") {
					a.set("title", c)
				}
				if (a.get("type") == "password") {
					a.set("title", this.dealPassword(c))
				}
			}
		},
		dealPassword : function (a) {
			return "●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●".substring(0, a.length)
		},
		addRowApi : function (a) {
			a.getCell = function (b) {
				return this.getFirst("div.sGrid_data_row_item_div[name=" + b + "]")
			};
			a.update = function (b) {
				this.updateRow(a, b)
			}
			.bind(this);
			a.disable = function (b) {
				this.cellDisable(a.getCell(b))
			}
			.bind(this);
			a.enable = function (b) {
				this.cellEnable(a.getCell(b))
			}
			.bind(this)
		},
		createRow : function (f, c, b, a, d) {
			if (!d) {
				d = this._getRender().renderRow(c, b, a, f)
			}
			return d
		},
		cellEnable : function (a) {
			if (!a) {
				return
			}
			a.set("disable", "false");
			if (a.get("type") == "checkbox") {
				a.getElement("input[type=checkbox]").set("disabled", false)
			}
			if (a.get("type") == "radio") {
				a.getElement("input[type=radio]").set("disabled", false)
			}
			if (a.get("type") == "a") {
				a.removeClass("sGrid_data_row_item_label").addClass("sGrid_data_row_item_a")
			}
			if (a.get("buttonEl") == "true") {
				a.removeClass("sGrid_data_row_itemdiv_button_disabled")
			} else {
				a.removeClass("sGrid_data_row_itemdiv_disabled")
			}
		},
		cellDisable : function (a) {
			if (!a) {
				return
			}
			a.set("disable", "true");
			if (a.get("type") == "checkbox") {
				a.getElement("input[type=checkbox]").set("disabled", true)
			}
			if (a.get("type") == "radio") {
				a.getElement("input[type=radio]").set("disabled", true)
			}
			if (a.get("type") == "a") {
				a.removeClass("sGrid_data_row_item_a").addClass("sGrid_data_row_item_label")
			}
			if (a.get("buttonEl") == "true") {
				a.addClass("sGrid_data_row_itemdiv_button_disabled")
			} else {
				a.addClass("sGrid_data_row_itemdiv_disabled")
			}
		},
		dealCellAct : function (m, f, n, c, k, d, a, l, g) {
			if (m == "a") {
				c.set("html", f);
				c.addClass("sGrid_data_row_item_a")
			} else {
				c.set("html", n.get("caption"));
				c.addClass("sGrid_data_row_itemdiv_button")
			}
			if (k == "delete") {
				var b = n.get("popMes") != "false";
				var q = n.get("delConfirm") || ("" + i18n.gridDelConfirm);
				c.addEvent("click", function () {
					if (c.get("disable") == "true") {
						return
					}
					if (b) {
						if (!confirm(q)) {
							return
						}
					}
					var r = this.deleting(c);
					if (r == null) {
						return
					}
					var s = this.getReq({
							tid : d,
							ctrl : a,
							widgets : [this.getOneRowGirdData(r)]
						});
					pc.postReq({
						req : s,
						postType : n.get("postType"),
						onSuccess : function (t) {
							this.deleteRow(r);
							if (n.get("onSuccess")) {
								this.getFunc(n.get("onSuccess"))[0](s, t)
							}
						}
						.bind(this),
						onError : function (t) {
							r.removeClass("sGrid_data_row_delete_div");
							if (n.get("onError")) {
								this.getFunc(n.get("onError"))[0](s, t)
							}
						}
						.bind(this)
					})
				}
					.bind(this))
			} else {
				if (k == "deleting") {
					var h = c.get("text");
					var p = n.get("cancel") || "" + i18n.cancel;
					c.set("deleteCaption", h);
					c.set("cancelCaption", p);
					c.addEvent("click", function () {
						if (c.get("disable") == "true") {
							return
						}
						var r = this.getRow(c);
						if (r.get("status") == "delete") {
							c.set("text", c.get("deleteCaption"));
							r.set("status", "");
							r.removeClass("sGrid_data_row_delete_div");
							return
						}
						if (r.get("status") != "insert") {
							c.set("text", c.get("cancelCaption"))
						} else {
							if (!confirm("" + i18n.gridInsertRowDel)) {
								return
							}
						}
						this.deleting(c)
					}
						.bind(this))
				} else {
					if (d || a) {
						c.addEvent("click", function () {
							if (c.get("disable") == "true") {
								return
							}
							var s = c.getParent(".sGrid_data_row_div");
							if (s.get("status") == "insert") {
								swordAlert("" + i18n.gridSaveAlert);
								return
							}
							var r = this.getReq({
									tid : d,
									ctrl : a,
									widgets : [this.getOneRowGirdData(c)]
								});
							pc.postReq({
								req : r,
								postType : n.get("postType"),
								onSuccess : function (t) {
									if (n.get("onSuccess")) {
										this.getFunc(n.get("onSuccess"))[0](r, t)
									}
								}
								.bind(this),
								onError : function (t) {
									if (n.get("onError")) {
										this.getFunc(n.get("onError"))[0](r, t)
									}
								}
								.bind(this)
							})
						}
							.bind(this))
					} else {
						if (l) {
							c.addEvent("click", function () {
								if (c.get("disable") == "true") {
									return
								}
								var s = c.getParent(".sGrid_data_row_div");
								if (s.get("status") == "insert") {
									swordAlert("" + i18n.gridSaveAlert);
									return
								}
								if (!g) {
									throw new Error("gird[" + this.options.name + "]:使用表格一行数组直接页面间跳转到form页面展现时候，必须设置有效的showRow属性，具体请参阅用户手册！")
								}
								var r = this.getOneRowFormData(c, g);
								pc.redirect.setData(r);
								pc.redirect.go(l)
							}
								.bind(this))
						}
					}
				}
			}
		},
		isVal : function () {
			return false
		},
		createCellEl : function (C, w, N, g, y) {
			var O = C.get("type");
			var p = C.get("act");
			var q = C.get("tid");
			var J = C.get("ctrl");
			var b = C.get("page");
			var F = C.get("name");
			var t = C.get("showRow");
			var H = C.get("msg");
			var L = y;
			if ($chk(H)) {
				L.set("msg", H)
			}
			if (["edit", "detail", "delete", "deleting"].contains(p)) {
				this.dealCellAct(O, w, C, L, p, q, J, b, t)
			} else {
				if ([null, "a", "lable", "label"].contains(O)) {
					L.addClass("sGrid_data_row_item_" + O);
					var A = w || "";
					if (C.get("format")) {
						A = sword_fmt.convertText(C, A).value
					}
					L.set({
						text : A,
						realvalue : w || "",
						title : A
					});
					var M = g.tds[F];
					if (M) {
						if (M.code) {
							L.set("code", M.code)
						}
					}
				} else {
					if (["rowNum"].contains(O)) {
						L.addClass("sGrid_data_row_item_" + O)
					} else {
						if (["rowNumOnePage"].contains(O)) {
							L.addClass("sGrid_data_row_item_" + O);
							L.set("html", N)
						} else {
							if (["text", "hidden", "file", "password"].contains(O)) {
								L.addClass("sGrid_data_row_item_" + O);
								var B = sword_fmt.convertText(C, w);
								var A = B.value;
								if ($defined(A) && $type(A) == "string" && (A.indexOf(">") != -1 || A.indexOf("<")) != -1) {
									A = (A.replace(/</g, "&lt;")).replace(/>/g, "&gt;")
								}
								L.set("html", A);
								L.set("title", A);
								L.set("realvalue", B.realvalue);
								L.set("showvalue", A);
								L.set("eventdele", "text");
								if (O == "password") {
									var k = this.dealPassword(A);
									L.set("html", k);
									L.set("title", k);
									L.set("showvalue", k);
									L.set("realvalue", k);
									L.store("realvalue", B.realvalue)
								}
							} else {
								if (["button"].contains(O)) {
									L.set("html", C.get("caption"));
									L.addClass("sGrid_data_row_itemdiv_button")
								} else {
									if (["checkbox", "radio"].contains(O)) {
										var u;
										if (this.isCP() && C.get("userClicked") == "true") {
											C.get("checkAllFlag") == "true" ? u = true : u = false
										} else {
											if (w == "true" || w == "1") {
												u = true
											} else {
												u = false
											}
										}
										L = new Element("input", {
												type : O,
												name : F,
												checked : u,
												value : w,
												"class" : "sGrid_data_row_item_checkbox"
											});
										L.set("eventdele", "checkbox");
										if (C.get("disable") == "true") {
											L.set("disabled", true)
										}
										L.inject(y)
									} else {
										if (O == "date") {
											L.addClass("sGrid_data_row_item_" + O);
											var m = this.getCalendar().getShowValue(C, w);
											var n = sword_fmt.convertText(L, m).value;
											if ($chk(w)) {
												L.set("realvalue", w)
											}
											L.set("html", n);
											L.set("title", n);
											L.set("showvalue", n);
											L.set("eventdele", "date");
											if (C.get("showCurDate") == "true") {
												var x = this.getCalendar().getRealValue(C, m);
												L.set("realvalue", x);
												g.tds[C.get("name")] = {
													value : x
												}
											}
											if ($defined(this.options.data)) {
												var h = this.options.data[N - 1];
												if ($chk(w) && $defined(h)) {
													var s = C.get("name");
													if ($chk(s)) {
														var K = h.tds[s];
														if ($defined(K)) {
															K.originValue = L.get("html")
														}
													}
												}
											}
										} else {
											if (O == "select") {
												L.addClass("sGrid_data_row_item_" + O);
												L.set("eventdele", "select");
												var M = w;
												if (g) {
													var E = g.tds[F];
													if (E) {
														E = E.lazydata;
														if (E) {
															M = E
														}
													}
												}
												var I = this.getSelect().dm2mc(C, M, L.getParent(".sGrid_data_row_div"));
												var c;
												if ($type(I) == "object") {
													L.set("html", I.caption);
													L.set("title", I.caption);
													L.set("code", I.code);
													L.set("caption", I.caption);
													c = I.code;
													L.set("realvalue", I.realvalue);
													L.store("allDb", I.allDb)
												} else {
													L.set("html", w);
													L.set("title", w);
													L.set("caption", w);
													L.set("code", w);
													L.set("realvalue", w);
													c = w
												}
												if ($defined(this.options.data)) {
													var h = g;
													if ($chk(c) && $defined(h)) {
														var s = C.get("name");
														if ($chk(s)) {
															var K = h.tds[s];
															if ($defined(K)) {
																K.originValue = c;
																K.value = I.realvalue || K.value;
																if (w && w.contains("|")) {
																	K.lazydata = w
																}
															}
														}
													}
												}
												L.store("space", L.getParent(".sGrid_data_row_div"))
											} else {
												if (O == "userdefine") {
													L.addClass("sGrid_data_row_item_" + O);
													L.set("html", C.get("html"))
												} else {
													if (O == "pulltree" || O == "pullbigtree") {
														L.addClass("sGrid_data_row_item_" + O);
														L.set("eventdele", O);
														var f = C.get("treename");
														L.set("treename", f);
														var D = $w(f);
														if (D.select && !D.select.hasOnSelectHide) {
															var a = D.select ? D.select : D;
															a.addEvent("onSelectHide", function (P) {
																D.options.pNode.inject(document.body);
																D.options.pNode.setStyle("display", "none");
																if (!this.targetCell) {
																	return
																}
																D.select.selBox.store("lastCell", this.targetCell);
																var Q = P.get("realvalue");
																var d = P.get("value");
																this.targetCell.set("realvalue", Q);
																this.targetCell.set("text", d);
																this.targetCell.set("title", d);
																this.updateCell(this.targetCell, Q, d, true);
																P.set("value", "");
																P.set("realvalue", "");
																this.targetCell = null;
																D.leaveSign = true
															}
																.bind(this));
															D.select.hasOnSelectHide = true
														}
														if (D.inGrid != true) {
															D.inGrid = true
														}
														if (D.initDataFlag != true) {
															D.initData(pc.getInitData(f));
															D.initDataFlag = true
														}
														if ($chk(w)) {
															if (w.contains("code") && w.contains("caption")) {
																var r = w.split("|");
																if (w.contains("codePath")) {
																	L.set("codePath", r[2].substring("codePath,".length))
																}
																var v = r[1].split(",")[1];
																L.set("text", v);
																L.set("title", v);
																var c = r[0].split(",")[1];
																L.set("realvalue", c);
																g.tds[C.get("name")].value = c
															} else {
																if (D.gridShow != true) {
																	D.select.show();
																	D.options.pNode.setStyle("display", "none");
																	D.select.hide();
																	D.gridShow = true;
																	this.addNextFocusEvent(D.select.selBox)
																}
																var z = [];
																var r = w.split(",");
																var G = [];
																r.each(function (d) {
																	var P = new Hash();
																	P.set(D.options.cascadeSign.id, d);
																	var Q = D.getTreeNode(P);
																	if ($chk(Q)) {
																		z.include(Q);
																		G.include(Q.get(D.options.displayTag))
																	}
																});
																var l = w;
																if (z) {
																	D.setSelectedNode(z)
																} else {
																	D.setSelectValue(w)
																}
																L.set("text", G);
																L.set("title", G);
																L.set("realvalue", l)
															}
														}
													} else {
														if (O == "file2") {
															this.createFile2(C, L, w, g)
														} else {
															throw new Error("grid[" + this.options.name + "]:SwordGrid不能处理这种类型的元素【" + C.get("type") + "】，请查看用户手册。")
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			return L
		},
		addNextFocusEvent : function (a, b) {
			a.addEvent("keydown", function (c) {
				var d = Event(c);
				if (d.key == "esc") {
					d.event.returnValue = false
				}
			});
			a.addEvent("keyup", function (h) {
				var m = Event(h);
				if (m.key == "esc" && this.options.noNextEvent) {
					var g = a.get("name");
					if (a.get("widget") == "calendar") {
						var l = pc.calendar;
						if (l) {
							l.hide();
							var c = l.dateInput;
							c.set("realvalue", c.value);
							if (c.get("oValue") != c.value) {
								var d = c.get("_onChange");
								if (d) {
									this.getFunc(d)[0](c, this)
								}
								c.set("oValue", c.value)
							}
						}
					}
					var k = a.get("rule");
					if ($chk(k)) {
						if (this.options.valfocus == "true" || this.vObj.validate(a)) {
							this.getFunc(this.options.noNextEvent)[0]()
						}
					} else {
						this.getFunc(this.options.noNextEvent)[0]()
					}
				}
				if (m.key == "enter" || m.key == "left" || m.key == "up" || m.key == "right" || m.key == "down") {
					var k = a.get("rule");
					var f = a.get("onAutoNextBefore");
					if (f) {
						this.getFunc(f)[0](this, a)
					}
					if ($chk(k)) {
						if (this.options.valfocus == "true" || this.vObj.validate(a)) {
							this.nextCell(a, h, b, m.key)
						}
					} else {
						this.nextCell(a, h, b, m.key)
					}
				}
			}
				.bind(this))
		},
		nextCell : function (x, v, m, w, s) {
			if (this.pauseEvent) {
				this.pauseEvent = false;
				return
			}
			this.autoScroll = true;
			var y;
			var b;
			if (x.hasClass("sGrid_data_row_item_div")) {
				y = x;
				b = x
			} else {
				y = x.getParent(".sGrid_data_row_item_div");
				b = x.getParent(".sGrid_data_row_item_div")
			}
			if (!y) {
				y = x.retrieve("lastCell")
			}
			if (x.get("onEnterPress") && !$chk(s)) {
				var u = this.getFunc(x.get("onEnterPress"));
				var t = u[0](x, v);
				if (t == false) {
					return
				}
			}
			var a;
			if (w == "right" || w == "enter" || (!$chk(w) && this.options.nextOrder == "row")) {
				a = this.findNextFocusInOneRow(y);
				while (!a) {
					var p = this.getRow(y).getNext();
					if (p == null && !$chk(s)) {
						if ($chk(w)) {
							try {
								if ($chk(this.autoInsertFunc)) {
									this.autoInsertFunc();
									var q = function (B, A, z, f) {
										this.nextCell(B, A, z, w, f)
									}
									.bind(this);
									q.delay(50, this, [y, v, m, "insert"]);
									v.target.blur()
								} else {
									if (this.options.noNextEvent) {
										this.getFunc(this.options.noNextEvent)[0]()
									}
								}
							} catch (v) {}

						}
						return
					}
					y = p.getFirst();
					var g = y.get("type");
					if (["text", "date", "select", "pulltree", "pullbigtree", "password"].contains(g) && y.get("disabled") != true && y.get("disable") != "true") {
						if (y.getStyle("display") != "none") {
							a = y
						}
					}
					if (!$chk(a)) {
						a = this.findNextFocusInOneRow(y)
					}
					if (a) {
						if (a.get("type") == "date" || a.get("type") == "pulltree" || a.get("type") == "pullbigtree") {
							this.nextRowScroll = true
						}
					}
				}
			} else {
				if (w == "down" || (!$chk(w) && this.options.nextOrder == "column")) {
					var d = this.getCells(y.get("name"));
					a = this.findNextFocusInOneColumn(y, d);
					while (!a) {
						y = y.getNext();
						if (y == null) {
							return
						}
						d = this.getCells(y.get("name"));
						a = this.findNextFocusInOneColumn(null, d)
					}
				} else {
					if (w == "left") {
						a = this.findPreviousFocusInOneRow(y);
						while (!a) {
							var p = this.getRow(y).getPrevious();
							if (p == null) {
								return
							}
							y = p.getLast();
							var g = y.get("type");
							if (["text", "date", "select", "pulltree", "pullbigtree", "password"].contains(g) && y.get("disabled") != true && y.get("disable") != "true") {
								if (y.getStyle("display") != "none") {
									a = y
								}
							}
							if (!$chk(a)) {
								a = this.findPreviousFocusInOneRow(y)
							}
							if (a) {
								if (a.get("type") == "date" || a.get("type") == "pulltree" || a.get("type") == "pullbigtree") {
									this.nextRowScroll = true
								}
							}
						}
					} else {
						if (w == "up") {
							var d = this.getCells(y.get("name"));
							a = this.findPreviousFocusInOneColumn(y, d);
							while (!a) {
								y = y.getPrevious();
								if (y == null) {
									return
								}
								d = this.getCells(y.get("name"));
								a = this.findPreviousFocusInOneColumn(null, d)
							}
						}
					}
				}
			}
			if (a) {
				this.dataDiv().getChildren(".sGrid_data_row_click_div").each(function (f) {
					f.removeClass("sGrid_data_row_click_div")
				});
				var k = this.getRow(a).addClass("sGrid_data_row_click_div");
				if (this.options.checkMoudle == "true") {
					this.dataDiv().getElements("input:not([disabled])[type=checkbox][checked]").set("checked", false);
					k.getElements("input:not([disabled])[type=checkbox]").set("checked", true);
					if (this.options.rowCheckValidator != false && this.options.rowCheckValidator != "false") {
						var n = k.getElements("input[type=checkbox]:checked:not([disabled])");
						n.fireEvent("change", [n])
					}
					var c = k.getElements("input:not([disabled])[type=radio]");
					c.set("checked", true);
					c.each(function (f) {
						this.radioSetChecked(f.getParent())
					}
						.bind(this));
					var r = this.dataDiv().getElements("input[type=checkbox]:not([checked])").length;
					if (r == 0) {
						this.getHeaderCheckboxs_noneChecked().set("checked", true)
					} else {
						this.getHeaderCheckboxs_checked().set("checked", false)
					}
				}
				if (pc.calendar) {
					pc.calendar.hide()
				}
				var l = a.get("tag") == "input" ? a : a.getElement("input[type=text]");
				if ($chk(l)) {
					try {
						l.focus();
						if (l.get("widget") == "calendar") {
							pc.calendar.show(l);
							l.focus();
							l.focus()
						}
					} catch (v) {}

				} else {
					var h = this.eDelegator._listener.get("click");
					if (h) {
						h.each(function (f) {
							if (f.condition.indexOf(a.get("eventdele")) > 0) {
								if (f.args) {
									f.fn(v, a, f.args)
								} else {
									f.fn(v, a)
								}
							}
						}, this)
					}
				}
			} else {
				if (this.options.noNextEvent) {
					this.getFunc(this.options.noNextEvent)[0]()
				}
			}
			this.autoScroll = false
		},
		findNextFocusInOneColumn : function (d, b) {
			var f = 0;
			if (d) {
				f = b.indexOf(d) + 1
			}
			while (f < b.length) {
				var a = b[f];
				var c = a.get("type");
				if (c == "date") {
					if (a.get("createCalendar") == "true") {
						return a.getElement("input") || a
					} else {
						return a
					}
				}
				if (["text", "date", "select", "pulltree", "pullbigtree", "password"].contains(c) && a.get("disabled") != true && a.get("disable") != "true" && a.getStyle("display") != "none") {
					return a
				} else {
					f++
				}
			}
			return null
		},
		findPreviousFocusInOneColumn : function (d, b) {
			var f = 0;
			if (d) {
				f = b.indexOf(d) - 1;
				if (f == -1) {
					return null
				}
			} else {
				if (f == 0) {
					f = b.length - 1
				}
			}
			while (f > -1) {
				var a = b[f];
				var c = a.get("type");
				if (c == "date") {
					if (a.get("createCalendar") == "true") {
						return a.getElement("input") || a
					} else {
						return a
					}
				}
				if (["text", "select", "pulltree", "pullbigtree", "password"].contains(c) && a.get("disabled") != true && a.get("disable") != "true" && a.getStyle("display") != "none") {
					return a
				} else {
					f--
				}
			}
			return null
		},
		findNextFocusInOneRow : function (c) {
			var a = c.getNext();
			while (a) {
				var b = a.get("type");
				if (["text", "select", "pulltree", "pullbigtree", "date", "password"].contains(b) && a.get("disabled") != true && a.get("disable") != "true") {
					if (a.getStyle("display") != "none") {
						if (b == "date") {
							if (a.get("createCalendar") == "true") {
								return a.getElement("input") || a
							} else {
								return a
							}
						} else {
							return a
						}
					}
				}
				a = a.getNext()
			}
		},
		findPreviousFocusInOneRow : function (c) {
			var a = c.getPrevious();
			while (a) {
				var b = a.get("type");
				if (["text", "date", "select", "pulltree", "pullbigtree", "password"].contains(b) && a.get("disabled") != true && a.get("disable") != "true") {
					if (a.getStyle("display") != "none") {
						return a
					}
				}
				a = a.getPrevious()
			}
		},
		deleteRow : function (b) {
			this.options.totalRows = this.options.totalRows - 1;
			this.insertRowN = this.insertRowN - 1;
			this.addRowN = this.addRowN - 1;
			var d = this.getRow(b);
			var c = d.retrieve("rowData");
			this.hjDataOs.each(function (g) {
				if (c.tds[g.name]) {
					var f = c.tds[g.name].value;
					if (f) {
						g.value = accSubtr(g.value, f)
					}
				}
			});
			d.destroy();
			var a = d.get("status");
			if (a != "insert") {
				c.status = "delete"
			}
			this.buildXY();
			this.scrollHeader();
			this.refreshConsole()
		},
		getOneRowFormData : function (b, a) {
			return {
				fromGird : "fromGird",
				data : [{
						sword : "SwordForm",
						name : a,
						data : this.getOneRowData(b)["tds"]
					}
				]
			}
		},
		getOneRowGirdData : function (a) {
			return {
				sword : this.options.sword,
				name : this.options.name,
				beanname : this.options.beanname,
				trs : [this.getOneRowData(a)]
			}
		},
		getRowsGirdData : function (b) {
			var a = new Array();
			b.each(function (c) {
				a.push(this.getOneRowData(c))
			}, this);
			return {
				sword : this.options.sword,
				name : this.options.name,
				beanname : this.options.beanname,
				trs : a
			}
		},
		getRowsGridData : function (a) {
			return this.getRowsGirdData(a)
		},
		getRowsData : function (b) {
			var a = new Array();
			b.each(function (c) {
				a.push(this.getOneRowData(c))
			}, this);
			return a
		},
		getRow : function (a) {
			if (a.hasClass("sGrid_data_row_div")) {
				return a
			}
			return a.getParent(".sGrid_data_row_div")
		},
		getRowNum : function (a) {
			return this.getRow(a).get("rowNum")
		},
		getRealRowNum : function (a) {
			var c = a;
			if ($type(a) == "element") {
				c = this.getRowNum(a)
			}
			if (c > this.initTotalRows()) {
				return c
			}
			var d = c;
			if (this.isPage()) {
				var b;
				if (this.cache()) {
					b = this.getRow(a).get("pageNum");
					if (!$chk(b)) {
						b = this.pageNum()
					}
				} else {
					b = this.pageNum()
				}
				d = (b - 1) * this.rows() + c / 1
			}
			return d
		},
		getOneRowData : function (a) {
			if (!$defined(a)) {
				return null
			}
			var h = this.getRow(a);
			if (!$chk(h)) {
				return
			}
			var b = h.get("status");
			var g;
			if (b == "insert") {
				g = this.getOneRowDataFromDiv(h);
				var f = h.retrieve("rowData").tds;
				for (var c in f) {
					var d = g.tds;
					if (!$defined(d[c])) {
						d[c] = {
							value : f[c]["value"]
						}
					}
				}
				g.getValue = function (k) {
					var l = this.tds[k];
					if (!$defined(l)) {
						return null
					}
					return l.value
				}
			} else {
				g = h.retrieve("rowData");
				if ($chk(g) && this.selPuls) {
					this.selPuls.each(function (k) {
						var m = k.name;
						var p = k.sbmitcontent;
						if ($chk(g.tds[m])) {
							var n = g.tds[m] ? g.tds[m].value : "";
							if (n && n.contains("|") && n.contains("code") && n.contains("caption")) {
								if ($type(n) == "string") {
									n = n.toHash()
								}
								var l = {};
								if ($type(n) == "hash") {
									n.each(function (r, q) {
										l[q] = r
									}, this)
								}
								g.tds[m].value = p.substitute(l)
							}
						}
					})
				}
				this.addGV(g)
			}
			return g
		},
		getOneRowDataFromDiv : function (a) {
			var c = this.getRow(a);
			var b = {
				tds : {},
				status : "insert"
			};
			c.getElements("*[name][dataEl=true]").each(function (d) {
				var h,
				k = {};
				var f = d.get("type");
				if (f != "hidden") {
					if (f == "checkbox" || f == "radio") {
						h = d.getElement("input[type=" + f + "]").get("checked") == true ? 1 : 0
					} else {
						if (["select", "pulltree", "pullbigtree", "text"].contains(f)) {
							h = d.get("realvalue")
						} else {
							if (f == "password") {
								h = d.retrieve("realvalue")
							} else {
								if (f == "file2") {
									var g = d.retrieve("up");
									if (g) {
										h = d.retrieve("up").getValue()
									} else {
										h = ""
									}
								} else {
									if ($chk(d.get("code"))) {
										k.code = d.get("code");
										h = d.get("text")
									} else {
										if ($chk(d.get("format"))) {
											h = d.get("realvalue")
										} else {
											h = d.get("text")
										}
									}
								}
							}
						}
					}
					k.value = h;
					b.tds[d.get("name")] = k
				}
			}, this);
			return b
		},
		createInput : function (b, c, a) {
			if (["checkbox", "radio"].contains(b)) {
				if (c == "true" || c == "1") {
					return new Element("input", {
						type : b,
						name : a,
						checked : true,
						value : c
					})
				}
			}
			return new Element("input", {
				type : b,
				value : c,
				name : a
			})
		},
		dragHeader : function (b, l, f, d) {
			f.removeClass("sGrid_header_drag_enter_div");
			b.removeClass("sGrid_header_drag_start_div");
			if (!this.dataDiv()) {
				return
			}
			var g = this.getLastShowItemEl().get("name");
			var n = b.get("_for");
			var k = f.get("_for");
			var c = this.getCells(n);
			var a = this.getCells(k);
			if (g == n) {
				c.each(function (q, p) {
					q.inject(a[p], d);
					q.setStyle("border-right", "");
					a[p].setStyle("border-right", "none")
				});
				b.setStyle("border-right", "");
				f.setStyle("border-right", "none")
			} else {
				if (g == k) {
					c.each(function (q, p) {
						q.inject(a[p], d);
						a[p].setStyle("border-right", "");
						q.setStyle("border-right", "none")
					});
					f.setStyle("border-right", "");
					b.setStyle("border-right", "none")
				} else {
					c.each(function (q, p) {
						q.inject(a[p], d)
					})
				}
			}
			var m = this.getItemElByName(n)[0];
			var h = this.getItemElByName(k)[0];
			m.inject(h, d)
		},
		getCells : function (f) {
			var h = [];
			var k = this.dataDiv().getChildren();
			if (k.length != 0) {
				var a = k[0].getChildren();
				var d = -1;
				for (var g = 0; g < a.length; g++) {
					if (a[g].get("name") == f) {
						d = g;
						break
					}
				}
				for (var b = 0; b < k.length; b++) {
					var l = k[b].getChildren()[d];
					if (l) {
						h.push(l)
					}
				}
			}
			return new Elements(h)
		},
		getHeaderEl : function (a) {
			return this.header().getChildren("div.sGrid_header_item_div[_for=" + a + "]")
		},
		gethjRowEl : function (a) {
			return $chk(this.hjRow) ? this.hjRow.getChildren("div.sGrid_hj_row_item_div[name=" + a + "]") : null
		},
		setHeaderCaption : function (b, a) {
			var d = this.getHeaderEl(b)[0];
			if (d) {
				var c = d.getElement("div.sGrid_header_text_div");
				if (c) {
					c.set("text", a)
				}
			}
		},
		sortPageData : function (c) {
			var b = this.getSwordSort();
			var a;
			if (b.options.sortName) {
				a = b.sort(b.getData(), {
						sortName : b.options.sortName,
						sortflag : b.options.sortFlag,
						type : b.options.sortType || "string"
					})
			}
			c(a);
			if (!this.cachePages.contains(this.pageNum())) {
				this.cachePages.include(this.pageNum())
			}
		},
		onePageData : function (d) {
			if (this.isServer()) {
				var c = JSON.decode(this.options.bizParams);
				c.pageNum = this.pageNum();
				c.rows = this.rows();
				c.queryType = "page";
				c.widgetname = this.options.name;
				var b = this.getSwordSort();
				c.sortName = b.options.sortName;
				c.sortFlag = b.options.sortFlag;
				if ($chk(this.options.ptid)) {
					c.ctrl = this.options.ptid
				}
				pc.postReq({
					req : c,
					onSuccess : function (g) {
						var h = this.getResData(this.options.name, g);
						this.setInitData(h, true);
						if (h.totalRows) {
							this.options.totalRows = h.totalRows;
							this.options.initTotalRows = h.totalRows
						}
						var f = this.getOnePageData(this.pageNum());
						d(f);
						this.refreshConsole()
					}
					.bind(this),
					loaddata : "widget",
					redirect : false
				});
				return
			} else {
				var b = this.getSwordSort();
				if (b.options.sortName) {
					b.sort(b.getData(), {
						sortName : b.options.sortName,
						sortflag : b.options.sortFlag,
						type : b.options.sortType || "string"
					})
				}
				var a;
				a = this.getOnePageData(this.pageNum());
				d(a);
				if (!this.cachePages.contains(this.pageNum())) {
					this.cachePages.include(this.pageNum())
				}
			}
		},
		getOnePageData : function (a) {
			var d = (a - 1) * this.rows();
			var b = d + this.rows() - 1;
			if (this.options.fenye == "false") {
				b = this.initTotalRows() - 1
			}
			var c = this.data().filter(function (g, f) {
					return f >= d && f <= b
				}
					.bind(this));
			return c
		},
		setInitData : function (d, c) {
			if ($chk(c) && c) {
				var b = d.trs.length;
				for (var a = 0; a < b; a++) {
					var f = (this.pageNum() - 1) * this.rows() + a;
					this.options.gridData.trs[f] = d.trs[a]
				}
			} else {
				this.options.gridData = d
			}
			this.options.data = this.options.gridData.trs
		},
		getSwordSort : function () {
			if (!this.swordSort) {
				this.swordSort = new SwordSort()
			}
			return this.swordSort
		},
		initData : function (a) {
			this.hjDataOs.each(function (c) {
				c.value = 0
			});
			this.insertRowN = 0;
			if (!this.options.ptid) {
				this.addRowN = 1
			} else {
				this.addRowN = (this.pageNum() - 1) * (this.options.rows / 1) + 1
			}
			this.clearData("all");
			if (!$chk(a)) {
				return
			}
			this.clearCache = true;
			this.setInitData(a);
			if (!$chk(this.data())) {
				return
			}
			if (a.totalRows >= 0) {
				this.options.fenyeType = "server";
				this.options.totalRows = a.totalRows;
				this.options.initTotalRows = a.totalRows;
				this.options.pageNum = a.pageNum;
				this.options.rows = a.rows;
				this.options.bizParams = a.bizParams;
				this.sortFlag = a.sortFlag || "";
				this.sortName = a.sortName || ""
			} else {
				this.options.fenyeType = "page";
				this.options.totalRows = this.data().length;
				this.options.initTotalRows = this.data().length;
				this.options.pageNum = 1;
				if (this.options.fenye == "false") {
					this.options.rows = this.options.totalRows
				}
			}
			this.delayBuildData(this.data());
			this.refreshConsole();
			this.clearCache = false;
			var b = this.getSwordSort();
			if ($chk(b.options.sortName)) {
				this.header().getChildren("div[issort=true]").each(function (c) {
					c.set("issort", "false");
					c.getElement(".sGrid_header_text_div").removeClass("sGrid_header_text_div_asc");
					c.getElement(".sGrid_header_text_div").removeClass("sGrid_header_text_div_desc")
				}, this)
			}
		},
		cache : function () {
			return !this.clearCache && this.options.cache == "true"
		},
		clearData : function (b) {
			if (!this.cache() || $defined(b)) {
				this.dataDiv().getChildren().each(function (c) {
					c.destroy()
				});
				this.removeAllError();
				this.cachePages = []
			} else {
				this.dataDiv().getChildren().setStyle("display", "none");
				this.dataDiv().getChildren("[cache=false]").set("cache", true);
				var a = this.dataDiv().getChildren(":not([cache])").set("cache", true);
				if (a.length > 0) {
					if (!this.cachePages.contains(this.options.lastPageNum)) {
						this.cachePages.include(this.options.lastPageNum)
					}
				}
			}
		},
		cachePages : [],
		haveYScroll : function () {
			var b = this.dataDiv();
			var d = $$(b.childNodes);
			if (d.length == 0) {
				return false
			}
			if (this.options.dataY == -1 && this.options.autoHeight != "true") {
				return false
			}
			var a = this.options.rows,
			c = this.options.dataY / 1;
			if (a > c || a * 24 > c) {
				return true
			}
			if (Browser.Engine.trident4) {
				return d[0].getFirst().getHeight() / 1 * d.length + d.length / 1 > b.getHeight()
			} else {
				return this.scrollDiv.getScrollHeight() > this.scrollDiv.getHeight()
			}
		},
		buildX : function (l) {
			var g = this.haveYScroll();
			var h = "" + this.options.scrollX;
			if (h.contains("%")) {
				if ($chk(this.options.fzbtId)) {
					document.getElementById(this.options.fzbtId).style.width = h
				} else {
					this.header().setStyle("width", h)
				}
				this.dataDiv().setStyle("width", h)
			} else {
				if (this.options.scrollX != -1) {
					if (h.contains("px")) {
						this.dataDiv().setStyle("width", h);
						this.header().setStyle("width", h)
					} else {
						this.dataDiv().setStyle("width", h + "px");
						this.header().setStyle("width", h + "px")
					}
				}
			}
			var f = "" + this.options.dataX;
			if (f.contains("%")) {
				if (f != "100%") {
					this.sGrid_div().setStyle("width", f)
				}
				return
			} else {
				if (this.options.dataX != -1) {
					if (f.contains("px")) {
						this.sGrid_div().setStyle("width", f)
					} else {
						this.sGrid_div().setStyle("width", f + "px")
					}
					return
				}
			}
			var b;
			if (l) {
				b = l
			} else {
				b = this.dataDiv().getElement(".sGrid_data_row_div")
			}
			var k;
			var c = 19;
			var d = 0;
			if (true) {
				b = this.header();
				k = b.getElements(".sGrid_header_item_div")
			} else {
				k = b.getElements(".sGrid_data_row_item_div")
			}
			var a = 0;
			k.each(function (m) {
				var n = m.getWidth();
				if (n > 0) {
					n--
				}
				a = a + n
			}, this);
			if (g) {
				a = a + c
			}
			if (Browser.Engine.trident) {
				a = a + d
			}
			this.sGrid_div().setStyle("width", a)
		},
		buildY : function () {
			if (this.options.dataY == -1) {
				var b = this.itemY() * this.rows() + this.rows();
				if (this.hjRow) {
					b = this.itemY() * (this.rows() + 1) + this.rows()
				}
				if (this.options.showHeader == true || this.options.showHeader == "true") {
					b += (this.options.headerY == -1 ? this.options.headerHeight + 1 : this.options.headerY / 1)
				} else {
					if ($chk(this.fzbtTable)) {
						b += this.fzbtTable.getHeight()
					}
				}
				var c = this.options.scrollX.toInt();
				var a = this.options.dataX.toInt();
				if ($type(this.options.scrollX) == "string" && this.options.scrollX.contains("%")) {
					if (c > 100) {
						b += 17
					}
				} else {
					if (c > a) {
						b += 17
					}
				}
				this.scrollDiv.setStyle("height", b + 1)
			} else {
				if (this.options.dataY != -1) {
					this.scrollDiv.setStyle("height", this.dataY())
				}
			}
		},
		buildXY : function (a) {
			this.buildX(a);
			this.buildY()
		},
		getDataDivFxScroll : function () {
			if (this.dataDivFxScroll == null) {
				this.dataDivFxScroll = new Fx.Scroll(this.scrollDiv);
				this.dataDivFxScroll.toBottom = function () {
					var a = function () {
						this.scrollDiv.scrollTop = this.scrollDiv.getScrollSize().y
					};
					a.delay(1, this)
				}
				.bind(this)
			}
			return this.dataDivFxScroll
		},
		createPanel : function (d, c) {
			var a = new Element("div", {
					"class" : "swordgird_panel_header"
				});
			new Element("div", {
				"class" : "swordgird_panel_header_1"
			}).inject(a);
			new Element("div", {
				"class" : "swordgird_panel_header_2"
			}).inject(a);
			var b = new Element("div", {
					"class" : "swordgird_panel_header_caption",
					title : c
				}).appendText(c).inject(a);
			this.collapseDiv = new Element("div", {
					"class" : "x-tool",
					title : "收缩",
					events : {
						click : function (f) {
							this.toggle()
						}
						.bind(this)
					}
				}).inject(a, "top");
			this.options.panel = a;
			a.inject(d)
		},
		createConsolePageButton : function () {
			if (this.options.consoleStyle == "button") {
				this.createConsolePageButton_buttonStyle()
			} else {
				if (this.options.consoleStyle == "image") {
					this.createConsolePageButton_imageStyle()
				}
			}
		},
		clickQueDing : function () {
			if (this.vObj.validate(this.sGrid_console_target_input)) {
				if (this.sGrid_console_target_input.get("value") / 1 == this.pageNum()) {
					swordAlert("" + i18n.gridGo);
					return
				}
				this.loadPage(this.sGrid_console_target_input.get("value") / 1);
				this.sGrid_console_target_input.focus()
			}
		},
		createConsolePageButton_imageStyle : function () {
			if (this.options.fenye != "false") {
				this.consoleButton_first = new Element("button", {
						"class" : "sGrid_console_item_button_first",
						html : "&nbsp",
						fenye : "true"
					}).inject(this.options.sGrid_page_right);
				this.consoleButton_prev = new Element("button", {
						"class" : "sGrid_console_item_button_prev",
						html : "&nbsp",
						fenye : "true"
					}).inject(this.options.sGrid_page_right);
				new Element("lable", {
					"class" : "sGrid_console_text_lable sGrid_console_text_lable_di",
					html : "" + i18n.gridDi
				}).inject(this.options.sGrid_page_right);
				this.options.sGrid_console_page_lable = new Element("input", {
						"class" : "sGrid_console_target_input",
						value : "0",
						rule : "numberInt_must",
						error : "" + i18n.gridGoErr,
						fenye : "true",
						name : this.options.name + "_sGrid_console_target_input",
						events : {
							keyup : function (a) {
								if (a.key == "enter") {
									this.clickQueDing()
								}
							}
							.bind(this)
						}
					}).inject(this.options.sGrid_page_right);
				this.sGrid_console_target_input = this.options.sGrid_console_page_lable;
				this.vObj._add(this.options.sGrid_console_page_lable);
				new Element("lable", {
					"class" : "sGrid_console_text_lable",
					html : "" + i18n.gridYeGong
				}).inject(this.options.sGrid_page_right);
				this.options.sGrid_console_totalPage_lable = new Element("lable", {
						"class" : "sGrid_console_text_lable",
						html : "0"
					}).inject(this.options.sGrid_page_right);
				new Element("lable", {
					"class" : "sGrid_console_text_lable sGrid_console_text_lable_ye",
					html : "" + i18n.gridYe
				}).inject(this.options.sGrid_page_right);
				this.consoleButton_next = new Element("button", {
						"class" : "sGrid_console_item_button_next",
						html : "&nbsp",
						fenye : "true"
					}).inject(this.options.sGrid_page_right);
				this.consoleButton_last = new Element("button", {
						"class" : "sGrid_console_item_button_last",
						html : "&nbsp",
						fenye : "true"
					}).inject(this.options.sGrid_page_right);
				new Element("lable", {
					"class" : "sGrid_console_text_lable sGrid_console_text_lable_mei",
					html : "" + i18n.gridMeiYeShow
				}).inject(this.options.sGrid_page_right);
				this.options.sGrid_console_rows_lable = new Element("lable", {
						"class" : "sGrid_console_text_lable",
						html : this.rows()
					}).inject(this.options.sGrid_page_right);
				new Element("lable", {
					"class" : "sGrid_console_text_lable sGrid_console_text_lable_tiao",
					html : "" + i18n.gridTiao
				}).inject(this.options.sGrid_page_right)
			}
			new Element("lable", {
				"class" : "sGrid_console_text_lable",
				html : "" + i18n.gridJsd
			}).inject(this.options.sGrid_page_left);
			this.options.sGrid_console_totalRows_lable = new Element("lable", {
					"class" : "sGrid_console_text_lable",
					html : 0
				}).inject(this.options.sGrid_page_left);
			new Element("lable", {
				"class" : "sGrid_console_text_lable sGrid_console_text_lable_lu",
				html : "" + i18n.gridJsdL
			}).inject(this.options.sGrid_page_left)
		},
		createConsolePageButton_buttonStyle : function () {
			if (this.options.fenye != "false") {
				this.consoleButton_first = new Element("input", {
						type : "button",
						"class" : "sGrid_console_item_button",
						value : i18n.firstPage,
						fenye : "true"
					}).hoverClass("sGrid_console_item_button_hover").inject(this.options.sGrid_page_right);
				this.consoleButton_prev = new Element("input", {
						type : "button",
						"class" : "sGrid_console_item_button",
						value : i18n.previousPage,
						fenye : "true"
					}).hoverClass("sGrid_console_item_button_hover").inject(this.options.sGrid_page_right);
				this.consoleButton_next = new Element("input", {
						type : "button",
						"class" : "sGrid_console_item_button",
						value : i18n.nextPage,
						fenye : "true"
					}).hoverClass("sGrid_console_item_button_hover").inject(this.options.sGrid_page_right);
				this.consoleButton_last = new Element("input", {
						type : "button",
						"class" : "sGrid_console_item_button",
						value : i18n.endPage,
						fenye : "true"
					}).hoverClass("sGrid_console_item_button_hover").inject(this.options.sGrid_page_right);
				this.options.sGrid_console_page_lable = new Element("lable", {
						"class" : "sGrid_console_text_lable",
						html : "0"
					}).inject(this.options.sGrid_page_right);
				new Element("lable", {
					"class" : "sGrid_console_text_lable",
					html : "/"
				}).inject(this.options.sGrid_page_right);
				this.options.sGrid_console_totalPage_lable = new Element("lable", {
						"class" : "sGrid_console_text_lable",
						html : "0"
					}).inject(this.options.sGrid_page_right);
				new Element("lable", {
					"class" : "sGrid_console_text_lable",
					html : "" + i18n.gridYe
				}).inject(this.options.sGrid_page_right);
				this.sGrid_console_target_input = new Element("input", {
						"class" : "sGrid_console_target_input",
						rule : "numberInt_must",
						error : "" + i18n.gridGoErr,
						name : this.options.name + "_sGrid_console_target_input",
						fenye : "true"
					}).addEvent("keydown", function (c) {
						var b = c.target.value / 1;
						if (!$type(b)) {
							return
						}
						if (c.code == 13) {
							this.clickQueDing()
						} else {
							if (c.code == 40) {
								if (b == 1) {
									return
								}
								c.target.value = b - 1
							} else {
								if (c.code == 38) {
									if (b == this.totalPage()) {
										return
									}
									c.target.value = b + 1
								}
							}
						}
					}
						.bind(this)).inject(this.options.sGrid_page_right);
				var a = new Element("div", {
						"class" : "sGrid_console_target_ok",
						name : this.options.name + "_sGrid_console_submit_input",
						html : "确定"
					}).addEvent("click", function (c) {
						var b = this.sGrid_console_target_input.get("value") / 1;
						if (!$type(b)) {
							return
						}
						this.clickQueDing()
					}
						.bind(this)).inject(this.options.sGrid_page_right);
				if (Browser.Engine.trident4 || Browser.Engine.trident5) {
					a.addClass("sGrid_console_target_ok_IE6_7")
				}
				this.vObj._add(this.sGrid_console_target_input);
				new Element("lable", {
					"class" : "sGrid_console_text_lable",
					html : "" + i18n.gridMeiYe
				}).inject(this.options.sGrid_page_left);
				this.options.sGrid_console_rows_lable = new Element("lable", {
						"class" : "sGrid_console_text_lable",
						html : this.rows()
					}).inject(this.options.sGrid_page_left);
				new Element("lable", {
					"class" : "sGrid_console_text_lable",
					html : "" + i18n.gridTiao
				}).inject(this.options.sGrid_page_left)
			}
			new Element("lable", {
				"class" : "sGrid_console_text_lable",
				html : "" + i18n.gridGong,
				styles : {
					"padding-left" : "5px"
				}
			}).inject(this.options.sGrid_page_left);
			this.options.sGrid_console_totalRows_lable = new Element("lable", {
					"class" : "sGrid_console_text_lable",
					html : 0
				}).inject(this.options.sGrid_page_left);
			new Element("lable", {
				"class" : "sGrid_console_text_lable",
				html : "" + i18n.gridTiao
			}).inject(this.options.sGrid_page_left)
		},
		tableCellTip : function (c, a, b) {
			if ($chk(c.get("tipTitle"))) {
				if (!window.tooltips) {
					window.tooltips = pageContainer.create("SwordToolTips");
					this.celltooltips = window.tooltips
				}
				var d = c.get("tipTitle");
				this.celltooltips.createTip(a, d)
			}
		},
		textClick : function (b, m, h, a, l) {
			var k = b.get("rule");
			var d = b.get("msg");
			var f;
			if (b.get("disable") == "true" || b.get("disabled") == true) {
				return
			}
			var p = b.get("realvalue");
			if (h == "password") {
				p = b.retrieve("realvalue")
			}
			var g = b.get("createInput");
			if (g == "true") {
				f = b.getFirst()
			}
			if (!$chk(f)) {
				b.set("html", "");
				f = this.createInput(h, p, a).inject(b).addEvent("blur", function () {
						if ($chk(k)) {
							f.set("value", f.get("value").trim());
							var u = this.vObj.validate(f);
							if (u) {
								this.dealTextValRight(b, f, m, p)
							} else {
								if (b.get("realvalue") != "" && b.get("realvalue") != null) {
									if (this.hjRow && this.gethjD(a)) {
										var r = b.get("realvalue") ? b.get("realvalue") / 1 : 0;
										var q = accSubtr(this.getHj(a), r);
										if ($type(q) == "number" && this.hjDataOs.length > 0) {
											this.gethjD(a).value = q;
											this.rereshHjRowData()
										}
									}
									b.setProperties({
										realvalue : "",
										title : "",
										showvalue : "",
										value : ""
									});
									var s = b.getParent("div.sGrid_data_row_div");
									if (s) {
										var t = s.retrieve("rowData");
										t.tds[a] = {
											value : ""
										}
									}
								}
							}
						} else {
							this.dealTextValRight(b, f, m, p)
						}
					}
						.bind(this));
				this.addNextFocusEvent(f)
			}
			this.tableCellTip(b, f, a);
			if ($chk(k)) {
				f.set("rule", k)
			}
			if ($chk(b.get("maxLength"))) {
				f.set("maxlength", b.get("maxLength"))
			}
			if ($chk(d)) {
				f.set("msg", d)
			}
			f.set("onAutoNextBefore", b.get("onAutoNextBefore"));
			f.addClass("sGrid_data_row_item_text_input");
			f.setStyle("width", b.getWidth());
			f.setStyle("float", "left");
			b.set("createInput", "true");
			if (m.get("onEnterPress")) {
				f.set("onEnterPress", m.get("onEnterPress"))
			}
			if (m.get("onfocus")) {
				f.set("onfocus", m.get("onfocus"))
			}
			f.focus();
			f.focus();
			if (g != "true") {
				f.select()
			}
			var c = f.get("value");
			var n = sword_fmt.convertText(m, c).value;
			if ($defined(k) && k.contains("must")) {
				f.setStyle("background-color", "#fffadb")
			}
			if (m.get("_onClick")) {
				this.getFunc(m.get("_onClick"))[0](c, n, this.getOneRowData(b), b, this.getRow(b), p)
			}
		},
		dealTextValRight : function (c, d, k, l) {
			c.set("createInput", "false");
			var h = d.get("value").trim();
			var g = sword_fmt.convertText(k, h).value.trim();
			var f = this.getOneRowData(c),
			a = c.get("name"),
			b = f.tds[a] ? f.tds[a].value / 1 : "";
			c.set("realvalue", h);
			c.set("showvalue", g);
			if (f.status == "insert") {
				if (this.hjRow && this.gethjD(a)) {
					this.gethjD(a).value = accAdd(accSubtr(this.getHj(a), b), h)
				}
			}
			this.updateCell(c, h);
			if (k.get("_onBlur")) {
				this.getFunc(k.get("_onBlur"))[0](h, g, this.getOneRowData(c), c, this.getRow(c), l || "", this);
				this.refreshConsole()
			}
			this.celltooltips.hide();
			d.destroy()
		},
		reset : function () {
			if (this.options.data) {
				this.options.data = null
			}
			this.options.sGrid_data_div.empty();
			this.insertRowN = 0;
			if (!this.options.ptid) {
				this.addRowN = 1
			} else {
				this.addRowN = (this.pageNum() - 1) * (this.options.rows / 1) + 1
			}
			this.removeAllError();
			this.cachePages = [1];
			this.hjDataOs.each(function (a) {
				a.value = 0
			});
			this.options.totalRows = 0;
			this.options.initTotalRows = 0;
			this.options.pageNum = 1;
			this.refreshConsole();
			this.scrollHeader()
		},
		readonlyDiv : null,
		readonly : function () {
			var f = this;
			f.header().getElements("input[type=checkbox]").set("disabled", "true");
			f.console().getElements("input[type=button]:not([fenye=true])").each(function (g) {
				f.disableConsoleBtn(g, true)
			});
			var c = f.dataDiv();
			var b = c.measure(function () {
					return this.getSize()
				});
			var a = b.x;
			var l = this.header().measure(function () {
					return this.getSize()
				});
			var k = b.y;
			if (Browser.Engine.trident4) {
				k = b.y - (this.header().getStyle("height") ? this.header().getStyle("height").split("px")[0] : 0)
			}
			var d = k;
			if (d < 0) {
				d = 0
			}
			if (a < 0) {
				a = 0
			}
			if (f.readonlyDiv) {
				f.readonlyDiv.setStyles({
					display : "",
					width : a,
					height : d,
					"margin-top" : -k
				});
				return
			}
			f.readonlyDiv = c.clone(false).setStyles({
					"background-color" : "white",
					"margin-top" : -k,
					height : d,
					opacity : 0.2,
					width : a,
					border : "none",
					"float" : "left"
				}).inject(c, "after");
			if (Browser.Engine.trident4 || Browser.Engine.trident5) {
				f.readonlyDiv.setStyle("position", "relative")
			}
		},
		editable : function () {
			var a = this;
			if (a.readonlyDiv) {
				a.readonlyDiv.setStyle("display", "none")
			}
			a.header().getElements("input[type=checkbox][disabled]").removeProperty("disabled");
			a.console().getElements("input[type=button][disabled]:not([fenye=true])").each(function (b) {
				a.disableConsoleBtn(b, false)
			})
		},
		getAllGridShowData : function (c, b) {
			var a = [];
			if (!c) {
				c = this.getExcelItems()
			}
			var d = ($defined(b)) ? this.getCheckedData(b).trs : this.data();
			d.each(function (g, h) {
				if (!$chk(g)) {
					return
				}
				if (g.status == "delete") {
					return
				}
				var f = {
					tds : {}

				};
				a.push(f);
				c.each(function (w) {
					var k = w.get("name");
					var r = w.get("type");
					var s = w.get("format");
					var t = g.tds[k];
					if (t) {
						t = t.value;
						if (!$defined(t)) {
							return
						}
						if (s) {
							t = sword_fmt.convertText(w, t).value
						} else {
							if (r == "date") {
								t = this.getCalendar().getShowValue(w, t)
							} else {
								if (r == "select") {
									if (w.get("showVBC") == "true") {
										var p = w.retrieve("selectData");
										var n = this.getSelect().dm2mc(w, t, null, p.data);
										t = n.caption;
										if ($type(n) == "string") {
											t = n
										}
									} else {
										var n = this.getSelect().dm2mc(w, t);
										t = n.caption;
										if ($type(n) == "string") {
											t = n
										}
									}
								} else {
									if (r == "pulltree" || r == "pullbigtree") {
										if (t.contains("code") && t.contains("caption")) {
											var u = t.split("|");
											t = u[1].split(",")[1]
										} else {
											var m = $w(w.get("treename"));
											var q = new Hash();
											q.set(m.options.cascadeSign.id, t);
											var l = m.getTreeNode(q);
											if (l) {
												t = l.get("caption")
											}
										}
									}
								}
							}
						}
						f.tds[k] = {
							value : t
						}
					}
				}, this)
			}, this);
			return {
				sword : this.options.sword,
				name : this.options.name,
				beanname : this.options.beanname,
				trs : a
			}
		},
		getExcelItems : function () {
			return this.options.pNode.getChildren(">div[name]:not([console]):not([show=false]):not([type=checkbox]):not([type=radio]):not([type=button]):not([act]):not([type=rowNum])")
		},
		getExcelItem : function (a) {
			return this.options.pNode.getChildren(">div[name=" + a + "]:not([console]):not([show=false]):not([type=checkbox]):not([type=radio]):not([type=button]):not([act])")
		},
		getGridExcelInfo : function (b) {
			var c = this.getExcelItems();
			var g = this.getAllGridShowData(c, b);
			var k = {};
			var f = {
				beanname : "",
				sword : "SwordForm",
				name : this.options.name + "_headerInfo",
				data : k
			};
			var h = {};
			var a = {
				beanname : "",
				sword : "SwordForm",
				name : this.options.name + "_headerIndex",
				data : h
			};
			c.each(function (m, l) {
				var d = m.get("name");
				k[d] = {
					value : m.get("caption")
				};
				h[l + ""] = {
					value : d
				}
			}, this);
			return [g, f, a]
		},
		getAllNoDeleteGridData : function () {
			var b = this.getCurPageGirdData();
			if (this.totalPage() > 1 && this.options.cache == "true" && this.options.type != "tree" && !this.isServer()) {
				this.data().each(function (d, c) {
					if (d.init != "load") {
						d.getValue = this.render._getValue;
						b.trs.push(d)
					}
				}, this)
			}
			var a = b.trs.filter(function (c) {
					if (c.status != "delete") {
						return true
					}
				});
			return {
				sword : this.options.sword,
				name : this.options.name,
				beanname : this.options.beanname,
				trs : a
			}
		},
		_itemSwitch : function (b, d, l, k) {
			if (!$chk(b) || !$chk(d)) {
				return
			}
			var c = k || this.getCheckedRow();
			var h = c.getCell(b).set("type", d);
			if (l) {
				if (l.css) {
					l.css.split(";").each(function (n, m) {
						h.setStyle(n.split(":")[0], n.split(":")[1])
					})
				}
				h.set(l)
			}
			var a = h.clone(false).set("switched", "true").inject(h, "before");
			h.destroy();
			var g = this.getExcelItem(b)[0];
			var f = g.clone().set("type", d).inject(g, "before");
			f.set(l);
			this.addCellApi(a, f, d);
			this.createCellEl(f, "", this.getRowNum(c), this.getOneRowData(a), a);
			g.destroy()
		},
		insertColumn : function (h, g) {
			if ($chk(h.name)) {
				var b = new Element("div").set(h);
				var d = this.getLastShowItemEl();
				d.setStyle("border-right", "");
				b.inject(d, "after").setStyle("border-right", "none");
				this.options.sGrid_div.destroy();
				this.intiItems = false;
				this.options = $extend(this.options, g);
				this.initParam(this.options.pNode);
				if ($chk(h.value)) {
					var f = this.options.gridData.trs;
					for (var a = 0; a < f.length; a++) {
						if (!$chk(f[a])) {
							continue
						}
						var c = f[a].tds;
						c[h.name] = {
							value : h.value
						}
					}
				}
				this.initData(this.options.gridData)
			} else {
				swordAlert("请定义新增列的name属性!")
			}
		},
		getCurPageRowByCellValue : function (c, b) {
			var a = this.dataDiv().getElement("div.sGrid_data_row_item_div[realvalue=" + b + "][name=" + c + "]");
			if (a) {
				return this.getRow(a)
			}
		},
		toggle : function () {
			if (this.collapseDiv.hasClass("x-tool-s")) {
				this.extendTable()
			} else {
				this.collapseTable()
			}
		},
		collapseTable : function () {
			var a = this.sGrid_div().getChildren("div[sword=SwordToolBar][bindto=" + this.options.name + "]")[0];
			if (a) {
				a.setStyle("display", "none")
			}
			this.scrollDiv.setStyle("display", "none");
			if (this.options.showConsole == "true") {
				this.console().setStyle("display", "none")
			}
			if (this.toolpanel) {
				this.toolpanel.setStyle("display", "none")
			}
			this.collapseDiv.set("title", "展开");
			this.collapseDiv.addClass("x-tool-s")
		},
		extendTable : function () {
			var a = this.sGrid_div().getChildren("div[sword=SwordToolBar][bindto=" + this.options.name + "]")[0];
			if (a) {
				a.setStyle("display", "")
			}
			this.scrollDiv.setStyle("display", "");
			if (this.options.showConsole == "true") {
				this.console().setStyle("display", "")
			}
			if (this.toolpanel) {
				this.toolpanel.setStyle("display", "")
			}
			this.collapseDiv.set("title", "收缩");
			this.collapseDiv.removeClass("x-tool-s")
		},
		setCellRuleMust : function (b, a) {
			this.setRule(b, a, "must")
		},
		setCellRule : function (d, a, c) {
			var b = a.get("name");
			this.setRule(d, b, c)
		},
		setRule : function (f, c, d) {
			if (!$chk(f)) {
				return
			}
			var a = f.getCell(c);
			if (!$chk(a)) {
				return
			}
			a.set("rule", d);
			var b = a.getElement("input");
			if (b) {
				this.vObj.clearElTip(b.set("rule", d));
				b.destroy();
				a.set("createInput", "false")
			}
		},
		addMustSpan : function (c) {
			var a = this.options.sGrid_header_div,
			b = ["radio", "checkbox", "rowNum", "a", "hidden"];
			if ($type(c) == "string") {
				c = [c]
			}
			c = c || [];
			if (c.length == 0) {
				a.getElements("div[_for]").each(function (f) {
					if (!b.contains(f.get("type"))) {
						if (!f.getElement("span")) {
							var d = new Element("span", {
									"class" : "red",
									text : "*"
								});
							d.inject(f.getElement("div.sGrid_header_text_div"), "top")
						}
					}
				})
			} else {
				c.each(function (f) {
					var d = a.getElement("div[_for='" + f + "']");
					if (!b.contains(d.get("type"))) {
						if (!d.getElement("span")) {
							var g = new Element("span", {
									"class" : "red",
									text : "*"
								});
							g.inject(d.getElement("div.sGrid_header_text_div"), "top")
						}
					}
				})
			}
		},
		removeMustSpan : function (b) {
			var a = this.options.sGrid_header_div;
			if ($type(b) == "string") {
				b = [b]
			}
			b = b || [];
			if (b.length == 0) {
				a.getElements("div[_for]").each(function (d) {
					var c = d.getElement(".red");
					if (c) {
						c.destroy()
					}
				})
			} else {
				b.each(function (d) {
					var c = a.getElement("div[_for='" + d + "']");
					var f = c.getElement(".red");
					if (f) {
						f.destroy()
					}
				})
			}
		},
		isradioSetChecked : true,
		radioSetChecked : function (a) {
			this.isradioSetChecked = false;
			if (!$chk(a)) {
				return
			}
			var d = a.get("name");
			var c = a.get("data");
			this.data().each(function (h, g) {
				if (!this._inCache(g)) {
					var f = h.tds[d];
					if (f == undefined) {
						h.tds[d] = {};
						f = h.tds[d]
					}
					if (f.value == "1") {
						if (f.originValue == undefined) {
							f.originValue = f.value || ""
						}
						f.value = "0";
						if (c) {
							f.status = "update";
							h.status = "update"
						}
					}
				}
			}, this);
			this.dataDiv().getChildren('div[status!="delete"][row]').each(function (k) {
				var l = k.getCell(d);
				var h = l.getElement("input");
				if (!$chk(h)) {
					return
				}
				var g = h.get("value");
				if (g == "1") {
					h.set("value", "0");
					if (c) {
						var f = k.get("status");
						if (f == "insert") {
							return
						}
						if (!$chk(f) || f == "update") {
							this.updateCell(l, h.get("checked") ? "0" : "0")
						}
					}
				}
			}
				.bind(this));
			var b = a.getElement("input");
			b.set("value", "1");
			this.updateCell(a, b.get("checked") ? "1" : "0");
			this.isradioSetChecked = true
		},
		moveUpOrDownRow : function (f) {
			var b;
			var d;
			var c = this.getCheckedRow();
			if (c) {
				if (f == "up") {
					d = c.getPrevious();
					b = "after"
				} else {
					d = c.getNext();
					b = "before"
				}
				if (!d) {
					return
				}
				var g = this.getOneRowData(d);
				var a = g.status;
				this.deleteRow(d);
				g.status = a;
				var h = this.insertRow(g, null, null, null, b);
				h.setAttribute("status", a);
				h.removeClass("sGrid_data_row_insert_div");
				this.refreshFa(this.dataDiv().getFirst())
			}
		},
		setCellFocus : function (a, f) {
			var c = this.dataDiv().childNodes;
			var d = c.length;
			var a = a - 1;
			if (a >= 0 && d != 0 && d >= a) {
				var b = c[a].getElement('div.sGrid_data_row_item_div[name="' + f + '"]');
				if (b) {
					this.setElFocus(b)
				}
			}
		},
		setCurElFocus : function (b, c) {
			var a = b.getElement("div.sGrid_data_row_item_div[name='" + c + "']");
			if (a) {
				this.setElFocus(a)
			}
		},
		setElFocus : function (c) {
			var b = c.get("type");
			if (b == "radio" || b == "checkbox") {
				var f = c.getElement("input[type=" + b + "]");
				f.set("checked", true);
				f.focus()
			} else {
				var a = this.eDelegator._listener.get("click");
				var d = null;
				try {
					d = new Event()
				} catch (d) {}

				if (a) {
					a.each(function (g) {
						if (g.condition.indexOf(c.get("eventdele")) > 0) {
							if (g.args) {
								g.fn(d, c, g.args)
							} else {
								g.fn(d, c);
								this.cellClickDele(d, c)
							}
						}
					}, this)
				}
			}
		},
		formToRow : function (a) {},
		objToForm : function (b, a) {},
		gridToForm : function (a, b, c) {},
		OpenFormNoNextEvent : function (c, b, d, a) {},
		OpenFormUpdateCell : function (a, d, b) {
			var c = $w(a).getCheckedRow();
			$w(a).update(c, c.getCell(d), b, b)
		}
	});
function getScrollTop() {
	var b = window.document;
	var a = 0;
	if (b.body && b.body.scrollTop) {
		a = b.body.scrollTop
	} else {
		if (b.documentElement && b.documentElement.scrollTop) {
			a = b.documentElement.scrollTop
		}
	}
	return a
}
var SwordSort = new Class({
		Implements : [Events, Options],
		name : "SwordSort",
		options : {
			sortName : "",
			type : "string",
			sortflag : "asc",
			widget : "table",
			onSortBegin : null,
			onSortEnd : null
		},
		initialize : function (a) {
			this.setOptions(a)
		},
		initParam : function (a) {},
		initData : function () {},
		sort : function (b, a) {
			this.setOptions(a);
			this.setData(b);
			if ($chk(this.options.dataStr)) {
				this.setData(JSON.decode(this.options.dataStr))
			}
			if (!$chk(this.getData())) {
				return []
			}
			this.fireEvent("onSortBegin", this.data);
			this.getData().sort(this.compare.bind(this));
			this.fireEvent("onSortEnd", this.data);
			return this.getData()
		},
		compare : function (d, c) {
			if (d.status == "delete") {
				return 0
			} else {
				if (c.status == "delete") {
					return (this.options.sortflag == "asc") ? -1 : 1
				}
			}
			var b = this.getValue(d);
			var a = this.getValue(c);
			if (b < a) {
				return (this.options.sortflag == "asc") ? -1 : 1
			} else {
				if (b > a) {
					return (this.options.sortflag == "asc") ? 1 : -1
				}
			}
			return 0
		},
		getValue : function (b) {
			var a = "";
			if (this.options.widget == "table") {
				if (!$chk(this.options.sortName)) {
					swordAlert("未指定排序列！！");
					return false
				}
				a = b.tds[this.options.sortName];
				if (a) {
					a = a.value
				} else {
					a = ""
				}
			}
			if (this.options.widget == "array") {
				a = b
			}
			switch (this.options.type.toLowerCase()) {
			case "int":
				return parseInt(a, 10) || 0;
			case "float":
				return parseFloat(a, 10) || 0;
			case "bool":
				return a === true || String(a).toLowerCase() == "true" ? 1 : 0;
			case "string":
			default:
				return a ? a.toString() : ""
			}
		},
		setData : function (a) {
			this.data = a
		},
		getData : function () {
			return this.data
		}
	});
SwordGrid.Iterator = new Class({
		$family : {
			name : "SwordGrid.Iterator"
		},
		node : $empty,
		iterator : $empty,
		lastSign : true,
		dataDetph : 0,
		domainData : [],
		initialize : function (a, b) {
			this.iterator(a);
			if ($defined(b)) {
				this.dataDepth = b
			}
		},
		hasChildNodes : $lambda(false),
		isLast : $lambda(true),
		getAttributes : $empty,
		getAttribute : $empty,
		getChildNodes : $empty,
		setParentSign : function (a, b) {
			SwordGrid.Iterator.code = a;
			SwordGrid.Iterator.pcode = b
		}
	});
SwordGrid.Iterator.newInstance = function (d, b, c) {
	var a = null;
	SwordGrid.Iterator.treeNodeNum = 0;
	if ($chk(b) && "json".test(b.trim(), "i")) {
		a = new SwordGrid.JSONIterator(d || {}, 0)
	} else {
		if ($chk(b) && "jsonAptitude".test(b.trim(), "i")) {
			a = new SwordGrid.JSONAptitudeIterator(d, 0);
			a.setDomainData(d);
			a.setParentSign(c.id, c.pid, d)
		} else {
			a = new SwordGrid.XMLIterator(d, 0)
		}
	}
	return a
};
SwordGrid.XMLIterator = new Class({
		Extends : SwordGrid.Iterator,
		setLastSign : function (a) {
			this.lastSign = a
		},
		iterator : function (a) {
			this.node = a
		},
		hasChildNodes : function () {
			return this.node.hasChildNodes()
		},
		getChildNodes : function () {
			var b = new Array();
			this.dataDepth++;
			for (var a = 0; a < this.node.childNodes.length; a++) {
				if ((/[^\t\n\r ]/.test(this.node.childNodes[a].data))) {
					var c = new SwordGrid.XMLIterator(this.node.childNodes[a], this.dataDepth);
					c.setLastSign(false);
					b.push(c)
				}
			}
			if (b.length > 0) {
				b[b.length - 1].setLastSign(true)
			}
			return b
		},
		getAttributes : function () {
			return this.node.attributes
		},
		getAttribute : function (a) {
			return this.node.getAttribute(a)
		},
		isLast : function () {
			if (this.node.parentNode == null || this.node.parentNode.nodeName == "#document" || this.lastSign) {
				return true
			}
			return false
		}
	});
SwordGrid.JSONIterator = new Class({
		Extends : SwordGrid.Iterator,
		attributes : [],
		iterator : function (a) {
			this.node = new Hash(a)
		},
		setLastSign : function (a) {
			this.lastSign = a
		},
		hasChildNodes : function () {
			var a = false;
			a = this.node.some(function (c, b) {
					return $type(c) == "array" || $type(c) == "object"
				});
			return a
		},
		getChildNodes : function () {
			var a = new Array();
			this.dataDepth++;
			this.node.getKeys().each(function (d, b) {
				if ($type(this.node.get(d)) == "array") {
					this.node.get(d).each(function (g) {
						var f = new SwordGrid.JSONIterator(g, this.dataDepth);
						f.setLastSign(false);
						a.push(f)
					}
						.bind(this))
				} else {
					if ($type(this.node.get(d)) == "object") {
						var c = new SwordGrid.JSONIterator(this.node.get(d), this.dataDepth);
						c.setLastSign(false);
						a.push(c)
					}
				}
			}
				.bind(this));
			if (a.length > 0) {
				a[a.length - 1].setLastSign(true)
			}
			return a
		},
		getAttributes : function () {
			if (this.attributes.length != 0) {
				return this.attributes
			}
			var a = new Array();
			this.node.getKeys().each(function (b) {
				switch ($type(this.node.get(b))) {
				case "string":
				case "number":
				case "boolean":
					a.push({
						nodeName : b,
						nodeValue : this.node.get(b)
					});
				case false:
					return null
				}
			}
				.bind(this));
			this.attributes = a;
			return a
		},
		getAttribute : function (a) {
			if ($defined(this.node)) {
				return this.node.get(a)
			} else {
				return null
			}
		},
		isLast : function () {
			return this.lastSign
		}
	});
SwordGrid.JSONAptitudeIterator = new Class({
		Extends : SwordGrid.Iterator,
		current : null,
		tdsSign : "tds",
		rootNodes : [],
		childNodes : [],
		iterator : function (a) {
			this.node = a
		},
		setLastSign : function (a) {
			this.lastSign = a
		},
		hasChildNodes : function () {
			return (this.getChildNodes() != 0)
		},
		setDomainData : function (a) {
			this.domainData = a
		},
		getRootNodes : function () {
			this.dataDepth == 0;
			if ($defined(this.domainData) && this.domainData.length > 0 && this.rootNodes.length == 0) {
				this.dataDepth++;
				for (var b = 0; b < this.domainData.length; b++) {
					var d = true;
					for (var a = 0; a < this.domainData.length; a++) {
						if (this.domainData[b][this.tdsSign][SwordGrid.Iterator.pcode]["value"] == this.domainData[a][this.tdsSign][SwordGrid.Iterator.code]["value"]) {
							d = false;
							break
						}
					}
					if (d) {
						var c = new SwordGrid.JSONAptitudeIterator(this.domainData[b], this.dataDepth);
						c.setLastSign(false);
						c.setDomainData(this.domainData);
						this.rootNodes.push(c)
					}
				}
			}
			return this.rootNodes
		},
		getChildNodes : function () {
			if ($defined(this.domainData) && this.domainData.length > 0 && this.childNodes.length == 0) {
				this.dataDepth++;
				for (var a = 0; a < this.domainData.length; a++) {
					if (this.domainData[a][this.tdsSign][SwordGrid.Iterator.pcode]["value"] == this.node[this.tdsSign][SwordGrid.Iterator.code]["value"]) {
						var b = new SwordGrid.JSONAptitudeIterator(this.domainData[a], this.dataDepth);
						b.setLastSign(false);
						this.childNodes.push(b);
						b.setDomainData(this.domainData)
					}
				}
				if (this.childNodes.length > 0) {
					this.childNodes[this.childNodes.length - 1].setLastSign(true)
				}
			}
			return this.childNodes
		},
		getAttributes : function () {
			var b = new Array();
			var a = new Hash(this.node);
			a.getKeys().each(function (c) {
				switch ($type(a.get(c))) {
				case "string":
				case "number":
				case "boolean":
					b.push({
						nodeName : c,
						nodeValue : a.get(c)
					});
				case false:
					return null
				}
			});
			return b
		},
		getAttribute : function (a) {
			if ($defined(this.node)) {
				return this.node[a]
			} else {
				return null
			}
		},
		isLast : function () {
			return this.lastSign
		}
	});
SwordGrid.implement({
	intervalTimer : null,
	initEvents : function () {
		this.eDelegator = new SwordEventDelegator({
				container : this.options.sGrid_div
			});
		this.eDelegator.add("click", this.cellClickDele.bind(this), "div.sGrid_data_row_item_div");
		this.eDelegator.add("click", this.textClickDele.bind(this), "div[eventDele=text]");
		this.eDelegator.add("click", this.dateClickDele.bind(this), "div[eventDele=date]");
		this.eDelegator.add("click", this.selectClickDele.bind(this), "div[eventDele=select]");
		this.eDelegator.add("click", this.actClickDele.bind(this), "div[eventDele=act]");
		this.eDelegator.add("click", this.pulltreeClickDele.bind(this), "div[eventDele=pulltree]");
		this.eDelegator.add("click", this.checkboxClickDele.bind(this), "input[eventDele=checkbox]");
		if (this.options.type == "tree") {
			this.eDelegator.add("click", this.gridtreeClickDele.bind(this), "div[eventDele=gridtree]")
		}
		this.eDelegator.add("mouseenter", this.file2EnterDele.bind(this), "div[eventDele=file2]");
		this.eDelegator.add("mouseenter", function (b, a) {
			a.addClass("sGrid_data_row_div_hover")
		}, "div.sGrid_data_row_div");
		this.eDelegator.add("mouseleave", function (b, a) {
			a.removeClass("sGrid_data_row_div_hover")
		}, "div.sGrid_data_row_div");
		this.eDelegator.add("click", this.rowClickDele.bind(this), "div.sGrid_data_row_div");
		this.eDelegator.add("dblclick", this.rowDblclickDele.bind(this), "div.sGrid_data_row_div");
		this.eDelegator.add("contextmenu", this.rowContextmenuDele.bind(this), "div.sGrid_data_row_div")
	},
	file2EnterDele : function (h, f) {
		if (f.get("first")) {
			return
		}
		f.set("first", "true");
		var d = f,
		a = f.get("name"),
		l = this.getItemElByName(a)[0];
		var k = this.getRow(d);
		var b = this.getOneRowData(k);
		var g = b.tds[a];
		if (g) {
			g = g.value
		}
		var c = d.getElement("div[name=tmp]");
		if (c) {
			c.destroy()
		}
		this.lazyInitFile2(l, d, g, b)
	},
	gridtreeClickDele : function (c, b) {
		var a = b.getParent();
		this.treeClick(a, c);
		this.scrollHeader()
	},
	checkboxClickDele : function (h, g) {
		var c = g,
		k = g.get("name"),
		a = this.getItemElByName(k)[0];
		this.cellClickDele(h, c);
		var f = this.getRow(c);
		var d = a.get("_onClick");
		if ($chk(d)) {
			this.getFunc(d)[0](this.getOneRowData(c), f, c, h, this)
		}
		var b = c.get("type");
		if (a.get("data") == "true") {
			if (b == "radio") {
				this.radioSetChecked(c.getParent())
			} else {
				this.updateCell(c.getParent(), c.get("checked") ? "1" : "0")
			}
		}
		this.rowCheckValidator(g);
		h.event.cancelBubble = true;
		if (!g.checked) {
			if (this.isCP()) {
				this.getHeaderCheckboxs_checked().set({
					checked : false,
					userClicked : "false",
					checkAllFlag : "false"
				});
				this.options.pNode.getChildren(">div:not([console])[name][type='checkbox']").set({
					checked : false,
					userClicked : "false",
					checkAllFlag : "false"
				})
			}
		}
	},
	rowCheckValidator : function (c) {
		if (this.options.rowCheckValidator != false && this.options.rowCheckValidator != "false") {
			var b = c;
			if ("checkbox" == b.get("type") && !b.get("checked")) {
				return
			}
			var a = this.getCheckedRow(b.get("name"));
			if (a == null) {
				return
			}
			if ($type(a) != "array") {
				a = [a]
			}
			this.validate(false, a)
		}
	},
	cellClickDele : function (f, d) {
		var b = d,
		g = d.get("name"),
		a = this.getItemElByName(g)[0];
		if (!g || !a) {
			return
		}
		var c = this.getRow(b);
		this.dataDiv().getChildren(".sGrid_data_row_click_div").each(function (h) {
			h.removeClass("sGrid_data_row_click_div")
		});
		if (c) {
			c.addClass("sGrid_data_row_click_div")
		}
		if (b.get("disable") == "true" || b.get("disabled") == true) {
			return
		}
		if (!a.get("_onClick")) {
			return
		}
		if (a.get("type") != "text" && a.get("type") != "radio" && a.get("type") != "checkbox") {
			if (a.get("type") == "a") {
				if (d.get("text")) {
					this.getFunc(a.get("_onClick"))[0](this.getOneRowData(b), c, b, f)
				}
			} else {
				this.getFunc(a.get("_onClick"))[0](this.getOneRowData(b), c, b, f)
			}
		}
	},
	pulltreeClickDele : function (b, a) {
		clearTimeout(this.intervalTimer);
		this.intervalTimer = (function () {
			var d = a;
			if (d.get("disable") == "true" || d.get("disabled") == true) {
				return
			}
			var h = d.get("treename");
			var g = $w(h);
			if (g && !g.select) {
				pageContainer.initWidgetParam(g.item);
				g = $w(h);
				g.setValidate(this.vObj);
				g.initData(pc.getInitData(h));
				this.addNextFocusEvent(g.select.selBox)
			}
			g.grid = this;
			if (g.select && !g.select.hasOnSelectHide) {
				g.select.addEvent("onSelectHide", function (m) {
					g.options.pNode.inject(document.body);
					g.options.pNode.setStyle("display", "none");
					if (!this.targetCell) {
						return
					}
					g.select.selBox.store("lastCell", this.targetCell);
					var n = m.get("realvalue");
					var l = m.get("value");
					this.targetCell.set("realvalue", n);
					this.targetCell.set("text", l);
					this.targetCell.set("title", l);
					this.updateCell(this.targetCell, n, l, true);
					m.set("value", "");
					m.set("realvalue", "");
					this.targetCell = null;
					g.leaveSign = true
				}
					.bind(this));
				g.select.hasOnSelectHide = true
			}
			this.targetCell = d;
			g.options.pNode.inject(d);
			g.options.pNode.setStyle("display", "");
			g.clearCheckedStatus();
			var c = g.select.selBox;
			c.set("value", d.get("title"));
			c.set("realvalue", d.get("realvalue"));
			c.set("checkPath", d.get("checkPath"));
			c.set("display", "true");
			c.set("onAutoNextBefore", d.get("onAutoNextBefore"));
			g.select.showByJs = true;
			var k = d.get("rule"),
			f = g.select.selBox;
			if ($defined(k) && k.contains("must")) {
				f.setStyle("background-color", "#fffadb")
			}
			f.focus();
			f.focus()
		}).delay(this.clickDDtime, this)
	},
	actClickDele : function (v, n) {
		var b = n,
		d = n.get("type"),
		f = n.get("name"),
		y = this.getItemElByName(f)[0],
		w = this.getRowNum(n);
		var x = y.get("act");
		var u = y.get("tid");
		var p = y.get("ctrl");
		var g = y.get("page");
		var f = y.get("name");
		var r = y.get("showRow");
		var h = y.get("msg");
		if (x == "delete") {
			var q = y.get("popMes") != "false";
			var m = y.get("delConfirm") || ("" + i18n.gridDelConfirm);
			if (b.get("disable") == "true") {
				return
			}
			if (q) {
				if (!confirm(m)) {
					return
				}
			}
			var s = this.deleting(b);
			if (s == null) {
				return
			}
			var a = this.getReq({
					tid : u,
					ctrl : p,
					widgets : [this.getOneRowGirdData(s)]
				});
			pc.postReq({
				req : a,
				postType : y.get("postType"),
				onSuccess : function (z) {
					this.deleteRow(s);
					if (y.get("onSuccess")) {
						this.getFunc(y.get("onSuccess"))[0](a, z)
					}
				}
				.bind(this),
				onError : function (z) {
					s.removeClass("sGrid_data_row_delete_div");
					if (y.get("onError")) {
						this.getFunc(y.get("onError"))[0](a, z)
					}
				}
				.bind(this)
			})
		} else {
			if (x == "deleting") {
				if (!b.get("deleteCaption")) {
					var l = b.get("text");
					var c = y.get("cancel") || "" + i18n.cancel;
					b.set("deleteCaption", l);
					b.set("cancelCaption", c)
				}
				if (b.get("disable") == "true") {
					return
				}
				var k = this.getRow(b);
				if (k.get("status") == "delete") {
					b.set("text", b.get("deleteCaption"));
					k.set("status", "");
					k.removeClass("sGrid_data_row_delete_div");
					return
				}
				if (k.get("status") != "insert") {
					b.set("text", b.get("cancelCaption"))
				} else {
					if (!confirm("" + i18n.gridInsertRowDel)) {
						return
					}
				}
				this.deleting(b)
			} else {
				if (u || p) {
					if (b.get("disable") == "true") {
						return
					}
					var k = b.getParent(".sGrid_data_row_div");
					if (k.get("status") == "insert") {
						alert("" + i18n.gridSaveAlert);
						return
					}
					var a = this.getReq({
							tid : u,
							ctrl : p,
							widgets : [this.getOneRowGirdData(b)]
						});
					pc.postReq({
						req : a,
						postType : y.get("postType"),
						onSuccess : function (z) {
							if (y.get("onSuccess")) {
								this.getFunc(y.get("onSuccess"))[0](a, z)
							}
						}
						.bind(this),
						onError : function (z) {
							if (y.get("onError")) {
								this.getFunc(y.get("onError"))[0](a, z)
							}
						}
						.bind(this)
					})
				} else {
					if (g) {
						if (b.get("disable") == "true") {
							return
						}
						var k = b.getParent(".sGrid_data_row_div");
						if (k.get("status") == "insert") {
							alert("" + i18n.gridSaveAlert);
							return
						}
						if (!r) {
							throw new Error("gird[" + this.options.name + "]:使用表格一行数组直接页面间跳转到form页面展现时候，必须设置有效的showRow属性，具体请参阅用户手册！")
						}
						var t = this.getOneRowFormData(b, r)
					}
				}
			}
		}
	},
	selectClickDele : function (b, a) {
		clearTimeout(this.intervalTimer);
		this.intervalTimer = (function () {
			var g = a,
			c = a.get("name"),
			m = this.getItemElByName(c)[0];
			if (b && b.key === "enter") {
				this.cellClickDele(b, a)
			}
			if (g.get("disable") == "true" || g.get("disabled") == true) {
				return
			}
			if (!g.retrieve("space")) {
				g.store("space", g.getParent(".sGrid_data_row_div"))
			}
			if (m.get("onBeforeClick")) {
				this.getFunc(m.get("onBeforeClick"))[0](this.getOneRowData(g), this.getRow(g), m)
			}
			var p = g.get("text");
			if (g.get("createSelect") == "true") {
				return
			}
			m.pNode = g;
			g.set("text", "");
			if (pc.curSelectObj && pc.curSelectObj.box.get("display") == "true") {
				pc.curSelectObj.hide();
				pc.curSelectObj.execGridOnFinished()
			}
			if (pc.oldSelectObj && pc.oldSelectObj.box.get("display") == "true") {
				pc.oldSelectObj.hide();
				pc.oldSelectObj.execGridOnFinished()
			}
			var f = new SwordSelect();
			if (f.box && f.box.getParent(".sGrid_data_row_item_div")) {
				var h = f.box.getParent(".sGrid_data_row_item_div");
				if (!f.box.get("code")) {
					h.set("caption", "");
					h.set("code", "");
					h.set("realvalue", "")
				}
				var l = h.get("realvalue") || "";
				var d = h.get("code");
				h.set("code", d);
				h.set("realvalue", l);
				$w(h.getParent("div[sword=SwordGrid]").get("name")).updateCell(h, l, h.get("caption") || "", true);
				h.set("createSelect", "false")
			}
			f.setValidate(this.vObj);
			var n = m.get("disable");
			m.set("disable", "");
			m.set("dataName", g.get("dataName") || m.get("dataName"));
			f.initParam(m, this);
			m.set("disable", n);
			f.grid_onFinished = function (r, t, u, s, q) {
				g.set("caption", r);
				g.set("code", t);
				g.set("realvalue", u);
				g.set("createSelect", "false");
				this.updateCell(g, u, g.get("caption") || "", true, q)
			}
			.bind(this);
			if (pc.curSelectObj) {
				pc.oldSelectObj = pc.curSelectObj
			}
			pc.curSelectObj = f;
			f.box.set("rule", g.get("rule") || m.get("rule"));
			f.box.set("value", p);
			f.box.set("code", g.get("code"));
			f.box.set("realvalue", g.get("realvalue"));
			f.box.set("onAutoNextBefore", g.get("onAutoNextBefore"));
			var k = f.box.getParent(".sGrid_data_row_item_div");
			k.set("createSelect", "true");
			f.box.set("createSelect", "true");
			f.box.set("codeSign", g.get("codeSign") || "code");
			f.box.set("captionSign", g.get("captionSign") || "caption");
			f.box.set("pcodeSign", g.get("pcodeSign") || "pcode");
			f.box.set("inputdisplay", g.get("inputdisplay"));
			f.box.set("popdisplay", g.get("popdisplay"));
			f.box.set("sbmitcontent", g.get("sbmitcontent"));
			(function () {
				if (f.box.get("display") != "false") {
					f.box.focus()
				}
			}).delay(1);
			f.show()
		}).delay(this.clickDDtime, this)
	},
	dateClickDele : function (b, a) {
		clearTimeout(this.intervalTimer);
		this.intervalTimer = (function () {
			var g = a,
			c = a.get("name"),
			m = this.getItemElByName(c)[0];
			if (g.get("disable") == "true" || g.get("disabled") == true) {
				return
			}
			if (m.get("onBeforeClick")) {
				this.getFunc(m.get("onBeforeClick"))[0](this.getOneRowData(g), this.getRow(g), m)
			}
			var n = true,
			d = null;
			var f = g.getElement("input");
			if (pc.calendar && pc.calendar.dateInput && pc.calendar.dateInput.get("show") == "true") {
				if (g.get("createCalendar") != "true") {
					pc.calendar.hide()
				}
			}
			if (g.get("createCalendar") == "true") {
				if (f) {
					pc.calendar.dateInput = f;
					d = pc.calendar;
					n = false;
					this.targetCell = g;
					var h = d.dateInput.get("value");
					var l = this.getCalendar().getRealValue(this.getItemElByName(d.dateInput.getParent(".sGrid_data_row_item_div").get("name")), h);
					d.dateInput.getParent(".sGrid_data_row_item_div").set("showvalue", h);
					this.updateCell(d.dateInput.getParent(".sGrid_data_row_item_div"), l, h)
				}
			}
			m.pNode = g;
			g.set("html", "");
			if (n) {
				d = new SwordCalendar()
			}
			d.setValidate(this.vObj);
			d.initParam(m);
			d.dateInput.set("onAutoNextBefore", g.get("onAutoNextBefore"));
			d.dateInput.set("rule", g.get("rule") || m.get("rule"));
			d.dateInput.set("onShow", m.get("onShow"));
			d.dateInput.set("onHide", m.get("onHide"));
			d.dateInput.set("value", g.get("showvalue"));
			d.dateInput.set("oValue", g.get("realvalue"));
			if (g.get("disable") == "false") {
				d.enable(d.dateInput)
			}
			d.grid_onFinished = function (q) {
				var r = this.getCalendar().getRealValue(g, q);
				this.targetCell.set("showvalue", q);
				this.targetCell.set("realvalue", r);
				this.updateCell(g, r, q);
				this.targetCell.set("createCalendar", "false");
				d.onFinished = null;
				this.targetCell = null;
				var p = g.getParent("div.sGrid_data_row_div");
				return p
			}
			.bind(this);
			d.dateInput.set("handInput", "true").set("autoCtrl", "true");
			d.dateInput.addEvent("keydown", d.hand_Input.bind(d));
			d.dateInput.addEvents({
				keydown : function (r) {
					var q = r.target;
					var p = d;
					if (SwordCalendarTemplate.testValue(q.value)) {
						q.keydownBeforeValue = q.value
					}
					p.keyEvents(r)
				},
				keyup : function (q) {
					var p = q.target;
					if (p.value == "") {
						p.keydownBeforeValue = ""
					} else {
						if (p.value != "backspace") {
							if (SwordCalendarTemplate.testValue(q.target.value) == false) {
								p.value = p.keydownBeforeValue || ""
							}
						}
					}
				}
			});
			pc.calendar = d;
			this.targetCell = g;
			if (g.get("createCalendar") != "true") {
				d.dateInput.select()
			}
			g.set("createCalendar", "true");
			this.addNextFocusEvent(d.dateInput, d);
			try {
				d.dateInput.focus();
				d.dateInput.focus()
			} catch (k) {
				try {
					d.dateInput.focus()
				} catch (k) {}

			}
			d.show(d.dateInput)
		}).delay(this.clickDDtime, this)
	},
	rowDblclickDele : function (f, c) {
		clearTimeout(this.intervalTimer);
		var d = $(f.target);
		var b = this.getRow(d);
		var a = this.getOneRowData(b);
		this.fireEvent("onRowDbClick", [a, b, f])
	},
	rowContextmenuDele : function (f, c) {
		var d = $(f.target);
		var b = this.getRow(d);
		var a = this.getOneRowData(b);
		this.fireEvent("onRowRightClick", [a, b, f])
	},
	rowClickDele : function (f, c) {
		var b = $(f.target);
		var k = b.get("type");
		var n = b.get("tag");
		var g = this.getRow(b);
		if (!g) {
			return
		}
		var a = this.getOneRowData(g);
		if (this.options.checkMoudle == "true") {
			if (!(k == "checkbox" && n == "input")) {
				this.dataDiv().getElements("input:not([disabled])[type=checkbox][checked]").set("checked", false);
				g.getElements("input:not([disabled])[type=checkbox]").set("checked", true);
				if (this.options.rowCheckValidator != false && this.options.rowCheckValidator != "false") {
					var h = g.getElements("input[type=checkbox]:checked:not([disabled])");
					h.fireEvent("change", [h])
				}
			}
			g.getElements("input:not([disabled])[type=radio]").set("checked", true);
			var l = this.dataDiv().getElements("input[type=checkbox]:not([checked])").length;
			if (l == 0) {
				this.getHeaderCheckboxs_noneChecked().set("checked", true)
			} else {
				this.getHeaderCheckboxs_checked().set("checked", false)
			}
		} else {
			if (k == "checkbox" && n == "input") {
				var l = this.dataDiv().getElements("input[type=checkbox][name=" + b.get("name") + "]:not([checked])").length;
				var d = this.getHeaderCheckboxByName(b.get("name"));
				if (d == null) {
					return
				}
				if (l == 0) {
					d.set("checked", true);
					if (this.isCP()) {
						var m = this.getItemElByName(b.get("name"));
						m.set("userClicked", "true");
						m.set("checkAllFlag", "true")
					}
				} else {
					d.set("checked", false)
				}
			}
		}
		this.fireEvent("onRowClick", [a, g, f])
	},
	textClickDele : function (f, d) {
		var c = d,
		b = d.get("type"),
		h = d.get("name"),
		a = this.getItemElByName(h)[0],
		g = this.getRowNum(d);
		this.textClick(c, a, b, h, g)
	}
});
var SwordMask = new Class({
		Implements : [Events, Options],
		options : {
			background : null,
			opacity : 1,
			zIndex : 30000,
			position : "absolute",
			left : 0,
			top : 0,
			width : 0,
			height : 0,
			type : "loading9"
		},
		maskDiv : null,
		maskIframe : null,
		maskState : null,
		divTw : null,
		el : null,
		initialize : function (a) {
			this.setOptions(a)
		},
		initEl : function () {
			this.el = new Element("div", {})
		},
		initParam : function (a) {},
		initData : function () {},
		initDimension : function (b, a) {
			if ($(b).getSize().x == $(b).getScrollSize().x) {
				this.options.left = $(b).getPosition().x;
				this.options.width = $(b).getSize().x
			} else {
				this.options.left = $(b).getPosition().x + $(b).getScroll().x;
				this.options.width = $(b).getSize().x
			}
			if ($(b).getSize().y == $(b).getScrollSize().y) {
				this.options.top = $(b).getPosition().y;
				this.options.height = $(b).getSize().y
			} else {
				this.options.top = $(b).getPosition().y + $(b).getScroll().y;
				this.options.height = $(b).getSize().y
			}
			if (this.isBody(b)) {
				this.options.top = 0;
				this.options.left = 0;
				this.options.width = $(b).getScrollSize().x;
				this.options.height = $(b).getScrollSize().y
			}
			if (a != null) {
				this.initialize(a)
			}
		},
		mask : function (f, d, a) {
			this.initEl();
			if ($type(f) == "element" && $(f).getHeight() == 0 && $(f).getWidth() == 0) {
				return
			}
			if (!this.maskState) {
				if ($defined(d)) {
					if ($type(d) == "string") {
						this.el.addClass(d);
						this.el.setStyles({
							width : 105,
							height : 75,
							display : "block"
						})
					} else {
						if ($type(d) == "element") {
							this.el = d
						}
					}
				} else {
					this.el.setStyle("display", "block");
					this.el.addClass(this.options.type)
				}
				($type(f) == "element") ? this.initDimension(f, a) : this.initialize(a);
				var g = this.options.width - ((Browser.Engine.trident) ? 1 : 4);
				if (g < 0) {
					g = 0
				}
				var c = this.options.height - ((Browser.Engine.trident) ? 1 : 4);
				if (c < 0) {
					c = 0
				}
				var b = window.document;
				if ($type(window.document.body) == "element" && $(window.document.body).getHeight() == 0 && $(window.document.body).getWidth() == 0) {
					b = parent.window.document
				}
				this.maskDiv = new Element("div", {
						"class" : "maskDivEl",
						styles : {
							"z-index" : this.options.zIndex,
							filter : "Alpha(opacity=0)",
							opacity : this.options.opacity,
							position : this.options.position,
							left : this.options.left,
							top : this.options.top,
							width : g,
							height : c,
							display : "block"
						}
					}).inject(b.body);
				if (this.options.background) {
					this.maskDiv.setStyle("background", this.options.background)
				}
				this.maskIframe = new Element("iframe", {
						"class" : "maskDivEl",
						styles : {
							"z-index" : this.options.zIndex - 1,
							filter : "Alpha(opacity=" + this.options.opacity + ")",
							opacity : this.options.opacity,
							position : this.options.position,
							left : this.options.left,
							top : this.options.top,
							width : g,
							height : c,
							display : "block"
						}
					}).inject(b.body);
				if (this.options.background) {
					this.maskIframe.setStyle("background", this.options.background)
				}
				if ($defined(this.el)) {
					$(this.el).inject(b.body);
					if (this.isBody(f)) {
						this.el.setStyles({
							position : "absolute",
							left : ($(f).getSize().x - this.el.getSize().x) / 2 + $(f).getScroll().x,
							"z-index" : this.options.zIndex + 1
						});
						this.setTop(this.el, ($(f).getSize().y - this.el.getSize().y) / 2 + $(f).getScroll().y)
					} else {
						this.el.setStyles({
							position : "absolute",
							left : this.options.left + (this.options.width - this.el.getSize().x) / 2,
							"z-index" : this.options.zIndex + 1
						});
						this.setTop(this.el, this.options.top + (this.options.height - this.el.getSize().y) / 2)
					}
				}
				this.maskState = true
			}
		},
		setTop : function (b, a) {
			if (a / 1 < 0 || (a + "").indexOf("-") >= 0) {
				a = 0
			}
			b.setStyle("top", a)
		},
		getElPosition : function () {
			return {
				position : this.el.getStyle("position"),
				left : this.el.getStyle("left"),
				top : this.el.getStyle("top"),
				"z-index" : this.el.getStyle("z-index")
			}
		},
		unmask : function (a) {
			if (!$defined(a)) {
				a = 0
			}
			if (a == 0) {
				this.excute()
			} else {
				this.excute.delay(a, this)
			}
		},
		excute : function () {
			this.maskState = false;
			if ($defined(this.el)) {
				this.el.style.display = "none"
			}
			if (this.maskDiv) {
				this.maskDiv.destroy()
			}
			if (this.maskIframe) {
				if (Browser.Engine.webkit) {
					top.injectIfame(this.maskIframe)
				} else {
					this.maskIframe.destroy()
				}
			}
			this.maskDiv = null;
			this.maskIframe = null
		},
		isBody : function (a) {
			return (/^(?:body|html)$/i).test((a.get("tag") || a.tagName))
		}
	});
var SwordMenu = new Class({
		Implements : [Events, Options],
		name : "SwordMenu",
		options : {
			sword : null,
			name : "menu",
			dataName : null,
			pNode : null,
			pos : "false",
			left : 100,
			top : 100,
			width : 200,
			height : 30,
			zIndex : 100000,
			itemWidth : "150px",
			itemHeight : null,
			startLayer : 1,
			dataStr : null,
			ctrl : "",
			tid : "",
			dataType : "json",
			type : "vertical",
			isShow : "true",
			isHighlight : "false",
			displayTag : "caption",
			onSelect : null,
			onLoadDataFinish : null
		},
		menuInput : null,
		menuZeroLevelDiv : null,
		menuZeroLevelUL : null,
		data : null,
		currentSelectItem : null,
		clickedItem : null,
		foldFlag : true,
		tempTable : null,
		root : [],
		childs : new Hash(),
		initialize : function (a) {
			this.setOptions(a)
		},
		initParam : function (a) {
			this.htmlOptions(a);
			this.options.pNode = a;
			if (($chk(this.options.tid) || $chk(this.options.ctrl)) || ((!$chk(this.options.tid) && !$chk(this.options.ctrl)) && $chk(this.options.dataStr))) {
				this.buildData()
			}
			if ($chk(this.data) && !$chk(this.menuZeroLevelDiv)) {
				this.buildMenuDiv()
			}
		},
		initData : function (a) {
			if ($defined(a)) {
				this.data = a
			}
			this.build()
		},
		build : function () {
			if ($chk(this.menuZeroLevelDiv)) {
				this.menuZeroLevelDiv.destroy()
			}
			this.root.empty();
			this.buildData();
			this.buildMenuDiv()
		},
		display : function (a) {
			this.setOptions(a);
			this.menuZeroLevelDiv.setStyles({
				left : a.left,
				top : a.top
			});
			this.menuZeroLevelDiv.setStyle("display", "")
		},
		hide : function () {
			this.menuZeroLevelDiv.setStyle("display", "none")
		},
		buildData : function () {
			if (!$defined(this.data)) {
				if (!$chk(this.options.dataStr)) {
					if (this.options.ctrl != "" || this.options.tid != "") {
						this.getDataByCtrl()
					} else {
						if ($defined($("SwordPageData"))) {
							if ($chk(this.options.dataName)) {
								this.data = pageContainer.getInitDataByDataName(this.options.dataName).data
							} else {
								this.data = pageContainer.getInitData(this.options.name).data
							}
						}
					}
				} else {
					this.data = JSON.decode(this.options.dataStr).data
				}
			} else {
				this.data = this.data.data
			}
			this.parseData()
		},
		getDataByCtrl : function () {
			var c = new Hash();
			c.set("sword", "SwordTree");
			c.set("name", this.options.name);
			c.set("data", [this.data]);
			var a = new Hash();
			a.set("sword", "attr");
			a.set("name", "treeName");
			a.set("value", this.options.name);
			var b = pageContainer.getReq({
					tid : this.options.tid,
					ctrl : this.options.ctrl,
					widgets : [c, a]
				});
			pageContainer.postReq({
				req : b,
				async : false,
				onSuccess : function (d) {
					var f = pageContainer.getResData(this.options.name, d);
					this.data = f.data;
					this.fireEvent("onLoadDataFinish", d)
				}
				.bind(this),
				onError : function (d) {}

				.bind(this)
			})
		},
		buildMenuDiv : function () {
			this.menuZeroLevelDiv = new Element("div", {
					name : "swordMenuDiv_null",
					pCode : "null",
					id : this.options.name
				}).inject(this.options.pNode);
			if (this.options.pos == "false") {
				this.menuZeroLevelDiv.inject(this.options.pNode)
			} else {
				this.menuZeroLevelDiv.setStyles({
					position : "absolute",
					"z-index" : this.options.zIndex,
					left : this.options.left,
					top : this.options.top,
					width : this.options.width,
					height : this.options.height
				})
			}
			var a = this.buildTable(this.menuZeroLevelDiv);
			this.menuZeroLevelUL = new Element("ul", {}).inject(a);
			this.buildZeroLevelMenuLI()
		},
		buildTable : function (d) {
			tempTable = new Element("table", {
					"class" : "nav_box"
				}).inject(d);
			var b = new Element("tbody").inject(tempTable);
			var a = new Element("tr").inject(b);
			new Element("td", {
				"class" : "cl"
			}).inject(a);
			var c = new Element("td", {
					"class" : "cont"
				}).inject(a);
			new Element("td", {
				"class" : "cr"
			}).inject(a);
			tempTable.addEvent("mouseout", function (f) {
				this.foldFlag = true;
				this.fold.delay(500, this)
			}
				.bind(this));
			tempTable.addEvent("mouseover", function (f) {
				this.foldFlag = false
			}
				.bind(this));
			return c
		},
		addStyle : function (a) {
			if (this.options.type == "horizontal") {
				a.addClass("sty_2")
			} else {
				if (this.options.type == "vertical") {
					a.addClass("sty_1")
				}
			}
		},
		parseData : function () {
			if ($chk(this.data)) {
				this.getRoot()
			}
		},
		getRoot : function () {
			for (var d = 0; d < this.data.length; d++) {
				var g = this.data[d]["pcode"];
				var a = true;
				for (var b = 0; b < this.data.length; b++) {
					var f = this.data[b]["code"];
					if (f == g) {
						a = false;
						break
					}
				}
				if (a) {
					var c = 1;
					if (this.options.startLayer.toInt() > 1) {
						this.getRootByStartLayer(this.data[d], c)
					} else {
						this.root[this.root.length] = this.data[d]
					}
				}
			}
		},
		getRootByStartLayer : function (a, c) {
			var b = c + 1;
			var f = a.code;
			for (var d = 0; d < this.data.length; d++) {
				var g = this.data[d]["pcode"];
				if (f == g) {
					if (b == this.options.startLayer) {
						this.root[this.root.length] = this.data[d]
					} else {
						if (this.isHasChild(this.data[d]["code"])) {
							this.getRootByStartLayer(this.data[d], b)
						}
					}
				}
			}
		},
		buildZeroLevelMenuLI : function () {
			var a = 0;
			this.root.each(function (f, b) {
				var k = new Element("li", {
						name : "swordMenuLi_null_" + a,
						styles : {
							width : this.options.itemWidth,
							height : this.options.itemHeight
						}
					}).inject(this.menuZeroLevelUL);
				var d = new Element("span", {
						name : "swordMenuSpan_null_" + a
					}).inject(k);
				if ($chk(f.mClass)) {
					d.addClass(f.mClass)
				} else {
					d.addClass("ico1")
				}
				this.addImg(f, d);
				var c = new Element("span", {
						text : f[this.options.displayTag],
						"class" : "menu_caption"
					}).inject(k);
				this.addStyle(k);
				a++;
				k.setProperty("pCode", "null");
				k.setProperty("code", f.code);
				k.setProperty("caption", f[this.options.displayTag]);
				new Hash(f).each(function (m, l) {
					if (["pCode", "code", "caption"].contains(l)) {
						return
					}
					k.setProperty(l, m)
				});
				if (this.options.type == "vertical") {
					var h = this.isHasChild(f.code);
					if (h == true) {
						var g = new Element("span", {
								"class" : "mark"
							}).inject(k)
					}
				}
				k.addEvent("mouseover", function () {
					this.hiddenChildMenu(this.currentSelectItem, k);
					this.currentSelectItem = k;
					if (this.options.type == "horizontal") {
						k.removeClass("sty_2");
						k.addClass("sty_2_a")
					} else {
						if (this.options.type == "vertical") {
							k.removeClass("sty_1");
							k.addClass("sty_1_a")
						}
					}
					this.showChildMenu(this.menuZeroLevelDiv, k, f.code, "zero")
				}
					.bind(this));
				k.addEvent("mouseout", function (l) {
					if (this.options.type == "horizontal") {
						k.removeClass("sty_2_a");
						k.addClass("sty_2")
					} else {
						if (this.options.type == "vertical") {
							k.removeClass("sty_1_a");
							k.addClass("sty_1")
						}
					}
				}
					.bind(this));
				k.addEvent("click", function (l) {
					this.selectItem()
				}
					.bind(this));
				if (f.enabled == "false") {
					this.setMenuStatus(f.code, "false")
				}
			}
				.bind(this))
		},
		fold : function () {
			if (this.foldFlag) {
				this.hiddenAllMenu()
			}
		},
		isHasChild : function (b) {
			for (var a = 0; a < this.data.length; a++) {
				if (this.data[a].pcode == b) {
					return true
				}
			}
			return false
		},
		openChildMenu : function (k, l, h, b) {
			var a = new Element("div", {
					name : "swordMenuDiv_" + h,
					pCode : h
				}).inject(k);
			var d = this.isHasChild(h);
			if (d == false) {
				return null
			}
			var f = this.buildTable(a);
			if (this.options.type == "horizontal") {
				if ($defined(b) && b == "zero") {
					if (k.getStyle("position") == "absolute") {
						a.setStyles({
							position : "absolute",
							"z-index" : this.options.zIndex,
							left : l.getPosition(k).x,
							top : l.getPosition(k).y + l.getSize().y
						});
						if (!$chk(l.previousSibling)) {
							a.setStyles({
								left : l.getPosition(k).x - 5
							})
						}
					} else {
						a.setStyles({
							position : "absolute",
							"z-index" : this.options.zIndex,
							left : l.getPosition().x,
							top : l.getPosition().y + l.getSize().y
						});
						if (!$chk(l.previousSibling)) {
							a.setStyles({
								left : l.getPosition().x - 5
							})
						}
					}
				} else {
					a.setStyles({
						position : "absolute",
						"z-index" : this.options.zIndex,
						left : l.getSize().x,
						top : l.getSize().y * l.getProperty("name").split("_")[2]
					})
				}
			} else {
				if (this.options.type == "vertical") {
					if ($defined(b) && b == "zero") {
						if (k.getStyle("position") == "absolute") {
							a.setStyles({
								position : "absolute",
								"z-index" : this.options.zIndex,
								left : l.getPosition(k).x + l.getSize().x,
								top : l.getPosition(k).y
							})
						} else {
							a.setStyles({
								position : "absolute",
								"z-index" : this.options.zIndex,
								left : l.getPosition().x + l.getSize().x,
								top : l.getPosition().y
							})
						}
					} else {
						a.setStyles({
							position : "absolute",
							"z-index" : this.options.zIndex,
							left : l.getSize().x,
							top : l.getSize().y * l.getProperty("name").split("_")[2]
						})
					}
				}
			}
			var g = new Element("ul", {}).inject(f);
			var c = 0;
			this.data.each(function (r, m) {
				if (r.pcode == h) {
					var q = new Element("li", {
							name : ((r.pcode + "").contains("_")) ? "swordMenuLi_" + r.pcode.replace(/_/g, "") + "_" + c : "swordMenuLi_" + r.pcode + "_" + c,
							styles : {
								width : this.options.itemWidth,
								height : this.options.itemHeight
							}
						}).inject(g);
					q.addClass("sty_1");
					var p = new Element("span", {
							name : "swordMenuSpan_null_" + c
						}).inject(q);
					if ($chk(r.mClass)) {
						p.addClass(r.mClass)
					} else {
						p.addClass("ico1")
					}
					this.addImg(r, p);
					var n = new Element("span", {
							text : r[this.options.displayTag],
							"class" : "menu_caption"
						}).inject(q);
					c++;
					q.setProperty("pCode", r.pcode);
					q.setProperty("code", r.code);
					q.setProperty("caption", r[this.options.displayTag]);
					new Hash(r).each(function (v, u) {
						if (["pCode", "code", "caption"].contains(u)) {
							return
						}
						q.setProperty(u, v)
					});
					var t = this.isHasChild(r.code);
					if (t == true) {
						var s = new Element("span", {
								"class" : "mark"
							}).inject(q)
					}
					q.addEvent("mouseover", function () {
						this.hiddenChildMenu(this.currentSelectItem, q);
						this.currentSelectItem = q;
						q.removeClass("sty_1");
						q.addClass("sty_1_a");
						this.showChildMenu(a, q, r.code)
					}
						.bind(this));
					q.addEvent("mouseout", function (u) {
						q.removeClass("sty_1_a");
						q.addClass("sty_1")
					}
						.bind(this));
					q.addEvent("click", function (u) {
						this.selectItem()
					}
						.bind(this));
					if (r.enabled == "false") {
						this.setMenuStatus(r.code, "false")
					}
				}
			}
				.bind(this))
		},
		showChildMenu : function (b, a, c, g) {
			var f = a.getProperty("code");
			var d = a.getParent("div").getElement("div[pcode=" + f + "]");
			if ($chk(d)) {
				d.setStyle("display", "")
			} else {
				this.openChildMenu(b, a, c, g)
			}
		},
		hiddenAllMenu : function () {
			if ($defined(this.menuZeroLevelDiv)) {
				var a = this.menuZeroLevelDiv.getElements("div");
				a.each(function (c, b) {
					c.setStyle("display", "none")
				}
					.bind(this));
				if (this.options.isShow != "true") {
					this.menuZeroLevelDiv.setStyle("display", "none")
				}
			}
		},
		hiddenChildMenu : function (d, b) {
			if ($chk(d)) {
				var c = d.getParent("div");
				var a = b.getParent("div");
				if (c && c.getProperty("name") == a.getProperty("name")) {
					var f = d.getProperty("code");
					this.closeChildMenu(f)
				} else {
					var g = b.getParent("div").getElements("div");
					g.each(function (k, h) {
						k.setStyle("display", "none")
					}
						.bind(this))
				}
			}
		},
		closeChildMenu : function (b, a) {
			var d = this.menuZeroLevelDiv.getElement("div[pCode=" + b + "]");
			if ($chk(d)) {
				d.setStyle("display", "none");
				if (a) {
					var c = d.getElements("div");
					c.each(function (g, f) {
						g.setStyle("display", "none")
					}
						.bind(this))
				}
			}
		},
		selectItem : function () {
			this.setHighlight(this.currentSelectItem, this.clickedItem);
			this.clickedItem = this.currentSelectItem;
			this.hiddenAllMenu();
			this.fireEvent("onSelect", this.currentSelectItem)
		},
		setHighlight : function (b, a) {
			if ($chk(a)) {
				a.removeClass("highlight")
			}
			b.addClass("highlight")
		},
		change_item_on_keyup : function (g) {
			if (g.key == "esc") {
				this.menuZeroLevelDiv.setStyles({
					display : "none"
				})
			}
			if (g.key == "enter") {
				this.selectItem()
			}
			if (g.key == "up") {
				var d = this.currentSelectItem.getPrevious("li");
				var a = this.currentSelectItem;
				if ($defined(d)) {
					a.fireEvent("mouseout");
					d.fireEvent("mouseover")
				}
			}
			if (g.key == "down") {
				if (this.currentSelectItem.getProperty("name") == "swordMenuLi_null_null") {
					this.currentSelectItem.fireEvent("mouseover")
				} else {
					var b = this.currentSelectItem.getNext("li");
					var a = this.currentSelectItem;
					if ($defined(b)) {
						a.fireEvent("mouseout");
						b.fireEvent("mouseover")
					}
				}
			}
			if (g.key == "left") {
				var c = this.menuZeroLevelDiv.getElement("li[code=" + this.currentSelectItem.getProperty("pCode") + "]");
				var a = this.currentSelectItem;
				if ($defined(c)) {
					a.fireEvent("mouseout");
					c.fireEvent("mouseover")
				}
			}
			if (g.key == "right") {
				var f = this.menuZeroLevelDiv.getElement("li[name=swordMenuLi_" + this.currentSelectItem.getProperty("code") + "_0]");
				var a = this.currentSelectItem;
				if ($defined(f)) {
					a.fireEvent("mouseout");
					f.fireEvent("mouseover")
				}
			}
		},
		setItemFocus : function (a) {
			if ($defined(this.menuZeroLevelDiv)) {
				var b = this.menuZeroLevelDiv.getElement("li[code=" + a + "]");
				if ($chk(b)) {
					this.setHighlight(b, this.clickedItem);
					this.clickedItem = b
				}
			}
		},
		setMenuStatus : function (d, a) {
			if ($defined(this.menuZeroLevelDiv)) {
				var b = this.menuZeroLevelDiv.getElement("li[code=" + d + "]");
				if ($chk(b)) {
					if (a == "true" && b.get("cloneFlag")) {
						var c = b.getNext();
						c.setStyle("display", "");
						if (b.hasClass("highlight")) {
							c.addClass("highlight");
							this.clickedItem = c
						}
						b.destroy()
					} else {
						if (a == "false" && !b.get("cloneFlag")) {
							var f = b.clone(true);
							f.addClass("enabledStyle");
							b.setStyle("display", "none");
							f.inject(b, "before");
							f.set("cloneFlag", true)
						}
					}
				} else {
					if (a == "true") {
						this.data.each(function (h, g) {
							if (h.code == d) {
								h.enabled = "true"
							}
						})
					} else {
						this.data.each(function (h, g) {
							if (h.code == d) {
								h.enabled = "false"
							}
						})
					}
				}
			}
		},
		refresh : function () {
			var a = $(this.options.name);
			if ($defined(this.menuZeroLevelDiv)) {
				this.menuZeroLevelDiv.destroy();
				this.root.empty();
				this.parseData();
				if (this.options.isShow == "true") {
					this.buildMenuDiv()
				}
			}
		},
		addImg : function (b, a) {
			if (b.imgName) {
				var c = jsR.rootPath + "swordweb/styles/gt3new/SwordMenu/images/" + b.imgName;
				a.setStyle("background", "url(" + c + ") no-repeat center")
			} else {
				if (b.imgUrl) {
					a.setStyle("background", "url(" + b.imgUrl + ") no-repeat center")
				}
			}
		},
		setDisplayTagWithBuild : function (a) {
			this.options.displayTag = a
		},
		setMenuHide : function (a) {
			if (a == "true") {
				this.menuZeroLevelDiv.setStyle("display", "")
			} else {
				this.menuZeroLevelDiv.setStyle("display", "none")
			}
		}
	});
var SwordPopUpBox = new Class({
		Implements : [Events, Options],
		name : "SwordPopUpBox",
		options : {
			type : null,
			top : null,
			left : null,
			width : 370,
			height : 185,
			zIndex : 10001,
			position : "absolute",
			titleName : i18n.titleName,
			okBtnName : i18n.okBtnName,
			cancelBtnName : i18n.cancelBtnName,
			defineBtnName : i18n.defineBtnName,
			isShowDefineBtnName : "false",
			message : null,
			promptValue : "",
			isMin : "false",
			isNormal : "false",
			isMax : "false",
			isClose : "true",
			isShowMask : true,
			mask : {
				background : "gray",
				opacity : 0.5,
				zIndex : 30000,
				position : "absolute",
				left : null,
				top : null,
				width : null,
				height : null
			},
			onOk : $empty,
			onDefine : $empty,
			onCancel : $empty,
			onClose : $empty,
			onShow : $empty,
			onHide : $empty,
			onMin : $empty,
			onMax : $empty,
			onNormal : $empty,
			popUpTweenTime : 200,
			popUpTween : [],
			isAutoDisAppear : "false",
			autoDisAppearTime : 5000,
			param : null,
			max : false,
			dragObj : null,
			dftime : 10
		},
		maskObj : null,
		mask : null,
		popUpDiv : null,
		titleDiv : null,
		titleNameDiv : null,
		titleMinDiv : null,
		titleNormalDiv : null,
		titleMaxDiv : null,
		titleCloseDiv : null,
		contentDiv : null,
		contentIframe : null,
		contentMessageDiv : null,
		contentPromptInput : null,
		operateDiv : null,
		operateOkBtn : null,
		operateCancelBtn : null,
		operateDefineBtn : null,
		returnValue : null,
		popUpState : "normal",
		bodySize : {
			width : 0,
			height : 0
		},
		isMsnFlag : false,
		initialize : function (a) {
			this.setOptions(a)
		},
		initParam : function (a) {},
		initData : function () {},
		createAllDiv : function (a) {
			var b = window.document;
			if ($type(window.document.body) == "element" && $(window.document.body).getHeight() == 0 && $(window.document.body).getWidth() == 0) {
				b = parent.window.document
			}
			this.popUpDiv = new Element("div", {
					id : "ym-window",
					styles : {
						"z-index" : this.options.zIndex,
						position : "absolute",
						left : this.options.left,
						top : -1000,
						width : this.options.width,
						height : this.options.height
					}
				}).inject(b.body);
			if (this.options.popUpTween.length != 0) {
				this.popUpDiv.setStyle("display", "none")
			}
			this.bodySize.width = $(b.body).getSize().x;
			this.bodySize.height = $(b.body).getSize().y;
			if (!$defined(a) || ($defined(a) && this.isBody(a))) {
				this.maskObj = b.body;
				if (this.options.isShowMask == true) {
					if (jsR.config.swordPopUpBox.flag) {
						this.options.mask.zIndex = this.options.mask.zIndex + jsR.config.swordPopUpBox.number;
						jsR.config.swordPopUpBox.number++
					}
					this.mask = new SwordMask(this.options.mask);
					this.mask.mask(this.maskObj, this.popUpDiv);
					pc.maskState = true;
					if ($chk(this.mask.maskDiv)) {
						this.mask.maskDiv.setStyle("width", "100%")
					}
					if ($chk(this.mask.maskIframe)) {
						this.mask.maskIframe.setStyle("width", "100%")
					}
					if (this.options.top == null) {
						this.options.top = this.mask.getElPosition().top
					} else {
						this.setTop(this.popUpDiv, this.options.top)
					}
					if (this.options.left == null) {
						this.options.left = this.mask.getElPosition().left
					} else {
						this.popUpDiv.setStyle("left", this.options.left)
					}
				} else {
					if (this.options.left == null) {
						this.options.left = ($(this.maskObj).getSize().x - this.options.width) / 2 + $(b.body).getScroll().x
					}
					if (this.options.top == null) {
						this.options.top = ($(this.maskObj).getSize().y - this.options.height) / 2 + $(b.body).getScroll().y
					}
					this.popUpDiv.setStyles({
						"z-index" : this.options.zIndex,
						position : "absolute",
						left : this.options.left,
						width : this.options.width,
						height : this.options.height
					});
					this.setTop(this.popUpDiv, this.options.top)
				}
			} else {
				this.maskObj = a;
				if (this.options.isShowMask == true) {
					if (jsR.config.swordPopUpBox.flag) {
						this.options.mask.zIndex = this.options.mask.zIndex + jsR.config.swordPopUpBox.number;
						jsR.config.swordPopUpBox.number++
					}
					this.mask = new SwordMask(this.options.mask);
					this.mask.mask(this.maskObj, this.popUpDiv);
					if (this.options.top == null) {
						this.options.top = this.mask.getElPosition().top
					}
					if (this.options.left == null) {
						this.options.left = this.mask.getElPosition().left
					}
				} else {
					if (this.options.left == null) {
						this.options.left = this.maskObj.getPosition().x + (this.maskObj.getSize().x - this.options.width) / 2 + this.maskObj.getScroll().x
					}
					if (this.options.top == null) {
						this.options.top = this.maskObj.getPosition().y + (this.maskObj.getSize().y - this.options.height) / 2 + this.maskObj.getScroll().y
					}
					this.popUpDiv.setStyles({
						"z-index" : this.options.zIndex,
						position : "absolute",
						left : this.options.left,
						width : this.options.width,
						height : this.options.height
					});
					this.setTop(this.popUpDiv, this.options.top)
				}
			}
			if (this.options.position == "fixed") {
				this.popUpDiv.setStyles({
					position : "absolute",
					left : this.options.left,
					width : this.options.width,
					height : this.options.height
				});
				this.setTop(this.popUpDiv, this.options.top)
			}
			this.popUpDiv.setStyle("height", "auto")
		},
		createTitle : function () {
			var b = window.document;
			if ($type(window.document.body) == "element" && $(window.document.body).getHeight() == 0 && $(window.document.body).getWidth() == 0) {
				b = parent.window.document
			}
			var d = new Element("div", {
					id : "ym-tl",
					"class" : "ym-tl",
					styles : {
						cursor : "move"
					}
				}).inject(this.popUpDiv);
			this.titleNameDiv = new Element("div", {
					"class" : "ym-header-text"
				}).inject(d);
			var c = new Element("div", {
					"class" : "ym-tr"
				}).inject(d);
			this.titleDiv = new Element("div", {
					"class" : "ym-tc"
				}).inject(c);
			this.titleDiv = new Element("span", {
					"class" : "ym-sp"
				}).inject(this.titleNameDiv);
			this.titleNameDiv.appendText(this.options.titleName);
			var a = new Element("div", {
					"class" : "ym-header-tools"
				}).inject(d);
			if (this.options.type == "ymPrompt_iframe" || this.options.type == "ymPrompt_msn") {
				if (this.options.isClose == "true") {
					this.titleCloseDiv = new Element("div", {
							"class" : "ymPrompt_close",
							title : i18n.boxClose
						}).inject(a);
					this.titleCloseDiv.addEvent("click", function (f) {
						this.closePopUpBox()
					}
						.bind(this))
				}
				if (this.options.isMax == "true") {
					this.titleMaxDiv = new Element("div", {
							"class" : "ymPrompt_max",
							title : i18n.boxMax
						}).inject(a);
					this.titleMaxDiv.addEvent("click", this.max.bind(this))
				}
				if (this.options.isNormal == "true") {
					this.titleNormalDiv = new Element("div", {
							"class" : "ymPrompt_normal",
							title : i18n.boxNatural
						}).inject(a);
					this.titleNormalDiv.addEvent("click", this.normal.bind(this))
				}
				if (this.options.isMin == "true") {
					this.titleMinDiv = new Element("div", {
							"class" : "ymPrompt_min",
							title : i18n.boxMin
						}).inject(a);
					this.titleMinDiv.addEvent("click", this.min.bind(this))
				}
			} else {
				if (this.options.type == "ymPrompt_win") {
					this.titleCloseDiv = new Element("div", {
							"class" : "ymPrompt_close",
							title : i18n.boxClose
						}).inject(a);
					this.titleCloseDiv.addEvent("click", function (f) {
						this.closePopUpBox()
					}
						.bind(this))
				}
			}
			this.dragObj = new Drag(this.popUpDiv, {
					snap : 5,
					limit : {
						x : [0, $(b.body).getWidth() - this.popUpDiv.getWidth()],
						y : [0, $(b.body).getHeight() - this.options.height - 20]
					},
					handle : d,
					onBeforeStart : function () {
						var f = $(b.body).getHeight() - this.options.height - 20;
						if (f < 0) {
							f = 0
						}
						this.dragObj.options.limit = {
							x : [0, $(b.body).getWidth() - this.popUpDiv.getWidth()],
							y : [0, f]
						}
					}
					.bind(this),
					onComplete : function (f) {
						f.getElements("iframe").setStyle("display", "")
					}
					.bind(this),
					onStart : function (f) {
						if (this.popUpState == "min") {
							this.dragObj.limit.y = [0, $(b.body).getHeight() - 48]
						}
						f.getElements("iframe").setStyle("display", "none")
					}
					.bind(this)
				})
		},
		createContent : function () {
			var c = new Element("div", {
					id : "ym-ml",
					"class" : "ym-ml"
				}).inject(this.popUpDiv);
			var b = new Element("div", {
					"class" : "ym-mr"
				}).inject(c);
			var a = new Element("div", {
					"class" : "ym-mc"
				}).inject(b);
			this.contentDiv = new Element("div", {
					"class" : "ym-body " + this.options.type,
					styles : {
						position : "relative",
						width : "100%"
					}
				}).inject(a);
			this.contentMessageDiv = new Element("div", {
					"class" : "ym-content"
				}).inject(this.contentDiv);
			this.contentMessageDiv.set("html", this.options.message);
			if (this.options.width / this.options.message.length > 20) {
				this.contentMessageDiv.setStyle("text-align", "center")
			}
		},
		createContent4Div : function () {
			var c = new Element("div", {
					id : "ym-ml",
					"class" : "ym-ml"
				}).inject(this.popUpDiv);
			var b = new Element("div", {
					"class" : "ym-mr"
				}).inject(c);
			var a = new Element("div", {
					"class" : "ym-mc"
				}).inject(b);
			this.contentDiv = new Element("div", {
					"class" : "ym-body " + this.options.type,
					styles : {
						position : "relative",
						width : "100%",
						height : this.options.height - 69
					}
				}).inject(a);
			this.contentMessageDiv = new Element("div", {
					"class" : "ym-content"
				}).inject(this.contentDiv);
			this.contentMessageDiv.set("html", this.options.message)
		},
		createIframeContent : function (f, a) {
			var l = new Element("div", {
					id : "ym-ml",
					"class" : "ym-ml"
				}).inject(this.popUpDiv);
			var k = new Element("div", {
					"class" : "ym-mr"
				}).inject(l);
			var h = new Element("div", {
					"class" : "ym-mc"
				}).inject(k);
			this.contentDiv = new Element("div", {
					"class" : "ym-body",
					styles : {
						position : "relative",
						width : "100%",
						height : (f) ? this.options.height : this.options.height - 28
					}
				}).inject(h);
			var d = a || "IFrame" + $time();
			this.contentIframe = new Element("iframe");
			var b = $chk(this.options.message) ? pageContainer.AddBaseCode2URL(this.options.message) : this.options.message;
			this.contentIframe.setProperties({
				name : d,
				id : d,
				src : b,
				frameBorder : "0"
			});
			this.contentIframe.setStyles({
				left : 0,
				top : 0,
				width : "100%",
				border : "0px",
				height : (f) ? this.options.height : this.options.height - ((Browser.Engine.trident5) ? 28 : 30)
			});
			this.contentIframe.inject(this.contentDiv);
			var g = window;
			if ($type(window.document.body) == "element" && $(window.document.body).getHeight() == 0 && $(window.document.body).getWidth() == 0) {
				g = parent.window
			}
			var c = g.frames[d];
			c.name = d;
			this.addEvent("onOk", this.closePopUpBox);
			this.addEvent("onCancel", this.closePopUpBox);
			return c
		},
		createPromptContent : function () {
			var c = new Element("div", {
					id : "ym-ml",
					"class" : "ym-ml"
				}).inject(this.popUpDiv);
			var b = new Element("div", {
					"class" : "ym-mr"
				}).inject(c);
			var a = new Element("div", {
					"class" : "ym-mc"
				}).inject(b);
			this.contentDiv = new Element("div", {
					"class" : "ym-body " + this.options.type,
					align : "center",
					styles : {
						position : "relative",
						width : "100%"
					}
				}).inject(a);
			this.contentMessageDiv = new Element("div", {
					"class" : "ym-content"
				}).inject(this.contentDiv);
			this.contentMessageDiv.appendText(this.options.message);
			var d = new Element("br").inject(this.contentDiv);
			this.contentPromptInput = new Element("input", {
					type : "text",
					"class" : "item_input"
				}).inject(this.contentDiv);
			this.contentPromptInput.addEvent("click", function (f) {
				this.contentPromptInput.focus()
			}
				.bind(this));
			this.contentPromptInput.value = this.options.promptValue
		},
		createAlertOperate : function () {
			var b = new Element("div", {
					id : "ym-btnl",
					"class" : "ym-ml"
				}).inject(this.popUpDiv);
			var a = new Element("div", {
					"class" : "ym-mr"
				}).inject(b);
			this.operateDiv = new Element("div", {
					"class" : "ym-btn"
				}).inject(a);
			this.operateOkBtn = new Element("input", {
					id : "ymPrompt_btn_0",
					"class" : "btnStyle handler",
					type : "button",
					value : this.options.okBtnName,
					styles : {
						cursor : "pointer"
					}
				}).inject(this.operateDiv);
			this.operateOkBtn.addEvent("click", function (d) {
				this.fireEvent("onOk");
				this.closePopUpBox()
			}
				.bind(this));
			try {
				(function () {
					this.operateOkBtn.focus()
				}).delay(100, this)
			} catch (c) {}

		},
		createConfirmOperate : function () {
			var b = new Element("div", {
					id : "ym-btnl",
					"class" : "ym-ml"
				}).inject(this.popUpDiv);
			var a = new Element("div", {
					"class" : "ym-mr"
				}).inject(b);
			this.operateDiv = new Element("div", {
					"class" : "ym-btn"
				}).inject(a);
			this.operateOkBtn = new Element("input", {
					id : "ymPrompt_btn_0",
					"class" : "btnStyle handler",
					type : "button",
					value : this.options.okBtnName,
					styles : {
						cursor : "pointer"
					}
				}).inject(this.operateDiv);
			if (this.options.isShowDefineBtnName == "true") {
				this.operateDefineBtn = new Element("input", {
						id : "ymPrompt_btn_2",
						"class" : "btnStyle handler",
						type : "button",
						value : this.options.defineBtnName,
						styles : {
							cursor : "pointer"
						}
					}).inject(this.operateDiv);
				this.operateDefineBtn.addEvent("click", function (c) {
					this.fireEvent("onDefine");
					this.closePopUpBox()
				}
					.bind(this))
			}
			this.operateCancelBtn = new Element("input", {
					id : "ymPrompt_btn_1",
					"class" : "btnStyle handler",
					type : "button",
					value : this.options.cancelBtnName,
					styles : {
						cursor : "pointer"
					}
				}).inject(this.operateDiv);
			this.operateOkBtn.addEvent("click", function (c) {
				this.fireEvent("onOk");
				this.closePopUpBox()
			}
				.bind(this));
			this.operateCancelBtn.addEvent("click", function (c) {
				this.fireEvent("onCancel");
				this.closePopUpBox()
			}
				.bind(this))
		},
		createPromptOperate : function () {
			var b = new Element("div", {
					id : "ym-btnl",
					"class" : "ym-ml"
				}).inject(this.popUpDiv);
			var a = new Element("div", {
					"class" : "ym-mr"
				}).inject(b);
			this.operateDiv = new Element("div", {
					"class" : "ym-btn"
				}).inject(a);
			this.operateOkBtn = new Element("input", {
					id : "ymPrompt_btn_0",
					"class" : "btnStyle handler",
					type : "button",
					value : this.options.okBtnName,
					styles : {
						cursor : "pointer"
					}
				}).inject(this.operateDiv);
			if (this.options.isShowDefineBtnName == "true") {
				this.operateDefineBtn = new Element("input", {
						id : "ymPrompt_btn_2",
						"class" : "btnStyle handler",
						type : "button",
						value : this.options.defineBtnName,
						styles : {
							cursor : "pointer"
						}
					}).inject(this.operateDiv);
				this.operateDefineBtn.addEvent("click", function (c) {
					this.fireEvent("onDefine");
					this.closePopUpBox()
				}
					.bind(this))
			}
			this.operateCancelBtn = new Element("input", {
					id : "ymPrompt_btn_1",
					"class" : "btnStyle handler",
					type : "button",
					value : this.options.cancelBtnName,
					styles : {
						cursor : "pointer"
					}
				}).inject(this.operateDiv);
			this.operateOkBtn.addEvent("click", function (c) {
				this.fireEvent("onOk", this.contentPromptInput.value);
				this.closePopUpBox()
			}
				.bind(this));
			this.operateCancelBtn.addEvent("click", function (c) {
				this.fireEvent("onCancel");
				this.closePopUpBox()
			}
				.bind(this))
		},
		createTail : function () {
			return;
			var c = new Element("div", {
					id : "ym-bl",
					"class" : "ym-bl"
				}).inject(this.popUpDiv);
			var b = new Element("div", {
					"class" : "ym-br"
				}).inject(c);
			var a = new Element("div", {
					"class" : "ym-bc"
				}).inject(b)
		},
		addPopUpTween : function () {
			for (var a = 0; a < this.options.popUpTween.length; a++) {
				new Fx.Tween(this.popUpDiv, {
					duration : this.options.popUpTween[a]["popUpTweenTime"],
					transition : this.options.popUpTween[a]["popUpTweenTransitionType"]
				}).start(this.options.popUpTween[a]["popUpTweenStyle"], this.options.popUpTween[a]["popUpTweenStyleFrom"], this.options.popUpTween[a]["popUpTweenStyleTo"])
			}
			if (this.options.popUpTween.length != 0) {
				this.popUpDiv.setStyle("display", "block")
			}
		},
		alert : function (b, a) {
			this.initialize(b);
			this.options.type = "ymPrompt_alert";
			this.createAllDiv(a);
			this.createTitle();
			this.createContent();
			this.createAlertOperate();
			this.createTail();
			this.addPopUpTween();
			this.titleDiv.addClass("ymPrompt_titile_alert")
		},
		alertRight : function (b, a) {
			this.initialize(b);
			this.options.type = "ymPrompt_succeed";
			this.createAllDiv(a);
			this.createTitle();
			this.createContent();
			this.createAlertOperate();
			this.createTail();
			this.addPopUpTween();
			this.titleDiv.addClass("ymPrompt_titile_succeed");
			try {
				(function () {
					this.operateOkBtn.focus()
				}).delay(this.options.dftime, this)
			} catch (c) {}

		},
		alertWrong : function (b, a) {
			this.initialize(b);
			this.options.type = "ymPrompt_error";
			this.createAllDiv(a);
			this.createTitle();
			this.createContent();
			this.createAlertOperate();
			this.createTail();
			this.addPopUpTween();
			this.titleDiv.addClass("ymPrompt_titile_error");
			try {
				(function () {
					this.operateOkBtn.focus()
				}).delay(this.options.dftime, this)
			} catch (c) {}

		},
		confirm : function (b, a) {
			this.initialize(b);
			this.options.type = "ymPrompt_confirm";
			this.createAllDiv(a);
			this.createTitle();
			this.createContent();
			this.createConfirmOperate();
			this.createTail();
			this.addPopUpTween();
			this.titleDiv.addClass("ymPrompt_titile_confirm");
			try {
				(function () {
					this.operateOkBtn.focus()
				}).delay(this.options.dftime, this)
			} catch (c) {}

		},
		prompt : function (b, a) {
			this.initialize(b);
			this.options.type = "ymPrompt_prompt";
			this.createAllDiv(a);
			this.createTitle();
			this.createPromptContent();
			this.createPromptOperate();
			this.createTail();
			this.addPopUpTween();
			this.titleDiv.addClass("ymPrompt_titile_prompt");
			try {
				this.operateOkBtn.focus()
			} catch (c) {}

		},
		alertDiv : function (b, a) {
			this.initialize(b);
			this.options.type = "ymPrompt_win";
			this.createAllDiv(a);
			this.createTitle();
			this.createContent4Div();
			this.createTail();
			this.titleDiv.addClass("ymPrompt_titile_iframe")
		},
		alertIframe : function (c, b) {
			var a = true;
			if (!$chk(c.message) && c.submit) {
				var k = c.submit;
				k.isContinue = true;
				k.initSubmitWidget(k.container);
				k.doBeforeEvents();
				a = k.isContinue
			}
			if (a) {
				this.initialize(c);
				this.options.type = "ymPrompt_iframe";
				this.createAllDiv(b);
				this.createTitle();
				var d = "IFrame" + $time();
				var h = this.createIframeContent(null, d);
				h.focus();
				var g = function () {
					try {
						h.box = this;
						h.frameElement.parentNode.ownerDocument.window[d] = this
					} catch (f) {}

				}
				.bind(this);
				if (Browser.Engine.trident) {
					this.contentIframe.onreadystatechange = g
				} else {
					this.contentIframe.addEvent("domready", g)
				}
				this.createTail();
				this.addPopUpTween();
				if (this.options.max) {
					this.max()
				}
				if (!$chk(c.message) && c.submit) {
					var k = c.submit;
					k.options.postType = "form_" + d;
					k.frameWin = h;
					k.submit()
				}
				this.titleDiv.addClass("ymPrompt_titile_iframe");
				return h
			}
		},
		alertIframeNoPanel : function (b, a) {
			this.initialize(b);
			this.options.type = "ymPrompt_iframe";
			this.createAllDiv(a);
			var c = this.createIframeContent(true);
			c.focus();
			this.popUpDiv.getElements("div.ym-ml").removeClass("ym-ml");
			this.popUpDiv.getElements("div.ym-mr").removeClass("ym-mr");
			this.addPopUpTween();
			this.setTop(this.popUpDiv, this.options.top);
			return c
		},
		alertMSN : function (d, c) {
			d.position = "absolute";
			d.isShowMask = false;
			this.initialize(d);
			this.isMsnFlag = true;
			this.options.type = "ymPrompt_msn";
			this.createAllDiv(c);
			this.createTitle();
			var k = this.createIframeContent();
			this.createTail();
			var l = this.popUpDiv.getSize();
			var b = $(document.body).getSize();
			var g = (b.x - l.x);
			var a = $(document.body).getScroll().y;
			var h = b.y + a;
			if (Browser.Engine.trident) {
				h = h - 5
			}
			this.popUpDiv.setStyles({
				position : "absolute",
				left : g,
				height : 0
			});
			this.setTop(this.popUpDiv, h);
			new Fx.Tween(this.popUpDiv, {
				duration : this.options.popUpTweenTime,
				transition : Fx.Transitions.linear
			}).start("top", h, h - l.y);
			new Fx.Tween(this.popUpDiv, {
				duration : (this.options.popUpTweenTime + 100),
				transition : Fx.Transitions.linear
			}).start("height", 0, l.y);
			if (this.options.isAutoDisAppear == "true") {
				this.closePopUpBox(this.options.autoDisAppearTime)
			}
			this.titleDiv.addClass("ymPrompt_titile_iframe");
			return k
		},
		closePopUpBox : function (a) {
			if (!a) {
				a = 1
			}
			this._closePopUpBox.delay(a, this)
		},
		_closePopUpBox : function () {
			this.fireEvent("onClose", [this]);
			if (this.contentIframe) {
				try {
					var a = function (d) {
						d.each(function (g) {
							try {
								if (g) {
									if (g.contentWindow && g.contentWindow.$$) {
										var f = g.contentWindow.$$("iframe");
										if (f.lenght > 0) {
											a(f)
										}
									}
									if (Browser.Engine.trident) {
										g.set("src", "");
										g.src = "";
										g.destroy()
									} else {
										if (Browser.Engine.webkit) {
											g.set("src", "about:blank");
											g.src = "about:blank";
											top.injectIfame(g)
										}
									}
								}
							} catch (h) {
								if (Browser.Engine.trident) {
									g.set("src", "");
									g.src = ""
								} else {
									if (Browser.Engine.webkit) {
										g.set("src", "about:blank");
										g.src = "about:blank";
										top.injectIfame(g)
									}
								}
							}
						}
							.bind(this))
					};
					if (this.contentIframe.contentWindow.$$) {
						var c = this.contentIframe.contentWindow.$$("iframe");
						a(c)
					}
					a = null;
					if (Browser.Engine.trident) {
						this.contentIframe.set("src", "");
						this.contentIframe.src = "";
						this.contentIframe.destroy()
					} else {
						if (Browser.Engine.webkit) {
							this.contentIframe.set("src", "about:blank");
							this.contentIframe.src = "about:blank";
							top.injectIfame(this.contentIframe)
						}
					}
				} catch (b) {}

			}
			if (this.options.isShowMask == true) {
				this.mask.unmask();
				if (jsR.config.swordPopUpBox.flag) {
					jsR.config.swordPopUpBox.number--
				}
			}
			this.popUpDiv.destroy();
			(function () {
				for (var d in this) {
					this[d] = undefined
				}
			}).delay(1, this);
			pc.maskState = false
		},
		isBody : function (a) {
			return (/^(?:body|html)$/i).test((a.get("tag") || a.tagName))
		},
		max : function () {
			this.popUpState = "max";
			var b = 0;
			if (this.options.type != "ymPrompt_win" && this.options.type != "ymPrompt_iframe" && this.options.type != "ymPrompt_msn") {
				b = 69;
				this.operateDiv.setStyles({
					display : ""
				})
			} else {
				b = 28
			}
			var f = 0;
			var a = 0;
			var d = 0;
			var c = 0;
			if (this.isBody(this.maskObj)) {
				if (this.options.isShowMask == true) {
					f = 0 + document.body.getScroll().x;
					a = 0 + document.body.getScroll().y;
					d = document.body.getSize().x;
					c = document.body.getSize().y
				} else {
					f = 0 + document.body.getScroll().x;
					a = 0 + document.body.getScroll().y;
					d = document.body.getSize().x;
					c = document.body.getSize().y
				}
			} else {
				if (this.options.isShowMask == true) {
					f = this.mask.options.left;
					a = this.mask.options.top;
					d = this.mask.options.width;
					c = this.mask.options.height
				} else {
					f = this.maskObj.getPosition().x + this.maskObj.getScroll().x;
					a = this.maskObj.getPosition().y + this.maskObj.getScroll().y;
					d = this.maskObj.getSize().x;
					c = this.maskObj.getSize().y
				}
			}
			this.popUpDiv.setStyles({
				height : c,
				left : f,
				width : d
			});
			this.setTop(this.popUpDiv, a);
			this.contentDiv.setStyles({
				height : c - b
			});
			if (this.options.type == "ymPrompt_iframe" || this.options.type == "ymPrompt_msn") {
				this.contentIframe.setStyles({
					height : c - b
				})
			}
			this.fireEvent("onMax", [this])
		},
		min : function () {
			if (this.popUpState != "min") {
				if ($defined(this.operateDiv)) {
					this.operateDivHeight = this.operateDiv.getSize().y
				}
			}
			this.popUpState = "min";
			var a = 0;
			if (this.options.type != "ymPrompt_win" && this.options.type != "ymPrompt_iframe" && this.options.type != "ymPrompt_msn") {
				a = 69 - this.operateDivHeight;
				this.operateDiv.setStyles({
					display : "none"
				})
			} else {
				a = 28
			}
			this.popUpDiv.setStyles({
				height : a,
				left : 0,
				width : this.options.width
			});
			this.setTop(this.popUpDiv, $(document.body).getHeight() - 48);
			this.contentDiv.setStyles({
				height : 0
			});
			this.popUpDiv.setStyle("height", "auto");
			this.fireEvent("onMin")
		},
		normal : function () {
			this.popUpState = "normal";
			var a = 0;
			if (this.options.type != "ymPrompt_win" && this.options.type != "ymPrompt_iframe" && this.options.type != "ymPrompt_msn") {
				a = 69;
				this.operateDiv.setStyles({
					display : ""
				})
			} else {
				a = 28
			}
			this.popUpDiv.setStyles({
				height : this.options.height,
				left : this.options.left,
				width : this.options.width
			});
			this.setTop(this.popUpDiv, this.options.top);
			var b = (this.options.height.toInt() - a);
			this.contentDiv.setStyles({
				height : b
			});
			if (this.options.type == "ymPrompt_iframe" || this.options.type == "ymPrompt_msn") {
				this.contentIframe.setStyles({
					height : b
				})
			}
			this.popUpDiv.setStyle("height", "auto");
			this.fireEvent("onNormal", [this])
		},
		close : function (a) {
			this.closePopUpBox(a)
		},
		hide : function (a) {
			a = a || -1;
			this.popUpDiv.setStyle("z-index", a);
			this.fireEvent("onHide", [this])
		},
		show : function (a) {
			a = a || this.zIndex;
			this.popUpDiv.setStyle("z-index", a);
			this.fireEvent("onShow", [this])
		},
		setTop : function (b, a) {
			if (a / 1 < 0 || (a + "").indexOf("-") >= 0) {
				a = 0
			}
			b.setStyle("top", a)
		}
	});
var SwordSelect = new Class({
		Implements : [Events, Options],
		name : "SwordSelect",
		$family : {
			name : "SwordSelect"
		},
		options : {
			name : null,
			type : null,
			prikey : null,
			lines : 10,
			height : 21,
			data : null,
			pNode : null,
			edit : "true",
			disable : null,
			rule : null,
			msg : null,
			parent : null,
			child : null,
			dataname : null,
			sbmitcontent : null,
			onChange : null,
			onSelect : null,
			onShow : null,
			onHide : null,
			dataFilter : null,
			onSubmitBefore : null,
			popWidth : null,
			displayCode : "false",
			popdisplay : null,
			inputdisplay : null,
			handInput : "false",
			addAllItem : "false",
			allItemCode : "",
			allItemCap : ""
		},
		box : null,
		selectbox : null,
		selectedIndex : null,
		currentElement : null,
		currentText : null,
		validate : null,
		selFx : null,
		leaveSign : null,
		rebuild : null,
		hasBoxDiv : false,
		cachearray : [],
		CacheData : null,
		updateCache : function (b, c) {
			if (this.CacheData == null) {
				this.CacheData = new Hash();
				this.CacheData.set(b, c)
			} else {
				var a = this.CacheData.get(b);
				if ($defined(a)) {
					a.combine(c)
				} else {
					this.CacheData.set(b, c)
				}
			}
		},
		getDataInCache : function (g, b, f) {
			var a = false,
			d;
			if ($defined(this.box.get("parent"))) {
				if (!$defined(f) || !$chk(f)) {
					this.build_options([]);
					return
				}
			}
			if (this.CacheData != null && $defined(this.CacheData.get(b))) {
				d = this.dataFilter(this.CacheData.get(b));
				if (d.length == 0) {
					a = true
				}
			} else {
				a = true
			}
			if (a) {
				var h = null;
				this.options.onSubmitBefore = this.box.get("onSubmitBefore") || this.box.retrieve("onSubmitBefore");
				if ($defined(this.options.onSubmitBefore) && $chk(this.options.onSubmitBefore)) {
					h = this.getFunc(this.options.onSubmitBefore)[0](this)
				}
				this.selectLoading();
				if ($type(h) == "SwordSubmit") {
					if (this.box.get("initOnSubmitBefore") != "true") {
						h.addEvent("onSuccess", function (l, k) {
							this.unselectLoding();
							var m;
							var p = this;
							k.data.each(function (s, r) {
								if (s.dataName == p.box.get("dataname") || s.name == p.box.get("name")) {
									b = s.dataName || s.name;
									m = s.data;
									return
								}
							});
							this.updateCache(b, m);
							var q = this.box.get("dataFilter");
							if ($defined(q)) {
								try {
									this.options.data = loadData = this.getFunc(q)[0](m, this.box, this)
								} catch (n) {
									alert("执行下拉列表的数据过滤方法出错！请检查页面自定义函数" + q)
								}
							}
							this.options.data = m;
							this.build_options(m);
							xyposition(this.box, this.box_div)
						}
							.bind(this));
						this.box.set("initOnSubmitBefore", "true")
					}
					h.options.mask = "false";
					h.submit()
				} else {
					if (g) {
						var c = pc.getReq({
								tid : g,
								widgets : [{
										sword : "SwordForm",
										name : b,
										data : {
											pcode : {
												value : f
											}
										}
									}
								]
							});
						pc.postReq({
							req : c,
							loaddata : "widget",
							onSuccess : function (k) {
								this.unselectLoding();
								var l = $defined(k.data[0]) ? k.data[0].data : null;
								this.updateCache(b, l);
								this.build_options(l);
								xyposition(this.box, this.box_div);
								this.def_select(this.box.get("code"))
							}
							.bind(this),
							onError : function () {
								alert("从服务器端获取数据出错了,请求的tid为【" + g + "】")
							}
							.bind(this)
						})
					}
				}
			} else {
				this.build_options(d)
			}
		},
		selectLoading : function () {
			if (this.box_div.get("state") != "loading") {
				var a = new Element("div", {
						"class" : "swordselect-list-item",
						name : "loading"
					}).inject(this.selectbox);
				var b = new Element("div").inject(a);
				new Element("div", {
					"class" : "selectLoding"
				}).inject(b);
				new Element("div", {
					"class" : "selectLoding_text"
				}).appendText(i18n.selectLoading).inject(b)
			}
			this.box_div.set("state", "loading");
			this.selectbox.setStyle("height", "");
			this.box_div.setStyles({
				display : "block",
				left : this.box._getPosition().x,
				top : this.box._getPosition().y + this.box.getHeight()
			})
		},
		unselectLoding : function () {
			this.box_div.set("state", "");
			this.selectbox.getElements("div").each(function (a) {
				a.destroy()
			}
				.bind(this))
		},
		genarateInputContent : function (a) {
			return SwordSelectTemplate.genarateInputContent(this.box, a)
		},
		genaratePopContent : function (b) {
			var a = this.box.get("popdisplay");
			if (!$defined(a)) {
				a = "{caption}"
			}
			return this.genarateContent(b, a)
		},
		genarateContent : function (b, a) {
			return SwordSelectTemplate.genarateContent(this.box, b, a)
		},
		initialize : function (a) {
			if (pc.SwordSelectWindowClick) {
				return
			}
			pc.SwordSelectWindowClick = true;
			window.document.addEvent("click", function (c) {
				var b = $(c.target);
				if (pc.oldSelectObj) {
					if (pc.oldSelectObj != pc.curSelectObj) {
						pc.oldSelectObj.hide();
						pc.oldSelectObj.execGridOnFinished()
					}
				}
				if (pc.curSelectObj && (b == pc.curSelectObj.box || b == pc.curSelectObj.selDiv)) {
					return
				}
				if (b.getParent() && b.getParent().hasClass("swordselect-selimg")) {
					return
				}
				if (pc.curSelectObj && !b.hasClass("sGrid_data_row_item_select")) {
					if (pc.curSelectObj.box.get("display") == "true") {
						pc.curSelectObj.hide();
						pc.curSelectObj.execGridOnFinished()
					}
				}
				return
			}
				.bind(this))
		},
		execGridOnFinished : function (a) {
			if ($defined(this.grid_onFinished)) {
				this.grid_onFinished(this.box.get("value"), this.box.get("code"), this.box.get("realvalue"), this.box.get("allDb"), a);
				if (a != "backspace") {
					this.grid_onFinished = null
				}
			}
		},
		setValidate : function (a) {
			this.validate = a
		},
		initParam : function (c, h) {
			if (h && h.name == "SwordGrid") {
				this.grid = h
			} else {
				this.grid = null
			}
			$extend(this.options, {
				name : null,
				type : null,
				prikey : null,
				lines : 10,
				width : null,
				height : 21,
				data : null,
				pNode : null,
				rule : null,
				parent : null,
				child : null,
				dataname : null,
				pcode : null,
				defValue : null,
				defIndex : null,
				tid : null,
				onChange : $empty,
				onSelect : $empty,
				onShow : $empty,
				onHide : $empty,
				dataFilter : null,
				onSubmitBefore : $empty,
				disable : null,
				sbmitcontent : null,
				popWidth : null,
				displayCode : "false",
				inputdisplay : null,
				popdisplay : null,
				edit : "true",
				handInput : "false",
				addAllItem : "false",
				allItemCode : "",
				allItemCap : ""
			});
			this.htmlOptions(c);
			if (h && h.name != "SwordGrid") {
				c.set({
					onChange : "",
					onchange : ""
				})
			}
			var a = this.options.pNode.retrieve("space");
			if ($defined(this.options.parent)) {
				var l = a.getElements("*[name='" + this.options.parent + "']")[0];
				l.set("child", this.options.name);
				if (!$chk(this.options.dataname)) {
					var f = this.getRoot();
					this.options.dataname = ($chk(f.get("dataname"))) ? f.get("dataname") : f.get("name")
				}
			}
			var k = a.getElements("*[parent]");
			for (var d = 0; d < k.length; d++) {
				var b = k[d].get("parent");
				var g = a.getElement("*[name='" + b + "']");
				if ($defined(g)) {
					g.set("child", k[d].get("name"))
				}
			}
			this.options.data = c.getChildren(">div");
			this.build_selectbox(h);
			if (this.box.get("mode") != 2) {
				this.addEventToEl("input", h);
				this.addEventToEl("div")
			} else {
				this.box.addEvent("click", function (m) {
					if ($defined(m)) {
						if (this.box == $(new Event(m).target)) {
							this.rebuild = false
						} else {
							if (this.box.get("display") == "true") {
								this.hide()
							}
							this.box = $(new Event(m).target);
							this.selDiv = this.getImgEl(this.box);
							this.rebuild = true
						}
					}
					if (this.box.get("display") == "true") {
						this.hide()
					} else {
						this.change_element_by_char();
						this.box.focus()
					}
				}
					.bind(this));
				this.selDiv.addEvent("click", function (m) {
					if (this.selDiv == $(new Event(m).target)) {
						this.rebuild = false
					} else {
						if (this.box.get("display") == "true") {
							this.hide()
						}
						this.selDiv = $(new Event(m).target);
						this.box = this.getBoxEl(this.selDiv);
						this.rebuild = true
					}
					if (this.box.get("display") == "true") {
						this.hide()
					} else {
						this.change_element_by_char();
						this.box.focus()
					}
				}
					.bind(this));
				this.box.addEvent("keyup", this.change_item_on_keyup.bind(this))
			}
			if ($defined(this.options.defValue) || $defined(this.options.defIndex)) {
				this.initData(this.options.defValue, this.box, this.options.defIndex)
			}
		},
		getBoxEl : function (a) {
			return a.getParent("table").getElement("input.swordform_item_oprate")
		},
		getImgEl : function (b) {
			var a = b.getParent();
			if ($chk(a)) {
				return a.getNext()
			}
			return null
		},
		boxtd : null,
		imgtd : null,
		getRoot : function () {
			var a = this.options.parent;
			var b = this.options.pNode.retrieve("space");
			return SwordSelectTemplate.getRoot(a, b)
		},
		isMulti : function (a) {
			return SwordSelectTemplate.isMulti(this.box, a)
		},
		initData : function (h, c, a) {
			this.hide();
			this.box = $(c);
			this.selDiv = this.getImgEl(this.box);
			if (h == "") {
				if ($defined(this.box.get("defValue")) || $defined(this.box.get("defIndex"))) {
					h = this.box.get("defValue");
					a = this.box.get("defIndex")
				} else {
					this.box.set("value", "").set("realvalue", "").set("code", "").store("allDb", {
						code : "",
						caption : ""
					});
					return
				}
			}
			if ((!$defined(h) || !$chk(h)) && (!$defined(a) || !$chk(a))) {
				return
			}
			if ($type(h) == "string") {
				h = h.toHash()
			}
			if ($type(h) == "object") {
				h = new Hash(h)
			}
			var k;
			if ($type(h) == "hash") {
				var g = {};
				h.each(function (l, d) {
					g[d] = l
				}, this);
				k = this.genarateContent(g);
				this.box.set({
					value : this.genarateInputContent(g),
					code : h.get("code"),
					realvalue : this.genarateContent(g)
				});
				this.box.store("allDb", g)
			} else {
				var f = this.getOptionsData();
				if (!$defined(f)) {
					return
				}
				if ($defined(h) || $chk(h)) {
					f.each(function (d) {
						if ($type(d) == "element") {
							d = {
								caption : d.get("caption"),
								code : d.get("code")
							}
						}
						if (d[this.box.get("codeSign")] == h) {
							k = this.genarateContent(d);
							this.box.set({
								value : this.genarateInputContent(d),
								code : d[this.box.get("codeSign")],
								realvalue : this.genarateContent(d)
							});
							this.box.store("allDb", d)
						}
					}, this)
				} else {
					if ($defined(a) || $chk(a)) {
						var b = f[a / 1];
						if ($defined(b)) {
							if ($type(b) == "element") {
								b = {
									caption : b.get("caption"),
									code : b.get("code")
								}
							}
							k = this.genarateContent(b);
							this.box.set({
								value : this.genarateInputContent(b),
								code : b[this.box.get("codeSign")],
								realvalue : this.genarateContent(b)
							});
							this.box.store("allDb", b)
						}
					}
				}
			}
			return k
		},
		divTable : null,
		build_selectbox : function (b) {
			var c = 0;
			this.divTable = Sword.utils.createTable(this, true, true);
			if (this.options.pNode.hasClass("swordform_field_wrap")) {
				c = 1;
				this.divTable.setStyle("float", "left")
			}
			this.box = new Element("input", {
					id : b.options.name + "_" + this.options.name,
					type : "text",
					rule : this.options.rule,
					msg : this.options.msg,
					"class" : "swordform_item_oprate swordform_item_input",
					widget : "select",
					name : this.options.name,
					sbmitcontent : this.options.sbmitcontent,
					prikey : this.options.prikey,
					child : this.options.child,
					parent : this.options.parent,
					lines : this.options.lines,
					lineheight : this.options.height,
					dataname : this.options.dataname,
					pcode : this.options.pcode,
					tid : this.options.tid,
					defValue : this.options.defValue,
					value : "",
					defIndex : this.options.defIndex,
					dataFilter : this.options.dataFilter,
					vType : this.validate.options.vType,
					styles : {
						"float" : "left"
					},
					popWidth : this.options.popWidth,
					displayCode : this.options.displayCode,
					inputdisplay : this.options.inputdisplay,
					popdisplay : this.options.popdisplay,
					handInput : this.options.handInput,
					addAllItem : this.options.addAllItem,
					allItemCode : this.options.allItemCode,
					allItemCap : this.options.allItemCap
				}).inject(this.boxtd);
			this.box.store("widgetObj", this);
			if (this.options.edit == "false") {
				this.box.set("readonly", true)
			}
			if (this.options.disable == "true") {
				this.box.set("disabled", true);
				this.box.setStyle("cursor", "default")
			}
			if (this.options.type == "selectsolely") {
				this.box.set("mode", 2)
			}
			this.box.store("data", this.options.data).store("onChange", this.options.onChange).store("onSelect", this.options.onSelect).store("onShow", this.options.onShow).store("onHide", this.options.onHide).store("onSubmitBefore", this.options.onSubmitBefore);
			this.selDiv = this.imgtd;
			this.selDiv.addClass("swordselect-selimg").set("vType", this.validate.options.vType).addEvents({
				mouseover : function (f) {
					var d = this.getBoxEl($(new Event(f).target));
					if (d.get("display") == "false") {
						Event(f).target.addClass("swordselect-selimg-over")
					}
				}
				.bind(this),
				mouseout : function (f) {
					var d = this.getBoxEl($(new Event(f).target));
					if (d.get("display") == "false") {
						Event(f).target.removeClass("swordselect-selimg-over")
					}
				}
				.bind(this)
			});
			if ((this.options.rule || "").indexOf("must") > -1 && b.options.requiredSign == "field") {
				new Element("span", {
					styles : {
						color : "red",
						"float" : "left"
					},
					html : "*"
				}).inject(this.divTable)
			}
			if (this.options.disable == "true") {
				this.disable(this.box)
			}
			var a;
			if (c == 0) {
				if (b.name == "SwordForm" && b.isVal() && $defined(this.options.rule)) {
					a = Sword.utils.createElAfter(this.divTable.getChildren()[0].getChildren()[0], this.box)
				}
				Sword.utils.setWidth(this.options.width, b ? b.userSize : null, this.divTable, this.box, true)
			}
			if (!this.hasBoxDiv) {
				this.createBoxDiv();
				this.hasBoxDiv = true
			}
		},
		createBoxDiv : function () {
			this.box_div = new Element("div", {
					"class" : "swordselect-list",
					id : this.box.get("id") + "_sl"
				}).inject(document.body);
			this.selectbox = new Element("div", {
					"class" : "swordselect-list-inner"
				}).inject(this.box_div);
			this.selectbox.addEvent("mousewheel", function (a) {
				a = a || window.event;
				this.scrollTop = this.scrollTop - a.event.wheelDelta;
				return false
			}
				.bind(this.selectbox));
			this.sConsole = new Element("div", {
					"class" : "swordselect-list-inner"
				}).setStyle("display", "none").inject(this.box_div);
			new Element("div", {
				"class" : "swordselect_csl_pre",
				events : {
					click : this.getNextPageData.bind(this, [-1])
				}
			}).inject(this.sConsole);
			new Element("div", {
				"class" : "swordselect_csl_next",
				events : {
					click : this.getNextPageData.bind(this, [1])
				}
			}).inject(this.sConsole)
		},
		getValue : function () {
			return ($chk(this.box.get("code"))) ? this.box.get("code") : this.box.get("value")
		},
		getParentValue : function () {
			var a = this.getBoxParent().retrieve("space") ? this.getBoxParent().retrieve("space") : this.box.getParent("div");
			var b = a.getElements("*[name='" + this.box.get("parent") + "']")[0];
			return ($chk(b.get("code"))) ? b.get("code") : b.get("value")
		},
		getBoxParent : function () {
			return this.grid ? this.box.getParent("div.sGrid_data_row_item_div") || this.options.pNode : this.box.getParent().getParent().getParent().getParent().getParent()
		},
		getOptionsData : function (g, f) {
			var a = null;
			var b = this.box.get("dataname");
			var k = ($defined(b)) ? pageContainer.getInitDataByDataName(b) : pageContainer.getInitData(this.box.get("name"));
			if (this.box.get("isAll") != "false" && !k) {
				k = SwordSelectTemplate.getCacheSelData(this.box);
				if (!k) {
					if ($chk(f) || this.grid) {
						k = this.box.retrieve("data")
					} else {
						if (this.box.getParent("table").getNext() && this.box.getParent("table").getNext().getChildren(">div").length > 0) {
							k = this.box.getParent("table").getNext().getChildren(">div")
						}
					}
				}
			}
			var l = this.box.get("dataFilter");
			if (!$defined(k) && !$defined(l)) {
				return
			} else {
				if (k && k.data) {
					a = this.options.data = k.data
				} else {
					a = this.options.data = k
				}
			}
			if (!$defined(g) && this.options.data && this.options.data.length > 0) {
				a = this.dataFilter(this.options.data)
			}
			var c = this.box.get("addAllItem");
			if ($chk(c) && c != "false") {
				a = [{
						caption : this.box.get("allItemCap"),
						code : this.box.get("allItemCode") || "all"
					}
				].extend(a || [])
			}
			if ($defined(l)) {
				try {
					this.options.data = a = this.getFunc(l)[0](a, this.box, this)
				} catch (h) {
					alert("执行下拉列表的数据过滤方法出错！请检查页面自定义函数" + l)
				}
			}
			return a
		},
		dataFilter : function (c) {
			var f = this.box.get("pcode");
			var d = this.box.get("pcodeSign");
			if (this.isMulti(c) && $defined(this.box.get("parent"))) {
				var h = this.box.get("firstindex");
				h = h == "true" ? true : false;
				if (!h) {
					var g = this.getParentValue();
					if ($chk(g)) {
						c = c.filter(function (b) {
								return ($type(b) == "element") ? (b.get(d) == g) : (b[d] == g)
							}, this)
					} else {
						c = []
					}
				} else {
					c = []
				}
			} else {
				if (this.isMulti(c)) {
					var a = $defined(f) ? [f, null, "", undefined, "null"] : [null, "", undefined, "null"];
					c = c.filter(function (b) {
							return ($type(b) == "element") ? a.contains(b.get(d)) : a.contains(b[d])
						}, this)
				}
			}
			return c
		},
		setCacheArray : function (h) {
			if (h instanceof Array) {
				this.cachearray = [];
				for (var g = 0; g < h.length; g++) {
					var d = this.cachearray.indexOf(h[g]);
					if (d == -1) {
						this.cachearray.push(h[g])
					}
				}
			} else {
				var d = this.cachearray.indexOf(h);
				if (d != -1) {
					if (d == 0) {
						return
					}
					var l = this.cachearray[d];
					var a = this.cachearray[0];
					this.cachearray[d] = a;
					this.cachearray[0] = l
				} else {
					if (this.cachearray.length >= 5) {
						this.cachearray.pop()
					}
					if (this.cachearray.length != 0) {
						var k = this.cachearray[0];
						this.cachearray[0] = h;
						this.cachearray.push(k)
					} else {
						this.cachearray.push(h)
					}
				}
				if (top.$swfcacheobject) {
					top.$swfcacheobject.set(this.box.get("dataname") + "_" + this.box.id, this.cachearray.join(","))
				}
			}
		},
		build_options : function (f) {
			if (this.box.get("lineheight")) {
				this.options.height = this.box.get("lineheight")
			}
			if ($defined(f)) {
				var l = (f.length < this.box.get("lines")) ? this.options.height * f.length : this.options.height * this.box.get("lines");
				var b = document.createDocumentFragment();
				var g = document.createDocumentFragment();
				var h = [];
				var a = [];
				var k = this.box.get("dataname") + "_" + this.box.id;
				if (this.box.get("cacheSelected") == "true") {
					if (top.$swfcacheobject) {
						top.$swfcacheobject.get(k, function (m, n) {
							if (m) {
								h = n.split(",")
							}
						})
					}
					this.setCacheArray(h)
				}
				var d = this.box.get("codeSign");
				var c = this.box.get("captionSign");
				f.each(function (r, p) {
					if ($type(r) == "element") {
						r = {
							caption : r.get("caption"),
							code : r.get("code")
						}
					}
					var q = this.box.get("popdisplay");
					var s = "";
					if (!$defined(q)) {
						s = r[c]
					} else {
						s = q.substitute(r)
					}
					var m = new Element("div", {
							title : s,
							text : s,
							value : r[d],
							caption : r[c],
							index : p,
							"class" : "swordselect-list-item",
							events : {
								mouseover : function (t) {
									Event(t).target.addClass("swordselect-selected")
								},
								mouseout : function (t) {
									Event(t).target.removeClass("swordselect-selected")
								}
							}
						});
					m.store("allDb", r);
					m.addEvent("click", function (t) {
						if (this.box.get("cacheSelected") == "true") {
							this.setCacheArray(m.get("value"))
						}
						this.change_item(m);
						if (this.box.get("mode") == 2) {
							this.getNextPageData()
						} else {
							this.hide()
						}
						this.execGridOnFinished();
						this.leaveSign = false
					}
						.bind(this));
					var n = h.indexOf(m.get("value"));
					if (n != -1) {
						a[n] = m
					} else {
						b.appendChild(m)
					}
				}
					.bind(this));
				a.each(function (m) {
					if ($chk(m)) {
						g.appendChild(m)
					}
				});
				if (!this.hasBoxDiv) {
					this.createBoxDiv();
					this.hasBoxDiv = true
				}
				this.selectbox.appendChild(g);
				if (h.length > 0) {
					this.selectbox.appendChild(new Element("hr").setStyles({
							size : "1",
							"border-style" : "outset",
							color : "gray"
						}))
				}
				this.selectbox.appendChild(b);
				this.calculateConsole();
				this.options.popWidth = this.box.get("popWidth");
				this.selectbox.setStyles({
					width : $chk(this.options.popWidth) ? (this.options.popWidth > (this.box.getWidth() + 14) ? this.options.popWidth : this.box.getWidth() + 14) : this.box.getWidth() + 14,
					height : (l + 5) + "px",
					"overflow-y" : "auto"
				});
				this.box_div.setStyle("width", $chk(this.options.popWidth) ? (this.options.popWidth > (this.box.getWidth() + 14) ? this.options.popWidth : this.box.getWidth() + 14) : this.box.getWidth() + 14);
				this.toggle_selection();
				this.box.set("isbulid", "true");
				this.currentElement = null
			}
		},
		hide : function (s) {
			if ($chk(this.box) && this.box.get("display") == "true") {
				var a = this.selectbox.getFirst(":not(.swordselect-selected-none)");
				var r = this.box.get("value");
				var h = this.box.get("realvalue");
				var p = oCode = this.box.get("code");
				if ($chk(r) && a && this.currentElement == null) {
					if (this.box.get("handInput") == "true") {
						var k = this.selectbox.getFirst("div[value='" + h + "']");
						if (!$defined(k) || (k && k.get("caption") != r)) {
							this.box.set({
								realvalue : r,
								code : r
							})
						}
					} else {
						this.change_item(a, true)
					}
				} else {
					if (!$chk(r) || !$chk(p) || !$chk(h) || ($chk(r) && a == null && this.currentElement == null)) {
						if (this.box.get("handInput") == "true") {
							this.box.set({
								realvalue : r,
								code : r
							})
						} else {
							this.box.set("value", "");
							this.box.set("code", "");
							this.box.set("realvalue", "");
							this.box.set("allDb", "");
							this.box.store("allDb", null);
							this.selectedIndex = ""
						}
					} else {
						if (this.box.get("handInput") == "true" && this.currentElement == null) {
							var k = this.selectbox.getFirst("div[value='" + h + "']");
							if (!$defined(k) || (k && k.get("caption") != r)) {
								this.box.set({
									realvalue : r,
									code : r
								})
							}
						}
					}
				}
				this.box_div.setStyles({
					left : "-500px",
					top : "-500px"
				});
				this.box_div.set("state", "");
				this.selDiv.removeClass("swordselect-selimg-over");
				this.box.set("display", "false");
				this.selectbox.getElements("div").each(function (c) {
					if (c.getProperty("index") == this.selectedIndex) {
						this.unselect_lis();
						this.currentElement = c.addClass("swordselect-selected")
					}
				}
					.bind(this));
				if (s || oCode != this.box.get("code")) {
					try {
						var g = this.getBoxParent().get("child") || this.box.get("child");
						while ($defined(g)) {
							var b = this.getBoxParent().retrieve("space") || this.getBoxParent().getParent("div.swordfrom_div");
							var l = b.getElements("*[name='" + g + "']")[0];
							if ($defined(l)) {
								this.clearOptions(l, false);
								l.set("allDb", "");
								l.store("allDb", null);
								g = l.get("child")
							} else {
								break
							}
						}
						this.options.onChange = this.box.get("onChange") || this.box.get("_onChange") || this.box.retrieve("onChange");
						if ($defined(this.options.onChange) && $chk(this.options.onChange)) {
							var f = this.options.data || this.getOptionsData();
							this.execGridOnFinished();
							var q = {};
							if ($chk(this.currentElement)) {
								q = this.currentElement.retrieve("allDb")
							} else {
								if ($chk(f) && $chk(this.selectedIndex)) {
									q = f[this.selectedIndex]
								}
							}
							q.code = q.code || q[this.box.get("codeSign")];
							q.caption = q.caption || q[this.box.get("captionSign")];
							this.getFunc(this.options.onChange)[0](this.currentElement, q, this, oCode)
						}
					} catch (m) {}

				}
				this.options.onHide = this.box.get("onHide") || this.box.retrieve("onHide");
				if ($defined(this.options.onHide) && $chk(this.options.onHide)) {
					this.execGridOnFinished();
					this.getFunc(this.options.onHide)[0](this.currentElement, this)
				}
				if (this.box.get("rule")) {
					var d = this.validate.validate(this.box);
					if (!d) {
						(function () {
							this.validate.clearElTip()
						}).delay(700, this);
						return d
					}
				}
				if (this.formObj && this.formObj.active && this.validate.validate(this.box)) {
					this.formObj.pop_grid_obj.OpenFormUpdateCell(this.formObj.pop_grid_gridname, this.box.get("name"), this.getValue())
				}
			}
		},
		show : function () {
			var f = this.box.get("onBeforeClick");
			if (f) {
				var b = $w(this.box.getParent("table").getNext().get("gridName"));
				var c = b.getCheckedRowData();
				var a = b.getCheckedRow();
				this.getFunc(f)[0](c, a, a.getCell(this.box.get("name")))
			}
			if (!$defined(this.box.get("display")) || this.box.get("display") == "false") {
				this.reBuild();
				this.options.onShow = this.box.get("onShow") || this.box.retrieve("onShow");
				if ($defined(this.options.onShow) && $chk(this.options.onShow)) {
					this.getFunc(this.options.onShow)[0](this.currentElement, this)
				}
				this.selDiv.addClass("swordselect-selimg-over");
				if (this.selectbox.getElements("div").length > 0) {
					xyposition(this.box, this.box_div);
					this.def_select(this.box.get("code"));
					this.box_div.setStyles({
						display : "block"
					});
					if (this.selectbox.scrollWidth > this.selectbox.clientWidth) {
						this.box_div.setStyle("width", $chk(this.options.popWidth) ? (this.options.popWidth > (this.selectbox.scrollWidth + 18)) ? this.options.popWidth : this.selectbox.scrollWidth + 18 : this.selectbox.scrollWidth + 18);
						this.selectbox.setStyle("width", $chk(this.options.popWidth) ? (this.options.popWidth > (this.selectbox.scrollWidth + 18)) ? this.options.popWidth : this.selectbox.scrollWidth + 18 : this.selectbox.scrollWidth + 18)
					}
				}
				this.box.set("display", "true");
				var d = this.box.get("rule");
				if ($defined(d) && d.contains("must")) {
					this.box.setStyle("background-color", "#fffadb")
				}
			}
		},
		reBuild : function () {
			if (this.selectbox) {
				this.selectbox.getElements("div").each(function (d) {
					d.dispose()
				});
				this.selectbox.getElements("hr").each(function (d) {
					d.dispose()
				})
			}
			var a = this.getOptionsData();
			if (!$defined(a) || a.length == 0) {
				var b = "",
				c = this.box.get("tid");
				if (!$defined(c) && !$chk(c) && !$chk(this.box.get("onSubmitBefore") || this.box.retrieve("onSubmitBefore"))) {}
				else {
					if ($defined(this.box.get("parent"))) {
						b = this.getParentValue()
					}
					this.getDataInCache(c, this.box.get("dataname") || this.box.get("name"), b)
				}
			} else {
				this.build_options(a)
			}
		},
		clearOptions : function (a, b) {
			a.set("text", "");
			a.set({
				value : "",
				code : "",
				realvalue : ""
			});
			if (b != false) {
				this.selectbox.getElements("div").each(function (c) {
					c.dispose()
				});
				a.set("isBuild", "false")
			}
			if (this.grid) {
				a.set({
					caption : ""
				});
				this.grid.updateCell(a, "")
			}
			return this
		},
		toggle_selection : function () {},
		unselect_lis : function () {
			this.selectbox.getChildren().removeClass("swordselect-selected")
		},
		getDataDivFxScroll : function () {
			if (this.dataDivFxScroll == null) {
				this.dataDivFxScroll = new Fx.Scroll(this.selectbox, {
						duration : 10
					})
			}
			return this.dataDivFxScroll
		},
		def_select : function (c) {
			var a = this.selectbox.getChildren("div");
			var b;
			for (b = 0; b < a.length; b++) {
				a[b].removeClass("swordselect-selected-fix");
				if (c == a[b].get("value")) {
					this.currentElement = a[b].addClass("swordselect-selected-fix");
					this.getDataDivFxScroll().toElement(a[b]);
					this.selectedIndex = this.currentElement.getProperty("index")
				}
			}
		},
		change_item : function (p, g) {
			if (p) {
				if (p.get("name") == "loading") {
					return
				}
				this.unselect_lis(this.selectbox);
				this.selectedIndex = p.getProperty("index");
				this.currentElement = p;
				this.currentElement.addClass("swordselect-selected")
			}
			if (!this.currentElement && !g) {
				this.hide();
				return
			}
			var k = this.box.get("code");
			var q = true;
			var l = this.currentElement.retrieve("allDb"),
			n = {};
			for (var m in l) {
				n[m] = l[m]
			}
			l = n;
			this.box.set("value", this.genarateInputContent(l));
			var h = this.currentElement.get("value");
			this.box.set("code", h);
			if (k == h) {
				q = false
			}
			this.box.store("allDb", l);
			var c = this.box.get("sbmitcontent");
			var d = c ? c.substitute(l) : l[this.box.get("codeSign")];
			this.box.set("realvalue", d);
			if ($chk(this.getBoxParent())) {
				this.getBoxParent().set({
					code : this.currentElement.get("value"),
					realvalue : d
				});
				if (q) {
					var b = this.getBoxParent().get("child") || this.box.get("child");
					var a = this.getBoxParent().retrieve("space") || this.getBoxParent().getParent("div.swordfrom_div");
					while ($defined(b)) {
						var f = a.getElements("*[name='" + b + "']")[0];
						if ($defined(f)) {
							this.clearOptions(f);
							b = f.get("child")
						} else {
							break
						}
					}
				}
			}
			if (!g) {
				this.hide(q)
			}
			this.options.onSelect = this.box.get("_onSelect") || this.options.onSelect;
			if ($defined(this.options.onSelect) && $chk(this.options.onSelect)) {
				this.getFunc(this.options.onSelect)[0](p)
			}
		},
		change_item_on_keyup : function (g) {
			if (g.key == "tab") {
				return true
			}
			if (g.key == "esc") {
				this.hide();
				this.execGridOnFinished();
				if (this.grid && this.grid.options.noNextEvent) {
					this.getFunc(this.grid.options.noNextEvent)[0]()
				}
				return true
			}
			if (g.key == "enter") {
				if (this.grid) {
					var b = this.box.getParent("div.sGrid_data_row_item_div")
				}
				this.change_item();
				this.execGridOnFinished();
				if (this.grid) {
					this.grid.nextCell(b, g, this, g.key)
				}
			}
			if (g.key == "backspace" || g.key == "delete") {
				if (this.box.get("readonly")) {
					try {
						g.stop()
					} catch (g) {}

					return
				}
				if (this.box.get("mode") == 2) {
					this.box.set("code", "")
				} else {
					var d = this.box.get("value");
					var k = this.getCursortPosition(this.box);
					var f = document.selection.createRange().text.length;
					if (f == 0) {
						f = 1
					}
					d = d.substring(0, k - f) + d.substring(k, d.length);
					this.box.set("value", d);
					var c = this.box.createTextRange();
					c.collapse(true);
					c.moveEnd("character", k - f);
					c.moveStart("character", k - f);
					c.select()
				}
				this.selectbox.getChildren(".swordselect-selected-fix").removeClass("swordselect-selected-fix");
				this.selectbox.getChildren(".swordselect-selected").removeClass("swordselect-selected");
				this.currentElement = null;
				try {
					g.stop()
				} catch (g) {}

			}
			if ((g.key == "up" || g.key == "down") && g.alt) {
				(this.box.get("display") == "true") ? this.hide() : this.show();
				return true
			}
			var a = null;
			if (g.key == "up" || g.key == "left") {
				a = this.change_element_by_method("getPrevious")
			} else {
				if (g.key == "down" || g.key == "right") {
					a = this.change_element_by_method("getNext")
				} else {
					if (g.code == 36 || g.code == 33) {
						a = this.change_element_by_method("getFirst", true)
					} else {
						if (g.code == 35 || g.code == 34) {
							a = this.change_element_by_method("getLast", true)
						} else {
							a = this.change_element_by_char(g.key)
						}
					}
				}
			}
			if (a != null) {
				this.unselect_lis(this.selectbox);
				this.selectedIndex = a.getProperty("index");
				this.currentElement = a;
				this.currentElement.addClass("swordselect-selected");
				this.getDataDivFxScroll().toElement(a);
				var h = a.getNext();
				if (h == null) {
					(function () {
						this.selectbox.scrollTop = this.selectbox.scrollHeight
					}).delay(100, this)
				}
				this.options.onSelect = this.box.get("_onSelect") || this.options.onSelect;
				if ($defined(this.options.onSelect) && $chk(this.options.onSelect)) {
					this.getFunc(this.options.onSelect)[0](a)
				}
			}
		},
		getCursortPosition : function (a) {
			var c = 0;
			if (document.selection) {
				a.focus();
				var b = document.selection.createRange();
				b.moveStart("character", -a.value.length);
				c = b.text.length
			} else {
				if (a.selectionStart || a.selectionStart == "0") {
					c = a.selectionStart
				}
			}
			return (c)
		},
		change_element_by_method : function (b, a) {
			if (!this.currentElement) {
				return this.currentElement = this.selectbox.getFirst("div:not(.swordselect-selected-none)")
			}
			return a ? this.currentElement.getParent()[b]("div:not(.swordselect-selected-none)") : this.currentElement[b]("div:not(.swordselect-selected-none)")
		},
		change_element_by_char : function (c) {
			var a = this.box.get("value");
			var b = this.box.get("name");
			if (this.box.get("mode") == 2) {
				this.selectLoading();
				var d = this.box.get("tid");
				this.getNextPageData.bind(this)()
			} else {
				this.filterSelectBox(a)
			}
		},
		filterSelectBox : function (a) {
			this.selectbox.getChildren().each(function (b) {
				if ((b.get("value") + "").search(a) == -1 && (b.get("text") + "").search(a) == -1) {
					b.addClass("swordselect-selected-none")
				} else {
					b.removeClass("swordselect-selected-none")
				}
			});
			this.currentElement = null
		},
		getNextPageData : function (b) {
			var a = this.box.get("name");
			this.selectLoading();
			if ($defined(b)) {
				this.getSelectSoleData(this.sConsole.retrieve("curPage").toInt() + b)
			} else {
				this.calculateConsole("clear");
				this.getSelectSoleData(1)
			}
		},
		getSelectSoleData : function (f) {
			var a = this.box.get("value");
			var d = this.box.get("code");
			var h = this.box.get("tid");
			var b = this.box.get("name");
			if (!$chk(a) || !$defined(a)) {
				d = ""
			}
			try {
				var c = pc.getReq({
						tid : h,
						widgets : [{
								sword : "SwordForm",
								name : this.box.get("name"),
								data : {
									caption : {
										value : a
									},
									pcode : {
										value : d
									},
									targetPage : {
										value : f
									},
									rowsOfPage : {
										value : 10
									}
								}
							}
						]
					});
				pc.postReq({
					req : c,
					loaddata : "widget",
					onSuccess : function (k) {
						this.unselectLoding();
						if (this.box.get("name") != b) {}
						else {
							this.calculateConsole("init", null, k.getAttr("totalRows"));
							this.build_options(k.data[0].data)
						}
					}
					.bind(this),
					onError : function () {
						alert("从服务器端获取数据出错了,请求的tid为【" + h + "】")
					}
					.bind(this)
				}).delay(1000, this)
			} catch (g) {
				return
			}
		},
		calculateConsole : function (f, d, c) {
			if (f == "init") {
				this.sConsole.store("rows", c);
				this.sConsole.store("pages", ((c % 10) == 0) ? c / 10 : (c / 10 + 1));
				var b = this.sConsole.retrieve("curPage");
				if (!$defined(b)) {
					this.sConsole.store("curPage", 1)
				}
			} else {
				if (f == "clear") {
					this.sConsole.store("rows", null);
					this.sConsole.store("curPage", null);
					this.sConsole.store("rows", null);
					this.sConsole.getElements("div").removeClass("swordselect_csl_hidden");
					this.sConsole.setStyle("display", "none")
				} else {
					var c = this.sConsole.retrieve("rows");
					if (c / 1 < 10) {
						this.sConsole.setStyle("display", "none")
					}
					var g = this.sConsole.retrieve("curPage") / 1 + d;
					var a = this.sConsole.retrieve("pages") / 1;
					if (g == 1) {
						this.sConsole.getElement("div.swordselect_csl_pre").addClass("swordselect_csl_hidden")
					} else {
						if (g == a) {
							this.sConsole.getElement("div.swordselect_csl_next").addClass("swordselect_csl_hidden")
						}
					}
					if (a > 1) {
						this.sConsole.setStyle("display", "")
					}
				}
			}
		},
		clear : function () {
			this.hide();
			this.box.destroy();
			this.selDiv.destroy()
		},
		dm2mc : function (b, p, d, n, r) {
			if (p == "" || p == null || p == undefined) {
				if (b.get("defIndex") || b.get("defValue")) {
					this.box = $(b);
					this.box.store("data", this.box.getChildren(">div"));
					var a = this.initData(b.get("defValue"), b, b.get("defIndex"));
					return {
						code : b.get("code"),
						caption : b.get("value"),
						realvalue : a
					}
				}
				if (r) {
					this.box = $(b);
					this.box.store("data", this.box.getChildren(">div"));
					var k = this.getOptionsData();
					if ($chk(k) && k.length == 1) {
						var a = this.genarateContent(k[0]);
						if ($type(k[0]) == "element") {
							var u;
							var q = this.box.get("inputdisplay");
							if (!$defined(q)) {
								u = k[0].get(this.box.get("captionSign"))
							} else {
								u = this.genarateContent(k[0], q)
							}
							return {
								code : k[0].get(this.box.get("codeSign")),
								caption : u,
								realvalue : a
							}
						}
						return {
							code : k[0][this.box.get("codeSign")],
							caption : this.genarateInputContent(k[0]),
							realvalue : a
						}
					}
				}
				return ""
			}
			if (p.indexOf("|") > -1 && p.indexOf("code") > -1 && p.indexOf("caption") > -1) {
				this.box = $(b);
				var m = p.toHash();
				var g = {};
				m.each(function (w, h) {
					if (h == "code") {
						g[this.box.get("codeSign")] = w
					} else {
						if (h == "caption") {
							g[this.box.get("captionSign")] = w
						} else {
							g[h] = w
						}
					}
				}, this);
				var a = this.genarateContent(g);
				var c = this.genarateInputContent(g);
				p = {
					code : m.get("code"),
					caption : c,
					realvalue : a
				}
			} else {
				this.box = $(b);
				this.box.store("data", this.box.getChildren(">div"));
				var s,
				t;
				var l = $chk(n) ? n : this.getOptionsData("noFilter", "grid");
				if (!l) {
					return ""
				}
				var k;
				for (var f = 0; f < l.length; f++) {
					k = l[f];
					if ($type(k) == "element") {
						k = {
							caption : k.get("caption"),
							code : k.get("code"),
							pcode : k.get("pcode")
						}
					}
					if ($chk(d)) {
						if (k[b.get("pcodeSign")] == d && k[b.get("codeSign")] == p) {
							t = this.genarateContent(k);
							s = this.genarateInputContent(k);
							break
						}
					} else {
						if (k[b.get("codeSign")] == p) {
							t = this.genarateContent(k);
							s = this.genarateInputContent(k);
							break
						}
					}
				}
				if (s && t) {
					p = {
						code : p,
						caption : s,
						realvalue : t,
						allDb : k
					}
				}
			}
			return p
		},
		disable : function (b) {
			if ($defined(b)) {
				b.set("disabled", "true").addClass("select_input_disable").setStyle("background-color", "");
				var a = this.getImgEl(b);
				a.addClass("swordselect-selimg-disable")
			}
		},
		enable : function (c) {
			if ($defined(c)) {
				var a = this.getImgEl(c);
				c.erase("disabled").removeClass("select_input_disable");
				a.removeClass("swordselect-selimg-disable");
				var b = c.get("rule");
				if ($defined(b) && b.contains("must")) {
					c.setStyle("background-color", "#fffadb")
				}
			}
		},
		addEventToEl : function (a, b) {
			if (a == "input") {
				this.box.addEvent("focus", function (c) {
					if (b && b.name == "SwordGrid") {
						this.grid = b
					} else {
						this.grid = null
					}
					if ($defined(c)) {
						if (this.box == $(new Event(c).target)) {
							this.rebuild = false
						} else {
							if (this.box.get("display") == "true") {
								this.hide();
								if (!$(c.target).hasClass("sGrid_data_row_item_select")) {
									this.execGridOnFinished()
								}
								this.box.set("display", "false")
							}
							this.box = $(new Event(c).target);
							this.selDiv = this.getImgEl(this.box);
							this.rebuild = true
						}
					}
					if (this.box.get("display") == "true") {}
					else {
						this.show()
					}
				}
					.bind(this));
				this.box.addEvent("keydown", function (c) {
					if (c.key == "esc") {
						c.event.returnValue = false
					}
				});
				this.box.addEvent("keyup", this.change_item_on_keyup.bind(this));
				this.selectbox.addEvent("mouseenter", SwordSelectTemplate.mouseenter.bind(this));
				this.selectbox.addEvent("mouseleave", SwordSelectTemplate.mouseleave.bind(this));
				this.box.addEvent("blur", SwordSelectTemplate.selectBlur.bind(this))
			} else {
				this.selDiv.addEvent("click", function (d) {
					var c = $(new Event(d).target);
					if (c.hasClass("swordselect-selimg-disable")) {
						return
					}
					if (b && b.name == "SwordGrid") {
						this.grid = b
					} else {
						this.grid = null
					}
					if (this.selDiv == c) {
						this.box = this.getBoxEl(this.selDiv);
						this.rebuild = false
					} else {
						if (this.box.get("display") == "true") {
							this.hide();
							if (!$(d.target).hasClass("sGrid_data_row_item_select")) {
								this.execGridOnFinished()
							}
							this.box.set("display", "false")
						}
						this.selDiv = $(new Event(d).target);
						this.box = this.getBoxEl(this.selDiv);
						this.rebuild = true
					}
					if (this.box.get("display") == "true") {}
					else {
						this.show();
						this.box.focus()
					}
				}
					.bind(this))
			}
		}
	});
var SwordSubmit = new Class({
		$family : {
			name : "SwordSubmit"
		},
		Implements : [Events, Options],
		container : null,
		sign : {
			widgetSign : "widget",
			widgetNameSign : "widgetName",
			attrNameSign : "attrName",
			customerSign : "parent",
			commConsoleAttr : ["console"],
			SwordForm : ["isVal"],
			SwordGrid : ["check", "commit"]
		},
		widgets : [],
		widgetObjs : new Hash(),
		dataContainer : [],
		button : null,
		isContinue : true,
		hasFile : false,
		isCustomer : false,
		options : {
			mask : true,
			pNode : null,
			name : null,
			newFlag : "false",
			tid : "",
			ctrl : "",
			page : "",
			value : "提交",
			btnName : null,
			enabled : "true",
			css : "",
			isSubmit : "true",
			isRedirect : null,
			forceAjax : null,
			reqData : null,
			resData : null,
			isShow : "true",
			postType : "ajax",
			title : "",
			async : "false",
			encodeData : "false",
			img : null,
			onValidatorBefore : $empty,
			onSubmitBefore : $empty,
			onSubmitAfter : $empty,
			onSuccess : $empty,
			onError : $empty,
			onAfterLoadData : $empty,
			onClick : $empty,
			maskOpacity : 0.5,
			submitConfirm : "false",
			submitConfirmMsg : null,
			isOneClick : "false",
			quickKey : ""
		},
		initialize : function () {
			if (arguments.length > 0) {
				var d = Array.link(arguments, {
						options : Object.type,
						element : $defined
					});
				for (var c in(d.options || {})) {
					if ($type(d.options[c]) != "function" && (/^on[A-Z]/).test(c)) {
						var a = this.getFunc(d.options[c]);
						for (var b = 0; b < a.length; b++) {
							this.addEvent(c, a[b])
						}
					}
				}
				this.setOptions(d.options);
				if (this.options.newFlag == "false") {
					this.build()
				}
			}
			this.pc = pageContainer
		},
		initParam : function (a) {
			this.htmlOptions(a);
			this.options.value = this.options.btnName || a.getAttribute("value") || this.options.value;
			this.build();
			this.options.pNode.erase("onClick");
			this.pc = pageContainer
		},
		initData : function (a) {},
		initConsoleAttr : function (f, d) {
			var a = {};
			var b = (this.sign[f] || []).combine(this.sign.commConsoleAttr || []);
			for (var c = 0; c < b.length; c++) {
				if (this.options.newFlag == "false") {
					a[b[c]] = d.get(b[c])
				} else {
					a[b[c]] = d[b[c]]
				}
			}
			return a
		},
		disabled : function () {
			if (!this.isCustomer) {
				this.options.enabled = "false";
				this.button.disabled = true;
				Sword.utils.btn.disabled(this.button)
			}
		},
		enabled : function () {
			if (!this.isCustomer) {
				this.options.enabled = "true";
				Sword.utils.btn.enabled(this.button);
				this.button.disabled = false
			}
		},
		show : function () {
			this.button.getParent().setStyle("display", "inline");
			this.options.isShow = "true"
		},
		hide : function () {
			this.button.getParent().setStyle("display", "none");
			this.options.isShow = "false"
		},
		build : function () {
			this.container = this.options.pNode;
			this.initContainer(this.container);
			if (this.options.isShow == "false") {
				this.hide()
			}
			this.initEvents()
		},
		initContainer : function (a) {
			var b = a.getElements("*[" + this.sign.customerSign + "=" + this.options.name + "]");
			a.setStyle("display", "inline");
			if (this.options.img) {
				a.addClass("submitCon")
			}
			if (b.length > 0) {
				this.button = b[0];
				this.isCustomer = true
			} else {
				a.grab(this.button = new Element("div"));
				new Element("span").set("html", this.options.value).inject(this.button);
				if (!$chk(this.options.title)) {
					this.button.set("title", this.options.value)
				} else {
					this.button.set("title", this.options.title)
				}
			}
			if ($chk(this.options.css)) {
				this.button.set("style", this.options.css)
			}
			if (this.options.enabled == "false") {
				Sword.utils.btn.init(this.button);
				this.disabled();
				if (Browser.Engine.trident4 || Browser.Engine.trident5) {
					this.button.setStyle("display", "inline")
				}
			} else {
				if (!this.isCustomer) {
					Sword.utils.btn.init(this.button)
				}
			}
		},
		initEvents : function () {
			if ($defined(this.button)) {
				this.container.onclick = "";
				this.container.addEvent("click", function () {
					this.clear();
					if (this.button.disabled) {
						return
					}
					this.fireEvent("onClick", [this, this.button]);
					this.submit()
				}
					.bind(this))
			}
		},
		pushData : function (d, c) {
			var a = [];
			if (arguments.length == 2) {
				if (c == null || c == undefined) {
					c = ""
				}
				var f = {
					name : d,
					value : c + ""
				};
				a.push(f)
			} else {
				if ($type(d) == "object") {
					a.push(d)
				} else {
					if ($type(d) == "array") {
						a = d
					}
				}
			}
			for (var b = 0; b < a.length; b++) {
				if (!a[b]["sword"]) {
					a[b]["sword"] = "attr"
				}
			}
			this.dataContainer.combine(a)
		},
		submit : function (a) {
			if (this.options.submitConfirm == "true") {
				var b = this.options.submitConfirmMsg;
				if (!$defined(b)) {
					b = "是否要" + this.options.btnName + "？"
				}
				swordConfirm(b, {
					onOk : function () {
						return this.onSubmit(a)
					}
					.bind(this),
					onCancel : function () {}

				})
			} else {
				return this.onSubmit(a)
			}
		},
		onSubmit : function (b) {
			this.isContinue = true;
			if (this.isContinue) {
				$extend(this.options, b);
				this.initSubmitWidget(this.container);
				this.fireEvent("onValidatorBefore", this);
				this.doBeforeEvents();
				if (this.isContinue) {
					this.fireEvent("onSubmitBefore", this)
				}
				if (this.options.isOneClick == "true") {
					this.disabled()
				}
				if (this.isContinue) {
					if (this.options.mask != "false") {
						var a = this.pc.getMask();
						a.options.opacity = this.options.maskOpacity;
						a.mask(document.body)
					}
					this.reqData = this.pc.getReq({
							tid : this.options.tid,
							ctrl : this.options.ctrl,
							page : this.options.page,
							widgets : this.dataContainer,
							postType : this.options.postType
						});
					if (this.isContinue) {
						this.doAction();
						if (this.isContinue) {
							if (this.isHasFile() && this.isForce() != "true") {
								this.postFile()
							} else {
								this.postData(b)
							}
							if (this.options.postType != "ajax") {
								this.unMask()
							}
						} else {
							this.unMask()
						}
					}
					return this.resData
				}
			} else {
				this.unMask()
			}
		},
		postFile : function () {
			var a = this.pc.getUploadCommit().initParam({
					postData : this.reqData
				});
			a.commit(this.options.isRedirect, this.options.postType);
			this.unMask()
		},
		postData : function (a) {
			if ($defined(this.pc)) {
				try {
					if ($chk(this.options.ctrl) || $chk(this.options.tid) || $chk(this.options.page) || $chk(this.reqData.ctrl)) {
						if (this.options.isSubmit == "true") {
							pageContainer.postReq({
								loaddata : (a || {}).loaddata,
								req : this.reqData,
								async : this.options.async == "true",
								encodeData : this.options.encodeData,
								postType : this.options.postType,
								tid : this.options.tid,
								onSuccess : function (c) {
									this.unMask();
									this.resData = c;
									this.fireEvent("onSuccess", [this.reqData, c])
								}
								.bind(this),
								onError : function (c) {
									if (this.options.isOneClick == "true") {
										this.enabled()
									}
									this.resData = c;
									this.doErrorEvents();
									this.unMask();
									this.fireEvent("onError", [this.reqData, c])
								}
								.bind(this),
								onFinish : function (c) {
									this.doAfterEvents();
									this.unMask();
									this.fireEvent("onSubmitAfter", [this.reqData, this.resData]);
									if (this.options.postType.startWith("form_")) {
										this.clear()
									}
								}
								.bind(this),
								onAfterLoadData : function (c) {
									this.fireEvent("onAfterLoadData", [this.reqData, this.resData]);
									this.clear()
								}
								.bind(this)
							})
						} else {
							this.unMask()
						}
					} else {
						this.unMask();
						this.fireEvent("onSubmitAfter", [this.reqData, this.resData]);
						this.clear()
					}
					this.clear()
				} catch (b) {
					this.unMask();
					this.clear();
					throw new Error(b.message)
				}
			} else {
				throw new Error("数据提交失败!pageContainer为空")
			}
		},
		unMask : function () {
			if ((this.options.isRedirect == "false" || this.options.isRedirect == null) && this.pc) {
				if (this.options.mask != "false") {
					this.pc.getMask().unmask()
				}
			}
		},
		initSubmitWidget : function (a) {
			if (a && !$defined(this.load)) {
				var b = a.getElements("div");
				b.each(function (k, f) {
					var h = k.get(this.sign.widgetNameSign);
					var g = k.get(this.sign.attrNameSign);
					var m = this.pc.getWidget(h);
					if (m) {
						var l = m.name;
						if ($defined(m)) {
							if (l == "SwordForm") {
								if (m.isHasFile()) {
									this.hasFile = true
								}
							}
							var d = this.initConsoleAttr(l, k);
							var c = SwordSubmit.Command.newInstance(l, h, d, m);
							if ($defined(c)) {
								this.widgetObjs.set(h, c)
							}
						}
					} else {
						if ($chk(g)) {
							this.pushData(g, k.get("value"))
						}
					}
				}
					.bind(this));
				this.load = "load"
			}
		},
		isHasFile : function () {
			return this.hasFile
		},
		isForce : function () {
			return this.options.forceAjax
		},
		doAction : function () {
			this.widgetObjs.each(function (b, a) {
				this.widgetObjs[a].doAction({
					data : this.dataContainer
				})
			}
				.bind(this))
		},
		doBeforeEvents : function () {
			this.widgetObjs.each(function (c, a) {
				if (!this.isContinue) {
					return
				}
				var b = this.widgetObjs[a].doBeforeEvent();
				if ($defined(b) && !b) {
					this.isContinue = false;
					return
				}
			}
				.bind(this))
		},
		doAfterEvents : function () {
			this.widgetObjs.each(function (b, a) {
				this.widgetObjs[a].doAfterEvent()
			}
				.bind(this))
		},
		doErrorEvents : function () {
			this.widgetObjs.each(function (b, a) {
				this.widgetObjs[a].doError()
			}
				.bind(this))
		},
		clear : function () {
			this.dataContainer.empty();
			this.isContinue = true;
			delete this.reqData
		},
		stop : function () {
			this.isContinue = false
		},
		setTid : function (a) {
			this.options.tid = a
		},
		setCtrl : function (a) {
			this.options.ctrl = a
		},
		setCaption : function (a) {
			this.button.set("text", a);
			if (!$chk(this.options.title)) {
				this.button.set("title", a)
			}
		},
		setFunction : function (d, b, a) {
			b = b + "()";
			if (a == false) {
				this.options[d] = $empty;
				delete this.$events[d.replace("on", "").toLowerCase()]
			} else {
				var c = this.getFunc(b);
				if (c.length > 0) {
					this.options[d] = b;
					delete this.$events[d.replace("on", "").toLowerCase()];
					this.addEvent(d, c[0])
				}
			}
		}
	});
SwordSubmit.Command = new Class({
		$family : {
			name : "SwordSubmit.Command"
		},
		name : null,
		command : null,
		widgetObj : null,
		doAction : $empty,
		doBeforeEvent : $empty,
		doAfterEvent : $empty,
		doError : $empty,
		initialize : function (c, a, b) {
			this.name = c;
			this.console = a;
			this.widgetObj = b
		}
	});
SwordSubmit.Command.newInstance = function (f, d, b, c) {
	var a;
	if (f == "SwordForm") {
		a = new SwordSubmit.SwordFormCommand(d, b, c)
	} else {
		if (f == "SwordGrid") {
			a = new SwordSubmit.SwordGridCommand(d, b, c)
		} else {
			if (f == "SwordMove") {
				a = new SwordSubmit.SwordMoveCommand(d, b, c)
			} else {
				if (f == "SwordTab") {
					a = new SwordSubmit.SwordTabCommand(d, b, c)
				}
			}
		}
	}
	return a
};
SwordSubmit.SwordFormCommand = new Class({
		Extends : SwordSubmit.Command,
		doAction : function (a) {
			a.data.push(this.widgetObj.getSubmitData())
		},
		doBeforeEvent : function () {
			var a = true;
			if (this.console.isVal != "false") {
				if (!this.widgetObj.validate()) {
					a = false
				}
			}
			return a
		},
		doAfterEvent : function () {}

	});
SwordSubmit.SwordGridCommand = new Class({
		Extends : SwordSubmit.Command,
		doAction : function (a) {
			if (this.console.console == "submitChecked") {
				a.data.push(this.widgetObj.getCheckedData(this.console.check))
			} else {
				if (this.console.console == "curPageData") {
					a.data.push(this.widgetObj.getCurPageGirdData())
				} else {
					if (this.console.console == "allData") {
						a.data.push(this.widgetObj.getAllGridData())
					} else {
						if (this.console.console == "allNoDeleteData") {
							a.data.push(this.widgetObj.getAllNoDeleteGridData())
						} else {
							if (this.console.console == "excel") {
								a.data.combine(this.widgetObj.getGridExcelInfo(this.console.check));
								var c = this.widgetObj.options;
								if (c.ptid && c.ptidexport == "true") {
									var b = JSON.decode(c.bizParams);
									if ($chk(b.data)) {
										a.data.combine(b.data)
									}
									a.data.push({
										name : "ptid",
										value : c.ptid,
										sword : "attr"
									});
									a.data.push({
										name : "query",
										value : "all",
										sword : "attr"
									})
								}
							} else {
								a.data.push(this.widgetObj.getStatusGirdData())
							}
						}
					}
				}
			}
		},
		doBeforeEvent : function () {
			var a = true;
			if (this.console.console == "submitChecked") {
				if (!this.widgetObj.validateCheckedRow(this.console.check)) {
					a = false
				}
			} else {
				if (!this.widgetObj.validate()) {
					a = false
				}
			}
			return a
		},
		doAfterEvent : function () {
			if (this.console.commit != "false") {
				this.widgetObj.commit()
			}
		},
		doError : function () {}

	});
SwordSubmit.SwordMoveCommand = new Class({
		Extends : SwordSubmit.Command,
		doAction : function (a) {
			if (this.console.console == "curPageData") {
				a.data.push(this.widgetObj.getCurrentData())
			} else {
				a.data.push(this.widgetObj.getStatusData())
			}
		},
		doBeforeEvent : function () {
			var a = true;
			return a
		},
		doAfterEvent : function () {},
		doError : function () {}

	});
SwordSubmit.SwordTabCommand = new Class({
		Extends : SwordSubmit.Command,
		doBeforeEvent : function () {
			return this.widgetObj.validateAllTab()
		},
		doAction : function (a) {},
		doAfterEvent : function () {}

	});
var SwordTab = new Class({
		Implements : [Events, Options],
		$family : {
			name : "SwordTab"
		},
		name : "SwordTab",
		options : {
			name : null,
			pNode : null,
			sword : null,
			tabType : null,
			tabTitles : null,
			tabSelectedIndex : 0,
			tabDivs : null,
			tabIframes : null,
			tabContentWidth : null,
			tabWidth : null,
			tabContentHeight : null,
			tabDirection : "up",
			onSelect : null,
			isRefresh : "false",
			onSelectedShowAfter : null,
			maxChars : 10,
			initLoad : "true"
		},
		styles : {
			tabsUL : "tabs_ul",
			tabsLI : "tabs_li",
			tabsLICommon : "tabs_li_common",
			tabsLISelect : "tabs_li_select",
			outertabsDiv : "outer_tabs_div"
		},
		tabMaskDiv : null,
		tabDivs : [],
		tabIframeDivs : [],
		tabIframes : [],
		tabSwordWiget : [],
		initialize : function (a) {
			this.setOptions(a)
		},
		setRefresh : function (a) {
			if (a == true) {
				this.options.isRefresh = "true"
			}
			if (a == false) {
				this.options.isRefresh = "false"
			}
		},
		initParam : function (a) {
			this.htmlOptions(a);
			if (this.options.tabTitles != null) {
				this.options.tabTitles = this.options.tabTitles.split(",")
			}
			if (this.options.tabDivs != null) {
				this.options.tabDivs = this.options.tabDivs.split(",")
			}
			if (this.options.tabIframes != null) {
				this.options.tabIframes = this.options.tabIframes.split(",")
			}
			this.options.pNode = a;
			this.defineStyles();
			this.createTab();
			a.set({
				onSelect : "",
				onselect : ""
			})
		},
		initData : function () {},
		defineStyles : function () {
			if (this.options.tabDirection == "up" || this.options.tabDirection == "down") {
				this.styles.tabsUL = this.styles.tabsUL + "_horizontal";
				this.styles.tabsLI = this.styles.tabsLI + "_horizontal";
				this.styles.tabsLICommon = this.styles.tabsLICommon + "_horizontal";
				this.styles.tabsLISelect = this.styles.tabsLISelect + "_horizontal";
				this.styles.outertabsDiv = this.styles.outertabsDiv + "_horizontal"
			} else {
				if (this.options.tabDirection == "left" || this.options.tabDirection == "right") {
					this.styles.tabsUL = this.styles.tabsUL + "_vertical";
					this.styles.tabsLI = this.styles.tabsLI + "_vertical";
					this.styles.tabsLICommon = this.styles.tabsLICommon + "_vertical";
					this.styles.tabsLISelect = this.styles.tabsLISelect + "_vertical";
					this.styles.outertabsDiv = this.styles.outertabsDiv + "_vertical"
				}
			}
		},
		computeTitleSize : function (c) {
			var b = 0;
			var d = this.options.maxChars;
			if (c.length > d) {
				for (var a = 0; a < c.length; a++) {
					if (/^[\u4e00-\u9fa5]+$/i.test(c.charAt(a))) {
						b = b + 2
					} else {
						b++
					}
				}
			}
			return b > 0 ? (c.substring(0, d) + "..") : c
		},
		createTab : function () {
			var c = new Element("div", {
					"class" : "bbbbox_top_bg"
				}).inject(this.options.pNode);
			var g = new Element("div", {
					"class" : "l"
				}).inject(c);
			var a = new Element("div", {
					"class" : "r"
				}).inject(c);
			var b = null;
			if (this.options.tabWidth) {
				b = new Element("div", {
						"class" : "tabs",
						styles : {
							width : this.options.tabWidth
						}
					})
			} else {
				b = new Element("div", {
						"class" : "tabs"
					})
			}
			b.inject(c);
			var f = new Element("ul", {
					id : "SwordTab_ul",
					"class" : this.styles.tabsUL
				});
			this.options.tabTitles.each(function (m, l) {
				var h = new Element("li", {
						id : "SwordTab_li_" + l,
						"class" : "" + this.styles.tabsLI + " " + this.styles.tabsLICommon
					}).inject(f);
				var k = new Element("div", {
						id : "SwordTab_div_" + l,
						html : this.computeTitleSize(this.options.tabTitles[l]),
						title : this.options.tabTitles[l]
					}).inject(h);
				h.addEvent("click", function (q) {
					if (h.get("isDisable") == "true") {
						return
					}
					var p = this.options.tabSelectedIndex;
					this.options.tabSelectedIndex = new Event(q).target.get("id").split("_")[2];
					if (this.options.onSelect) {
						if (this.getFunc(this.options.onSelect)[0](this, p, this.options.tabSelectedIndex) != false) {
							this.options.tabSelectedIndex = p;
							this.selectIndex(q);
							if (this.options.onSelectedShowAfter) {
								this.getFunc(this.options.onSelectedShowAfter)[0](this, p, this.options.tabSelectedIndex)
							}
						} else {
							this.options.tabSelectedIndex = p
						}
					} else {
						this.selectIndex(q);
						if (this.options.onSelectedShowAfter) {
							this.getFunc(this.options.onSelectedShowAfter)[0](this, p, this.options.tabSelectedIndex)
						}
					}
					var n = this.tabDivs[this.options.tabSelectedIndex] || this.tabIframeDivs[this.options.tabSelectedIndex];
					this.tabMaskDiv.setStyles({
						left : n.offsetLeft,
						top : n.offsetTop - 1,
						width : n.offsetWidth,
						height : n.offsetHeight + 1
					});
					if (n.get("isMask") == "true") {
						this.tabMaskDiv.setStyle("display", "block")
					} else {
						this.tabMaskDiv.setStyle("display", "none")
					}
				}
					.bind(this));
				h.addEvent("mouseover", function (n) {}

					.bind(this));
				h.addEvent("mouseout", function (n) {}

					.bind(this))
			}
				.bind(this));
			var d = new Element("div", {
					id : "SwordTab_div",
					"class" : this.styles.outertabsDiv,
					styles : {
						width : this.options.tabContentWidth,
						height : this.options.tabContentHeight
					}
				}).inject(b);
			if (this.options.tabType == "div") {
				this.options.tabDivs.each(function (k, h) {
					$(k).setStyle("position", "relative");
					$(k).setStyle("z-index", -1);
					this.tabDivs[h] = $(k);
					d.adopt($(k))
				}
					.bind(this))
			} else {
				this.options.tabIframes.each(function (l, k) {
					var h = new Element("div", {
							id : "SwordTab_iframeDiv_" + k,
							"class" : this.styles.outertabsDiv,
							styles : {
								width : "100%",
								height : "100%"
							}
						});
					var m = new Element("iframe", {
							id : "SwordTab_iframe_" + k,
							allowTransparency : "true",
							frameborder : 0,
							styles : {
								border : "0px",
								width : "100%",
								height : "100%"
							}
						});
					m.inject(h);
					h.inject(d);
					if (Browser.Engine.trident) {}

					this.tabIframeDivs[k] = h;
					this.tabIframes[k] = m;
					h.setStyle("display", "none")
				}
					.bind(this))
			}
			if (this.options.tabDirection == "up" || this.options.tabDirection == "left") {
				if ($defined(f)) {
					f.inject(b, "top")
				}
			} else {
				if (this.options.tabDirection == "down" || this.options.tabDirection == "right") {
					if ($defined(f)) {
						f.inject(b)
					}
				}
			}
			this.tabMaskDiv = new Element("div", {
					styles : {
						"z-index" : "30000",
						visibility : "visible",
						opacity : "0.1",
						position : "absolute",
						display : "none",
						background : "none repeat scroll 0% 0% gray"
					}
				}).inject(this.options.pNode, "before");
			if (this.options.initLoad == "true") {
				this.selectIndex(this.options.tabSelectedIndex)
			}
		},
		$ : function (a) {
			return this.options.pNode.getElement("[id=" + a + "]")
		},
		selectIndex : function (index) {
			if (($type(index) == "event")) {
				index = new Event(index).target.get("id").split("_")[2]
			}
			if (this.options.tabSelectedIndex != index) {
				this.options.tabSelectedIndex = index
			}
			this.options.tabTitles.each(function (item, index1) {
				if (index != index1) {
					this.$("SwordTab_li_" + index1).removeClass(this.styles.tabsLISelect);
					this.$("SwordTab_li_" + index1).removeClass("tabs_li_over");
					this.$("SwordTab_li_" + index1).addClass(this.styles.tabsLICommon)
				} else {
					this.$("SwordTab_li_" + index1).removeClass(this.styles.tabsLICommon);
					this.$("SwordTab_li_" + index1).removeClass("tabs_li_over");
					this.$("SwordTab_li_" + index1).addClass(this.styles.tabsLISelect)
				}
			}
				.bind(this));
			if (this.options.tabType == "div") {
				this.options.tabDivs.each(function (item, index1) {
					if (Browser.Engine.trident4) {
						if (index != index1) {
							$(item).setStyles({
								display : "none",
								position : "absolute",
								left : -10000,
								top : -10000,
								"z-index" : 1,
								clear : "both"
							}).addClass("tabs_div")
						} else {
							$(item).setStyles({
								position : "static",
								display : "block",
								"z-index" : 1000,
								clear : "both",
								width : "100%"
							}).addClass("tabs_div");
							if ($(item).getAttribute("isload") != "true") {
								$(item).set("isload", "true")
							}
						}
					} else {
						if (index != index1) {
							$(item).setStyles({
								position : "absolute",
								left : -10000,
								top : -10000,
								"z-index" : 1,
								clear : "both"
							}).addClass("tabs_div")
						} else {
							$(item).setStyles({
								position : "static",
								display : "block",
								"z-index" : 1000,
								clear : "both"
							}).addClass("tabs_div");
							if ($(item).getAttribute("isload") != "true") {
								$(item).set("isload", "true")
							}
						}
					}
				}
					.bind(this))
			} else {
				this.options.tabIframes.each(function (item, index1) {
					if (index != index1) {
						this.$("SwordTab_iframeDiv_" + index1).setStyles({
							display : "none",
							clear : "both"
						})
					} else {
						var Ifr = this.tabIframes[index1];
						if (this.options.isRefresh == "false") {
							if ($defined(Ifr.src) && $defined(pageContainer.AddBaseCode2URL(item))) {
								if (Ifr.src != pageContainer.AddBaseCode2URL(item)) {
									if (!$chk(Ifr.src)) {
										$try(function () {
											var retFn = eval(pageContainer.AddBaseCode2URL(item));
											if ($define(retFn)) {
												Ifr.src = retFn
											} else {
												Ifr.src = pageContainer.AddBaseCode2URL(item)
											}
										}, function () {
											Ifr.src = pageContainer.AddBaseCode2URL(item)
										})
									}
								}
							}
						} else {
							if (this.options.isRefresh == "true") {
								Ifr.src = pageContainer.AddBaseCode2URL(item)
							} else {
								alert("SwordTab上定义了错误的isRefresh属性值！")
							}
						}
						this.$("SwordTab_iframeDiv_" + index1).setStyles({
							display : "block",
							clear : "both"
						})
					}
				}
					.bind(this))
			}
		},
		getSelectWigetNameArray : function (b) {
			var a = new Array();
			if (this.options.tabType == "div") {
				this.tabDivs[this.options.tabSelectedIndex].getElements("div[sword][sword=" + b + "]").each(function (c) {
					a.include(c.getProperty("name"))
				})
			} else {
				alert("本方法只支持div")
			}
			return a
		},
		validateTab : function (b) {
			var a = true;
			this.tabSwordWiget[b].each(function (d, c) {
				if (pageContainer.getWidget(d).validate() == false) {
					a = false
				}
			});
			return a
		},
		validateAllTab : function () {
			if (this.validateTab(this.options.tabSelectedIndex) == false) {
				return false
			}
			for (var a = 0; a < this.options.tabTitles.length; a++) {
				if (a != this.options.tabSelectedIndex) {
					this.selectIndex(a);
					if (this.validateTab(a) == false) {
						return false
					}
				}
			}
		},
		show : function (a) {
			if (this.options.tabType != "div") {
				return
			}
			this.tabDivs[a].setStyle("display", "");
			this.options.pNode.getElementById("SwordTab_ul").getChildren()[a].setStyle("display", "")
		},
		hide : function (a) {
			if (this.options.tabType != "div") {
				return
			}
			this.tabDivs[a].setStyle("display", "none");
			this.options.pNode.getElementById("SwordTab_ul").getChildren()[a].setStyle("display", "none")
		},
		setTabTitle : function (a, c) {
			var b = this.options.pNode.getElement("div[id=SwordTab_div_" + a + "]");
			if (b) {
				b.set("html", c)
			}
		},
		setTabdivDisOrEnEdit : function (b, c) {
			var a = this.tabDivs[b] || this.tabIframeDivs[b];
			this.tabMaskDiv.setStyles({
				left : a.offsetLeft,
				top : a.offsetTop - 1,
				width : a.offsetWidth,
				height : a.offsetHeight + 1
			});
			a.set("isMask", "true");
			if (b == this.options.tabSelectedIndex) {
				this.tabMaskDiv.setStyle("display", "block")
			}
			if (c == "enable") {
				a.set("isMask", "false");
				if (b == this.options.tabSelectedIndex) {
					this.tabMaskDiv.setStyle("display", "none")
				}
			}
		},
		disOrEnEdit : function (a, b) {
			this.setTabdivDisOrEnEdit(a, b)
		},
		setTabdivDisOrEnClick : function (b, c) {
			var a = this.options.pNode.getElement("li#SwordTab_li_" + b);
			a.set("isDisable", "true");
			a.removeClass("tabs_li_common_horizontal").addClass("tabs_li_readonly_horizontal");
			if (c == "enable") {
				a.set("isDisable", "false");
				a.removeClass("tabs_li_readonly_horizontal").addClass("tabs_li_common_horizontal")
			}
		},
		disOrEnClick : function (a, b) {
			this.setTabdivDisOrEnClick(a, b)
		}
	});
var SwordToolBar = new Class({
		Implements : [Events, Options],
		$family : {
			name : "SwordToolBar"
		},
		options : {
			name : "",
			type : "",
			pNode : null,
			isExtend : "true",
			showType : "mini",
			bindTo : null,
			isFixed : "true",
			autoCompute : "false",
			toggleBarDisplay : null
		},
		associate : null,
		containerBuffer : null,
		enabledStatus : null,
		onAfterInit : $empty,
		itemEvents : [],
		initParam : function (a) {
			this.htmlOptions(a);
			this.initToolBar();
			this.onAfterInit();
			this.windowResize()
		},
		initToolBar : function () {
			var h = this.pNode().getChildren();
			if ($type(this.pNode().get("showType")) && this.pNode().get("showType") == "mini") {
				this.options.showType = "mini"
			} else {
				this.options.showType = "normal"
			}
			var b = this.createContainer();
			var d = this.createBackBox(b);
			b.adopt(d);
			var g = this.pNode().getElement("div[name='associate']");
			pc.getPageInit().addEvent("onDataInit", function () {
				this.getAssociate(g)
			}
				.bind(this));
			if (h.length != 0) {
				h.each(function (s) {
					var k = s.get("name");
					var p = s.get("type");
					var q = s.get("quickKey");
					var n;
					var l = this.items[k] || this.items[p];
					if (l != null) {
						n = this.creatDefualtButton(s, k, p, l.pclass, l.caption, l.enabled, true);
						d.adopt(n)
					} else {
						var t = this.checkPro(s);
						if (t) {
							var m = this.create(s);
							n = m;
							d.adopt(m)
						} else {
							if (k != "associate") {
								if (s.get("type") == "custom") {
									n = this.creatBlankButtonDiv(s);
									d.adopt(n)
								} else {
									if (this.alarm) {
										alert("缺少必要属性：name,caption或者type!该标签将不被创建！" + s.getHTML())
									}
								}
							}
						}
					}
					var r = s.get("isShow");
					if (r && r == "false") {
						if (n) {
							n.setStyle("display", "none")
						}
					}
				}
					.bind(this))
			}
			var f = this.options.bindTo,
			a;
			if (f) {
				a = $w(f)
			}
			if (f && this.options.showType == "mini" && a) {
				if ("SwordForm" == a.name) {
					this.pNode().inject(a.wrapDiv.getElement("div.swordform-panel-box"), "after")
				} else {
					if ("SwordGrid" == a.name) {
						this.pNode().inject(a.scrollDiv, "before")
					}
				}
			}
			this.pNode().adopt(b);
			this.containerBuffer = b;
			if (Browser.Engine.trident4) {
				d.getChildren("div.mini_tb").each(function (k) {
					var m = k.getElement("div.tb_mini_text");
					var l = m.measure(function () {
							return this.getSize()
						});
					if (k.get("enabled") == "false") {
						m.setStyle("width", l.x + 1);
						if (k.get("pclass") != "def") {
							k.setStyle("width", l.x + 40)
						}
					} else {
						m.setStyle("width", l.x);
						if (k.get("pclass") != "def") {
							k.setStyle("width", l.x + 39)
						}
					}
				})
			} else {
				if (Browser.Engine.trident5) {
					d.getChildren("div.mini_tb").each(function (l) {
						var k = l.measure(function () {
								return this.getSize()
							});
						l.setStyle("width", k.x + 11);
						var n = l.getElement("div.tb_mini_text");
						var m = n.measure(function () {
								return this.getSize()
							});
						n.setStyle("width", m.x)
					})
				}
			}
			if (this.options.isFixed == "true" && !this.options.bindTo) {
				this.pNode().adopt(new Element("div", {
						id : "fheight",
						styles : {
							height : this.options.showType == "mini" ? d.getSize().y : d.getSize().y
						}
					}))
			}
			this.setEnabledStatus(b);
			var c = this.options.autoCompute;
			if (c == "true") {
				this.adjustToolTable()
			}
		},
		adjustToolTable : function () {
			var g = this.containerBuffer.getElement("div[name='box']").getChildren();
			var d = 0;
			var c;
			var b = this.containerBuffer.getElement("div.bar-tool");
			if (b) {
				b.destroy()
			}
			for (var f = 0; f < g.length; f++) {
				if (g[f].get("_tag") == "hide") {
					this.setDisplay(g[f].get("name"), true);
					g[f].set("_tag", "display")
				}
				d += g[f].getWidth();
				if (d + 20 > $(document.body).getWidth()) {
					c = true;
					var k = new Element("div", {
							name : "_tool",
							"class" : "bar-tool x-tool-s",
							title : "展开",
							events : {
								click : this.toggleBarDisplay.bind(this)
							}
						});
					k.inject(g[f], "before");
					break
				}
			}
			for (; f < g.length; f++) {
				var h = g[f].get("name");
				if (h != "_tool") {
					this.setHide(h, true);
					g[f].set("_tag", "hide")
				}
			}
			var a = $("fheight");
			if (a) {
				a.setStyle("height", this.containerBuffer.getSize().y)
			}
		},
		toggleBarDisplay : function () {
			var d = this.containerBuffer.getElement("div[name='box']").getChildren();
			var b = this.containerBuffer.getElement("div.bar-tool");
			if (b.hasClass("x-tool-s")) {
				for (var c = 0; c < d.length; c++) {
					if (d[c].get("_tag") == "hide") {
						this.setDisplay(d[c].get("name"), true);
						d[c].set("_tag", "display")
					}
				}
				b.set("title", "收缩");
				b.removeClass("x-tool-s")
			} else {
				this.adjustToolTable()
			}
			if (this.options.toggleBarDisplay) {
				this.getFunc(this.options.toggleBarDisplay)[0]()
			}
			var a = $("fheight");
			if (a) {
				a.setStyle("height", this.containerBuffer.getSize().y)
			}
		},
		setEnabledStatus : function (a) {
			this.enabledStatus = new Object();
			if (a.getElement("div[name='box']").getChildren().length != 0) {
				a.getElement("div[name='box']").getChildren().each(function (b) {
					this.enabledStatus[b.get("name")] = b.get("enabled")
				}
					.bind(this))
			}
		},
		initStatus : function (a) {
			if ($chk(a.containerBuffer)) {
				a.containerBuffer.getElement("div[name='box']").getChildren().each(function (b) {
					a.enabledStatus[b.get("name")] == "true" ? a.setEnabled(b.get("name")) : a.setDisabled(b.get("name"))
				}
					.bind(a))
			}
		},
		pNode : function () {
			return this.options.pNode
		},
		checkPro : function (a) {
			return $chk(a.get("name")) && $chk(a.get("caption"))
		},
		checkButton : function (a) {
			return $chk(this.containerBuffer.getElement("div[name='box']").getElement("div[name='" + a + "']"))
		},
		isDefault : function (a) {
			return $chk(a.get("defualt")) && a.get("defualt") == "true"
		},
		getAssociate : function (a) {
			if ($chk(a)) {
				this.associate = new Object();
				var b = a.getElements("div[name='associateWighet']").length != 0 ? a.getElements("div[name='associateWighet']") : a.getElements("div[name='associateWidget']");
				b.each(function (g, d) {
					var f = g.get("widgetName");
					var c = this.loadWidget(f);
					var h = c.name;
					var k = this.associate[h];
					if (!$chk(k)) {
						k = (this.associate[h] = {})
					}
					this.build(g, h, f);
					this.regAssociateEvent(h, f)
				}
					.bind(this))
			} else {
				if (this.alarm) {
					alert("请设置ToolBar关联的组件！")
				}
			}
		},
		regAssociateEvent : function (k, f) {
			var h = $w(f);
			if (this.associate != null) {
				var g = this.associate[k][f];
				if ($chk(g)) {
					for (var b in g.events) {
						if (b) {
							var c = this.getFunc(g.events[b]);
							for (var a = 0; a < c.length; a++) {
								var d = c[a];
								h.addEvent(b, d.bind(this, [f]))
							}
						}
					}
					if (k == "SwordGrid") {
						if ($chk(g.muiltCheckFunction)) {
							h.addEvent("onAfterCreateHeader", function () {
								var l = h.header().getElement("div[_for=" + g.muiltCheckName + "]").getElement("input");
								if ($chk(l)) {
									l.addEvent("click", g.muiltCheckFunction.bind(this, [l]))
								}
							}
								.bind(this))
						}
					}
				}
			}
		},
		getSwordGridAllCheckBox : function (a, b) {
			return ($w(a).header().getElement("div[_for=" + b + "]").getElement("input"))
		},
		loadWidget : function (a) {
			var b = pc.getWidget(a);
			if ($chk(b)) {
				return b
			} else {
				if (this.alarm) {
					alert("ToolBar组件无法获取关联组件" + a)
				}
			}
		},
		buttonEvents : {
			onClick : {
				SwordGrid : {
					firstPage : function (b) {
						var a = $w(b);
						a.loadPage(1);
						this.initStatus(this)
					},
					endPage : function (b) {
						var a = $w(b);
						a.loadPage(a.totalPage());
						this.initStatus(this)
					},
					nextPage : function (b) {
						var a = $w(b);
						a.loadPage(a.pageNum() + 1);
						this.initStatus(this)
					},
					previousPage : function (b) {
						var a = $w(b);
						a.loadPage(a.pageNum() - 1);
						this.initStatus(this)
					}
				}
			}
		},
		wighetAssociates : {
			SwordGrid : {
				event : {
					onRowClick : function () {
						this.rowClick(this)
					},
					onAfterInitData : function () {
						this.initStatus(this)
					},
					onAllCheckClick : function () {
						this.allCheckClick(this)
					}
				}
			},
			SwordForm : null
		}
	});
SwordToolBar.implement({
	events : {
		SwordGrid : {
			onRowClick : "onRowClick",
			onAfterInitData : "onAfterInitData",
			onAllCheckClick : "onAllCheckClick"
		}
	}
});
SwordToolBar.implement({
	items : {
		edit : {
			caption : i18n.toolEdit,
			type : "edit",
			pclass : "edit",
			enabled : "false"
		},
		"new" : {
			caption : i18n.toolNew,
			type : "new",
			pclass : "new",
			enabled : "true"
		},
		"delete" : {
			caption : i18n.toolDel,
			type : "delete",
			pclass : "delete",
			enabled : "false"
		},
		refresh : {
			caption : i18n.toolFresh,
			type : "refresh",
			pclass : "refresh",
			enabled : "true"
		},
		open : {
			caption : i18n.toolOpen,
			type : "open",
			pclass : "open",
			enabled : "false"
		},
		find : {
			caption : i18n.toolFind,
			type : "find",
			pclass : "find",
			enabled : "true"
		},
		firstPage : {
			caption : i18n.firstPage,
			type : "firstPage",
			pclass : "firstPage",
			enable : "true"
		},
		endPage : {
			caption : i18n.endPage,
			type : "endPage",
			pclass : "endPage",
			enable : "true"
		},
		nextPage : {
			caption : i18n.nextPage,
			type : "nextPage",
			pclass : "nextPage",
			enable : "true"
		},
		previousPage : {
			caption : i18n.previousPage,
			type : "previousPage",
			pclass : "previousPage",
			enable : "true"
		},
		save : {
			caption : i18n.toolSave,
			type : "save",
			pclass : "save",
			enabled : "true"
		},
		back : {
			caption : i18n.toolBack,
			type : "back",
			pclass : "back",
			enable : "true"
		},
		"export" : {
			caption : i18n.toolExport,
			type : "export",
			pclass : "export",
			enable : "true"
		},
		addtime : {
			caption : i18n.toolAddtime,
			type : "addtime",
			pclass : "addtime",
			enable : "true"
		},
		reducetime : {
			caption : i18n.toolReducetime,
			type : "reducetime",
			pclass : "reducetime",
			enable : "true"
		},
		addright : {
			caption : i18n.toolAddright,
			type : "addright",
			pclass : "addright",
			enable : "true"
		},
		reduceright : {
			caption : i18n.toolReduceright,
			type : "reduceright",
			pclass : "reduceright",
			enable : "true"
		},
		close : {
			caption : "关闭",
			type : "close",
			pclass : "close",
			enable : "true"
		},
		print : {
			caption : "打印",
			type : "print",
			pclass : "print",
			enable : "true"
		},
		revoke : {
			caption : "废弃",
			type : "revoke",
			pclass : "revoke",
			enable : "true"
		},
		viewResult : {
			caption : "查看结果",
			type : "viewResult",
			pclass : "viewResult",
			enable : "true"
		},
		consult : {
			caption : "磋商",
			type : "consult",
			pclass : "consult",
			enable : "true"
		},
		"import" : {
			caption : "导入",
			type : "import",
			pclass : "import",
			enable : "true"
		},
		lssue : {
			caption : "发出",
			type : "lssue",
			pclass : "lssue",
			enable : "true"
		},
		investigation : {
			caption : "发函协查",
			type : "investigation",
			pclass : "investigation",
			enable : "true"
		},
		ticket : {
			caption : "开票",
			type : "ticket",
			pclass : "ticket",
			enable : "true"
		},
		debit : {
			caption : "扣款",
			type : "debit",
			pclass : "debit",
			enable : "true"
		},
		inspect : {
			caption : "启动",
			type : "inspect",
			pclass : "inspect",
			enable : "true"
		},
		sign : {
			caption : "签到",
			type : "sign",
			pclass : "sign",
			enable : "true"
		},
		receive : {
			caption : "接收",
			type : "receive",
			pclass : "receive",
			enable : "true"
		},
		violation : {
			caption : "违法登记",
			type : "violation",
			pclass : "violation",
			enable : "true"
		},
		preview : {
			caption : "预览",
			type : "preview",
			pclass : "preview",
			enable : "true"
		},
		push : {
			caption : "推送",
			type : "push",
			pclass : "push",
			enable : "true"
		},
		accept : {
			caption : "确定",
			type : "accept",
			pclass : "accept",
			enable : "true"
		},
		registration : {
			caption : "登记",
			type : "registration",
			pclass : "registration",
			enable : "true"
		},
		redo : {
			caption : "重置",
			type : "redo",
			pclass : "redo",
			enable : "true"
		},
		configure : {
			caption : "设置",
			type : "configure",
			pclass : "configure",
			enable : "true"
		},
		view : {
			caption : "查看",
			type : "view",
			pclass : "view",
			enable : "true"
		},
		saveall : {
			caption : "批量保存",
			type : "saveall",
			pclass : "saveall",
			enable : "true"
		},
		choose : {
			caption : "选择",
			type : "choose",
			pclass : "choose",
			enable : "true"
		},
		adduser : {
			caption : "添加用户",
			type : "adduser",
			pclass : "adduser",
			enable : "true"
		},
		extract : {
			caption : "提取",
			type : "extract",
			pclass : "extract",
			enable : "true"
		},
		commit : {
			caption : "提交",
			type : "commit",
			pclass : "commit",
			enable : "true"
		},
		forward : {
			caption : "转寄",
			type : "forward",
			pclass : "forward",
			enable : "true"
		},
		calc : {
			caption : "计算",
			type : "calc",
			pclass : "calc",
			enable : "true"
		},
		instorage : {
			caption : "入库",
			type : "instorage",
			pclass : "instorage",
			enable : "true"
		},
		outstorage : {
			caption : "出库",
			type : "outstorage",
			pclass : "outstorage",
			enable : "true"
		},
		copy : {
			caption : "复制",
			type : "copy",
			pclass : "copy",
			enable : "true"
		},
		addrow : {
			caption : "增行",
			type : "addrow",
			pclass : "addrow",
			enable : "true"
		},
		deleterow : {
			caption : "删行",
			type : "deleterow",
			pclass : "deleterow",
			enable : "true"
		},
		review : {
			caption : "审核",
			type : "review",
			pclass : "review",
			enable : "true"
		},
		count : {
			caption : "统计",
			type : "count",
			pclass : "count",
			enable : "true"
		},
		bookopen : {
			caption : "打开书",
			type : "bookopen",
			pclass : "bookopen",
			enable : "true"
		},
		contact : {
			caption : "联系人",
			type : "contact",
			pclass : "contact",
			enable : "true"
		},
		contactopen : {
			caption : "打开联系人",
			type : "contactopen",
			pclass : "contactopen",
			enable : "true"
		},
		read : {
			caption : "读盘",
			type : "read",
			pclass : "read",
			enable : "true"
		},
		users : {
			caption : "用户",
			type : "users",
			pclass : "users",
			enable : "true"
		},
		time : {
			caption : "新旧",
			type : "time",
			pclass : "time",
			enable : "true"
		},
		notification : {
			caption : "通知",
			type : "notification",
			pclass : "notification",
			enable : "true"
		},
		cancel : {
			caption : "取消",
			type : "cancel",
			pclass : "cancel",
			enable : "true"
		},
		help : {
			caption : "帮助",
			type : "help",
			pclass : "help",
			enable : "true"
		},
		cancellation : {
			caption : "销号",
			type : "cancellation",
			pclass : "cancellation",
			enable : "true"
		},
		uncancellation : {
			caption : "反销号",
			type : "uncancellation",
			pclass : "uncancellation",
			enable : "true"
		},
		upcancellation : {
			caption : "上解销号",
			type : "upcancellation",
			pclass : "upcancellation",
			enable : "true"
		},
		addcol : {
			caption : "增列",
			type : "addcol",
			pclass : "addcol",
			enable : "true"
		},
		deletecol : {
			caption : "删列",
			type : "deletecol",
			pclass : "deletecol",
			enable : "true"
		},
		bulkprint : {
			caption : "批量打印",
			type : "bulkprint",
			pclass : "bulkprint",
			enable : "true"
		},
		check : {
			caption : "检验",
			type : "check",
			pclass : "check",
			enable : "true"
		},
		newwindow : {
			caption : "新建窗口",
			type : "newwindow",
			pclass : "newwindow",
			enable : "true"
		},
		gl : {
			caption : "关联",
			type : "gl",
			pclass : "gl",
			enable : "true"
		},
		over : {
			caption : "结束",
			type : "over",
			pclass : "over",
			enable : "true"
		}
	}
});
SwordToolBar.implement({
	create : function (d) {
		if (!$chk(d.get("name"))) {
			return null
		}
		var l = d.get("type");
		if (!$chk(l)) {
			l = d.get("name")
		}
		var k = d.get("pclass");
		if (!$chk(k)) {
			k = "def"
		}
		var p = new Element("div", {
				name : d.get("name"),
				type : l,
				pclass : k,
				"class" : this.options.showType != "mini" ? this.globe.button.backGround : this.mini_globe.button.backGround + " tb_mini",
				enabled : d.get("enabled") == null ? "true" : d.get("enabled")
			});
		var n = d.get("quickKey");
		if ($chk(n)) {
			p.set("quickKey", n)
		}
		var q = new Element("div", {
				"class" : k == null ? "" : (d.get("enabled") == "true" || d.get("enabled") == null ? k + "_enabled" : k + "_disabled"),
				name : "image"
			});
		var m = "";
		var r = "";
		if (this.options.showType != "mini" && $chk(d.get("caption")) && d.get("caption").length > 4) {
			m = d.get("caption");
			r = d.get("caption").substring(0, 3) + "..."
		} else {
			m = d.get("altMes");
			r = d.get("caption")
		}
		if ($chk(m)) {
			p.set("title", m)
		}
		var a = "";
		if ($chk(n)) {
			var b = n.match(/\+[^#]+/g);
			if ($chk(b)) {
				for (var c = 0, h = b.length; c < h; c++) {
					b[c] = b[c].replace("+", "")
				}
				a = "(<u>" + b.join("").toUpperCase() + "</u>)"
			}
		}
		var g = new Element("div", {
				"class" : this.options.showType != "mini" ? (d.get("enabled") == "true" || d.get("enabled") == null ? this.globe.text.enabled : this.globe.text.disabled) : (d.get("enabled") == "true" || d.get("enabled") == null ? this.mini_globe.text.enabled : this.mini_globe.text.disabled),
				name : "caption",
				html : d.get("caption") == null ? a : (r + a)
			});
		p.adopt(q, g);
		if ($chk(d.get("x"))) {
			p.set({
				styles : {
					width : d.get("x")
				}
			})
		}
		var f = new ItemEvent();
		f.initParam(d);
		f.pNode = this.options.pNode;
		this.itemEvents.include(f);
		p.addEvent("click", function () {
			if (p.get("enabled") == "true") {
				f.regOnClick()
			}
		});
		p.addEvent("mouseover", function (s) {
			if (p.get("enabled") == "true") {
				f.regOnMouseOver(s)
			}
		});
		p.addEvent("mouseout", function (s) {
			if (p.get("enabled") == "true") {
				f.regOnMouseout(s)
			}
		});
		p.addEvent("mousedown", function (s) {
			if (p.get("enabled") == "true") {
				f.regOnMouseDown(s)
			}
		});
		p.addEvent("mouseup", function (s) {
			if (p.get("enabled") == "true") {
				f.regOnMouseUp(s)
			}
		});
		return p
	},
	creatDefualtButton : function (p, w, d, g, v, l, r) {
		if (!$chk(d)) {
			d = w
		}
		if (!$chk(g)) {
			g = "def"
		}
		var k = new Element("div", {
				name : w,
				type : d,
				pclass : g,
				"class" : this.options.showType != "mini" ? this.globe.button.backGround : this.mini_globe.button.backGround + " tb_mini",
				enabled : !$chk(p.get("enabled")) ? ($chk(l) ? l : "true") : p.get("enabled")
			});
		var q = p.get("quickKey");
		if ($chk(q)) {
			k.set("quickKey", q)
		}
		var m = new Element("div", {
				"class" : $chk(p.get("enabled")) ? (p.get("enabled") == "true" ? g + "_enabled" : g + "_disabled") : ($chk(l) ? (l == "true" ? g + "_enabled" : g + "_disabled") : g + "_enabled"),
				name : "image"
			});
		var f = "";
		var n = "";
		if (this.options.showType != "mini" && $chk(p.get("caption")) && p.get("caption").length > 4) {
			f = p.get("caption");
			n = p.get("caption").substring(0, 3) + "..."
		} else {
			f = p.get("altMes");
			n = p.get("caption")
		}
		if ($chk(f)) {
			k.set("title", f)
		}
		var s = "";
		if ($chk(q)) {
			var a = q.match(/\+[^#]+/g);
			if ($chk(a)) {
				for (var t = 0, u = a.length; t < u; t++) {
					a[t] = a[t].replace("+", "")
				}
				s = "(<u>" + a.join("").toUpperCase() + "</u>)"
			}
		}
		var b = new Element("div", {
				"class" : this.options.showType != "mini" ? ($chk(p.get("enabled")) ? (p.get("enabled") == "true" ? this.globe.text.enabled : this.globe.text.disabled) : ($chk(l) ? (l == "true" ? this.globe.text.enabled : this.globe.text.disabled) : this.globe.text.enabled)) : ($chk(p.get("enabled")) ? (p.get("enabled") == "true" ? this.mini_globe.text.enabled : this.mini_globe.text.disabled) : ($chk(l) ? (l == "true" ? this.mini_globe.text.enabled : this.mini_globe.text.disabled) : this.mini_globe.text.enabled)) + " tb_mini_text",
				name : "caption",
				html : p.get("caption") == null ? (v + s) : (n + s)
			});
		k.adopt(m, b);
		if ($chk(p.get("x"))) {
			k.set({
				styles : {
					width : p.get("x")
				}
			})
		}
		var h = new ItemEvent();
		h.initParam(p);
		if ($chk(r)) {
			h.initEvents();
			if ($chk(q)) {
				pc.HotKeyHash.set(q, p)
			}
		}
		h.buttonEvents = this.buttonEvents;
		h.pNode = this.options.pNode;
		h.initStatus = this.initStatus.bind(this);
		this.itemEvents.include(h);
		k.addEvent("click", function () {
			if (k.get("enabled") == "true") {
				h.regOnClick()
			}
		});
		k.addEvent("mouseover", function (x) {
			if (k.get("enabled") == "true") {
				h.regOnMouseOver(x)
			}
		});
		k.addEvent("mouseout", function (x) {
			if (k.get("enabled") == "true") {
				h.regOnMouseout(x)
			}
		});
		k.addEvent("mousedown", function (x) {
			if (k.get("enabled") == "true") {
				h.regOnMouseDown(x)
			}
		});
		k.addEvent("mouseup", function (x) {
			if (k.get("enabled") == "true") {
				h.regOnMouseUp(x)
			}
		});
		var c = this.options.autoCompute;
		if (c == "true" && arguments[arguments.length - 1] != true) {
			this.adjustToolTable()
		}
		return k
	},
	creatBlankButtonDiv : function (b) {
		var a = new Element("div", {
				name : name,
				"class" : this.globe.blankButtonDiv
			});
		a.adopt(b);
		return a
	},
	setDisabled : function (c) {
		var b = this.options.pNode.getElement("div[name='container']");
		var m = b.getElements("div[name='" + c + "']");
		if (m.length == 0) {
			return null
		}
		var a = m[0];
		if (this.options.pNode.get("showType") == "mini" && a.hasClass("tb_mini_hover")) {
			a.removeClass("tb_mini_hover");
			a.removeClass("tb_mini_hover");
			a.addClass("tb_mini")
		}
		a.set("enabled", "false");
		var k = a.getElements("div[name='image']")[0];
		var l = k.get("class");
		if (l.contains("_click")) {
			l = l.replace("_click", "_disabled")
		} else {
			l = l.replace("_enabled", "_disabled")
		}
		var g = null;
		if ($chk(g)) {
			var h = g.substring(g.lastIndexOf(".") + 1);
			var n = g.substring(0, g.lastIndexOf("."));
			var f = n.replace("_disabled", "") + "_disabled." + h;
			k.setStyles({
				"background-image" : 'url("' + f + '")'
			})
		} else {
			k.set("class", l)
		}
		var d = a.getElements("div[name='caption']")[0];
		d.set("class", this.options.showType != "mini" ? this.globe.text.disabled : this.mini_globe.text.disabled)
	},
	setEnabled : function (f) {
		var b = this.options.pNode.getElement("div[name='container']");
		var m = b.getElements("div[name='" + f + "']");
		if (m.length == 0) {
			return null
		}
		var a = m[0];
		a.set("enabled", "true");
		var k = a.getElements("div[name='image']")[0];
		var l = (k.get("class")).replace("_disabled", "_enabled");
		var g = null;
		if ($chk(g)) {
			var h = g.substring(g.lastIndexOf(".") + 1);
			var n = g.substring(0, g.lastIndexOf("."));
			var d = n.replace("_disabled", "") + "." + h;
			k.setStyles({
				"background-image" : 'url("' + d + '")'
			})
		} else {
			k.set("class", l)
		}
		var c = a.getElements("div[name='caption']")[0];
		c.set("class", this.options.showType != "mini" ? this.globe.text.enabled : this.mini_globe.text.enabled)
	},
	setDisplay : function (c) {
		var a = this.options.pNode.getElements("div[name='container']");
		var f = a.getElements("div[name='" + c + "']");
		if (f.length == 0) {
			return null
		}
		var d = f[0];
		d.setStyle("display", "");
		var b = this.options.autoCompute;
		if (b == "true" && arguments[1] != true) {
			this.adjustToolTable()
		}
	},
	setHide : function (c) {
		var a = this.options.pNode.getElements("div[name='container']");
		var f = a.getElements("div[name='" + c + "']");
		if (f.length == 0) {
			return null
		}
		var d = f[0];
		d.setStyle("display", "none");
		var b = this.options.autoCompute;
		if (b == "true" && arguments[1] != true) {
			this.adjustToolTable()
		}
	},
	buildDisablePic : function (f) {
		var d = f.lastIndexOf(".");
		var c = f.substring(d + 1);
		var b = f.substring(0, d);
		var a = b.replace("_disabled", "") + "_disabled";
		return a + "." + c
	},
	createContainer : function () {
		var a = new Element("div", {
				name : "container",
				"class" : this.options.showType != "mini" ? this.globe.box.backGround : this.mini_globe.box.backGround
			});
		var f;
		var d;
		var b = new Element("div", {
				"class" : this.options.showType != "mini" ? this.globe.box.left : this.mini_globe.box.left
			});
		var c = new Element("div", {
				"class" : this.options.showType != "mini" ? this.globe.box.right : this.mini_globe.box.right
			});
		a.adopt(b, c);
		if (this.options.isFixed == "true" && !this.options.bindTo) {
			a.addClass("toolbar_fixed")
		}
		return a
	},
	createBackBox : function (a) {
		return new Element("div", {
			"class" : this.options.showType != "mini" ? this.globe.box.back : this.mini_globe.box.back,
			name : "box"
		})
	},
	windowResize : function () {
		window.addEvent("resize", function (b) {
			var a = $("fheight");
			if (a) {
				a.setStyle("height", this.containerBuffer.getSize().y)
			}
		}
			.bind(this))
	}
});
SwordToolBar.implement({
	globe : {
		box : {
			backGround : "tb_box",
			top : "",
			bottom : "",
			left : "l",
			right : "r",
			back : "c"
		},
		button : {
			backGround : "tb",
			top : "",
			bottom : "",
			left : "",
			right : ""
		},
		text : {
			enabled : "text_enabled ",
			disabled : "text_disabled "
		},
		blankButtonDiv : "tb_blank"
	},
	mini_globe : {
		box : {
			backGround : "tb_mini_box",
			top : "",
			bottom : "",
			left : "l",
			right : "r",
			back : "c"
		},
		button : {
			backGround : "mini_tb",
			top : "",
			bottom : "",
			left : "",
			right : ""
		},
		text : {
			enabled : "text_enabled tb_mini_text",
			disabled : "text_disabled tb_mini_text"
		}
	},
	defaultCss : {
		"new" : "new",
		open : "open",
		find : "find",
		"delete" : "delete",
		refresh : "refresh"
	}
});
SwordToolBar.implement({
	build : function (c, k, h) {
		if (k == "SwordGrid") {
			var g = this.events.SwordGrid;
			var b = this.associate[k][h];
			if (!$chk(b)) {
				b = (this.associate[k][h] = {})
			}
			this.associate[k][h].muiltCheckName = c.getElement("div[name='muiltCheck']").get("checkName");
			var a = b.events;
			if (!$chk(a)) {
				a = (b.events = {})
			}
			if (this.options.isExtend == "true") {
				this.pluginBuild(k, h)
			}
			for (var f in g) {
				var d = c.get(f);
				if ($chk(d)) {
					if ($chk(this.events[k][f])) {
						this.associate[k][h].events[this.events[k][f]] = d
					}
				}
			}
		}
	},
	pluginBuild : function (f, c) {
		var d = this.wighetAssociates[f].event;
		for (var a in d) {
			this.associate[f][c].events[this.events[f][a]] = d[a]
		}
		var b = this.gridMuiltCheck;
		if ($chk(b)) {
			this.associate[f][c].muiltCheckFunction = b
		}
	}
});
SwordToolBar.implement({
	associate : {
		SwordGrid : {},
		SwordForm : {},
		SwordSubmit : {}

	}
});
var ItemEvent = new Class({
		Implements : [Events, Options],
		options : {
			_onClick : null,
			onClick : null,
			onBlur : null,
			onMouseover : null,
			onMouseout : null,
			onMousedown : null,
			onMouseup : null,
			name : "",
			type : "",
			gridName : ""
		},
		buttonEvents : null,
		pNode : null,
		initStatus : $empty,
		earseEvent : function (b, a) {
			a.each(function (d) {
				var c = b.get(d);
				if (c) {
					if (Browser.Engine.trident4 || Browser.Engine.trident5) {
						c += "";
						if (c.indexOf("{") != -1) {
							c = c.substring(c.indexOf("{") + 1, c.lastIndexOf("}"))
						}
					}
					b.set("_" + d, c);
					b.erase(d)
				}
			})
		},
		initEvents : function () {
			if ($chk(this.options.gridName)) {
				if (!$chk(this.options.onClick)) {
					if ($chk(this.buttonEvents)) {
						for (var b in this.buttonEvents) {
							var d = this.buttonEvents[b];
							var a = d[$w(this.options.gridName).name];
							var c = a[this.options.type];
							if ($chk(c)) {
								this.addEvent(b, c.bind(this, [this.options.gridName]))
							}
						}
					}
				}
			}
			if (!$chk(this.options.onMouseover)) {
				this.addEvent("onMouseover", function (k) {
					k.target = $(k.target);
					var n = k.target.getParent("div[name='" + this.options.name + "']");
					if (!n) {
						return
					}
					var g = n.get("class")[0];
					var l;
					if (this.pNode.get("showType") != "mini") {
						n.removeClass("tb_hover");
						n.removeClass("tb_hover");
						n.addClass("tb_hover")
					} else {
						n.removeClass("tb_mini");
						n.removeClass("tb_mini");
						n.removeClass("tb_mini_hover");
						n.removeClass("tb_mini_hover");
						n.addClass("tb_mini_hover");
						var h = n.getElements("div[name='caption']")[0];
						h.removeClass("tb_mini_text");
						h.removeClass("tb_mini_text");
						h.removeClass("tb_mini_texthover");
						h.removeClass("tb_mini_texthover");
						h.addClass("tb_mini_texthover");
						var m = n.getElements("div[name='image']")[0];
						var f = (m.get("class")).replace("_enabled", "_click");
						m.set("class", f)
					}
				}
					.bind(this))
			}
			if (!$chk(this.options.onMouseout)) {
				this.addEvent("onMouseout", function (k) {
					var n = k.target.getParent("div[name='" + this.options.name + "']");
					if (!n) {
						return
					}
					var g = n.get("class")[0];
					var l;
					if (this.pNode.get("showType") != "mini") {
						n.removeClass("tb_hover");
						n.removeClass("tb_hover")
					} else {
						n.removeClass("tb_mini");
						n.removeClass("tb_mini");
						n.removeClass("tb_mini_hover");
						n.removeClass("tb_mini_hover");
						n.addClass("tb_mini");
						var h = n.getElements("div[name='caption']")[0];
						h.removeClass("tb_mini_text");
						h.removeClass("tb_mini_text");
						h.removeClass("tb_mini_texthover");
						h.removeClass("tb_mini_texthover");
						h.addClass("tb_mini_text");
						var m = n.getElements("div[name='image']")[0];
						var f = (m.get("class")).replace("_click", "_enabled");
						m.set("class", f)
					}
				}
					.bind(this))
			}
			if (!$chk(this.options.onMousedown)) {
				this.addEvent("onMousedown", function (h) {
					var l = h.target.getParent("div[name='" + this.options.name + "']");
					if (!l) {
						return
					}
					var f = l.get("class")[0];
					var k;
					if (this.pNode.get("showType") != "mini") {
						l.removeClass("tb_click");
						l.removeClass("tb_click");
						l.addClass("tb_click")
					} else {
						l.removeClass("tb_mini_click");
						l.removeClass("tb_mini_click");
						l.addClass("tb_mini_click");
						var g = l.getElements("div[name='caption']")[0];
						g.removeClass("tb_mini_textclick");
						g.removeClass("tb_mini_textclick");
						g.addClass("tb_mini_textclick")
					}
				}
					.bind(this))
			}
			if (!$chk(this.options.onMouseup)) {
				this.addEvent("onMouseup", function (h) {
					var l = h.target.getParent("div[name='" + this.options.name + "']");
					if (!l) {
						return
					}
					var f = l.get("class")[0];
					var k;
					if (this.pNode.get("showType") != "mini") {
						l.removeClass("tb_click");
						l.removeClass("tb_click");
						l.removeClass("tb_hover");
						l.removeClass("tb_hover")
					} else {
						l.removeClass("tb_mini_click");
						l.removeClass("tb_mini_click");
						l.removeClass("tb_mini_hover");
						l.removeClass("tb_mini_hover");
						l.addClass("tb_mini_hover");
						var g = l.getElements("div[name='caption']")[0];
						g.removeClass("tb_mini_textclick");
						g.removeClass("tb_mini_textclick");
						g.removeClass("tb_mini_texthover");
						g.removeClass("tb_mini_texthover");
						g.addClass("tb_mini_texthover")
					}
				}
					.bind(this))
			}
		},
		initParam : function (a) {
			this.earseEvent(a, ["onclick"]);
			this.htmlOptions(a);
			if (!$chk(this.options.type)) {
				this.options.type = this.options.name
			}
			pc.getPageInit().addEvent("onDataInit", this.initEvents.bind(this))
		},
		regOnClick : function () {
			if ($defined(this.options._onClick)) {
				if (pc.calendar) {
					pc.calendar.hide()
				}
				this.getFunc(this.options._onClick)[0]()
			} else {
				if ($defined(this.options.onClick)) {
					this.getFunc(this.options.onClick)[0]()
				} else {
					this.fireEvent("onClick")
				}
			}
		},
		regOnMouseOver : function (a) {
			this.fireEvent("onMouseover", a)
		},
		regOnMouseDown : function (a) {
			this.fireEvent("onMousedown", a)
		},
		regOnMouseUp : function (a) {
			this.fireEvent("onMouseup", a)
		},
		regOnMouseout : function (a) {
			this.fireEvent("onMouseout", a)
		}
	});
var SwordToolTips = new Class({
		Implements : [Events, Options],
		style : {
			styBase : "box_sty",
			defSty : "c",
			defCont : "cont"
		},
		options : {
			imagePath : $SwordLoader.rootPath + "swordweb/styles/gt3new/SwordToolTips/images/",
			arrowImageFile : "green-arrow.gif",
			tarrowImageFileRight : "green-arrow-right.gif",
			formTooltipDivClassName : "DHTMLgoodies_formTooltipDiv",
			tooltipWidth : 200,
			tooltipBgColor : "blue",
			closeMessage : "关闭",
			disableTooltipMessage : "不再提示",
			tooltipPosition : "below",
			arrowRightWidth : 16,
			arrowTopHeight : 13,
			toptipHeight : 10,
			tooltipCornerSize : 5,
			tooltipDisabled : false,
			disableTooltipPossibility : false,
			disableTooltipClose : false,
			displayArrow : true,
			pageBgColor : "#FFFFFF"
		},
		tooltipDiv : null,
		tooltipText : null,
		activeInput : null,
		tooltipContentDiv : null,
		positionLeft : null,
		positionTop : null,
		initialize : function (a) {
			this.setOptions(a);
			if (navigator.userAgent.indexOf("MSIE") >= 0 && navigator.userAgent.indexOf("MSIE 9") == -1) {
				this.isMSIE = true
			} else {
				this.isMSIE = false
			}
			window.refToFormTooltip = this;
			window.onresize = function () {
				window.refToFormTooltip.__positionCurrentToolTipObj()
			};
			if (window.refToFormTooltip.options.tooltipBgColor == "green") {
				window.refToFormTooltip.options.tooltipUpClassName = "DHTMLgoodies_green_formTooltip_upImg";
				window.refToFormTooltip.options.tooltipBottomClassName = "DHTMLgoodies_green_formTooltip_bottomImg";
				window.refToFormTooltip.options.tooltipRightClassName = "DHTMLgoodies_green_formTooltip_rightImg";
				window.refToFormTooltip.options.tooltipBgColor = "#589a82"
			} else {
				if (window.refToFormTooltip.options.tooltipBgColor == "blue") {
					window.refToFormTooltip.options.tooltipUpClassName = "DHTMLgoodies_blue_formTooltip_upImg";
					window.refToFormTooltip.options.tooltipBottomClassName = "DHTMLgoodies_blue_formTooltip_bottomImg";
					window.refToFormTooltip.options.tooltipRightClassName = "DHTMLgoodies_blue_formTooltip_rightImg";
					window.refToFormTooltip.options.tooltipBgColor = "#ffa94c"
				}
			}
		},
		createTip : function (c, b) {
			var a = window.refToFormTooltip.getTopPos(c);
			if ($(document.body).getScroll().y == a) {
				return
			}
			window.refToFormTooltip.tooltipText = b;
			window.refToFormTooltip.activeInput = c;
			window.refToFormTooltip.__displayTooltip()
		},
		hide : function () {
			window.refToFormTooltip.__hideTooltip()
		},
		__displayTooltip : function () {
			if (window.refToFormTooltip.options.tooltipDisabled) {
				return
			}
			if (!window.refToFormTooltip.tooltipDiv) {
				window.refToFormTooltip.__createTooltip()
			}
			window.refToFormTooltip.__positionTooltip();
			window.refToFormTooltip.tooltipContentDiv.innerHTML = ("<div style='color:white;' id='cont'>");
			var a = window.refToFormTooltip.tooltipContentDiv.getElements("div[id='cont']")[0];
			a.appendText(window.refToFormTooltip.tooltipText);
			window.refToFormTooltip.tooltipDiv.style.display = "block"
		},
		__createTooltip : function () {
			window.refToFormTooltip.tooltipDiv = document.createElement("DIV");
			window.refToFormTooltip.tooltipDiv.style.position = "absolute";
			window.refToFormTooltip.tooltipDiv.style.zIndex = 1002;
			window.refToFormTooltip.tooltipDiv.id = "formTooltipDivPNode";
			var c = new Element("div");
			c.id = "_swordtipsDiv";
			if (window.refToFormTooltip.options.displayArrow) {
				if (window.refToFormTooltip.options.tooltipPosition == "below") {
					c.addClass(window.refToFormTooltip.options.tooltipBottomClassName)
				} else {
					if (window.refToFormTooltip.options.tooltipPosition == "right") {
						c.addClass(window.refToFormTooltip.options.tooltipRightClassName)
					} else {
						if (window.refToFormTooltip.options.tooltipPosition == "up") {
							c.addClass(window.refToFormTooltip.options.tooltipUpClassName)
						}
					}
				}
				if (window.refToFormTooltip.options.tooltipPosition != "up") {
					window.refToFormTooltip.tooltipDiv.appendChild(c)
				}
			}
			var d = document.createElement("DIV");
			d.style.position = "relative";
			d.style.zIndex = 1000;
			if (window.refToFormTooltip.options.tooltipPosition != "up" && window.refToFormTooltip.options.tooltipPosition != "below" && window.refToFormTooltip.options.displayArrow) {
				d.style.left = window.refToFormTooltip.options.arrowRightWidth + "px"
			}
			d.id = "formTooltipDiv";
			d.className = window.refToFormTooltip.options.formTooltipDivClassName;
			d.style.backgroundColor = window.refToFormTooltip.options.tooltipBgColor;
			window.refToFormTooltip.tooltipDiv.appendChild(d);
			window.refToFormTooltip.tooltipContentDiv = document.createElement("DIV");
			window.refToFormTooltip.tooltipContentDiv.style.position = "relative";
			window.refToFormTooltip.tooltipContentDiv.id = "formTooltipContent";
			d.appendChild(window.refToFormTooltip.tooltipContentDiv);
			if (window.refToFormTooltip.options.disableTooltipClose) {
				var b = document.createElement("DIV");
				b.style.textAlign = "center";
				b.innerHTML = '<A class="DHTMLgoodies_formTooltip_closeMessage" href="#" onclick="window.refToFormTooltip.__hideTooltipFromLink();return false">' + window.refToFormTooltip.options.closeMessage + "</A>";
				if (window.refToFormTooltip.options.disableTooltipPossibility) {
					var a = b.innerHTML;
					a = a + ' | <A class="DHTMLgoodies_formTooltip_closeMessage" href="#" onclick="window.refToFormTooltip.disableTooltip();return false">' + window.refToFormTooltip.options.disableTooltipMessage + "</A>";
					b.innerHTML = a
				}
				d.appendChild(b)
			}
			if (window.refToFormTooltip.options.displayArrow && window.refToFormTooltip.options.tooltipPosition == "up") {
				window.refToFormTooltip.tooltipDiv.appendChild(c)
			}
			document.body.appendChild(window.refToFormTooltip.tooltipDiv);
			if (window.refToFormTooltip.options.tooltipCornerSize > 0) {
				window.refToFormTooltip.roundedCornerObj = new DHTMLgoodies_roundedCorners();
				window.refToFormTooltip.roundedCornerObj.addTarget("formTooltipDiv", window.refToFormTooltip.options.tooltipCornerSize, window.refToFormTooltip.options.tooltipCornerSize, window.refToFormTooltip.options.tooltipBgColor, window.refToFormTooltip.options.pageBgColor, 5);
				window.refToFormTooltip.roundedCornerObj.init()
			}
			window.refToFormTooltip.tooltipContentDiv = $("formTooltipContent");
			$("formTooltipDiv").addEvent("click", function (f) {
				window.refToFormTooltip.tooltipDiv.style.display = "none"
			})
		},
		__positionTooltip : function () {
			var b = window.refToFormTooltip.activeInput;
			var f = 0;
			var d = 0;
			var c = 0;
			var g = b._getPosition().y - $(document.body).getScroll().y + b.getHeight() + 20;
			var a = $(document.body).getHeight();
			if (g > a) {
				window.refToFormTooltip.options.tooltipPosition = "up";
				$("_swordtipsDiv").removeClass(window.refToFormTooltip.options.tooltipBottomClassName);
				$("_swordtipsDiv").addClass(window.refToFormTooltip.options.tooltipUpClassName);
				$(window.refToFormTooltip.tooltipDiv).appendChild($("_swordtipsDiv"))
			}
			if (!window.refToFormTooltip.options.displayArrow) {
				f = 3
			}
			if (window.refToFormTooltip.options.tooltipPosition == "below") {
				d = window.refToFormTooltip.getLeftPos(b);
				c = (window.refToFormTooltip.getTopPos(b) + b.offsetHeight + f)
			} else {
				if (window.refToFormTooltip.options.tooltipPosition == "right") {
					d = (window.refToFormTooltip.getLeftPos(b) + b.offsetWidth + f);
					c = window.refToFormTooltip.getTopPos(b)
				} else {
					if (window.refToFormTooltip.options.tooltipPosition == "up") {
						d = window.refToFormTooltip.getLeftPos(b);
						c = (window.refToFormTooltip.getTopPos(b) - b.offsetHeight - f - window.refToFormTooltip.options.toptipHeight)
					}
				}
			}
			window.refToFormTooltip.positionLeft = d;
			window.refToFormTooltip.positionTop = c;
			window.refToFormTooltip.tooltipDiv.style.left = d + "px";
			window.refToFormTooltip.tooltipDiv.style.top = c + "px";
			window.refToFormTooltip.tooltipDiv.style.width = window.refToFormTooltip.options.tooltipWidth + "px";
			window.refToFormTooltip.options.tooltipPosition = "below"
		},
		getLeftPos : function (c) {
			try {
				var h = c._getPosition().x - $(document.body).getScrollWidth();
				var d = 0;
				if (h > 0) {
					d = $(document.body).getWidth()
				} else {
					d = c._getPosition().x
				}
				return d
			} catch (f) {
				var b = document.documentElement.clientWidth;
				var g = document.documentElement.scrollWidth;
				var a = (b - g) / 4;
				return window.refToFormTooltip.positionLeft + a
			}
		},
		getTopPos : function (d) {
			try {
				var b = d._getPosition().y - $(document.body).getScroll().y + d.getHeight() + 20;
				var a = $(document.body).getHeight();
				if ((b > a || b >= 0)) {
					b = d._getPosition().y
				} else {
					b = d._getPosition().y + d.getHeight()
				}
				return b
			} catch (c) {
				return window.refToFormTooltip.positionTop
			}
		},
		getViewSize : function () {
			return {
				w : window.innerWidth || document.documentElement.clientWidth,
				h : window.innerHeight || document.documentElement.clientHeight
			}
		},
		getFullSize : function () {
			var a = Math.max(document.documentElement.clientWidth, document.body.clientWidth) + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
			var b = Math.max(document.documentElement.clientHeight, document.body.clientHeight) + Math.max(document.documentElement.scrollTop, document.body.scrollTop);
			a = Math.max(document.documentElement.scrollWidth, a);
			b = Math.max(document.documentElement.scrollHeight, b);
			return {
				w : a,
				h : b
			}
		},
		__positionCurrentToolTipObj : function () {
			if (window.refToFormTooltip.activeInput) {
				window.refToFormTooltip.__positionTooltip()
			}
		},
		getSrcElement : function (b) {
			var a;
			if (b.target) {
				a = b.target
			} else {
				if (b.srcElement) {
					a = b.srcElement
				}
			}
			if (a.nodeType == 3) {
				a = a.parentNode
			}
			return a
		},
		__hideTooltip : function () {
			try {
				if ($chk(window.refToFormTooltip.tooltipDiv)) {
					window.refToFormTooltip.tooltipDiv.style.display = "none"
				}
				$("_swordtipsDiv").addClass(window.refToFormTooltip.options.tooltipBottomClassName);
				$("_swordtipsDiv").removeClass(window.refToFormTooltip.options.tooltipUpClassName);
				$("_swordtipsDiv").inject($(window.refToFormTooltip.tooltipDiv), "top")
			} catch (a) {}

		},
		__hideTooltipFromLink : function () {
			setTimeout("window.refToFormTooltip.__hideTooltip()", 10)
		},
		disableTooltip : function () {
			window.refToFormTooltip.__hideTooltipFromLink();
			window.refToFormTooltip.options.tooltipDisabled = true
		},
		setTooltipPosition : function (a) {
			window.refToFormTooltip.options.tooltipPosition = a
		},
		setCloseMessage : function (a) {
			window.refToFormTooltip.options.closeMessage = a
		},
		setDisableTooltipMessage : function (a) {
			window.refToFormTooltip.options.disableTooltipMessage = a
		},
		setTooltipDisablePossibility : function (a) {
			window.refToFormTooltip.options.disableTooltipPossibility = a
		},
		setTooltipDisableClose : function (a) {
			window.refToFormTooltip.options.disableTooltipClose = a
		},
		setTooltipWidth : function (a) {
			window.refToFormTooltip.options.tooltipWidth = a
		},
		setArrowVisibility : function (a) {
			window.refToFormTooltip.options.displayArrow = a
		},
		setTooltipBgColor : function (a) {
			window.refToFormTooltip.options.tooltipBgColor = a
		},
		setTooltipCornerSize : function (a) {
			window.refToFormTooltip.options.tooltipCornerSize = a
		},
		setTopArrowHeight : function (a) {
			window.refToFormTooltip.options.arrowTopHeight = a
		},
		setRightArrowWidth : function (a) {
			window.refToFormTooltip.options.arrowRightWidth = a
		},
		setPageBgColor : function (a) {
			window.refToFormTooltip.options.pageBgColor = a
		}
	});
function DHTMLgoodies_roundedCorners() {
	var a;
	this.roundedCornerTargets = new Array()
}
var string = "";
DHTMLgoodies_roundedCorners.prototype = {
	addTarget : function (l, h, d, b, k, g, a, c) {
		var f = this.roundedCornerTargets.length;
		this.roundedCornerTargets[f] = new Array();
		this.roundedCornerTargets[f]["divId"] = l;
		this.roundedCornerTargets[f]["xRadius"] = h;
		this.roundedCornerTargets[f]["yRadius"] = d;
		this.roundedCornerTargets[f]["color"] = b;
		this.roundedCornerTargets[f]["backgroundColor"] = k;
		this.roundedCornerTargets[f]["padding"] = g;
		this.roundedCornerTargets[f]["heightOfContent"] = a;
		this.roundedCornerTargets[f]["whichCorners"] = c
	},
	init : function () {
		for (var w = 0; w < this.roundedCornerTargets.length; w++) {
			whichCorners = this.roundedCornerTargets[w]["whichCorners"];
			divId = this.roundedCornerTargets[w]["divId"];
			xRadius = this.roundedCornerTargets[w]["xRadius"];
			yRadius = this.roundedCornerTargets[w]["yRadius"];
			color = this.roundedCornerTargets[w]["color"];
			backgroundColor = this.roundedCornerTargets[w]["backgroundColor"];
			padding = this.roundedCornerTargets[w]["padding"];
			heightOfContent = this.roundedCornerTargets[w]["heightOfContent"];
			whichCorners = this.roundedCornerTargets[w]["whichCorners"];
			var C = new Array();
			if (!whichCorners || whichCorners == "all") {
				C.top_left = true;
				C.top_right = true;
				C.bottom_left = true;
				C.bottom_right = true
			} else {
				C = whichCorners.split(/,/gi);
				for (var f in C) {
					C[C[f]] = true
				}
			}
			var D = xRadius / yRadius;
			var n = document.getElementById(divId);
			n.style.backgroundColor = null;
			n.style.backgroundColor = "transparent";
			var u = n.innerHTML;
			n.innerHTML = "";
			if (C.top_left || C.top_right) {
				var z = document.createElement("DIV");
				z.style.height = yRadius + "px";
				z.style.overflow = "hidden";
				n.appendChild(z);
				var h = 0;
				var q = 0;
				for (no = 1; no <= yRadius; no++) {
					var d = (xRadius - (this.getY((yRadius - no), yRadius, D)));
					var B = (xRadius - (this.getY_withDecimals((yRadius - no), yRadius, D)));
					var m = xRadius - B;
					var s = xRadius - d - Math.floor(q);
					var g = xRadius - (d + s);
					var c = document.createElement("DIV");
					c.style.overflow = "hidden";
					c.style.height = "1px";
					if (C.top_left) {
						c.style.marginLeft = d + "px"
					}
					if (C.top_right) {
						c.style.marginRight = d + "px"
					}
					z.appendChild(c);
					var l = z;
					for (var p = 1; p <= s; p++) {
						switch (p) {
						case 1:
							if (p == s) {
								blendMode = ((m + q) / 2) - g
							} else {
								var b = this.getY_withDecimals((xRadius - d - p), xRadius, 1 / D);
								blendMode = (m - g - s + 1) * (b - (yRadius - no)) / 2
							}
							break;
						case s:
							var b = this.getY_withDecimals((xRadius - d - p + 1), xRadius, 1 / D);
							blendMode = 1 - (1 - (b - (yRadius - no))) * (1 - (q - g)) / 2;
							break;
						default:
							var k = this.getY_withDecimals((xRadius - d - p), xRadius, 1 / D);
							var b = this.getY_withDecimals((xRadius - d - p + 1), xRadius, 1 / D);
							blendMode = ((b + k) / 2) - (yRadius - no)
						}
						c.style.backgroundColor = this.__blendColors(backgroundColor, color, blendMode);
						l.appendChild(c);
						l = c;
						var c = document.createElement("DIV");
						c.style.height = "1px";
						c.style.overflow = "hidden";
						if (C.top_left) {
							c.style.marginLeft = "1px"
						}
						if (C.top_right) {
							c.style.marginRight = "1px"
						}
						c.style.backgroundColor = color
					}
					l.appendChild(c);
					q = m
				}
			}
			var r = document.createElement("DIV");
			r.className = n.className;
			r.style.border = "1px solid " + color;
			r.innerHTML = u;
			r.style.backgroundColor = color;
			r.style.paddingLeft = padding + "px";
			r.style.paddingRight = padding + "px";
			if (!heightOfContent) {
				heightOfContent = ""
			}
			heightOfContent = heightOfContent + "";
			if (heightOfContent.length > 0 && heightOfContent.indexOf("%") == -1) {
				heightOfContent = heightOfContent + "px"
			}
			if (heightOfContent.length > 0) {
				r.style.height = heightOfContent
			}
			n.appendChild(r);
			if (C.bottom_left || C.bottom_right) {
				var t = document.createElement("DIV");
				t.style.height = yRadius + "px";
				t.style.overflow = "hidden";
				n.appendChild(t);
				var h = 0;
				var q = 0;
				var E = false;
				var v = new Array();
				for (no = 1; no <= yRadius; no++) {
					var d = (xRadius - (this.getY((yRadius - no), yRadius, D)));
					var B = (xRadius - (this.getY_withDecimals((yRadius - no), yRadius, D)));
					var m = (xRadius - B);
					var s = xRadius - d - Math.floor(q);
					var g = xRadius - (d + s);
					var c = document.createElement("DIV");
					c.style.overflow = "hidden";
					c.style.height = "1px";
					if (C.bottom_left) {
						c.style.marginLeft = d + "px"
					}
					if (C.bottom_right) {
						c.style.marginRight = d + "px"
					}
					t.insertBefore(c, t.firstChild);
					var l = t;
					for (var p = 1; p <= s; p++) {
						switch (p) {
						case 1:
							if (p == s) {
								blendMode = ((m + q) / 2) - g
							} else {
								var b = this.getY_withDecimals((xRadius - d - p), xRadius, 1 / D);
								blendMode = (m - g - s + 1) * (b - (yRadius - no)) / 2
							}
							break;
						case s:
							var b = this.getY_withDecimals((xRadius - d - p + 1), xRadius, 1 / D);
							blendMode = 1 - (1 - (b - (yRadius - no))) * (1 - (q - g)) / 2;
							break;
						default:
							var k = this.getY_withDecimals((xRadius - d - p), xRadius, 1 / D);
							var b = this.getY_withDecimals((xRadius - d - p + 1), xRadius, 1 / D);
							blendMode = ((b + k) / 2) - (yRadius - no)
						}
						c.style.backgroundColor = this.__blendColors(backgroundColor, color, blendMode);
						if (l == t) {
							v[v.length] = c
						}
						try {
							var a = l.getElementsByTagName("DIV")[0];
							l.insertBefore(c, l.firstChild)
						} catch (A) {
							l.appendChild(c);
							E = true
						}
						l = c;
						var c = document.createElement("DIV");
						c.style.height = "1px";
						c.style.overflow = "hidden";
						if (C.bottom_left) {
							c.style.marginLeft = "1px"
						}
						if (C.bottom_right) {
							c.style.marginRight = "1px"
						}
					}
					if (E) {
						for (var x = v.length - 1; x >= 0; x--) {
							t.appendChild(v[x])
						}
					}
					c.style.backgroundColor = color;
					l.appendChild(c);
					q = m
				}
			}
		}
	},
	getY : function (a, c, b) {
		return Math.max(0, Math.ceil(b * Math.sqrt((c * c) - (a * a))))
	},
	getY_withDecimals : function (a, c, b) {
		return Math.max(0, b * Math.sqrt((c * c) - (a * a)))
	},
	__blendColors : function (g, d, c) {
		if (g.length == "4") {
			g = "#" + g.substring(1, 1) + g.substring(1, 1) + g.substring(2, 1) + g.substring(2, 1) + g.substring(3, 1) + g.substring(3, 1)
		}
		if (d.length == "4") {
			d = "#" + d.substring(1, 1) + d.substring(1, 1) + d.substring(2, 1) + d.substring(2, 1) + d.substring(3, 1) + d.substring(3, 1)
		}
		var b = [parseInt("0x" + g.substring(1, 3)), parseInt("0x" + g.substring(3, 5)), parseInt("0x" + g.substring(5, 7))];
		var k = [parseInt("0x" + d.substring(1, 3)), parseInt("0x" + d.substring(3, 5)), parseInt("0x" + d.substring(5, 7))];
		var h = Math.round(b[0] + (k[0] - b[0]) * c).toString(16);
		var f = Math.round(b[1] + (k[1] - b[1]) * c).toString(16);
		var a = Math.round(b[2] + (k[2] - b[2]) * c).toString(16);
		if (h.length == 1) {
			h = "0" + h
		}
		if (f.length == 1) {
			f = "0" + f
		}
		if (a.length == 1) {
			a = "0" + a
		}
		return "#" + h + f + a
	}
};
var SwordTree = SwordBigTree = new Class({
		Implements : [Events, Options],
		$family : {
			name : "SwordBigTree"
		},
		container : null,
		builder : null,
		options : {
			pNode : null,
			treeContainerName : "",
			tid : "",
			ctrl : "",
			ltid : "",
			lctrl : "",
			qtid : "",
			qctrl : "",
			qlength : 0,
			isInitLoadData : "true",
			dataStr : "",
			postData : null,
			title : null,
			treeType : "0",
			select : "false",
			height : "",
			width : "",
			rootNode : null,
			lazyLayer : 1,
			startLayer : 1,
			extendLayer : 1,
			cascadeSign : {
				id : "code",
				pid : "pcode"
			},
			dataType : "json",
			stylePath : "",
			displayTag : "caption",
			isHighlight : "true",
			autoShrink : "false",
			inputWidth : null,
			selectRealKey : "code",
			sbmitcontent : "{code}",
			popdisplay : null,
			selReadOnly : "false",
			disable : "false",
			lazySelect : "true",
			initDataFlag : "true",
			rule : "",
			validate : null,
			isDrag : "false",
			isDragChildrenNode : "true",
			isDragCut : "true",
			isShow : "true",
			existRules : "",
			selectrule : "all",
			dragContainer : "",
			snap : 3,
			asyncTime : 10,
			noDragRule : null,
			isCascadeCheckedClick : "true",
			autoExtendCaption : "false",
			batchSize : 200,
			isAutoExtendByCheckPath : "false",
			filterSign : null,
			isHalfCheck : "false",
			checkSign : "ischecked",
			noCheckSign : "nochecked",
			isHideBtn : "false",
			onInitParam : $empty,
			onInitData : $empty,
			onLoadDataFinish : $empty,
			onAfterLoadData : $empty,
			onCreateNode : $empty,
			onDragBefore : $empty,
			onAfterCreateChildNodes : $empty,
			onLazyNodesAppend : $empty,
			onNodeClick : $empty,
			onNodeClickBefore : $empty,
			onRightClick : $empty,
			onDblNodeClick : $empty,
			onIconClick : $empty,
			onIconDblClick : $empty,
			onCheckedBefore : $empty,
			onCheckedAfter : $empty,
			onExpand : $empty,
			onDragComplete : $empty,
			onDragSuccess : $empty,
			onDragMove : $empty,
			onSelectChange : $empty,
			onClickBefore : $empty,
			onSelectShow : $empty,
			onSelectBtnOk : $empty,
			onSelectBtnCancel : $empty,
			onSelectHide : $empty,
			onNodeContextMenu : $empty,
			onLtidBefore : $empty,
			onQtidBefore : $empty
		},
		initialize : function () {
			if (arguments.length == 2) {
				var a = Array.link(arguments, {
						options : Object.type,
						element : $defined
					});
				this.container = $(a.element);
				this.setOptions(a.options);
				if ($type(this.options.cascadeSign) == "string") {
					this.options.cascadeSign = JSON.decode(this.options.cascadeSign)
				}
				this.options.treeContainerName = this.container.get("name")
			}
		},
		item : null,
		initParam : function (c, f) {
			this.item = c;
			if (Browser.Engine.trident4 === true) {
				this.options.asyncTime = 10;
				this.options.batchSize = 50
			}
			if (this.options.batchSize / 1 <= 1) {
				this.options.batchSize = 2
			}
			this.htmlOptions(c);
			this.fireEvent("onInitParam");
			if (c.get("selReadOnly") == "true") {
				c.set("disabled", true)
			}
			this.options.treeContainerName = c.get("name");
			if ($chk(this.options.nodeEvents) && $type(this.options.nodeEvents) == "string") {
				this.options.nodeEvents = JSON.decode(this.options.nodeEvents)
			}
			if ($type(this.options.cascadeSign) == "string") {
				this.options.cascadeSign = JSON.decode(this.options.cascadeSign)
			}
			if (c.get("cascadeSign") && !c.get("selectRealKey")) {
				this.options.selectRealKey = this.options.cascadeSign.id
			}
			this.draw = new SwordBigTree.Draw(this.options, this);
			if (this.options.filterSign == null) {
				this.options.filterSign = this.options.displayTag
			}
			if ($chk(this.options.popdisplay)) {
				var d = /\\?\{([^{}]+)\}/gi;
				var a = this.options.popdisplay.match(d);
				if (a && a.length > 0) {
					var h = "";
					for (var b = 0; b < a.length; b++) {
						var g = a[b].substring(1, a[b].length - 1).toLowerCase();
						if (g == "code") {
							g = this.options.cascadeSign.id
						} else {
							if (g == "caption") {
								g = this.options.displayTag
							}
						}
						h += g;
						if (b + 1 < a.length) {
							h += ","
						}
					}
					this.options.filterSign = h
				}
			}
			this.container = this.options.pNode;
			if (($chk(this.options.tid) || $chk(this.options.ctrl)) || ((!$chk(this.options.tid) && !$chk(this.options.ctrl)) && $chk(this.options.dataStr))) {
				this.options.dataStr = JSON.decode(this.options.dataStr);
				this.build({}, f);
				if (this.select) {
					sword_convertHTML(this.select.selBox, c);
					if (c.get("disable") == "false") {
						this.select.selBox.erase("disabled")
					}
				}
			}
		},
		initData : function (d, c) {
			this.fireEvent("onInitData");
			if (this.inGrid == true && this.initDataFlag == true) {
				return
			}
			if (!$chk(this.options.tid) && !$chk(this.options.ctrl)) {
				var a = this.options.treeContainerName;
				var b = d;
				if (b) {
					if (b.dataType) {}

					this.options.dataStr = b
				} else {
					b = pc.getInitData(a);
					if (b) {
						this.options.dataStr = b
					}
				}
				this.build({}, c);
				this.initDataFlag = true
			}
		},
		build : function (b, c) {
			$extend(this.options, b);
			if (!this.draw) {
				this.draw = new SwordBigTree.Draw(this.options, this)
			}
			if (this.options.isInitLoadData == "true") {
				this.container.set("name", this.options.treeContainerName);
				if (this.options.select == "true") {
					if (!this.select) {
						var a = new SwordBigTree.Select(this.options, this, c);
						this.select = a;
						this.select.build(this.container, c)
					} else {
						this.select.isBuild = false;
						this.select.buildTree(this.container)
					}
					Sword.utils.setWidth(this.options.inputWidth, ((c) ? c.userSize : null), this.select.divTable, this.select.selBox, true)
				} else {
					this.builder = new SwordBigTree.Builder(this.container, this.options, this.$events);
					this.builder.build(this)
				}
			}
		},
		getSelectedNode : function () {
			if (!this.draw) {
				return null
			}
			return this.draw.getSelectedNode()
		},
		unSelectNode : function () {
			this.draw.unSelectNode()
		},
		getAllChecked : function (d, b, a, c) {
			if (this.builder && this.draw) {
				return this.draw.getAllChecked(d, b, a, c)
			}
		},
		getAllNode : function (d, b, a, c) {
			return this.draw.getAllNode(d, b, a, c)
		},
		isLeaf : function (b) {
			var a = false;
			if (b) {
				a = b.get("leaftype") == "1"
			}
			return a
		},
		getAllCheckedList : function (a, b) {
			if (this.builder && this.draw) {
				return this.draw.getAllCheckedList(a)
			}
		},
		getAllUnCheckedList : function (a, b) {
			if (this.builder && this.draw) {
				return this.draw.getAllUnCheckedList(a)
			}
		},
		setCheckedList : function (a) {
			this.draw.setCheckedList(a)
		},
		setHalfOrCheckedList : function (b, a) {
			this.draw.setHalfOrCheckedList(b, a || false)
		},
		findTreeNode : function (a) {
			return this.draw.findTreeNode(a)
		},
		filterTreeNodes : function (a) {
			this.draw.filterTreeNodes(a)
		},
		removeTreeFilterHiddenClass : function () {
			if (this.draw) {
				this.draw.removeTreeFilterHiddenClass()
			}
		},
		findNodeByPath : function (a) {
			return null
		},
		isContain : function (a) {
			return this.draw.isContain(a)
		},
		getTreeNode : function (a) {
			return this.draw.getTreeNode(a)
		},
		getTreeNodes : function (a) {
			return this.draw.getTreeNodes(a)
		},
		getLikeTreeNode : function (a) {
			return this.draw.getLikeTreeNode(a)
		},
		getParent : function (a) {
			return this.draw.getParent(a)
		},
		hasChildren : function (a) {
			return this.draw.hasChildren(a)
		},
		close : function () {
			this.draw.close()
		},
		setValidate : function (a) {
			this.validate = a
		},
		getCheckedRadio : function () {
			return this.draw.getCheckedRadio()
		},
		setSelectedNode : function (a) {
			this.select.setSelectedNode(a)
		},
		setSelectValue : function (a) {
			if (this.select) {
				this.select.setValue(a)
			}
		},
		setSelectRealValue : function (a) {
			this.select.setRealValue(a)
		},
		setDisplayTagWithBuild : function (a) {
			this.builder.options.displayTag = a
		},
		getValue : function (a) {
			return this.select ? this.select.getValue(a) : ""
		},
		getCaption : function (a) {
			return this.select.getCaption(a)
		},
		reset : function () {
			return this.select.setValue("")
		},
		clearCheckedStatus : function () {
			if (this.draw) {
				this.draw.clearCheckedStatus()
			}
		},
		reloadSelectData : function (a) {
			this.options.dataStr = a;
			this.select.isBuild = false;
			this.select.selBox.set("value", "");
			this.select.selBox.set("realvalue", "")
		},
		reloadTree : function (b) {
			if ($type(b) == "string") {
				b = JSON.decode(b)
			}
			if (b && b.dataType == "json") {
				this.reloadTreeWithJson(b)
			} else {
				var a = this.options.dataType;
				this.options.dataType = "jsonList";
				this.options.dataStr = b;
				this.build();
				this.options.dataType = a
			}
		},
		reloadTreeWithJson : function (b) {
			var a = this.options.dataType;
			this.options.dataType = "json";
			this.options.dataStr = b;
			this.build();
			this.options.dataType = a
		},
		setNodeChecked : function (a) {
			this.draw.setNodeChecked(a)
		},
		getNodeCheckedStatus : function (a) {
			return this.draw.getNodeCheckedStatus(a)
		},
		addTreeNode : function (b, a) {
			this.draw.addTreeNode(b, a)
		},
		updateTreeNode : function (b, a) {
			return this.draw.updateTreeNode(b, a)
		},
		deleteTreeNode : function (a) {
			this.draw.deleteTreeNode(a)
		},
		getNodeData : function (a) {
			return this.draw.getNodeData(a)
		},
		getRootNode : function () {
			return this.draw.getRootNode()
		},
		getRootData : function () {
			return this.draw.getRootData()
		},
		getChildren : function (a) {
			return this.draw.getChildren(a)
		},
		clear : function () {
			if (this.options.select === "true") {
				if (this.options.treeType == "1") {
					this.clearCheckedStatus()
				}
				this.select.clear()
			}
		},
		getAllData : function () {
			return this.draw.getAllData()
		}
	});
SwordBigTree.Builder = new Class({
		$family : {
			name : "SwordBigTree.Builder"
		},
		Implements : [Options, Events],
		container : $empty,
		draw : null,
		initialize : function (a, b, c) {
			this.container = a;
			this.setOptions(b);
			this.$events = $merge(this.$events, c)
		},
		build : function (a) {
			var c = this.domFactory({
					treeContainerName : this.options.treeContainerName,
					tid : this.options.tid,
					ctrl : this.options.ctrl,
					dataStr : this.options.dataStr,
					type : this.options.dataType,
					postData : this.options.postData
				}, this.$events);
			var b = this.iterator(c, this.options.dataType, this.options.cascadeSign);
			if ($defined(b)) {
				this.draw = a.draw;
				a.draw.$events = $merge(a.draw.$events, this.$events);
				a.draw.build(this.container, b);
				if (this.options.isDrag == "true") {
					a.draw.initDrag = function () {
						var d = this.dragFactory(a.draw, this.options);
						d.$events = $merge(d.$events, this.$events);
						d.startDrag()
					}
					.bind(this)
				}
			}
		},
		domFactory : function (b, a) {
			var c = SwordBigTree.DomFactory.newInstance(b, a);
			return c
		},
		iterator : function (d, a, c) {
			var b = SwordBigTree.Iterator.newInstance(d, a, c);
			return b
		},
		drawFactory : function (c, b) {
			var a = new SwordBigTree.Draw(c, b);
			return a
		},
		dragFactory : function (c, a) {
			var b = new SwordBigTree.Drag(c, a);
			return b
		}
	});
SwordBigTree.DomFactory = new Class({
		$family : {
			name : "SwordBigTree.DomFactory"
		},
		props : null,
		events : null,
		initialize : function (b, a) {
			this.props = b;
			this.events = a
		},
		createDom : $empty
	});
SwordBigTree.DomFactory.newInstance = function (c, b) {
	var a = null;
	if ($defined(c.type) && ("xml".test(c.type.trim(), "i"))) {
		a = new SwordBigTree.XMLDomFactory(c, b)
	} else {
		a = new SwordBigTree.JSONDomFactory(c, b)
	}
	return a.createDom()
};
SwordBigTree.XMLDomFactory = new Class({
		Extends : SwordBigTree.DomFactory,
		createDom : function () {
			var b = null;
			if (Browser.Engine.trident) {
				b = new ActiveXObject("Msxml2.domdocument")
			}
			if ($defined(this.props)) {
				if ($chk(this.props.tid)) {
					if (!Browser.Engine.trident) {
						b = document.implementation.createDocument("", "", null)
					}
					b.async = false;
					if ($chk(document.getElementsByTagName("script")[0]["pageRealPath"])) {
						this.props.tid = document.getElementsByTagName("script")[0]["pageRealPath"] + "\\" + this.props.tid
					}
					if (Browser.Engine.trident) {
						b.load(this.props.tid)
					} else {
						var c = new XMLHttpRequest();
						c.open("GET", this.props.tid, false);
						c.send(null);
						return c.responseXML.documentElement
					}
				} else {
					if ($chk(this.props.dataStr)) {
						if (!Browser.Engine.trident) {
							var a = new DOMParser();
							b.async = false;
							b = a.parseFromString(this.props.dataStr, "text/xml")
						} else {
							b.async = false;
							b.loadXML(this.props.dataStr)
						}
					}
				}
			} else {
				if (!Browser.Engine.trident) {
					b = document.implementation.createDocument("", "", null)
				}
				b.async = false
			}
			return b.documentElement
		}
	});
SwordBigTree.JSONDomFactory = new Class({
		Extends : SwordBigTree.DomFactory,
		createDom : function () {
			var f;
			if ($defined(this.props)) {
				if ($chk(this.props.tid) || $chk(this.props.ctrl)) {
					var d = new Hash();
					d.set("sword", "SwordTree");
					d.set("name", this.props.treeContainerName);
					var b = this.props.postData;
					if ($type(b) == "string") {
						this.props.postData = b = JSON.decode(b)
					}
					$defined(b) ? d.set("data", [b]) : d.set("data", []);
					var a = new Hash();
					a.set("sword", "attr");
					a.set("name", "treeName");
					a.set("value", this.props.treeContainerName);
					var c = pageContainer.getReq({
							tid : this.props.tid,
							ctrl : this.props.ctrl,
							widgets : [d, a]
						});
					pageContainer.postReq({
						req : c,
						async : false,
						onSuccess : function (g) {
							var h = pageContainer.getResData(this.props.treeContainerName, g);
							f = h;
							if (this.events.loadDataFinish && this.events.loadDataFinish[0]) {
								this.events.loadDataFinish[0].run(g)
							}
						}
						.bind(this),
						onError : function (g) {
							f = new Hash()
						}
						.bind(this)
					})
				} else {
					if ($chk(this.props.dataStr) && $type(this.props.dataStr) == "string") {
						f = JSON.decode(this.props.dataStr)
					} else {
						if ($chk(this.props.dataStr) && $type(this.props.dataStr) == "object") {
							f = this.props.dataStr
						}
					}
				}
			} else {
				f = {}

			}
			return f
		}
	});
SwordBigTree.Draw = new Class({
		$family : {
			name : "SwordBigTree.Draw"
		},
		Implements : [Options, Events],
		space : Browser.Engine.trident ? "&shy;" : (Browser.Engine.webkit ? "&#8203" : ""),
		container : null,
		containerID : null,
		targetNode : null,
		current : null,
		depth : -1,
		rootContainer : null,
		iterPathHash : {},
		iterRootKey : "tree#root",
		iterIdSign : "_id",
		leafTypeChildren : "-1",
		leafTypeParent : "0",
		leafTypeLeaf : "1",
		checkPathArray : null,
		isLoadSign : "isLoadSign",
		initDataIterator : null,
		buildIter : null,
		searchDataIterator : null,
		initDom : null,
		isSearchStatus : false,
		options : {
			treeStyle : {
				treeRootNode : "tree-root-node",
				treeContainerX : "tree-container-x",
				treeContainerY : "tree-container-y",
				treeWrapper : "tree-wrapper",
				treeTitle : "tree-title",
				treeNode : "tree-node",
				treeNodeLast : "tree-node-last",
				treeChildren : "tree-children",
				treeNodeLast : "tree-node-last",
				treeNodeWrapper : "tree-node-wrapper",
				treeNodeSelected : "tree-node-selected",
				treeGadGet : "tree-gadjet",
				treeGadGetMinus : "tree-gadjet-minus",
				treeGadGetNone : "tree-gadjet-none",
				treeGadGetPlus : "tree-gadjet-plus",
				treeGadjetLoad : "tree-gadjet-load",
				treeIcon : "tree-icon",
				treeLeafIcon : "tree-close-icon",
				treeOpenIcon : "tree-open-icon",
				treeCloseIcon : "tree-leaf-icon",
				treeName : "tree-name",
				treeFilterHidden : "tree-filter-hidden",
				treeRadio : "tree-radio",
				treeCheckbox : "tree-checkbox",
				treeNodeChecked : "tree-node-checked",
				treeNodeHalfChecked : "tree-node-half-checked",
				treeNodeUnchecked : "tree-node-unchecked",
				treeNodeNocheckedChecked : "tree-node-nochecked-checked",
				treeNodeNocheckedNotChecked : "tree-node-nochecked-notchecked",
				treeHighlighter : "tree-highlighter"
			}
		},
		initialize : function (b, a) {
			this.setOptions(b);
			this.swordTree = a
		},
		initParam : function () {
			this.options.startLayer = this.options.startLayer.toInt();
			this.options.extendLayer = this.options.extendLayer.toInt();
			this.options.lazyLayer = this.options.lazyLayer.toInt();
			this.options.startLayer = this.options.startLayer < 0 ? 0 : this.options.startLayer;
			this.options.extendLayer = this.options.extendLayer < 0 ? 10000 : this.options.extendLayer;
			if (($chk(this.options.ltid) || $chk(this.options.lctrl)) && this.options.lazyLayer == 0) {
				this.options.lazyLayer = 1
			}
			this.options.lazyLayer = this.options.lazyLayer < 0 ? 0 : this.options.lazyLayer;
			if ($defined(this.options.rootNode) && this.options.startLayer == 0) {
				this.options.startLayer = 1
			}
		},
		initEvents : function () {
			this.container.addEvents({
				mousedown : this.mouseDownEvent.bindWithEvent(this),
				mousemove : this.mousemoveEvent.bindWithEvent(this),
				mouseout : this.mouseoutEvent.bindWithEvent(this),
				dblclick : this.dblClickEvent.bindWithEvent(this),
				contextmenu : this.contextMenuEvent.bindWithEvent(this)
			})
		},
		initElementEnum : function () {
			SwordBigTree.Draw.Div = new Element("div");
			SwordBigTree.Draw.WrapperSpan = new Element("span", {
					type : "wrapperSpan"
				});
			SwordBigTree.Draw.GadGetSpan = new Element("span", {
					type : "gadGetSpan"
				});
			SwordBigTree.Draw.CheckSpan = new Element("span", {
					type : "checkSpan"
				});
			SwordBigTree.Draw.Radio = new Element("input", {
					type : "radio",
					id : "radio",
					name : "radio"
				});
			SwordBigTree.Draw.IconSpan = new Element("span", {
					type : "iconSpan"
				});
			SwordBigTree.Draw.DisplaySpan = new Element("span", {
					type : "displaySpan"
				})
		},
		nodeEnum : function (a) {
			switch (a) {
			case "div":
				return SwordBigTree.Draw.Div.clone(false);
			case "wrapperSpan":
				return SwordBigTree.Draw.WrapperSpan.clone(false);
			case "gadGetSpan":
				return SwordBigTree.Draw.GadGetSpan.clone(false);
			case "checkSpan":
				return SwordBigTree.Draw.CheckSpan.clone(false);
			case "radio":
				return SwordBigTree.Draw.Radio.clone(false);
			case "iconSpan":
				return SwordBigTree.Draw.IconSpan.clone(false);
			case "displaySpan":
				return SwordBigTree.Draw.DisplaySpan.clone(false)
			}
		},
		initCheckedTree : function () {
			if (this.options.treeType == "1") {
				var a = this.container.getElements("div[" + this.options.checkSign + "='true'],div[" + this.options.noCheckSign + "='true']");
				if (this.options.selectrule == "leaf") {
					a.each(function (d, b) {
						var f = this.getSpan(d, "checkSpan");
						var c = this.getCheckedState(f);
						this.checkedClick(d, c, true)
					}
						.bind(this))
				} else {
					this.setNodeChecked(a)
				}
			}
		},
		isLazyTree : function () {
			return this.options.lazyLayer > 0 || $chk(this.options.ltid) || $chk(this.options.lctrl)
		},
		build : function (c, h) {
			this.clear();
			if ($defined(this.options.rootNode)) {
				this.appendRootNode(this.options.rootNode, h)
			}
			if (this.isSearchStatus === true) {
				if (!this.initDom) {
					this.initDom = c.innerHTML
				}
			}
			c.innerHTML = "";
			if (this.isSearchStatus != true) {
				this.buildIter = h
			}
			this.initElementEnum();
			if (!this.initDataIterator) {
				this.initDataIterator = h
			}
			this.searchDataIterator = h;
			if ($chk(this.options.stylePath)) {
				this.loadCSS(c, this.options.stylePath)
			}
			this.containerID = c.get("id") || c.get("name");
			var q = this.nodeEnum("div");
			if (this.options.isShow == "false") {
				q.setStyle("display", "none")
			}
			q.addEvent("mousewheel", function (k) {
				k = k || window.event;
				this.scrollTop = this.scrollTop - k.event.wheelDelta;
				return false
			}
				.bind(q));
			q.setProperties({
				depth : this.depth + 1,
				leaftype : "root"
			});
			q.addClass(this.options.treeStyle.treeRootNode);
			c.grab(q);
			this.initParam();
			q.addClass(this.options.treeStyle.treeWrapper);
			var f = q;
			if ($defined(this.options.title)) {
				var d = this.nodeEnum("div");
				d.innerHTML = this.options.title;
				d.addClass(this.options.treeStyle.treeTitle);
				q.grab(d)
			}
			var b = this.nodeEnum("div");
			b.setProperty("leaftype", this.leafTypeChildren);
			f = b;
			this.container = q;
			this.iterPathHash[this.iterRootKey] = h;
			q.set(this.iterIdSign, this.iterRootKey);
			q.set("id", h.getPreId());
			SwordBigTree.Container.containerDraw.set(this.containerID, this);
			this.initEvents();
			if ($chk(this.options.height)) {
				if (this.options.height != "auto") {
					q.setStyle("height", this.options.height);
					q.addClass(this.options.treeStyle.treeContainerY)
				} else {
					q.setStyle("height", c.getParent().getHeight() - 5);
					q.addClass(this.options.treeStyle.treeContainerY)
				}
			} else {
				if (Browser.Engine.trident4) {
					q.setStyle("height", "100px")
				}
			}
			if ($chk(this.options.width)) {
				q.setStyle("width", this.options.width);
				q.addClass(this.options.treeStyle.treeContainerX)
			}
			if (this.options.treeType == "1" && this.options.select === "true") {
				var n = this.swordTree.select.selBox;
				if (n) {
					var m = this.swordTree.select.selBox.get("checkPath");
					if (m && m.length > 0) {
						var p = m.split("|");
						this.checkPathArray = [];
						for (var l = 0; l < p.length; l++) {
							var a = p[l].split(",");
							if (this.options.isCascadeCheckedClick == "false") {
								this.checkPathArray.include(a[a.length - 1])
							} else {
								for (var g = 0; g < a.length; g++) {
									this.checkPathArray.include(a[g])
								}
							}
						}
						this.swordTree.select.selBox.set("checkPath", "")
					}
				}
			}
			this.buildTreeNodes.delay(1, this, [q, this.isSearchStatus])
		},
		appendRootNode : function (b, c) {
			var a = JSON.decode(b);
			a.children = c.getModelData()["data"];
			c.getModelData()["data"] = [];
			c.getModelData()["data"].push(a)
		},
		buildTreeNodes : function (b, s) {
			this.T1 = 0,
			this.T2 = 0,
			this.T3 = 0;
			var c = new Date();
			var m = this.createTmpArray();
			var q = new Date();
			var d = b.getAttribute(this.iterIdSign);
			var l = this.getDataIterator(d);
			var a = new Array();
			a.push(l);
			var r = new Array();
			var g = new Array();
			var n = 0;
			if (this.isSearchStatus === false && this.options.startLayer > 1) {
				for (var h = 1; h <= this.options.startLayer; h++) {
					if (h < this.options.startLayer) {
						for (var f = 0; f < a.length; f++) {
							r.extend(a[f].getChildNodes())
						}
						n++
					} else {
						for (var f = 0; f < a.length; f++) {
							g.extend(a[f].getChildNodes())
						}
					}
					a = r;
					r = []
				}
			} else {
				g = l.getChildNodes()
			}
			var p = new Date();
			this.T1 += (p - q);
			this.createNode({
				container : b,
				tplInfo : m,
				nodes : g,
				depth : 0,
				isSearchStatus : s
			});
			this.preparedDrag()
		},
		initDrag : $empty,
		preparedDrag : function () {
			if (this.options.isDrag == "true") {
				this.initDrag()
			}
		},
		createNode : function (B) {
			B.depth++;
			if (!B.nodeIndex) {
				B.nodeIndex = 0
			}
			var k = {};
			k.leaftype = this.leafTypeChildren;
			k.display = B.display || "block";
			var v = 0,
			r = B.nodes.length;
			if (B.startIndex) {
				v = B.startIndex
			} else {
				B.startIndex = 0
			}
			var m = 0;
			var q = false;
			var d = new Date();
			if (!B.isBatch && B.isAppend !== true) {
				this.preparedTreeNode(B.nodeIndex, B.tplInfo, "childrenEleTpl", k)
			}
			for (; v < r; v++) {
				var w = B.nodes[v];
				B.nodeIndex++;
				var s;
				var y;
				var F;
				var A = {};
				var g = {};
				var z = this.dealCaption(w);
				A.eleClass = this.options.treeStyle.treeNode;
				A.attrs = w.getAttributes();
				A.caption = z;
				A.depth = B.depth;
				g.caption = z;
				g.space = this.space;
				g.treeType = this.options.treeType;
				A.checkSign = this.options.checkSign;
				A.check = "false";
				if (this.options.treeType === "1") {
					if (this.options.isCascadeCheckedClick === "true") {
						if (!this.checkPathArray || this.checkPathArray.length == 0) {
							var u = B.container.getFirst("span[type='wrapperSpan']");
							if (u) {
								var a = u.getFirst("span[type='checkSpan']");
								if (a.hasClass(this.options.treeStyle.treeNodeChecked)) {
									var p = this.getCheckedState(a);
									if (p == 0 || p == 2) {
										A.check = "true";
										w.setAttribute(this.options.checkSign, "true")
									}
								}
							}
						}
					}
					var C = this.options.treeStyle.treeNodeNocheckedChecked;
					var t = (w.getAttribute(this.options.checkSign) == "true");
					if (this.checkPathArray) {
						if (this.checkPathArray.indexOf(w.getAttribute(this.options.cascadeSign.id)) > -1) {
							t = true;
							w.setAttribute(this.options.checkSign, "true");
							A.check = "true"
						}
					}
					var f = (w.getAttribute(this.options.noCheckSign) == "true");
					if (f) {
						if (t) {
							A.check = "true";
							w.setAttribute(this.options.checkSign, "true");
							C = this.options.treeStyle.treeNodeNocheckedChecked
						} else {
							C = this.options.treeStyle.treeNodeNocheckedNotChecked
						}
					} else {
						if (this.isLazyTree()) {
							if (t) {
								A.check = "true";
								w.setAttribute(this.options.checkSign, "true");
								C = this.options.treeStyle.treeNodeChecked
							} else {
								C = this.options.treeStyle.treeNodeUnchecked
							}
						}
					}
					g.checkSpanCls = C
				}
				var h = (v + 1) == r;
				if (h) {
					A.eleClass = A.eleClass + " " + this.options.treeStyle.treeNodeLast
				}
				this.iterPathHash[w.getDataPath()] = w;
				A.id = w.getDataPath();
				var x = true;
				if (this.options.ltid != "" || this.options.lctrl != "") {
					x = true
				} else {
					x = w.hasChildNodes()
				}
				A.leaftype = A.attrs["leaftype"] || (x === true ? this.leafTypeParent : this.leafTypeLeaf);
				if (A.leaftype == this.leafTypeLeaf) {
					g.gadGetSpan = this.options.treeStyle.treeGadGetNone;
					g.iconSpan = this.options.treeStyle.treeLeafIcon
				} else {
					g.gadGetSpan = this.options.treeStyle.treeGadGetPlus;
					g.iconSpan = this.options.treeStyle.treeCloseIcon
				}
				this.preparedTreeNode(B.nodeIndex, B.tplInfo, "eleTpl", A);
				this.preparedTreeNode(B.nodeIndex, B.tplInfo, "wrapperSpanTpl", g);
				this.preparedTreeNodeAfter(B.tplInfo);
				m++;
				if (m == this.options.batchSize / 1) {
					if (!h) {
						B.startIndex = B.startIndex + m;
						q = true;
						break
					}
				}
			}
			if (!B.isBatch && !q && B.isAppend !== true) {
				this.preparedTreeNodeAfter(B.tplInfo)
			}
			var n = new Date();
			this.T2 += (n - d);
			var c = this.nodeEnum("div");
			c.innerHTML = this.genHtml(B.tplInfo);
			var b = c.getChildren();
			B.container.adopt(b);
			if (b && b.length > 0) {
				var E = new Date();
				if (!B.isBatch && B.isAppend !== true) {
					this.triggerEvents(b[0].getChildren())
				} else {
					this.triggerEvents(b)
				}
				var D = new Date();
				this.T3 += (D - E)
			}
			if (q === true) {
				B.tplInfo = this.createTmpArray();
				if (!B.isBatch && B.isAppend !== true) {
					B.container = b[0]
				}
				B.isBatch = q;
				this.createNode.delay(this.options.asyncTime, this, [B])
			} else {
				this.fireEvent("onAfterCreateChildNodes", B.container);
				if (B.callBack && $type(B.callBack) == "function") {
					B.callBack.run({
						item : B.container
					})
				}
			}
		},
		triggerEvents : function (c) {
			var d = (this.$events.createNode != undefined);
			var a = c.length;
			if ((c && a > 0)) {
				var h = c[0].getAttribute("depth") / 1;
				var f = (h < this.options.extendLayer || h < this.options.lazyLayer);
				if (d === true || f === true) {
					var b = 0;
					for (; b < a; b++) {
						if (d === true) {
							this.fireEvent("onCreateNode", c[b])
						}
						if (f === true) {
							var g = (this.options.extendLayer - h) > 0 ? "block" : "none";
							this.extend($(c[b]), g)
						}
					}
				}
			}
		},
		createTmpArray : function () {
			var b = [];
			var a = {};
			var c = [];
			a.eleTpl = SwordBigTree.Template.eleTpl;
			a.childrenEleTpl = SwordBigTree.Template.childrenEleTpl;
			a.wrapperSpanTpl = SwordBigTree.Template.wrapperSpanTpl;
			return {
				tplArray : b,
				tplHtml : c,
				tplData : a
			}
		},
		genHtml : function (a) {
			var b;
			if (Browser.Engine.trident4 == true) {
				b = a.tplHtml.join(" ")
			} else {
				var c = a.tplArray.join(" ");
				b = juicer2(c, a.tplData)
			}
			return b
		},
		preparedTreeNode : function (d, a, b, c) {
			if (Browser.Engine.trident4 === true) {
				a.tplHtml.push(juicer2(SwordBigTree.Template[b], c))
			} else {
				a.tplArray.push("{@include " + b + " , " + b + "Data" + d + "}");
				a.tplData[b + "Data" + d] = c
			}
		},
		preparedTreeNodeAfter : function (a) {
			if (Browser.Engine.trident4 === true) {
				a.tplHtml.push(SwordBigTree.Template.divAfter)
			} else {
				a.tplArray.push(SwordBigTree.Template.divAfter)
			}
		},
		extend : function (l, g, c, d, h) {
			if (this.isLazyExtend(l)) {
				this.lazyExtend(l, c, d, g, h)
			} else {
				if (!g || (g && g == "block")) {
					var a = l.getFirst("span[type='wrapperSpan']").getNext("div[leaftype='" + this.leafTypeChildren + "']");
					if ($defined(a)) {
						var b = l.getFirst("span[type='wrapperSpan']");
						var f = b.getFirst("span[type='iconSpan']");
						var k = b.getFirst("span[type='gadGetSpan']");
						if (k.hasClass(this.options.treeStyle.treeGadGetPlus) || (g && g == "block")) {
							if (this.options.autoShrink == "true") {
								this.close();
								this.findTreeNode(this.getNode(k))
							}
							this.setSpanClass(k, "gadGetSpan", this.options.treeStyle.treeGadGetMinus);
							this.setSpanClass(f, "iconSpan", this.options.treeStyle.treeOpenIcon)
						} else {
							this.setSpanClass(k, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
							this.setSpanClass(f, "iconSpan", this.options.treeStyle.treeCloseIcon)
						}
						if (g) {
							a.setStyle("display", g)
						} else {
							if (!k.hasClass(this.options.treeStyle.treeGadGetPlus)) {
								a.setStyle("display", "block")
							} else {
								a.setStyle("display", "none")
							}
						}
						if ($defined($("div[id='" + SwordBigTree.Container.id + "']"))) {
							new Fx.Scroll($("div[id='" + SwordBigTree.Container.id + "']").getFirst("div"), {
								duration : 50
							}).toElement(l)
						}
					}
				}
			}
		},
		appendTreeNode : function (b, n, w, f, t, l) {
			var h = [];
			var v;
			var m;
			var s;
			if ($defined(w)) {
				m = w
			} else {
				m = this.getSelectedNode();
				if (this.isLazyTree() && m && !m.get(this.isLoadSign)) {
					var k = function (z) {
						var y = this.getTreeNode(z);
						this.setSpanClass(y, "gadGetSpan", this.options.treeStyle.treeGadGetNone);
						this.setSpanClass(y, "iconSpan", this.options.treeStyle.treeCloseIcon)
					}
					.bind(this);
					this.lazyExtend(m, k, b);
					return
				}
			}
			if ($type(b) == "SwordBigTree.Iterator") {
				v = b;
				h.push(v)
			} else {
				if ($type(b) == "array") {
					h = b
				} else {
					v = new SwordBigTree.JSONIterator(b);
					h.push(v)
				}
			}
			var p;
			if ($defined(m)) {
				if ($defined(n)) {
					if (h.length == 0) {
						this.setSpanClass(m, "gadGetSpan", this.options.treeStyle.treeGadGetNone);
						this.setSpanClass(m, "iconSpan", this.options.treeStyle.treeLeafIcon);
						if (f) {
							f.run([v])
						}
						return
					}
				}
				var c = this.beforeAddTreeNode(m);
				var q = this.createTmpArray();
				var x = m.get("depth").toInt();
				if (l === true) {
					var g = m.getChildren("div");
					if (g.length > 0) {
						m = g[0]
					}
				}
				this.createNode({
					container : m,
					tplInfo : q,
					nodes : h,
					depth : x,
					callBack : f,
					display : t,
					isAppend : l,
					isSearchStatus : this.isSearchStatus
				});
				m.setProperty(this.isLoadSign, true);
				var a = c.gadGetSpan;
				if (a && a.hasClass(this.options.treeStyle.treeGadGetPlus)) {
					this.extend(m, t)
				}
				if (this.options.treeType == "1") {
					var u = m.getFirst("span[type='wrapperSpan']");
					if (u) {
						var d = u.getFirst("span[type='checkSpan']");
						if (d.hasClass(this.options.treeStyle.treeNodeChecked)) {
							var r = this.getCheckedState(d);
							this.checkedClick(m, r, false, false)
						}
					}
				}
			}
		},
		isLazyExtend : function (a) {
			var b = a.getAttribute(this.isLoadSign);
			return !b && this.isLazyTree()
		},
		setSpanClass : function (f, b, a) {
			if ($defined(f)) {
				f = $(f);
				var d;
				if (f.get("tag") == "div") {
					d = this.getSpan(f, b)
				} else {
					d = f
				}
				if ($defined(d)) {
					var c = d.getProperty("type");
					if (c == "gadGetSpan") {
						d.setProperty("class", this.options.treeStyle.treeGadGet)
					} else {
						if (c == "iconSpan") {
							d.setProperty("class", this.options.treeStyle.treeIcon)
						}
					}
					d.addClass(a)
				}
			}
		},
		lazyExtend : function (d, g, k, h, b) {
			var a = this.getDataIterator(d.getProperty(this.iterIdSign));
			var f = this.getData(a);
			d.setProperty(this.isLoadSign, true);
			if (f && f.length == 0) {
				d.setProperty("leaftype", this.leafTypeLeaf)
			}
			var c = function (l, r, m, n, q, p) {
				this.appendTreeNode(l.getChildNodes(), r, m, n, p)
			}
			.bind(this);
			if ($defined(b) && b === false) {
				return c.run([a, false, d, g, k, h])
			} else {
				c.delay(1, this, [a, false, d, g, k, h])
			}
		},
		getData : function (c) {
			if (c.hasChildNodes()) {
				return null
			}
			var b = c.getChildDatas();
			if (!b) {
				return null
			}
			if (b.length == 0 && ($chk(this.options.ltid) || $chk(this.options.lctrl))) {
				var f = c.getAttributes();
				this.fireEvent("onLtidBefore", f);
				var g = new Hash();
				g.set("sword", "SwordTree");
				g.set("name", this.options.treeContainerName);
				g.set("loaddata", "widget");
				g.set("data", [f]);
				var a = new Hash();
				a.set("sword", "attr");
				a.set("name", "treeName");
				a.set("value", this.options.treeContainerName);
				var d = pageContainer.getReq({
						tid : this.options.ltid,
						ctrl : this.options.lctrl,
						widgets : [g, a]
					});
				pageContainer.postReq({
					req : d,
					async : false,
					loaddata : "widget",
					onSuccess : function (l) {
						var n = pageContainer.getResData(this.options.treeContainerName, l);
						b = $defined(n) ? n.data : [];
						if ($type(b) == "array" && b.length > 0) {
							var h = b.length;
							for (var k = 0; k < h; k++) {
								var m = b[k];
								if (m[this.options.cascadeSign.id] == c.getAttribute(this.options.cascadeSign.id) && m[this.options.displayTag] == c.getAttribute(this.options.displayTag)) {
									b = m.children;
									break
								}
							}
							c.add(b)
						}
					}
					.bind(this),
					onError : function (h) {}

					.bind(this),
					onFinish : function (h) {
						this.fireEvent("onAfterLoadData", [f, h])
					}
					.bind(this)
				})
			} else {
				this.fireEvent("onAfterLoadData", [f, b])
			}
			return b
		},
		dblClickEvent : function (c) {
			var d = c.target;
			if (d.tagName.test("span", "i")) {
				var b = this.getNode(d);
				var a = d.get("type");
				if (a == "iconSpan") {
					this.fireEvent("onIconDblClick", c.target.getParent("div[leaftype!='" + this.leafTypeChildren + "']"))
				} else {
					if (a == "displaySpan") {
						this.fireEvent("onDblNodeClick", c.target.getParent("div[leaftype!='" + this.leafTypeChildren + "']"))
					}
				}
			}
		},
		contextMenuEvent : function (c) {
			var d = c.target;
			if (d.tagName.test("span", "i")) {
				var b = this.getNode(d);
				var a = d.get("type");
				if (a == "displaySpan") {
					this.fireEvent("onNodeContextMenu", [c.target.getParent("div[leaftype!='" + this.leafTypeChildren + "']"), c])
				}
			}
		},
		mouseDownEvent : function (d) {
			var f = d.target;
			if (f.tagName.test("span", "i")) {
				var c = this.getNode(f);
				var a = f.getAttribute("type");
				if (a == "gadGetSpan") {
					if (c.getAttribute("leaftype") != this.leafTypeLeaf) {
						this.extend(c);
						this.fireEvent("onExpand", d.target.getParent("div[leaftype!='" + this.leafTypeChildren + "']"))
					}
				} else {
					if (a == "iconSpan") {
						if (c.getAttribute("leaftype") != this.leafTypeLeaf) {
							this.extend(c)
						}
						this.fireEvent("onIconClick", d.target.getParent("div[leaftype!='" + this.leafTypeChildren + "']"))
					} else {
						if (a == "displaySpan") {
							if (this.options.autoExtendCaption == "true" && c.getAttribute("leaftype") != this.leafTypeLeaf) {
								this.extend(c)
							}
							this.selectNode(d);
							if (d.event.button == 2) {
								d.preventDefault();
								this.fireEvent("onRightClick", [d.target.getParent("div[leaftype!='" + this.leafTypeChildren + "']"), d]);
								document.oncontextmenu = function () {
									return false
								}
							} else {
								this.fireEvent("onNodeClick", d.target.getParent("div[leaftype!='" + this.leafTypeChildren + "']"))
							}
						} else {
							if (a == "checkSpan") {
								var c = this.getNode(f);
								this.checkNode(c)
							}
						}
					}
				}
			} else {
				if (f.hasClass("tree-radio")) {
					var c = this.getNode(f);
					var b = this.options.onCheckedAfter;
					if ($defined(b)) {
						this.getFunc(b)[0](c);
						f.set("checked", true)
					}
					this.fireEvent("onCheckedAfter", c)
				}
			}
			return true
		},
		checkNode : function (k, b) {
			var h = this.options.onCheckedBefore;
			var c = true;
			if ($defined(h)) {
				var g = this.getFunc(h)[0](k, this);
				if (g == false) {
					c = false
				}
			}
			var d = k.get(this.options.noCheckSign) && k.get(this.options.noCheckSign) == "true";
			if (c && !d) {
				var a = this.getSpan(k, "checkSpan");
				if (a) {
					var f = this.getCheckedState(a);
					this.checkedClick(k, f, b || true)
				}
			}
			this.fireEvent("onCheckedAfter", k)
		},
		selectNode : function () {
			var a;
			if ($type(arguments[0]) == "element") {
				a = arguments[0]
			} else {
				a = arguments[0].target || event
			}
			if ($defined(this.targetNode)) {
				this.targetNode.removeClass(this.options.treeStyle.treeHighlighter)
			}
			$(a).addClass(this.options.treeStyle.treeHighlighter);
			this.targetNode = a;
			this.current = this.getNode(a)
		},
		unSelectNode : function () {
			if ($defined(this.targetNode)) {
				this.targetNode.removeClass(this.options.treeStyle.treeHighlighter)
			}
			this.targetNode = null;
			this.current = null
		},
		getSelectedNode : function () {
			return this.current
		},
		mousemoveEvent : function (a) {
			var b = a.target;
			SwordBigTree.Container.id = this.containerID;
			SwordBigTree.Container.mouseNode = b;
			SwordBigTree.Container.containerDraw.include(this.containerID, this);
			if (this.options.isHighlight == "true") {
				if (b.tagName.test("span", "i") && $(b).get("type") == "displaySpan") {
					SwordBigTree.Container.mouseNode.addClass("treenode_hover")
				}
			}
		},
		mouseoutEvent : function (a) {
			if (this.options.isHighlight == "true") {
				if ($defined(SwordBigTree.Container.mouseNode)) {
					$(SwordBigTree.Container.mouseNode).removeClass("treenode_hover")
				}
			}
			SwordBigTree.Container.id = null;
			SwordBigTree.Container.mouseNode = null;
			SwordBigTree.Container.containerDraw.empty()
		},
		getNode : function (b) {
			var a;
			if ($defined(b)) {
				var d = $(b).getParent("span[type='wrapperSpan']");
				if ($defined(d)) {
					var c = d.getParent("div[leaftype!='" + this.leafTypeChildren + "']");
					if ($defined(c)) {
						a = c
					} else {
						a = d
					}
				} else {
					a = b
				}
			}
			return a
		},
		getCheckedState : function (b) {
			var a;
			if (b.hasClass(this.options.treeStyle.treeNodeChecked)) {
				a = 0
			} else {
				if (b.hasClass(this.options.treeStyle.treeNodeUnchecked)) {
					a = 1
				} else {
					if (b.hasClass(this.options.treeStyle.treeNodeHalfChecked)) {
						a = 2
					}
				}
			}
			return a
		},
		halfCheck : function () {
			return this.options.isHalfCheck == "true"
		},
		checkedClick : function (q, b, l, a) {
			if (this.options.isCascadeCheckedClick == "false") {
				q.setProperty(this.options.checkSign, b == 1 ? "true" : (b == 2 ? "true" : "false"));
				var g = q.getElements("span[type='checkSpan']")[0];
				if (!this.halfCheck()) {
					this.changeCheckedState2(g, b, a)
				}
			} else {
				if ($defined(q)) {
					var p = q.getParent("div[leaftype='" + this.leafTypeParent + "']");
					if (l === true) {
						var d = q.getElements("span[type='checkSpan']");
						d.each(function (v, t) {
							var u;
							if (b == 0) {
								u = 0
							} else {
								if (b == 1) {
									if (this.halfCheck()) {
										u = 3
									} else {
										u = 2
									}
								} else {
									if (b == 2) {
										if (this.halfCheck()) {
											u = 4
										} else {
											u = 5;
											b = 0
										}
									}
								}
							}
							this.changeCheckedState(v, u, l)
						}
							.bind(this));
						var c = q.getElements("div[leaftype!='" + this.leafTypeChildren + "']").include(q);
						c.each(function (u, t) {
							u.setProperty(this.options.checkSign, b == 1 ? "true" : (b == 2 ? "true" : "false"))
						}
							.bind(this))
					}
					if ($defined(p)) {
						var h = false;
						var s = p.getFirst("div[leaftype='" + this.leafTypeChildren + "']").getChildren("div[leaftype!='" + this.leafTypeChildren + "'][" + this.options.noCheckSign + "!='true']") || [];
						var r = s.filter(function (t) {
								return t.get(this.options.checkSign) == "true"
							}
								.bind(this));
						var n = r.filter(function (t) {
								return t.get(this.options.checkSign) == "true" && this.getSpan(t, "checkSpan").hasClass(this.options.treeStyle.treeNodeHalfChecked)
							}
								.bind(this));
						if (!((b == 1 || b == 2) && n.length > 0 && s.length == r.length) || (b == 1 && s.length == r.length)) {
							var k = s.length;
							var m = r.length;
							var f = this.getSpan(p, "checkSpan");
							if (b == 0 && m > 0) {
								this.changeCheckedState(f, 1, false)
							} else {
								if (b == 0 && m == 0) {
									p.setProperty(this.options.checkSign, "false");
									this.changeCheckedState(f, 5, false)
								} else {
									if (b == 1 && m >= 0 && m < k) {
										p.setProperty(this.options.checkSign, "true");
										this.changeCheckedState(f, 3, false)
									} else {
										if (b == 1 && m == k) {
											p.setProperty(this.options.checkSign, "true");
											this.changeCheckedState(f, 4, false)
										} else {
											if (b == 2 && m == k) {
												this.changeCheckedState(f, 4, false)
											}
										}
									}
								}
							}
							this.checkedClick(p, b, false)
						}
					}
				}
			}
		},
		changeCheckedState2 : function (f, a, b) {
			var d = false;
			if (!$defined(b)) {
				if (a == 0) {
					f.removeClass(this.options.treeStyle.treeNodeChecked);
					f.removeClass(this.options.treeStyle.treeNodeHalfChecked);
					f.addClass(this.options.treeStyle.treeNodeUnchecked)
				} else {
					if (a == 1) {
						f.removeClass(this.options.treeStyle.treeNodeUnchecked);
						f.removeClass(this.options.treeStyle.treeNodeHalfChecked);
						f.addClass(this.options.treeStyle.treeNodeChecked)
					}
				}
				d = (a == 1)
			} else {
				d = (a == 0)
			}
			var c;
			if ($type(f) == "array") {
				c = f
			} else {
				c = [f]
			}
			var g = (this.options.isCascadeCheckedClick === "true");
			c.each(function (h) {
				this.setNodeIteratorCheckByNode(h.getParent().getParent(), d, g, g)
			}
				.bind(this))
		},
		changeCheckedState : function (d, b, a) {
			if (b == 0) {
				d.removeClass(this.options.treeStyle.treeNodeChecked);
				d.removeClass(this.options.treeStyle.treeNodeHalfChecked);
				d.addClass(this.options.treeStyle.treeNodeUnchecked)
			} else {
				if (b == 1) {
					d.removeClass(this.options.treeStyle.treeNodeChecked);
					d.removeClass(this.options.treeStyle.treeNodeUnchecked);
					d.addClass(this.options.treeStyle.treeNodeHalfChecked)
				} else {
					if (b == 2) {
						d.removeClass(this.options.treeStyle.treeNodeUnchecked);
						d.removeClass(this.options.treeStyle.treeNodeHalfChecked);
						d.addClass(this.options.treeStyle.treeNodeChecked)
					} else {
						if (b == 3) {
							d.removeClass(this.options.treeStyle.treeNodeChecked);
							d.removeClass(this.options.treeStyle.treeNodeUnchecked);
							d.addClass(this.options.treeStyle.treeNodeHalfChecked)
						} else {
							if (b == 4) {
								d.removeClass(this.options.treeStyle.treeNodeUnchecked);
								d.removeClass(this.options.treeStyle.treeNodeHalfChecked);
								d.addClass(this.options.treeStyle.treeNodeChecked)
							} else {
								if (b == 5) {
									d.removeClass(this.options.treeStyle.treeNodeChecked);
									d.removeClass(this.options.treeStyle.treeNodeHalfChecked);
									d.addClass(this.options.treeStyle.treeNodeUnchecked)
								}
							}
						}
					}
				}
			}
			if (b != 1) {
				if (this.options.isCascadeCheckedClick === "true") {
					var c;
					if ($type(d) == "array") {
						c = d
					} else {
						c = [d]
					}
					c.each(function (f) {
						this.setNodeIteratorCheckByNode(f.getParent().getParent(), !(b == 0 || b == 5), a)
					}
						.bind(this))
				} else {
					this.setNodeIteratorCheckByNode(d.getParent().getParent(), !(b == 0 || b == 5), false, false)
				}
			}
		},
		setNodeIteratorCheckByNode : function (d, f, a, g) {
			var b = d.getAttribute(this.iterIdSign);
			var c = this.getDataIterator(b);
			this.setNodeIteratorCheckByIterator(c, f, a, g)
		},
		setNodeIteratorCheckByIterator : function (c, d, a, f) {
			if (c) {
				var b = function (g, h) {
					g.setAttribute(this.options.checkSign, h + "")
				}
				.bind(this);
				b.run([c, d]);
				if (a === true) {
					this.recursionChildNodes(c, b, [d])
				}
				if (f === true) {
					this.recursionParentNodes(c, b, [d])
				}
			}
		},
		beforeAddTreeNode : function (d) {
			var c = d.getFirst("div[leaftype='" + this.leafTypeChildren + "']");
			var b = d.getFirst("span[type='wrapperSpan']");
			var f;
			if (b) {
				f = b.getFirst("span[type='gadGetSpan']")
			}
			if ($defined(c)) {
				var a = c.getLast("div[leaftype!='" + this.leafTypeChildren + "']");
				if ($defined(a)) {
					a.removeClass(this.options.treeStyle.treeNodeLast)
				}
			}
			return {
				gadGetSpan : f
			}
		},
		dealCaption : function (c) {
			var b = this.options.popdisplay;
			if (!$defined(b)) {
				b = "{caption}"
			}
			var a = {
				code : c.getAttribute(this.options.cascadeSign.id),
				caption : c.getAttribute(this.options.displayTag)
			};
			return b.substitute(a)
		},
		hiddenAllTreeNodes : function () {
			var a = this.container.getElements("div[leaftype!='" + this.leafTypeChildren + "']") || [];
			a.each(function (c, b) {
				c.addClass(this.options.treeStyle.treeFilterHidden)
			}
				.bind(this))
		},
		filterTreeNodes : function (a) {
			this.hiddenAllTreeNodes();
			a.each(function (f, b) {
				f.removeClass(this.options.treeStyle.treeFilterHidden);
				for (var d = f.get("depth").toInt(); d >= 0; d--) {
					var c = f.getParent("div[leaftype='" + this.leafTypeParent + "']");
					if ($defined(c)) {
						c.removeClass(this.options.treeStyle.treeFilterHidden);
						f = c
					} else {
						break
					}
				}
			}
				.bind(this))
		},
		removeTreeFilterHiddenClass : function () {
			if (this.container != null) {
				var a = this.container.getElements("div[leaftype!='" + this.leafTypeChildren + "']") || [];
				a.each(function (c, b) {
					c.removeClass(this.options.treeStyle.treeFilterHidden)
				}
					.bind(this))
			}
		},
		getSpan : function (f, d) {
			if (f) {
				var g = f.getFirst("span[type='wrapperSpan']");
				var c;
				if ($defined(g)) {
					if ($defined(d)) {
						c = g.getFirst("span[type='" + d + "']");
						return c
					} else {
						var b = g.getFirst("span[type='displaySpan']");
						var k = g.getFirst("span[type='gadGetSpan']");
						var a = g.getFirst("span[type='iconSpan']");
						var h = {
							gadGetSpan : k,
							iconSpan : a,
							displaySpan : b
						};
						return h
					}
				} else {
					return null
				}
			}
		},
		getRoot : function (b) {
			var a = b.getParents("div[leaftype='root']");
			if ($chk(a)) {
				return a[0]
			} else {
				return null
			}
		},
		getChildNode : function (b, f) {
			var a;
			if ($type(f) != "hash") {
				a = new Hash(f)
			} else {
				a = f
			}
			var d = "";
			a.getKeys().each(function (h) {
				d = "[" + h + "='" + a.get(h) + "']"
			});
			var g = b.getElements("div[leaftype!='" + this.leafTypeChildren + "']" + d);
			var c = null;
			if (g.length > 0) {
				c = g[0]
			}
			return c
		},
		loadCSS : function (b, c, a) {
			return new Element("link", $merge({
					rel : "stylesheet",
					media : "screen",
					type : "text/css",
					href : c
				}, a)).inject(b)
		},
		getAllChecked : function (l, a, b, c) {
			var h = "";
			var f = [];
			var k = this.searchDataIterator;
			if (!k) {
				k = this.getDataIterator(this.iterRootKey)
			}
			if (!k) {
				return h
			}
			this.getCheckOrUnCheck(k, f, a, "checked");
			if (!$defined(b)) {
				b = ","
			}
			var g = [];
			var m = [];
			if (l.contains("|")) {
				m = l.split("|")
			}
			var d = m.length;
			f.each(function (n) {
				if (d > 0) {
					m.each(function (p, q) {
						h = h + n.get(p) + "|"
					});
					h = h.substring(0, h.length - 1);
					h = h + b
				} else {
					g.push(n.getAttribute(l));
					h = g.join(b)
				}
			});
			if (d > 0) {
				h = h.substring(0, h.length - b.length)
			}
			return h
		},
		getCheckOrUnCheck : function (c, f, b, a) {
			var d = function (n, p, k, t) {
				var r = n.isRoot;
				if (r && r === true) {
					return
				}
				var g = n.getAttribute(this.options.checkSign);
				var l = n.hasChildNodes();
				var q = false;
				if (k === "0" || k == "1") {
					if ((k == "0" && l === true) || (k == "1" && l === false)) {
						if (t == "checked" && g == "true") {
							q = true
						} else {
							if (t == "unchecked" && (g == undefined || g == "false")) {
								q = true
							}
						}
					}
				} else {
					if (t == "checked" && g == "true") {
						if (k == "2") {
							var m = $(n.getAttribute(this.iterIdSign));
							if (m) {
								var s = m.getFirst("span[type='wrapperSpan']");
								var h = s.getFirst("span[type='checkSpan']");
								if (!h.hasClass(this.options.treeStyle.treeNodeHalfChecked)) {
									q = true
								}
							} else {
								q = true
							}
						} else {
							q = true
						}
					} else {
						if (t == "unchecked" && (g == undefined || g == "false")) {
							q = true
						}
					}
				}
				if (q) {
					p.push(n)
				}
			}
			.bind(this);
			this.recursionChildNodes(c, d, [f, b, a])
		},
		checkOrUnCheckList : function (b, c, a) {
			var d = [];
			var g = [];
			var f = this.searchDataIterator;
			if (!f) {
				f = this.getDataIterator(this.iterRootKey)
			}
			if (!f) {
				return g
			}
			this.getCheckOrUnCheck(f, g, b, a);
			return g
		},
		getAllCheckedList : function (a, b) {
			return this.checkOrUnCheckList(a, b, "checked")
		},
		getAllUnCheckedList : function (a, b) {
			return this.checkOrUnCheckList(a, b, "unchecked")
		},
		isParent : function (f, c) {
			var b = false;
			var d = f.get("depth").toInt() - 1;
			for (var a = d; a > 0; a--) {
				if (c == f.getParent("div[leaftype!='" + this.leafTypeChildren + "'][depth=" + a + "]")) {
					b = true;
					break
				}
			}
			return b
		},
		setCheckedList : function (f) {
			if ($defined(f) && $type(f) == "array" && f.length > 0) {
				var d = f[0];
				if ($type(d) == "element") {
					f.each(function (h) {
						if ($defined(h)) {
							h.setProperty(this.options.checkSign, "true");
							var k = h.getAttribute(this.iterIdSign);
							if (k) {
								var g = this.getDataIterator(k);
								if (g) {
									g.setAttribute(this.options.checkSign, "true")
								}
							}
						}
					}
						.bind(this));
					this.initCheckedTree()
				} else {
					if ($type(d) == "hash") {
						for (var b = 0; b < f.length; b++) {
							var c = this.getNodeData(f[b]);
							if (c) {
								this.setNodeIteratorCheckByIterator(c, true, false, false);
								var a = this.getTreeNodesByHash(f[b]);
								this.setCheckedList(a)
							}
						}
					}
				}
			}
		},
		setHalfOrCheckedList : function (b, a) {
			if ($defined(b) && $type(b) == "array") {
				b.each(function (f) {
					if ($defined(f)) {
						f.setProperty(this.options.checkSign, "true");
						var h = f.getAttribute(this.iterIdSign);
						if (h) {
							var c = this.getDataIterator(h);
							if (c) {
								c.setAttribute(this.options.checkSign, "true")
							}
						}
						var g = this.getSpan(f, "checkSpan");
						var d = this.getCheckedState(g);
						this.checkedClick(f, d, a);
						this.changeCheckedState(g, 2)
					}
				}
					.bind(this))
			}
		},
		close : function () {
			var a = this.container.getElements("div[leaftype!='" + this.leafTypeChildren + "']") || [];
			a.each(function (f, c) {
				var g = f.get("depth");
				if ($chk(g) && g >= this.options.extendLayer) {
					var d = this.getSpan(f, "iconSpan");
					if ($defined(d) && d.hasClass(this.options.treeStyle.treeOpenIcon)) {
						this.setSpanClass(f, "gadGetSpan", this.options.treeStyle.treeGadGetPlus);
						this.setSpanClass(f, "iconSpan", this.options.treeStyle.treeCloseIcon)
					}
					var b = f.getFirst("div[leaftype='" + this.leafTypeChildren + "']");
					if ($defined(b)) {
						b.setStyle("display", "none")
					}
				}
			}
				.bind(this));
			this.unSelectNode()
		},
		getCheckedRadio : function () {
			var a = this.container.getElement("input[type='radio'][name='radio'][checked]");
			var b;
			if (a) {
				b = a.getParent("span").getParent("div")
			}
			return b
		},
		getRootNode : function () {
			var a = this.container.getElement("div[leaftype='" + this.leafTypeChildren + "']");
			if (a) {
				a = this.container.getElement("div[leaftype='" + this.leafTypeChildren + "']").getElement("div[leaftype!='" + this.leafTypeChildren + "']")
			} else {
				a = null
			}
			return a
		},
		clearCheckedStatus : function () {
			if (this.options.treeType == 1 && $chk(this.container)) {
				var c = this.container.getElements("div[ischecked='true']") || [];
				c.set("ischecked", "false");
				var f = this.container.getElements("span." + this.options.treeStyle.treeNodeChecked + "[type='checkSpan']") || [];
				f.removeClass(this.options.treeStyle.treeNodeChecked);
				f.addClass(this.options.treeStyle.treeNodeUnchecked);
				var d = this.container.getElements("span." + this.options.treeStyle.treeNodeHalfChecked + "[type='checkSpan']") || [];
				d.removeClass(this.options.treeStyle.treeNodeHalfChecked);
				d.addClass(this.options.treeStyle.treeNodeUnchecked);
				var b = this.getRootData();
				if (b) {
					var a = function (g) {
						g.setAttribute(this.options.checkSign, "false")
					}
					.bind(this);
					this.recursionChildNodes(b, a)
				}
			}
		},
		setNodeChecked : function (a) {
			if (this.options.treeType == "1" && $defined(a) && $type(a) == "array") {
				a.each(function (b) {
					b.setProperty("ischecked", "true");
					var c = this.getSpan(b, "checkSpan");
					c.removeClass(this.options.treeStyle.treeNodeUnchecked);
					c.removeClass(this.options.treeStyle.treeNodeHalfChecked);
					c.removeClass(this.options.treeStyle.treeNodeChecked);
					c.addClass(this.options.treeStyle.treeNodeChecked);
					this.setNodeIteratorCheckByNode(b, true, false)
				}
					.bind(this))
			}
		},
		getNodeCheckedStatus : function (a) {
			if (this.options.treeType == "1") {
				var b = this.getSpan(a, "checkSpan");
				return this.getCheckedState(b)
			}
		},
		getAllNode : function (c, b, a, f) {
			var k = "div[leaftype!='" + this.leafTypeChildren + "']";
			if ($chk(b)) {
				if (b == 1) {
					k = k + "[leaftype='" + this.leafTypeParent + "']"
				}
				if (b == 0) {
					k = k + "[leaftype='" + this.leafTypeLeaf + "']"
				}
			}
			this.loadAll();
			var h = this.container.getElements(k);
			var g = "";
			if ($chk(c)) {
				if (!$defined(a)) {
					a = ","
				}
				if (!$defined(f)) {
					f = "[@]"
				}
				var d = [];
				if ($type(c) == "array") {
					d.combine(c)
				} else {
					d.include(c)
				}
				h.each(function (n, l) {
					for (var m = 0; m < d.length - 1; m++) {
						g += n.get(d[m]) + a
					}
					g += n.get(d[m]);
					g += f
				}
					.bind(this));
				if (h.length > 0) {
					g = g.substring(0, g.length - f.length)
				}
			} else {
				return h
			}
			return g
		},
		recursionChildNodes : function (g, h, c) {
			var b = [g].extend(c || []);
			var f = h.run(b);
			if (f !== false) {
				var a = g.getChildNodes();
				for (var d = 0; d < a.length; d++) {
					f = this.recursionChildNodes(a[d], h, c)
				}
			}
			return f
		},
		recursionParentNodes : function (f, g, b) {
			var d = f.getParent();
			var c = false;
			if (d != null && d.isRoot != true) {
				var a = [d].extend(b || []);
				c = g.run(a);
				if (c !== false) {
					this.recursionParentNodes(d)
				}
			}
			return c
		},
		getParent : function (b) {
			var a;
			if (b) {
				var c = b.getParent("div[leaftype='" + this.leafTypeChildren + "']");
				if (c) {
					a = c.getParent("div[leaftype!='" + this.leafTypeChildren + "']")
				}
			}
			return a
		},
		findTreeNode : function (l) {
			var a;
			if ($type(l) == "object") {
				l = $H(l)
			}
			if ($type(l) == "hash") {
				a = this.getTreeNode(l)
			} else {
				a = l
			}
			if ($defined(a)) {
				var h = this.getSpan(a);
				var d = h.displaySpan;
				if ($defined(this.targetNode)) {
					this.targetNode.removeClass(this.options.treeStyle.treeHighlighter)
				}
				d.addClass(this.options.treeStyle.treeHighlighter);
				this.targetNode = d;
				this.current = a;
				var k = a.getParent("div[leaftype='" + this.leafTypeParent + "']");
				for (var c = a.get("depth").toInt(); c >= 0; c--) {
					k = a.getParent("div[leaftype='" + this.leafTypeParent + "']");
					if ($defined(k)) {
						var f = this.getSpan(k).gadGetSpan;
						if (f.hasClass(this.options.treeStyle.treeGadGetPlus)) {
							this.extend(k)
						}
						a = k
					} else {
						break
					}
				}
				try {
					var b = new Fx.Scroll(this.container, {
							duration : 0
						}).toElement(this.current)
				} catch (g) {}

			}
			return a
		},
		getRootData : function () {
			return this.getDataIterator(this.iterRootKey)
		},
		loadTreeNodesByIds : function (a, f) {
			var b = [];
			var k = this.getRootData();
			if (k) {
				var d = function (q, p, n, r) {
					if (q.isRoot !== true) {
						var s = q.getAttribute(this.options.cascadeSign.id);
						if (s && p.indexOf(s) > -1) {
							if (r && r.indexOf(s) > -1) {
								q._tmpSearch = true
							}
							n.push(q);
							p.erase(s)
						}
					}
				}
				.bind(this);
				for (var h = 0; h < a.length; h++) {
					var l = [];
					this.recursionChildNodes(k, d, [a[h], l, f]);
					for (var g = 0; g < l.length; g++) {
						var c = l[g].getAttribute(this.iterIdSign);
						var m = document.getElementById(c);
						if (m) {
							if (l[g]["_tmpSearch"]) {
								b.push(m);
								delete l[g]["_tmpSearch"];
								continue
							} else {
								this.extend(m, "block", null, null, false)
							}
						}
						this.recursionChildNodes(l[g], d, [a[h], l, f])
					}
				}
			}
			return b
		},
		isContain : function (d) {
			var a = false;
			var c = this.getRootData();
			if (d && c) {
				var b = function (f, g) {
					if (!a) {
						a = true;
						g.each(function (k, h) {
							if (k != f.getAttribute(h)) {
								a = false;
								return a
							}
						}
							.bind(this))
					}
					return !a
				}
				.bind(this);
				this.recursionChildNodes(c, b, [d])
			}
			return a
		},
		getNodeData : function (f) {
			var b;
			var d = this.getRootData();
			if (f && d) {
				var a = false;
				var c = function (g, h) {
					if (!a) {
						a = true;
						h.each(function (l, k) {
							if (l != g.getAttribute(k)) {
								a = false;
								return a
							}
						}
							.bind(this));
						if (a) {
							b = g
						}
					}
					return !a
				}
				.bind(this);
				this.recursionChildNodes(d, c, [f])
			}
			return b
		},
		hasChildren : function (c) {
			var a = false;
			var b = this.getNodeData(c);
			if (b) {
				a = b.hasChildNodes()
			}
			return a
		},
		getTreeNode : function (c) {
			var b;
			var a = this.getTreeNodes(c, "equals");
			if (a && a.length > 0) {
				b = a[0]
			}
			return b
		},
		getTreeNodesByHash : function (b) {
			var a = "";
			b.getKeys().each(function (d) {
				a = a + "[" + d + "='" + b.get(d) + "']"
			});
			var c = this.container.getElements("div[leaftype!='" + this.leafTypeChildren + "']" + a);
			return c
		},
		getTreeNodes : function (c, b) {
			var a;
			if ($type(c) != "hash") {
				a = new Hash(c)
			} else {
				a = c
			}
			this.loadTreeNodes([a], false, b ? b : "equals");
			return this.getTreeNodesByHash(a)
		},
		getLikeTreeNode : function (f) {
			var c;
			if ($type(f) != "hash") {
				c = new Hash(f)
			} else {
				c = f
			}
			var d = this.loadTreeNodes([c], false, "like");
			var a = [];
			for (var b = 0; b < d.length; b++) {
				var g = $(d[b].getAttribute(this.iterIdSign));
				if (g) {
					a.push(g)
				}
			}
			return a
		},
		getAllChildNodes : function (b) {
			var a = [];
			if (b) {
				var c = function (d, f) {
					if (d.hasChildNodes()) {
						f.extend(d.getChildNodes())
					}
				};
				this.recursionChildNodes(b, c, [a])
			}
			return a
		},
		addTreeNode : function (g, f) {
			var c;
			if (f) {
				c = f
			} else {
				c = this.getSelectedNode()
			}
			if (c) {
				var h = c.getAttribute(this.iterIdSign);
				var d = this.getDataIterator(h);
				if (d) {
					var b = d.hasChildNodes();
					if (b) {
						this.extend(c, "block", null, null, false)
					} else {
						c.setAttribute("leaftype", this.leafTypeParent);
						this.setSpanClass(c, "gadGetSpan", this.options.treeStyle.treeGadGetMinus);
						this.setSpanClass(c, "iconSpan", this.options.treeStyle.treeOpenIcon)
					}
					var a = d.add(g);
					this.appendTreeNode(a, null, c, null, "block", b)
				}
			}
		},
		updateTreeNode : function (d, b) {
			if (!d || !b) {
				return
			}
			var c = this.getNodeData(d);
			if (c) {
				var g = c.getAttribute(this.iterIdSign);
				var a = false;
				var f = $(g);
				if (f) {
					a = true
				}
				c.update(b);
				b.each(function (l, k) {
					if (a) {
						f.setAttribute(k, l);
						if (k == this.options.displayTag) {
							var h = f.getFirst("span[type='wrapperSpan']").getFirst("span[type='displaySpan']");
							if (h) {
								h.set("text", l)
							}
						}
					}
				}
					.bind(this))
			}
		},
		deleteTreeNode : function (d) {
			var t;
			if ($type(d) == "element") {
				var l = d.getAttribute(this.iterIdSign);
				t = this.getDataIterator(l)
			} else {
				t = this.getNodeData(d)
			}
			if (t) {
				var u = this.getAllChildNodes(t);
				delete this.iterPathHash[t.getDataPath()];
				for (var s = 0; s < u.length; s++) {
					var k = u[s].getDataPath();
					delete this.iterPathHash[k]
				}
				t.del();
				var m = t.getAttribute(this.iterIdSign);
				var q = $(m);
				if (q) {
					var a = q.getPrevious("div[leaftype!='" + this.leafTypeChildren + "']");
					var x = q.getNext("div[leaftype!='" + this.leafTypeChildren + "']");
					var v = q.getParent("div[leaftype='" + this.leafTypeParent + "']");
					var f = q.hasClass(this.options.treeStyle.treeNodeLast);
					if (this.current == q) {
						this.current = null;
						this.targetNode = null
					}
					q.destroy();
					if (f) {
						if ($defined(a)) {
							a.addClass(this.options.treeStyle.treeNodeLast)
						} else {
							if (!$defined(x)) {
								if ($defined(v)) {
									var r = v.getFirst("span[type='wrapperSpan']");
									var c = r.getFirst("span[type='gadGetSpan']");
									var b = r.getFirst("span[type='iconSpan']");
									c.removeClass(this.options.treeStyle.treeGadGetMinus);
									c.removeClass(this.options.treeStyle.treeGadGetPlus);
									c.addClass(this.options.treeStyle.treeGadGetNone);
									b.removeClass(this.options.treeStyle.treeLeafIcon);
									b.removeClass(this.options.treeStyle.treeCloseIcon);
									b.removeClass(this.options.treeStyle.treeOpenIcon);
									b.addClass(this.options.treeStyle.treeLeafIcon);
									v.setProperty("leaftype", this.leafTypeLeaf);
									var n = v.getFirst("div");
									n.destroy()
								}
							}
						}
					}
					if (this.options.treeType == "1") {
						if ($defined(v)) {
							var r = v.getFirst("span[type='wrapperSpan']");
							var h = r.getFirst("span[type='checkSpan']");
							if (h.hasClass(this.options.treeStyle.treeNodeHalfChecked)) {
								var f = v.getFirst("div[leaftype='" + this.leafTypeChildren + "']");
								var w = false;
								if ($defined(f)) {
									var g = v.getFirst("div[leaftype='" + this.leafTypeChildren + "']").getChildren("div");
									w = g.some(function (y) {
											return y.get(this.options.checkSign) != "true"
										}, this)
								}
								if (!w) {
									var p = this.getCheckedState(h);
									this.checkedClick(v, p, true)
								}
							}
						}
					}
				}
			}
		},
		getDataIterator : function (a) {
			return this.iterPathHash[a]
		},
		getChildren : function (b) {
			var c = [];
			if (b) {
				var a = b.getChildren("div[leaftype='" + this.leafTypeChildren + "']");
				if (a && a.length > 0) {
					c = a[0].getChildren("div[leaftype!='" + this.leafTypeChildren + "']")
				}
			}
			return c
		},
		loadTreeNodes : function (k, f, n) {
			var c = [];
			if (!k) {
				return c
			}
			var p = this.getRootData();
			if (p) {
				var s = [];
				var g = function (w, u) {
					if (w.isRoot !== true) {
						var v = (n == "equals");
						for (var x = 0; x < k.length; x++) {
							hash = k[x];
							hash.each(function (B, A) {
								var z = w.getAttribute(A);
								if (z) {
									if (n == "like" && z.contains(B)) {
										v = true;
										return false
									} else {
										if (n == "equals" && z != B) {
											v = false
										}
									}
								}
							});
							if (v) {
								var y = w.getParent();
								while (y && y.isRoot !== true) {
									if (u.indexOf(y) < 0) {
										u.unshift(y)
									}
									y = y.getParent()
								}
								w._tmpSearch = true;
								u.include(w)
							}
						}
					}
				}
				.bind(this);
				this.recursionChildNodes(p, g, [s]);
				var r;
				var h;
				var b = (f && f === true ? "block" : "none");
				for (var l = 0; l < s.length; l++) {
					var d = s[l].getAttribute(this.iterIdSign);
					var t = document.getElementById(d);
					if (s[l].getDataDepth() >= 1) {
						var q = s[l].getParent();
						if (q) {
							var m = q.getAttribute(this.iterIdSign);
							var r = document.getElementById(m);
							if (q.hasChildNodes() && r) {
								var a = r.getChildren("div");
								if (a && a.length == 0) {
									this.extend(r, "none", null, null, false)
								}
							}
						}
						t = document.getElementById(d)
					}
					if (s[l]["_tmpSearch"] && t) {
						c.push(t);
						delete s[l]["_tmpSearch"]
					}
				}
			}
			return c
		},
		extendByIteratorWithLevel0 : function (f) {
			var a = [];
			var c = f.getChildNodes();
			while (c && c.length > 0) {
				a.push(c[0]);
				c = c[0].getChildNodes()
			}
			for (var b = 0; b < a.length; b++) {
				var d = a[b];
				var g = $(d.getAttribute(this.iterIdSign));
				if (g) {
					this.extend(g, "block", null, null, false)
				}
			}
		},
		reloadTreeWithSearch : function (b) {
			this.isSearchStatus = true;
			var g = this.getRootData();
			if (g) {
				var d = {};
				var a = [];
				var f = function (q) {
					if (q.isRoot !== true) {
						var s = false;
						for (var t = 0; t < b.length; t++) {
							hash = b[t];
							hash.each(function (y, x) {
								var w = q.getAttribute(x);
								if (w) {
									if (w.contains(y)) {
										s = true;
										return false
									}
								}
							});
							if (s) {
								if (d[q.getDataPath()]) {
									return true
								}
								var v = q.getParent();
								var u = 0;
								var n = false;
								var p = q.getModelData();
								while (v && v.isRoot !== true) {
									n = true;
									var k = v.getDataPath();
									var m;
									var r = false;
									var h = false;
									if (!d[k]) {
										m = v.getAttributes();
										d[k] = m
									} else {
										m = d[k];
										r = true;
										h = true
									}
									if (!d[q.getDataPath()] || h === false) {
										var l = m.children;
										if (!l) {
											l = [p];
											m.children = l
										} else {
											l.include(p)
										}
										if (!d[q.getDataPath()]) {
											d[q.getDataPath()] = p
										}
									} else {
										break
									}
									q = v;
									v = v.getParent();
									p = m;
									if ((!v || v.isRoot === true) && r === false) {
										a.push(m)
									}
								}
								if (n === false) {
									d[q.getDataPath()] = p;
									a.push(p)
								}
								return this.options.dataType == "json" ? false : true
							}
						}
					}
				}
				.bind(this);
				this.recursionChildNodes(g, f);
				var c = {};
				c.data = a || [];
				this.reloadTreeWithData(c);
				this.isSearchStatus = false;
				delete d
			}
		},
		reloadTreeWithData : function (b) {
			var a = b.data;
			this.swordTree.reloadTreeWithJson(b);
			if (a && a.length > 0) {
				var c = function (d) {
					var f = d.getAttribute(this.iterIdSign);
					if (f.lastIndexOf(this.options.extendLayer - 1 + "-1") > -1 || this.options.extendLayer == 1) {
						this.isSearchStatus = true;
						this.extendByIteratorWithLevel0(this.searchDataIterator);
						this.isSearchStatus = false;
						this.removeEvent("onAfterCreateChildNodes", c)
					}
				}
				.bind(this);
				this.addEvent("onAfterCreateChildNodes", c)
			}
		},
		resetTreeData : function (a) {
			if (!a) {
				a = this.initDataIterator
			}
			if (this.container) {
				this.build(this.container.getParent(), a)
			}
		},
		clear : function () {
			delete this.iterPathHash;
			this.iterPathHash = {}

		},
		loadAll : function () {
			var a = new Hash();
			a.set(this.options.displayTag, "");
			this.loadTreeNodes([a], false, "like")
		},
		getAllData : function () {
			var c = this.getRootData();
			var a = [];
			if (c) {
				var b = function (d) {
					a.push(d)
				}
				.bind(this);
				this.recursionChildNodes(c, b);
				a.shift()
			}
			return a
		}
	});
SwordBigTree.Container = {
	id : null,
	mouseNode : null,
	containerDraw : new Hash()
};
SwordBigTree.Iterator = new Class({
		$family : {
			name : "SwordBigTree.Iterator"
		},
		node : $empty,
		iterator : $empty,
		dataDepth : 0,
		domainData : [],
		isRoot : false,
		preId : null,
		constant : {
			Status : "_status",
			DataPath : "dataPath",
			IterIdSign : "_id",
			IdPreSign : "tree",
			ChildrenSign : "children"
		},
		pIterator : "",
		dataModelKey : null,
		dataPath : null,
		isChildNodes : null,
		childNodes : [],
		dataType : "json",
		initialize : function (b, c, a) {
			if (b) {
				this.init(b)
			}
			if ($defined(c)) {
				this.dataDepth = c
			}
			if ($defined(a)) {
				this.setDataType(a)
			}
		},
		init : function (b) {
			if (b) {
				var a = new Sword.data.SwordDataModel({
						key : b.name,
						reader : new SwordBigTree.TreeDataReader()
					});
				a.setData(b);
				this.setDataModelKey(a.getKey())
			}
		},
		setDataType : function (a) {
			this.dataType = a
		},
		setDataModelKey : function (a) {
			this.dataModelKey = a
		},
		setDataPath : function (a) {
			this.dataPath = a
		},
		getDataPath : function () {
			return this.preId + this.dataPath
		},
		setPreId : function (a) {
			this.preId = a
		},
		getPreId : function () {
			return this.preId
		},
		getDataDepth : function () {
			return this.dataDepth
		},
		hasChildNodes : function () {
			if (this.isChildNodes === null) {
				this.getChildNodes()
			}
			return this.isChildNodes
		},
		getChildDatas : function () {
			return []
		},
		getModelData : function () {
			return this.domainData
		},
		setDomainData : function (a) {
			this.domainData = a
		},
		setRoot : function (a) {
			this.isRoot = a;
			if (a === true) {
				var b = this.constant.IdPreSign + "#" + $random(10000, 99999);
				this.preId = b;
				this.setAttribute(this.constant.IterIdSign, b)
			}
		},
		setParent : function (a) {
			this.pIterator = a
		},
		getParent : function () {
			var a = null;
			if (this.isRoot === false) {
				a = this.pIterator
			}
			return a
		},
		getModelData : function () {
			return this.domainData
		},
		setAttribute : function (a, c) {
			var b = this.getModelData();
			if (b) {
				b[a] = c
			}
		},
		getAttributes : function () {
			var a = {};
			var d = this.getModelData();
			if (d) {
				for (var b in d) {
					var c = d[b];
					switch ($type(c)) {
					case "string":
					case "number":
					case "boolean":
						a[b] = c
					}
				}
			}
			return a
		},
		getAttribute : function (b) {
			var a;
			var c = this.getModelData();
			if (c) {
				a = c[b]
			}
			return a
		},
		get : function (a) {
			return this.getAttribute(a)
		},
		add : function (f) {
			var h = [];
			var m = [];
			if ($type(f) == "hash") {
				m.push(f)
			} else {
				m = f
			}
			if (m && m.length > 0) {
				var n = this.getChildNodes();
				var k = n.length;
				var p = this.getModelData();
				var g = p[this.constant.ChildrenSign];
				if (g && g.length > 0) {
					g.extend(m)
				} else {
					p[this.constant.ChildrenSign] = m
				}
				if (k > 0) {
					var a = n[k - 1]
				}
				var d = 0,
				b = m.length;
				for (; d < b; d++) {
					var c = this.newChildInstance(this.getPreId(), m[d], k + d);
					this.childNodes.push(c);
					h.push(c)
				}
				this.isChildNodes = true
			}
			return h
		},
		update : function (a) {
			if (a) {
				a.each(function (c, b) {
					this.setAttribute(b, c)
				}
					.bind(this))
			}
		},
		del : function () {
			var c = this.getParent();
			if (c) {
				var b = c.getChildNodes();
				var a = b.indexOf(this);
				if (a > -1) {
					if (c.isRoot === true) {
						c.getModelData()["data"].splice(a, 1)
					} else {
						c.getModelData()[this.constant.ChildrenSign].splice(a, 1)
					}
					if (b.length == 1) {
						c.isChildNodes = false
					}
					b.erase(this)
				}
			}
		}
	});
SwordBigTree.Iterator.newInstance = function (g, d, f) {
	var a = null;
	if ($chk(d) && "xml".test(d.trim(), "i")) {
		var b = {};
		var c = {};
		SwordBigTree.Iterator.xmlToJson(g, c);
		b.data = c.children;
		g = b;
		a = new SwordBigTree.JSONIterator(g || {}, 0, "json");
		a.setDomainData(g);
		a.setCascadeSign(f);
		a.setRoot(true)
	} else {
		if ($chk(d) && (("json".test(d.trim(), "i")))) {
			if ($defined(g) && $defined(g.data)) {
				a = new SwordBigTree.JSONIterator(g || {}, 0, d.trim());
				a.setDomainData(g);
				a.setCascadeSign(f);
				a.setRoot(true)
			}
		} else {
			if ($chk(d) && ("jsonAptitude".test(d.trim(), "i") || "jsonList".test(d.trim(), "i"))) {
				var h = [];
				if ($defined(g) && $defined(g.data)) {
					h = g.data;
					a = new SwordBigTree.JSONIterator(h, 0, d.trim());
					a.setRoot(true);
					a.setCascadeSign(f);
					a.setInitDataContainer(h)
				}
			}
		}
	}
	return a
};
SwordBigTree.Iterator.xmlToJson = function (g, f) {
	if (!g) {
		return
	}
	var h = f;
	if (!h) {
		h = {}

	}
	var c = g.attributes;
	for (var d = 0; d < c.length; d++) {
		h[c[d].name] = c[d].value
	}
	var a = g.childNodes.length;
	if (a > 0) {
		h.children = [];
		for (var b = 0; b < g.childNodes.length; b++) {
			if ((/[^\t\n\r ]/.test(g.childNodes[b].data)) && g.childNodes[b].nodeName != "#comment") {
				h.children.push(SwordBigTree.Iterator.xmlToJson(g.childNodes[b]))
			}
		}
	}
	return h
};
SwordBigTree.JSONIterator = new Class({
		Extends : SwordBigTree.Iterator,
		initDataContainer : null,
		cascadeSign : null,
		setInitDataContainer : function (a) {
			this.initDataContainer = a
		},
		setCascadeSign : function (a) {
			this.cascadeSign = a
		},
		getChildNodes : function () {
			if (this.dataType.toLowerCase() == "json") {
				return this.getChildNodes4Json()
			} else {
				return this.getChildNodes4JsonList()
			}
		},
		getChildNodes4Json : function () {
			if (this.isChildNodes === null) {
				this.isChildNodes = false;
				var f = this.getModelData();
				if (f) {
					for (var b in f) {
						var d = f[b];
						if ($type(d) == "array") {
							for (var a = 0; a < d.length; a++) {
								var c = this.newChildInstance(this.getPreId(), d[a], a);
								this.childNodes.push(c)
							}
							this.isChildNodes = true
						}
					}
				}
			}
			return this.childNodes
		},
		getChildNodes4JsonList : function () {
			if (this.isChildNodes === null) {
				this.isChildNodes = false;
				var b = this.cascadeSign.pid;
				var d = this.cascadeSign.id;
				var r = b.toUpperCase();
				var f = d.toUpperCase();
				if (this.isRoot === true) {
					if ($defined(this.initDataContainer) && this.initDataContainer.length > 0) {
						var g = this.initDataContainer.length;
						for (var n = 0; n < g; n++) {
							var q = true;
							for (var h = 0; h < this.initDataContainer.length; h++) {
								if ((this.initDataContainer[n][b] || this.initDataContainer[n][r]) == (this.initDataContainer[h][d] || this.initDataContainer[h][f])) {
									q = false;
									break
								}
							}
							if (q) {
								var m = this.newChildInstance(this.getPreId(), this.initDataContainer[n], n);
								var l = {};
								$extend(l, this.initDataContainer[n]);
								m.setInitDataContainer(this.initDataContainer);
								this.childNodes.push(m);
								var c = this.getModelData()[this.constant.ChildrenSign];
								if (!c) {
									c = [];
									this.getModelData()[this.constant.ChildrenSign] = c
								}
								c.push(this.initDataContainer[n]);
								this.isChildNodes = true
							}
						}
					}
				} else {
					if ($defined(this.initDataContainer) && this.initDataContainer.length > 0) {
						for (var n = 0; n < this.initDataContainer.length; n++) {
							var a = (this.initDataContainer[n][b] || this.initDataContainer[n][r]);
							var p = (this.initDataContainer[n][d] || this.initDataContainer[n][f]);
							var s = (this.getModelData()[d] || this.getModelData()[f]);
							if (a == s && p != s) {
								var l = {};
								$extend(l, this.initDataContainer[n]);
								var m = this.newChildInstance(this.getPreId(), l, n);
								m.setInitDataContainer(this.initDataContainer);
								var c = this.getModelData()[this.constant.ChildrenSign];
								if (!c) {
									c = [];
									this.getModelData()[this.constant.ChildrenSign] = c
								}
								c.push(l);
								this.childNodes.push(m);
								this.isChildNodes = true
							}
						}
					}
				}
			}
			return this.childNodes
		},
		newChildInstance : function (b, d, a) {
			var c = new SwordBigTree.JSONIterator(null, this.dataDepth + 1);
			c.setDataModelKey(this.dataModelKey);
			c.setPreId(b);
			c.setDataPath((this.dataPath || "") + "_" + (this.dataDepth + 1) + "-" + (a + 1));
			c.setDomainData(d);
			c.setParent(this);
			c.setAttribute(this.constant.IterIdSign, c.getDataPath());
			c.setCascadeSign(this.cascadeSign);
			c.setDataType(this.dataType);
			return c
		}
	});
SwordBigTree.TreeDataReader = new Class({
		$family : {
			name : "SwordBigTree.TreeDataReader"
		},
		Extends : Sword.data.SwordDataReader,
		read : function (a) {
			return a
		}
	});
SwordBigTree.Drag = new Class({
		$family : {
			name : "SwordBigTree.Drag"
		},
		Implements : [Events, Options],
		Extends : Drag,
		startTarget : null,
		dragContainer : [],
		tpDragNode : true,
		options : {
			startPlace : ["displaySpan"],
			dragStyle : {
				treeGhost : "tree-ghost",
				treeDragCurrent : "tree-drag-current",
				treeGhostIcon : "tree-ghost-icon",
				treeGhostNotAllowed : "tree-ghost-notAllowed",
				treeGhostInside : "tree-ghost-inside"
			}
		},
		selection : (Browser.Engine.trident) ? "selectstart" : "mousedown",
		initialize : function (c, a) {
			c.drag = this;
			this.setOptions(a);
			$extend(this, {
				swordTreeDraw : c,
				snap : this.options.snap
			});
			if ($chk(this.options.dragContainer)) {
				var b = this.options.dragContainer.split(",");
				this.dragContainer.combine(b)
			}
			this.current = SwordBigTree.Drag.current;
			this.document = c.container.getDocument();
			this.bound = {
				start : this.start.bind(this),
				check : this.check.bind(this),
				drag : this.drag.bind(this),
				stop : this.stop.bind(this),
				cancel : this.cancel.bind(this),
				eventStop : $lambda(false),
				keydown : this.keydown.bind(this)
			}
		},
		rDestory : function (a) {
			Element.empty(a);
			Element.dispose(a)
		},
		startDrag : function () {
			this.attach();
			this.addEvent("start", function (c) {
				if (SwordBigTree.Drag.current) {
					document.addEvent("keydown", this.bound.keydown);
					var b = this.swordTreeDraw.getSpan(SwordBigTree.Drag.current, "displaySpan").addClass(this.options.dragStyle.treeDragCurrent);
					var h = true;
					this.fireEvent("onDragBefore", [this, b.getParent("div.tree-node")]);
					if ($chk(this.options.noDragRule)) {
						var g = JSON.decode("[" + this.options.noDragRule + "]");
						var d = this.swordTreeDraw.getNode(b);
						for (var a = 0; a < g.length; a++) {
							var f = g[a];
							if (d.get(f.key) == f.value) {
								h = false;
								break
							}
						}
					}
					if (h) {
						this.addGhost(c)
					} else {
						this.tpDragNode = false;
						c.stopPropagation()
					}
				}
			}, true);
			this.addEvent("complete", function () {
				if (SwordBigTree.Drag.current && this.tpDragNode) {
					document.removeEvent("keydown", this.bound.keydown);
					if ($defined(this.swordTreeDraw.getSpan(SwordBigTree.Drag.current, "displaySpan"))) {
						this.swordTreeDraw.getSpan(SwordBigTree.Drag.current, "displaySpan").removeClass(this.options.dragStyle.treeDragCurrent)
					}
					var a = SwordBigTree.Drag.startZone;
					if (a) {
						if (SwordBigTree.Drag.ghost) {
							this.rDestory(SwordBigTree.Drag.ghost);
							a.beforeDrop()
						}
						if ($defined(SwordBigTree.Container.mouseNode)) {
							this.fireEvent("onDragComplete", this.swordTreeDraw.getNode(SwordBigTree.Container.mouseNode))
						}
					}
				}
			})
		},
		getElement : function () {
			return this.swordTreeDraw.container
		},
		attach : function () {
			var a = this.swordTreeDraw.container.getFirst("div");
			if ($defined(a)) {
				this.swordTreeDraw.container.getFirst("div").addEvent("mousedown", this.bound.start)
			}
			return this
		},
		detach : function () {
			var a = this.swordTreeDraw.container.getFirst("div");
			if ($defined(a)) {
				this.swordTreeDraw.container.getFirst("div").removeEvent("mousedown", this.bound.start)
			}
			return this
		},
		keydown : function (b) {
			if (b.key == "esc") {
				var a = SwordBigTree.Drag.startZone;
				if (a) {
					a.where = "notAllowed"
				}
				this.stop(b)
			}
		},
		start : function (b) {
			if ($defined(SwordBigTree.Drag.ghost)) {
				this.rDestory(SwordBigTree.Drag.ghost)
			}
			var c = b.target;
			if (c.tagName.test("span", "i")) {
				var a = c.getAttribute("type");
				if (a != "gadGetSpan" && a != "iconSpan" && a != "checkSpan") {
					this.swordTreeDraw.selectNode(c)
				}
				if (a == "iconSpan") {
					c = c.getNext("span[type='displaySpan']")
				}
			}
			if (!c) {
				return
			}
			this.mouse = {
				start : b.page
			};
			this.document.addEvents({
				mousemove : this.bound.check,
				mouseup : this.bound.cancel
			});
			this.document.addEvent(this.selection, this.bound.eventStop)
		},
		check : function (a) {
			if (this.options.preventDefault) {
				a.preventDefault()
			}
			var c = Math.round(Math.sqrt(Math.pow(a.page.x - this.mouse.start.x, 2) + Math.pow(a.page.y - this.mouse.start.y, 2)));
			if (c > this.options.snap) {
				this.cancel();
				this.document.addEvents({
					mousemove : this.bound.drag,
					mouseup : this.bound.stop
				});
				var b = a.target;
				if (b.tagName != "SPAN" && !$defined(b.type)) {
					return
				}
				this.current = $splat(this.options.startPlace).contains(b.get("type")) ? this.swordTreeDraw.getSelectedNode() : false;
				this.startTarget = b;
				SwordBigTree.Drag.current = this.current;
				SwordBigTree.Drag.startZone = this;
				this.fireEvent("start", a).fireEvent("snap", this.element)
			}
		},
		drag : function (a) {
			if ($defined(SwordBigTree.Drag.ghost)) {
				SwordBigTree.Drag.ghost.position({
					x : a.page.x + 10,
					y : a.page.y + 10
				});
				var b = SwordBigTree.Drag.startZone;
				if (!b || !b.ondrag) {
					return
				}
				SwordBigTree.Drag.startZone.ondrag(a)
			}
		},
		ondrag : function (b) {
			var c = SwordBigTree.Container.mouseNode;
			if (!$defined(c)) {
				if ($defined(b) && b.target.tagName == "DIV" && (b.target.get("leaftype") == "root" || b.target.get("sword") == "SwordBigTree")) {
					if (b.target.get("leaftype") == "root") {
						c = b.target
					} else {
						if (b.target.get("sword") == "SwordBigTree") {
							c = b.target.getFirst("div[leaftype='root']")
						}
					}
					SwordBigTree.Container.mouseNode = c
				} else {
					this.changeGhostState(1);
					return
				}
			}
			var d = true;
			if (this.dragContainer.length > 0) {
				if (!this.dragContainer.contains(SwordBigTree.Container.id)) {
					d = false
				}
			}
			if (d && $defined(c)) {
				if (c.tagName.test("span", "i") && $defined(this.swordTreeDraw.targetNode)) {
					if (c.get("type") == "displaySpan" && c != this.swordTreeDraw.targetNode) {
						if (this.swordTreeDraw.isParent(this.swordTreeDraw.getNode(c), this.swordTreeDraw.getNode(this.startTarget))) {
							this.changeGhostState(1)
						} else {
							this.changeGhostState(0)
						}
					} else {
						if (c.get("type") == "iconSpan" || c.get("type") == "gadGetSpan") {
							if (c.get("type") == "iconSpan" && c != this.swordTreeDraw.targetNode.getPrevious()) {
								if (this.swordTreeDraw.isParent(this.swordTreeDraw.getNode(c), this.swordTreeDraw.getNode(this.startTarget))) {
									this.changeGhostState(1)
								} else {
									this.changeGhostState(0)
								}
							}
							if (this.tempTarget != c) {
								this.tempTarget = c;
								if (c.hasClass(this.swordTreeDraw.options.treeStyle.treeLeafIcon) || c.hasClass(this.swordTreeDraw.options.treeStyle.treeGadGetPlus)) {
									var a = SwordBigTree.Container.containerDraw.get(SwordBigTree.Container.id);
									if ($defined(a)) {
										a.extend.delay(this.options.openTimer, a, this.swordTreeDraw.getNode(c))
									}
								}
							}
						} else {
							this.changeGhostState(1)
						}
					}
				} else {
					if (c.get("leaftype") == "root") {
						if (c.getFirst("div").getChildren("div").length == 0) {
							this.changeGhostState(0)
						} else {
							this.changeGhostState(1)
						}
					} else {
						this.changeGhostState(1)
					}
				}
			}
			this.fireEvent("drag");
			this.fireEvent("onDragMove", [this, c])
		},
		changeGhostState : function (a) {
			if (a == 0) {
				SwordBigTree.Drag.ghost.removeClass(this.options.dragStyle.treeGhostNotAllowed);
				SwordBigTree.Drag.ghost.addClass(this.options.dragStyle.treeGhostInside)
			} else {
				SwordBigTree.Drag.ghost.removeClass(this.options.dragStyle.treeGhostInside);
				SwordBigTree.Drag.ghost.addClass(this.options.dragStyle.treeGhostNotAllowed)
			}
		},
		addGhost : function (a) {
			var n = new Element("span").addClass(this.options.dragStyle.treeGhost);
			var l = this.swordTreeDraw.getSpan(this.current);
			var h = l.displaySpan;
			var g = l.iconSpan;
			var c = this.current.getAttribute(this.swordTreeDraw.iterIdSign);
			var d = this.swordTreeDraw.getDataIterator(c);
			var f = this.swordTreeDraw.createTmpArray();
			var b = new Element("div");
			this.swordTreeDraw.createNode({
				container : b,
				tplInfo : f,
				nodes : [d],
				depth : 0
			});
			var m = new Element("span").set("html", this.swordTreeDraw.space);
			var k = m.clone(true, true);
			n.grab(m);
			n.grab(b.getElements("span[type='wrapperSpan']")[0]);
			n.getElements("span[type='gadGetSpan']")[0].set("class", "");
			n.getElements("span[type='gadGetSpan']")[0].innerHTML = "";
			n.getFirst("span[type='wrapperSpan']").grab(k, "top");
			n.getFirst("span[type='wrapperSpan']").getFirst("span[type='iconSpan']").className = g.className;
			n.position({
				x : a.page.x + 10,
				y : a.page.y + 10
			});
			n.inject(document.body).addClass(this.options.dragStyle.treeGhostNotAllowed).setStyle("position", "absolute");
			SwordBigTree.Drag.ghost = n
		},
		beforeDrop : function () {
			var l = true;
			if ($defined(SwordBigTree.Container.mouseNode) && $chk(this.options.existRules) && SwordBigTree.Drag.ghost.hasClass(this.options.dragStyle.treeGhostInside) && SwordBigTree.Container.mouseNode.get("leaftype") != "root") {
				var h = this.swordTreeDraw.getRoot(SwordBigTree.Container.mouseNode);
				var m = SwordBigTree.Container.containerDraw.get(SwordBigTree.Container.id);
				if ($defined(m) && this.swordTreeDraw.containerID != SwordBigTree.Container.containerDraw.getValues()[0].containerID && $chk(m.options.existRules)) {
					var n = this.swordTreeDraw.options.existRules.split(",") || [];
					var d = m.options.existRules.split(",") || [];
					var g = new Hash();
					var b = this.swordTreeDraw.getNode(this.startTarget);
					var a = [b];
					a.extend(b.getElements("div[leaftype!='" + this.swordTreeDraw.leafTypeChildren + "']"));
					for (var f = 0; f < a.length; f++) {
						for (var c = 0; c < d.length; c++) {
							if ($defined(n[c])) {
								g.set(d[c], a[f].get(n[c]))
							}
						}
						if ($defined(this.swordTreeDraw.getChildNode(h, g))) {
							alert("节点:[" + a[f].get(this.swordTreeDraw.options.displayTag) + "]已经存在!");
							return
						}
					}
				}
			}
			if (l) {
				this.drop()
			}
		},
		drop : function () {
			if (SwordBigTree.Drag.ghost.hasClass(this.options.dragStyle.treeGhostInside)) {
				this.swordTreeDraw.unSelectNode();
				var a = this.dragTreeNode(this.startTarget, SwordBigTree.Container.mouseNode);
				this.fireEvent("onDragSuccess", [a, this.startTarget, SwordBigTree.Container.mouseNode])
			}
		},
		dragTreeCloneEvents : function (b, c) {
			if (b.getFirst()) {
				var a = b.getFirst().getChildren();
				c.getFirst().getChildren().each(function (h, d) {
					var f = h.retrieve("events");
					if (f) {
						for (var g in f) {
							a[d].cloneEvents(h, g)
						}
					}
				})
			}
		},
		dragTreeNode : function (d, c) {
			var h = this.swordTreeDraw.getNode(d);
			if ($defined(h) && h.tagName == "SPAN") {
				return
			}
			var b = this.options.isDragCut;
			var l = SwordBigTree.Container.containerDraw.get(SwordBigTree.Container.id);
			if (this.options.isDragCut == "undefined") {
				if (window.confirm("是否剪切拖拽节点？")) {
					b = "true"
				}
			}
			var n = h.clone(this.options.isDragChildrenNode != "false", true);
			if (n.getChildren().length == 0) {
				var k = h.getElement("span").clone();
				k.getChildren().each(function (q, p) {
					if (q.hasClass("tree-gadjet-plus")) {
						q.removeClass("tree-gadjet-plus").addClass("tree-gadjet-none")
					}
					if (q.hasClass("tree-gadjet-minus")) {
						q.removeClass("tree-gadjet-minus").addClass("tree-gadjet-none")
					}
					if (q.hasClass("tree-leaf-icon")) {
						q.removeClass("tree-leaf-icon").addClass("tree-close-icon")
					}
					if (q.hasClass("tree-open-icon")) {
						q.removeClass("tree-open-icon").addClass("tree-close-icon")
					}
				});
				k.inject(n)
			}
			n.addClass(this.swordTreeDraw.options.treeStyle.treeNodeLast);
			var g = this.swordTreeDraw.getNode(c);
			this.dragTreeCloneEvents(n, g);
			n.store("data", h.retrieve("data"));
			if (g.get("leaftype") == "root") {
				this.changeDepth(n, 0);
				g.getFirst("div[leaftype='" + this.swordTreeDraw.leafTypeChildren + "']").grab(n);
				if ($defined(n.get(this.options.cascadeSign.pid))) {
					n.setProperty(this.options.cascadeSign.pid, "")
				}
			} else {
				this.changeDepth(n, g);
				var f = this.swordTreeDraw.beforeAddTreeNode(g);
				var a = f.childrenElement;
				if (!a) {
					a = this.swordTreeDraw.nodeEnum("div");
					a.setProperty("leaftype", this.swordTreeDraw.leafTypeChildren);
					a.addClass(this.swordTreeDraw.options.treeStyle.treeChildren);
					g.grab(a)
				}
				if ($defined(n.get(this.options.cascadeSign.id))) {
					n.setProperty(this.options.cascadeSign.pid, g.get(this.options.cascadeSign.id))
				}
				var m = l.getSpan(g, "gadGetSpan");
				if ($defined(l) && m.hasClass(l.options.treeStyle.treeGadGetPlus)) {
					l.extend.delay(this.options.openTimer, l, g)
				}
				a.grab(n)
			}
			if (b == "true") {
				this.swordTreeDraw.deleteTreeNode(h)
			}
			return n
		},
		changeDepth : function (f, d) {
			var a = f.getElements("div[leaftype!='" + this.swordTreeDraw.leafTypeChildren + "']").include(f);
			var b = 0;
			if (d) {
				b = d.get("depth").toInt()
			}
			f.setProperty(this.options.cascadeSign.pid, d.get(this.options.cascadeSign.id));
			var c = f.get("depth").toInt();
			var g = c - (b + 1);
			a.each(function (h) {
				h.setProperty("depth", h.get("depth") - g)
			})
		},
		setIsDragChildrenNode : function (a) {
			this.options.isDragChildrenNode = a + ""
		},
		setNodeDragLayers : function (c, a, f) {
			var d = c.getElement("div.tree-children");
			if (d && a > 0) {
				if (a == 1) {
					c.getElement("span").getChildren().each(function (k, h) {
						if (k.hasClass("tree-gadjet-plus")) {
							k.removeClass("tree-gadjet-plus").addClass("tree-gadjet-none")
						}
						if (k.hasClass("tree-gadjet-minus")) {
							k.removeClass("tree-gadjet-minus").addClass("tree-gadjet-none")
						}
						if (k.hasClass("tree-leaf-icon")) {
							k.removeClass("tree-leaf-icon").addClass("tree-close-icon")
						}
						if (k.hasClass("tree-open-icon")) {
							k.removeClass("tree-open-icon").addClass("tree-close-icon")
						}
					});
					d.destroy()
				} else {
					if (f < a - 1) {
						var g = d.getChildren("div");
						for (var b = g.length - 1; b > 0; b--) {
							f = d.getFirst("div.tree-node").get("depth") / 1;
							this.setNodeDragLayers(g[b], a, f)
						}
					} else {
						d.getChildren("div.tree-node").each(function (k, h) {
							k.getElement("span").getChildren().each(function (m, l) {
								if (m.hasClass("tree-gadjet-plus")) {
									m.removeClass("tree-gadjet-plus").addClass("tree-gadjet-none")
								}
								if (m.hasClass("tree-gadjet-minus")) {
									m.removeClass("tree-gadjet-minus").addClass("tree-gadjet-none")
								}
								if (m.hasClass("tree-leaf-icon")) {
									m.removeClass("tree-leaf-icon").addClass("tree-close-icon")
								}
								if (m.hasClass("tree-open-icon")) {
									m.removeClass("tree-open-icon").addClass("tree-close-icon")
								}
							});
							if (k.getElement("div")) {
								k.getElement("div").destroy()
							}
						})
					}
				}
			}
		}
	});
SwordBigTree.Select = new Class({
		$family : {
			name : "SwordBigTree.Select"
		},
		Implements : [Options, Events],
		isBuild : false,
		leaveSign : null,
		preKey : null,
		isCheckClick : false,
		options : {
			treeStyle : {
				treeSelectWrap : "swordform_field_wrap swordtree_wrap",
				treeSelectSelimg : "tree-select-selimg",
				treeSelectSelimgOver : "tree-select-selimg-over",
				treeSelectSelimgClick : "tree-select-selimg-click",
				treeSelectList : "tree-select-list",
				treeSelectListInner : "tree-select-list-inner",
				treeSelectConsole : "tree-select-console"
			},
			formSubSign : "swordform_item_oprate swordform_item_input"
		},
		initialize : function (b, a, c) {
			this.setOptions(b);
			this.swordTree = a;
			if (!this.swordTree.options.ltid && !this.swordTree.options.lctrl && !this.swordTree.options.qtid && !this.swordTree.options.qctrl && this.swordTree.options.cacheLazy != "true") {
				this.options.lazySelect = "false"
			}
			this.$events = $merge(this.$events, this.swordTree.$events)
		},
		setValidate : function (a) {
			this.validate = a
		},
		build : function (a) {
			var b = this.drawSelDiv(a);
			this.initEvent();
			if (this.options.initDataFlag == "true") {
				this.buildTree()
			}
			return b
		},
		boxtd : null,
		imgtd : null,
		divTable : null,
		drawSelDiv : function (b) {
			var a = b.getElement("table.swordtree_wrap"),
			d = !!a;
			if (d) {
				this.divTable = b.getElement("table.swordtree_wrap")
			} else {
				this.divTable = Sword.utils.createTable(this, true, true).addClass("swordtree_wrap");
				b.grab(this.divTable)
			}
			var h = new Element("div", {
					"class" : this.options.treeStyle.treeSelectListInner
				});
			h.set("id", b.get("id"));
			this.listDiv = new Element("div", {
					"class" : this.options.treeStyle.treeSelectList
				}).inject(document.body);
			this.listDiv.grab(h);
			if (this.options.treeType == "1") {
				var c = new Element("div", {
						"class" : this.options.treeStyle.treeSelectConsole
					});
				this.console = c;
				if (this.swordTree.options.isHideBtn == "true") {
					this.console.setStyle("display", "none")
				}
				var f = new Element("div", {
						"class" : "sGrid_console_target_ok",
						html : "确定"
					});
				this.btnOk = f;
				var g = new Element("div", {
						"class" : "sGrid_console_target_ok",
						html : "关闭"
					});
				this.btnCancel = g;
				if (!(Browser.Engine.trident6 || Browser.Engine.trident7)) {
					this.btnOk.addClass("sGrid_console_target_ok_IE6_7");
					this.btnCancel.addClass("sGrid_console_target_ok_IE6_7")
				}
				c.grab(f);
				c.grab(g);
				this.listDiv.grab(c)
			}
			if (d) {
				this.selBox = b.getElement("input[id]")
			} else {
				this.selBox = new Element("input", {
						type : "text",
						swordType : "tree",
						rule : this.options.rule,
						name : b.get("name"),
						display : "true",
						realvalue : "",
						widget : "tree",
						evnSign : "true",
						widgetGetValue : "true",
						disabled : (this.options.selReadOnly == "true" || this.options.disable == "true"),
						styles : {
							cursor : "text"
						},
						"class" : this.options.formSubSign
					}).inject(this.boxtd)
			}
			this.storeTid();
			if (d) {
				this.selDiv = b.getElement("td.tree-select-selimg")
			} else {
				this.selDiv = this.imgtd;
				this.selDiv.addClass(this.options.treeStyle.treeSelectSelimg)
			}
			if (this.options.selReadOnly == "true" || this.options.disable == "true") {
				this.selBox.setStyle("cursor", "default")
			}
			if (this.options.disable == "true") {
				this.disable(this.selBox)
			}
			this.selDiv.addEvents({
				mouseover : function (l) {
					var k = $(new Event(l).target).getParent("table").getElement("input.swordform_item_oprate");
					if (k.get("display") == "false") {
						Event(l).target.addClass(this.options.treeStyle.treeSelectSelimgOver)
					}
				}
				.bind(this),
				mouseout : function (l) {
					var k = $(new Event(l).target).getParent("table").getElement("input.swordform_item_oprate");
					if (k.get("display") == "false") {
						Event(l).target.removeClass(this.options.treeStyle.treeSelectSelimgOver)
					}
				}
				.bind(this)
			});
			this.swordTree.addEvent("onCheckedAfter", function () {
				this.isCheckClick = true
			}
				.bind(this));
			b.set({
				id : "",
				name : ""
			});
			this.treeDiv = h;
			return h
		},
		gridShow : function () {
			var a = this.selBox.getParent("div.sGrid_data_row_item_div");
			this.fireEvent("onClickBefore", [{}, a]);
			this.clickBefore();
			this.selInput()
		},
		initEvent : function () {
			window.document.addEvent("click", function (f) {
				if (this.showByJs == true) {
					this.showByJs = false;
					return
				}
				var d = f.target;
				while (d.parentNode && d != this.selBox && d != this.selDiv && d != this.listDiv) {
					d = d.parentNode
				}
				if (d != this.selBox && d != this.selDiv && d != this.listDiv && this.selBox) {
					if (this.selBox.get("display") == "false") {
						if (this.options.treeType == "1") {
							var b = this.getValue();
							var a = this.options.selectrule == "leaf" ? 1 : undefined;
							var c = this.swordTree.getAllChecked(this.options.selectRealKey, a);
							if (b != c) {
								this.fireEvent("onSelectChange", [c, b])
							}
						}
						this.hideAndSetValue()
					}
				}
			}
				.bind(this));
			this.selBox.addEvent("focus", function (d, b) {
				this.initOriginValue();
				if (this.swordTree.inGrid == true) {
					var c;
					if ($chk(b)) {
						c = d.target
					} else {
						c = d.target.getParent("div.sGrid_data_row_item_div")
					}
					this.fireEvent("onClickBefore", [{}, c])
				} else {
					this.fireEvent("onClickBefore")
				}
				this.clickBefore();
				if (!this.isShow()) {
					this.selInput()
				}
				if (Browser.Engine.trident) {
					var f = event.srcElement;
					if (f.get("tag") == "input") {
						var a = f.createTextRange();
						a.moveStart("character", f.value.length);
						a.collapse(true);
						a.select()
					}
				}
			}
				.bind(this));
			this.selBox.addEvent("blur", this.selectBlur.bind(this));
			this.selDiv.addEvent("click", function (b) {
				this.initOriginValue();
				if ($chk(b) && $chk(b.target)) {
					var a = $(b.target);
					if (a.get("tag") == "td") {
						el = a.getPrevious().getElement("input")
					} else {
						if (a.get("tag") == "div") {
							el = a.getParent().getPrevious().getElement("input")
						}
					}
					if (el.get("disabled") == true) {
						return
					}
				}
				this.fireEvent("onClickBefore");
				this.clickBefore();
				this.leaveSign = false;
				this.selInput()
			}
				.bind(this));
			this.listDiv.addEvent("mouseenter", this.mouseenter.bind(this));
			this.listDiv.addEvent("mouseleave", this.mouseleave.bind(this));
			this.swordTree.addEvent("onNodeClick", this.getSelectedNode.bind(this));
			if (this.options.treeType == "1") {
				this.btnOk.addEvent("click", function () {
					this.selInput();
					this.fireEvent("onSelectBtnOk", this.selBox)
				}
					.bind(this));
				this.btnCancel.addEvent("click", function () {
					this.hide();
					this.fireEvent("onSelectBtnCancel")
				}
					.bind(this))
			}
			this.selBox.addEvents({
				keydown : this.keyDownEvent.bindWithEvent(this),
				keyup : this.keyUpEvent.bindWithEvent(this)
			})
		},
		clickBefore : function (a) {},
		processValueChange : function (b) {
			if (this.options.lazySelect == "true" && ($chk(this.options.qtid) || $chk(this.options.qctrl))) {
				if (b == "") {
					this.swordTree.options.dataStr = ""
				} else {
					if (b.length >= this.swordTree.options.qlength) {
						var c = {
							inputValue : b
						};
						var a = this.queryData(c);
						this.swordTree.options.dataStr = a;
						this.swordTree.draw.reloadTreeWithData(a)
					}
				}
				this.isBuild = false;
				this.show()
			} else {
				this.findTreeNodes()
			}
		},
		mouseenter : function () {
			this.leaveSign = true
		},
		mouseleave : function () {
			this.leaveSign = false
		},
		getSelectedNode : function () {
			var c = this.swordTree.getSelectedNode();
			if ($defined(c)) {
				var f;
				var d = false;
				var b = this.swordTree.options.onNodeClickBefore;
				var a = null;
				if ($defined(b)) {
					f = this.getFunc(b)[0](c, this.selBox);
					if (f == true) {
						d = true
					} else {
						if ($type(f) == "string") {
							a = f;
							d = true
						} else {
							if (!f) {
								if ((this.swordTree.options.selectrule == "leaf" && c.get("leaftype") == 1) || (this.swordTree.options.selectrule == "all")) {
									d = true
								}
							}
						}
					}
				} else {
					if (!$defined(b) && !d) {
						if ((this.swordTree.options.selectrule == "leaf" && c.get("leaftype") == 1) || (this.swordTree.options.selectrule == "all")) {
							d = true
						}
					}
				}
				if (d) {
					if (this.swordTree.options.treeType == 1) {
						return
					}
					this.setSelectedNode(c, a)
				} else {
					this.swordTree.draw.extend(c)
				}
			}
		},
		setSelectedNode : function (f, g) {
			if ($defined(f)) {
				if ($type(f) == "array" && f.length >= 1) {
					var d = [],
					a = [];
					f.each(function (p) {
						d.include(p.get(this.swordTree.options.selectRealKey) || "");
						a.include(p.get(this.swordTree.options.displayTag) || "")
					}
						.bind(this));
					this.setValue(a.join(","));
					this.setRealValue(d.join(","));
					this.selInput()
				} else {
					f = $$(f);
					var l = f.get(this.swordTree.options.displayTag);
					if (this.swordTree.options.selectRealKey == "code") {
						var b = this.getValue();
						var c = f.get(this.swordTree.options.selectRealKey);
						if (b != c) {
							this.fireEvent("onSelectChange", [c, b])
						}
						this.setRealValue(c);
						if (f.length == 0) {
							this.swordTree.clearCheckedStatus()
						}
					} else {
						var n = [];
						var m = this.swordTree.options.selectRealKey;
						if (m.contains("|")) {
							n = m.split("|")
						}
						var h = n.length;
						var k = "";
						if (h > 0) {
							n.each(function (q, p) {
								k = k + f.get(q) + "|"
							});
							k = k.substring(0, k.length - 1);
							var b = this.getValue();
							var c = k;
							if (b != c) {
								this.fireEvent("onSelectChange", [c, b])
							}
							this.setRealValue(k)
						} else {
							var b = this.getValue();
							var c = f.get(m);
							if (b != c) {
								this.fireEvent("onSelectChange", [c, b])
							}
							this.setRealValue(c)
						}
					}
					this.selBox.value = l;
					this.selBox.value = (g == null) ? l : g;
					this.initOriginValue();
					this.hideAndSetValue()
				}
			}
		},
		findTreeNodes : function () {
			if (this.selBox.get("display") == "true") {
				this.show()
			}
			if (!$chk((this.selBox.get("realvalue") || "").trim()) && !$chk((this.selBox.get("value") || "").trim())) {
				this.clear();
				this.swordTree.draw.resetTreeData()
			} else {
				var a = [];
				var c = this.options.filterSign.split(",");
				var d = new Hash();
				for (var b = 0; b < c.length; b++) {
					d.set(c[b].trim(), this.selBox.value.trim())
				}
				a.include(d);
				this.swordTree.draw.reloadTreeWithSearch(a)
			}
		},
		selectBlur : function () {
			if (!this.leaveSign) {
				if (this.selBox.get("display") == "false") {
					this.hideAndSetValue()
				}
			}
		},
		selInput : function () {
			var d = this.selBox;
			var a = this.swordTree;
			if (d.get("display") == "false") {
				this.hideAndSetValue()
			} else {
				this.show();
				if ($chk(d.get("value"))) {
					if (a.options.treeType == 1) {
						this.initCheckStatus()
					} else {
						if (this.options.lazySelect == "true" && !this.getOriginValue() && ($chk(this.options.qtid) || $chk(this.options.qctrl))) {
							this.hideAndSetValue();
							this.emptyTid();
							var c = {
								inputValue : d.get("value")
							};
							this.isBuild = false;
							var b = this.queryData(c);
							this.swordTree.options.dataStr = b;
							this.swordTree.draw.reloadTreeWithData(b)
						} else {
							if (d.get("originValue") != this.getCaption()) {
								this.findTreeNodes();
								d.set("originValue", this.getCaption())
							}
						}
					}
				} else {
					if ($defined(this.getOriginValue()) && this.getOriginValue() != this.getCaption()) {
						this.clearOriginValue();
						this.swordTree.draw.resetTreeData()
					}
				}
				this.fireEvent("onSelectShow")
			}
		},
		initCheckStatus : function () {
			var p = this.selBox;
			var u = this.swordTree;
			var l = p.get("checkPath");
			if ($chk(l)) {
				var r = l.split("|");
				var s = [];
				var b = [];
				var n;
				var h = [];
				this.swordTree.draw.checkPathArray = [];
				for (var g = 0; g < r.length; g++) {
					var q = r[g].split(",");
					var m = [];
					var d = [];
					if (this.options.isCascadeCheckedClick == "false") {
						this.swordTree.draw.checkPathArray.include(q[q.length])
					}
					for (var c = 0; c < q.length; c++) {
						if ((c + 1) == q.length) {
							if (!n) {
								n = q[c]
							}
							h.push(q[c])
						}
						m.include(q[c]);
						d.include(q[c]);
						if (this.options.isCascadeCheckedClick == "true") {
							this.swordTree.draw.checkPathArray.include(q[c])
						}
					}
					if (m.length > 0) {
						s.push(m);
						b.push(d)
					}
				}
				if (s.length > 0) {
					var a = this.swordTree.draw.loadTreeNodesByIds(s, h);
					this.swordTree.setHalfOrCheckedList(a);
					var f = new Hash();
					f.set(this.swordTree.options.cascadeSign.id, n);
					this.swordTree.findTreeNode(f)
				}
				p.set("checkPath", "")
			}
		},
		emptyTid : function () {
			this.swordTree.options.tid = "";
			this.swordTree.options.ltid = "";
			this.swordTree.options.ctrl = "";
			this.swordTree.options.lctrl = ""
		},
		storeTid : function () {
			this.selBox.store("tid", this.swordTree.options.tid);
			this.selBox.store("ltid", this.swordTree.options.ltid);
			this.selBox.store("ctrl", this.swordTree.options.ctrl);
			this.selBox.store("lctrl", this.swordTree.options.lctrl)
		},
		retrieveTid : function () {
			this.swordTree.options.tid = this.selBox.retrieve("tid");
			this.swordTree.options.ltid = this.selBox.retrieve("ltid");
			this.swordTree.options.ctrl = this.selBox.retrieve("ctrl");
			this.swordTree.options.lctrl = this.selBox.retrieve("lctrl")
		},
		buildTree : function () {
			if (!this.isBuild) {
				this.swordTree.container = this.treeDiv;
				this.swordTree.builder = new SwordBigTree.Builder(this.treeDiv, this.swordTree.options, this.swordTree.$events);
				this.swordTree.builder.build(this.swordTree);
				this.isBuild = true
			}
		},
		isShow : function () {
			return this.selBox.get("display") === "false"
		},
		show : function () {
			if (this.selBox.getWidth() == 0) {
				return
			}
			xyposition(this.selBox, this.listDiv);
			this.listDiv.setStyle("display", "block");
			var b;
			var a = this.selBox.scrollWidth;
			var c = this.selBox.getWidth();
			if (a > c) {
				b = a + 56
			} else {
				b = c + 15
			}
			this.listDiv.setStyles({
				width : $chk(this.options.width) ? this.options.width : b
			});
			this.selBox.set("display", "false")
		},
		hideAndSetValue : function () {
			if (this.options.treeType == "1") {
				this.initSelectValue()
			} else {}

			if (!$chk(this.getValue())) {
				this.swordTree.draw.resetTreeData(this.swordTree.draw.buildIter);
				if (this.options.treeType == "1") {
					var a = this.swordTree;
					a.clearCheckedStatus()
				}
				this.clearValue();
				this.clearOriginValue()
			}
			this.hide()
		},
		hide : function () {
			this.validateBox(this.selBox);
			this.listDiv.setStyles({
				left : "-500px",
				top : "-500px"
			});
			this.listDiv.setStyle("display", "none");
			this.selBox.set("display", "true");
			this.fireEvent("onSelectHide", [this.selBox])
		},
		clearOriginValue : function () {
			this.selBox.set("originValue", "")
		},
		clearValue : function () {
			this.setRealValue("");
			this.setValue("");
			this.swordTree.unSelectNode()
		},
		clear : function () {
			this.clearValue();
			this.swordTree.close()
		},
		validateBox : function (a) {
			if ($chk(a.get("rule"))) {
				this.swordTree.validate.validate(a)
			}
			if (this.swordTree.formObj && this.swordTree.formObj.active && this.swordTree.validate.validate(a)) {
				this.swordTree.formObj.pop_grid_obj.OpenFormUpdateCell(this.swordTree.formObj.pop_grid_gridname, a.get("cellName"), this.swordTree.formObj.getValue(a.get("name")))
			}
		},
		setRealValue : function (d) {
			this.selBox.set("evnSign", "false");
			this.selBox.set("realvalue", d);
			this.selBox.set("evnSign", "true");
			if (!this.isShow() && $chk(d)) {
				if (this.options.treeType == "1") {
					this.swordTree.clearCheckedStatus();
					this.swordTree.unSelectNode();
					var b = d.split(",");
					var a = [];
					for (var c = 0; c < b.length; c++) {
						var f = new Hash();
						f.set(this.options.cascadeSign.id, b[c]);
						a.push(f)
					}
					this.swordTree.setCheckedList(a)
				} else {
					var f = new Hash();
					f.set(this.options.cascadeSign.id, d);
					this.swordTree.findTreeNode(f)
				}
			}
		},
		setValue : function (a) {
			this.selBox.set("evnSign", "false");
			this.selBox.set("value", a);
			this.selBox.set("evnSign", "true")
		},
		getValue : function (a) {
			return this.selBox.get("realvalue")
		},
		getCaption : function (a) {
			return this.selBox.get("value")
		},
		queryData : function (f) {
			var b;
			if ($chk(this.options.qtid) || $chk(this.options.qctrl)) {
				this.fireEvent("onQtidBefore", f);
				var d = new Hash();
				d.set("sword", "SwordTree");
				d.set("name", this.options.treeContainerName);
				d.set("loaddata", "widget");
				d.set("data", [f]);
				var a = new Hash();
				a.set("sword", "attr");
				a.set("name", "treeName");
				a.set("value", this.options.treeContainerName);
				var c = pageContainer.getReq({
						tid : this.options.qtid,
						ctrl : this.options.qctrl,
						widgets : [d, a]
					});
				pageContainer.postReq({
					req : c,
					async : false,
					onSuccess : function (g) {
						b = pc.getResData(this.options.treeContainerName, g)
					}
					.bind(this),
					onError : function (g) {}

					.bind(this)
				})
			}
			return b || {}

		},
		getBoxEl : function (a) {
			return a.getPrevious().getElement(".swordform_item_oprate")
		},
		getImgEl : function (a) {
			return a.getParent().getNext()
		},
		disable : function (b) {
			if ($defined(b)) {
				b.set("disabled", "true").addClass("tree_input_disable").setStyle("background-color", "");
				var a = this.getImgEl(b);
				a.addClass("tree_selimg_disable")
			}
		},
		enable : function (c) {
			if ($defined(c) && c.cloneFlag) {
				c.erase("disabled").removeClass("tree_input_disable");
				var a = this.getImgEl(c);
				a.removeClass("tree_selimg_disable");
				var b = c.get("rule");
				if ($defined(b) && b.contains("must")) {
					c.setStyle("background-color", "#fffadb")
				}
			}
		},
		keyUpEvent : function (f) {
			var c = f.code;
			if (c == 32 && this.preKey == 229 && this.swordTree.getSelectedNode() && this.options.treeType == "1") {
				this.setValue((this.getCaption() || "").trim());
				var d = this.swordTree.getSelectedNode();
				if (d) {
					var a = this.swordTree.draw;
					a.checkNode(d, true)
				}
			} else {
				if (c != 8 && c != 13 && c != 37 && c != 38 && c != 39 && c != 40 && this.preKey != 37 && this.preKey != 38 && this.preKey != 39 && this.preKey != 40 && this.getCaption() && f.target.get("originValue") != this.getCaption() && $chk(this.getCaption().trim())) {
					if (!(this.preKey == 32 && this.isShow() && $defined(this.swordTree.getSelectedNode()))) {
						f.target.set("originValue", f.target.value);
						var b = pc.getMask();
						b.options.opacity = 0.4;
						b.mask(this.listDiv);
						this.processValueChange(f.target.value);
						this.swordTree.unSelectNode();
						b.unmask()
					}
				}
			}
			this.preKey = f.code
		},
		keyDownEvent : function (c) {
			var g = true;
			switch (c.code) {
			case 8:
				if ($chk(this.selBox.get("value"))) {
					this.swordTree.draw.resetTreeData(this.swordTree.draw.buildIter);
					var b = this.getValue() == null ? "" : this.getValue();
					var d = c.target.value;
					if (b != "") {
						this.fireEvent("onSelectChange", ["", b])
					}
					if (this.options.treeType == "1") {
						var l = this.swordTree;
						l.clearCheckedStatus()
					}
					this.clearValue();
					this.clearOriginValue()
				}
				this.show();
				break;
			case 13:
				if (this.options.treeType == 1) {
					this.hideAndSetValue()
				} else {
					var f = this.swordTree.getSelectedNode();
					if ($defined(f)) {
						this.getSelectedNode();
						this.initOriginValue();
						this.fireEvent("onNodeClick", f)
					} else {
						this.hideAndSetValue()
					}
				}
				var a = this.swordTree.grid;
				if (a) {
					var m = a.getCheckedRow();
					if ($chk(m)) {
						var k = m.getElement("div[treename=" + this.selBox.get("name") + "]");
						a.nextCell(k, c, this, c.key)
					}
				}
				break;
			case 27:
				if (this.options.treeType == 1) {
					this.hideAndSetValue()
				} else {
					var f = this.swordTree.getSelectedNode();
					if ($defined(f)) {
						this.getSelectedNode();
						this.initOriginValue();
						this.fireEvent("onNodeClick", f)
					} else {
						this.hideAndSetValue()
					}
				}
				var a = this.swordTree.grid;
				if (a) {
					var m = a.getCheckedRow();
					if ($chk(m)) {
						var k = m.getElement("div[treename=" + this.selBox.get("name") + "]");
						a.nextCell(k, c, this, c.key)
					}
				}
				break;
			case 40:
				if (!this.isShow()) {
					this.show()
				}
				this.selectNextNode();
				break;
			case 38:
				this.selectPreNode();
				break;
			case 37:
				g = !this.isShow();
				this.selectLeftNode();
				break;
			case 39:
				g = !this.isShow();
				this.selectRightNode();
				break;
			case 32:
				g = !this.isShow();
				if (this.options.treeType == "1") {
					var f = this.swordTree.getSelectedNode();
					if (f) {
						var h = this.swordTree.draw;
						h.checkNode(f, true)
					}
					g = false
				}
				break
			}
			this.preKey = c.code;
			return g
		},
		getNextNotHiddenNode : function (a) {
			while (a && a.hasClass(this.swordTree.draw.options.treeStyle.treeFilterHidden)) {
				a = a.getNext("div")
			}
			return a
		},
		getPreNotHiddenNode : function (a) {
			while (a && a.hasClass(this.swordTree.draw.options.treeStyle.treeFilterHidden)) {
				a = a.getPrevious("div")
			}
			return a
		},
		selectNextNode : function () {
			var k = this.swordTree.draw;
			var d = this.swordTree.getSelectedNode();
			if (!d) {
				var b = this.swordTree.getRootData();
				if (b) {
					var n = b.getChildNodes();
					if (n && n.length > 0) {
						var a = n[0].getDataPath();
						this.swordTree.findTreeNode($(a))
					}
				}
			} else {
				var f;
				var l = k.getSpan(d, "gadGetSpan");
				if (l && l.hasClass(k.options.treeStyle.treeGadGetMinus)) {
					var c = this.swordTree.getChildren(d);
					f = c[0]
				} else {
					f = d.getNext("div")
				}
				f = this.getNextNotHiddenNode(f);
				if (!f) {
					var m = this.swordTree.getParent(d);
					if (m) {
						var h = m.getNext("div");
						while (!h) {
							if (m.hasClass(k.options.treeStyle.treeRootNode)) {
								break
							} else {
								m = this.swordTree.getParent(m);
								h = m.getNext("div")
							}
						}
						f = this.getNextNotHiddenNode(h)
					}
					if (!f) {
						var c = this.swordTree.getChildren(m);
						if (c && c.length > 0) {
							for (var g = 0; g < c.length; g++) {
								if (!c[g].hasClass(k.options.treeStyle.treeFilterHidden)) {
									f = c[g];
									break
								}
							}
						}
					}
				}
				if (f) {
					this.swordTree.findTreeNode(f)
				}
			}
		},
		selectPreNode : function () {
			var b = this.swordTree.draw;
			var g = this.swordTree.getSelectedNode();
			if (g) {
				var a = g.getPrevious("div");
				a = this.getPreNotHiddenNode(a);
				if (a) {
					var k = b.getSpan(a, "gadGetSpan");
					while (a && k.hasClass(b.options.treeStyle.treeGadGetMinus)) {
						var f = this.swordTree.getChildren(a);
						a = this.getPreNotHiddenNode(f[f.length - 1]);
						k = b.getSpan(a, "gadGetSpan")
					}
				} else {
					var d = this.swordTree.getParent(g);
					if (d && !d.hasClass(b.options.treeStyle.treeRootNode)) {
						a = d
					} else {
						var f = this.swordTree.getChildren(d);
						var h = false;
						while (!h) {
							for (var c = f.length - 1; c >= 0; c--) {
								if (!f[c].hasClass(b.options.treeStyle.treeFilterHidden)) {
									a = f[c];
									break
								}
							}
							if (a) {
								f = this.swordTree.getChildren(a);
								if (f.length == 0) {
									h = true
								} else {
									h = false
								}
							} else {
								h = true
							}
						}
					}
				}
				if (a) {
					this.swordTree.findTreeNode(a)
				}
			}
		},
		selectLeftNode : function () {
			var a = this.swordTree.draw;
			var c = this.swordTree.getSelectedNode();
			if (c) {
				var d = c.getAttribute("id");
				var b = a.getDataIterator(d).getParent();
				if (b && !b.isRoot && b.hasChildNodes()) {
					d = b.getDataPath();
					a.extend($(d), null, null, null, false);
					this.swordTree.findTreeNode($(d))
				}
			}
		},
		selectRightNode : function () {
			var b = this.swordTree.draw;
			var d = this.swordTree.getSelectedNode();
			if (d) {
				var g = d.getAttribute("id");
				var c = b.getDataIterator(g);
				if (c && (c.hasChildNodes() || b.isLazyExtend(d))) {
					b.extend(d, "block", null, null, false);
					var f = c.getChildNodes();
					if (f && f.length > 0) {
						g = f[0].getDataPath();
						var a = this.getNextNotHiddenNode($(g));
						this.swordTree.findTreeNode(a)
					}
				}
			}
		},
		initSelectValue : function () {
			if (this.options.treeType == "1" && this.isCheckClick === false) {
				return
			} else {
				var b = this.options.selectrule;
				var a;
				if (b == "leaf") {
					a = 1
				} else {
					if (b == "checked") {
						a = 2
					}
				}
				this.selBox.set("value", this.swordTree.getAllChecked(this.options.displayTag, a));
				this.selBox.set("checkPath", "");
				this.swordTree.draw.checkPathArray = [];
				this.setRealValue(this.swordTree.getAllChecked(this.options.selectRealKey, a))
			}
		},
		initOriginValue : function () {
			this.selBox.set("originValue", this.getCaption())
		},
		getOriginValue : function () {
			return this.selBox.get("originValue")
		}
	});
SwordBigTree.Template = {
	divAfter : "</DIV>",
	childrenEleTpl : "<DIV style='DISPLAY: ${display}' class='tree-children' leaftype='${leaftype}'>",
	eleTpl : "<DIV class='${eleClass}' id='${id}' leaftype='${leaftype}' title='${caption}' ${checkSign}='${check}'  caption='${caption}' depth='${depth}'  {@each attrs as it,index} ${index} = '${it}'  {@/each}>",
	wrapperSpanTpl : "<SPAN class=tree-node-wrapper type='wrapperSpan'><SPAN	class='tree-gadjet ${gadGetSpan}' type='gadGetSpan'>$${space}</SPAN>{@if treeType==='1'}<SPAN class='tree-checkbox ${checkSpanCls}' type='checkSpan'>$${space}</SPAN>{@/if}{@if treeType==='2'}<INPUT class=tree-radio type=radio value=on name=radio>{@/if}<SPAN   class='tree-icon ${iconSpan}' type='iconSpan'>$${space}</SPAN><SPAN   class='tree-name' type='displaySpan'>$${caption}</SPAN></SPAN>"
};
var SwordValidator = new Class({
		Implements : [Events, Options],
		options : {
			vType : "intime"
		},
		initialize : function (a) {
			this.setOptions(a)
		},
		initParam : function (a) {
			if (!window.tooltips) {
				window.tooltips = pageContainer.create("SwordToolTips")
			}
			this.tooltips = window.tooltips;
			if ($chk(a)) {
				this.options.vType = a
			}
		},
		exeVal : true,
		activeV : function () {
			this.exeVal = true
		},
		cancelV : function () {
			this.exeVal = false
		},
		tooltips : null,
		_add : function (d) {
			var a = d.retrieve("upManager");
			if (a) {
				a.addEvent("onFileSuccess", function () {
					this.validate(d)
				}
					.bind(this))
			}
			if (this.options.vType == "intime") {
				d.addEvent("focus", function (g) {
					if (Browser.Engine.trident) {
						g.target.originValue = g.target.value
					}
					this.intimeValidate(g.target)
				}
					.bind(this));
				d.addEvent("blur", function (g) {
					this.intimeValidate(g.target);
					this.tooltips.hide()
				}
					.bind(this));
				if (Browser.Engine.trident) {
					d.attachEvent("onpropertychange", function (g) {
						if (d != document.activeElement) {
							return
						}
						if (g.propertyName != "value") {
							return
						}
						if (g.srcElement.originValue == g.srcElement.value) {
							return
						}
						g.srcElement.originValue = g.srcElement.value;
						this.intimeValidate($(g.srcElement))
					}
						.bind(this))
				} else {
					d.addEventListener("input", function (g) {
						this.intimeValidate(g.target)
					}
						.bind(this), false)
				}
			} else {
				if (d.get("placeholder") != "true") {
					d.addEvent("blur", this.validate.bind(this))
				}
			}
			var f = d.get("rule").split("||"),
			b = true;
			for (var c = 0; c < f.length; c++) {
				if (f[c] != "number") {
					b = false;
					break
				}
			}
			if (b) {
				if (Browser.Engine.trident) {
					d.style.imeMode = "disabled"
				}
				d.addEvent((Browser.Engine.trident || Browser.Engine.webkit) ? "keydown" : "keypress", function (h) {
					var g = h.code;
					if ((g > 95 && g < 106) || (g > 47 && g < 58) || g == 110 || g == 190 || g == 189 || g == 107 || (h.shift && g == 187) || g == 107) {
						return true
					}
					if (Browser.Engines.gecko() && (g == 46 || g == 45 || g == 43)) {
						return true
					}
					return (g == 8 || g == 37 || g == 39 || (h.control && g == 86) || (h.shift && g == 36))
				}
					.bind(this))
			}
		},
		validate : function (d) {
			if (!this.exeVal) {
				return true
			}
			d = ($type(d) == "event") ? new Event(d).target : d;
			var b = "";
			var f = "";
			if (d.get("placeholder") == "true" && d.get("value") == d.get("defvalue")) {
				b = "true"
			} else {
				var c = this.doValidate(d);
				b = c.state;
				f = c.msg
			}
			var a = $defined(d.get("vType")) ? d.get("vType") : this.options.vType;
			if ($chk(d.get("error"))) {
				f = d.get("error")
			}
			this[a].run([d, b, f], this);
			return b
		},
		doValidate : function (h) {
			var k = "";
			var f;
			var g = h.get("rule");
			if (!g) {
				return {
					state : "true"
				}
			}
			if (!$defined(h.get("ruleType"))) {
				var b = [];
				var c = "solo";
				if (g.contains("_")) {
					b = g.split("_");
					k = this._msg.t;
					c = "and"
				} else {
					if (g.contains("||")) {
						b = g.split("||");
						k = this._msg.t;
						c = "or"
					} else {
						b[0] = g
					}
				}
				var a = (c != "or") ? true : false;
				var d = a;
				b.each(function (t, r, n) {
					var q = "";
					if (t.contains("contrast")) {
						h.set("contrastValue1", t.split(";")[1]);
						if (t.split(";").length == 3) {
							h.set("contrastValue2", t.split(";")[2])
						}
						t = "contrast"
					} else {
						if (t.contains("range")) {
							h.set("begin", t.split(";")[1]);
							h.set("end", t.split(";")[2]);
							t = "range"
						} else {
							if (t.contains("customCheckStyle")) {
								h.set("customCheckStyle", t.split(";")[1]);
								t = "customCheckStyle"
							} else {
								if (t.contains("length")) {
									var p = t.split(";");
									if (p.length == 3) {
										h.set("begin", t.split(";")[1]);
										h.set("end", t.split(";")[2])
									} else {
										if (p[1].contains(",")) {
											h.set("begin", p[1].split(",")[0]);
											h.set("end", p[1].split(",")[1])
										} else {
											h.set("begin", p[1])
										}
									}
									t = "length"
								} else {
									if (t.contains("customFunction")) {
										h.set("onValidate", t.split(";")[1]);
										t = "customFunction"
									} else {
										if (t.contains("regexp")) {
											h.set("regexp", t.split(";")[1]);
											t = "regexp"
										} else {
											if (t.contains("number") && t.contains(",")) {
												var s = t.substring(t.indexOf("(") + 1, t.indexOf(")")).split(",");
												h.set("zl", s[0] - s[1]);
												h.set("xl", s[1]);
												t = "numberDefine"
											} else {
												if (t.contains("number") && t != "numberInt" && t != "number$character") {
													t = "numberCustom"
												} else {
													if (t.contains("file")) {
														var p = t.split(";");
														if (p.length == 2) {
															h.set("filetype", p[1])
														}
														t = "fileDefine"
													}
												}
											}
										}
									}
								}
							}
						}
					}
					if ($defined(this.reg[t])) {
						d = (d == a) ? this["testRegexp"].run([h, this.reg[t]], this) : d
					} else {
						if (t == "regexp") {
							d = (d == a) ? this["testRegexp"].run([h, h.get("regexp")], this) : d
						} else {
							if (t == "customFunction") {
								if ($chk(h.get("onValidate"))) {
									f = this.getFunc(h.get("onValidate"))[0](h, this.getElValue(h));
									if ($defined(f.state) && (d == a) && (f.state == !a)) {
										d = f.state
									}
									q = f.msg
								}
							} else {
								if (t == "idcard" || t == "nidcard") {
									var m = this[t].run(h, this);
									if (m == "invalid") {
										m = true;
										h.set("invaltag", "true")
									} else {
										h.set("invaltag", "false")
									}
									d = (d == a) ? m : d
								} else {
									if (t != "customFunction") {
										d = (d == a) ? this[t].run(h, this) : d
									}
								}
							}
						}
					}
					if (t.contains("contrast")) {
						q = this._msg.t + this._msg.contrast + h.get("contrastValue1");
						if ($chk(h.get("contrastValue2"))) {
							q += h.get("contrastValue2")
						}
					} else {
						if (t.contains("range")) {
							q = this._msg.t + this._msg.range + h.get("begin") + "和" + h.get("end") + "之间"
						} else {
							if (t.contains("length")) {
								q = this._msg.t + this._msg.length + h.get("begin") + ($defined(h.get("end")) ? ("和" + h.get("end") + "之间") : "") + i18n.nullStr
							} else {
								if (t.contains("numberDefine")) {
									q = this._msg.t + "数字,且整数部分最多" + h.get("zl") + "位,且小数部分最多" + h.get("xl") + "位"
								} else {
									if (t.contains("numberCustom")) {
										q = this._msg.t + "数字"
									} else {
										if (t.contains("customCheckStyle")) {
											q = this._msg.t + this._msg.customCheckStyle + h.get("customCheckStyle")
										} else {
											if (t.contains("fileDefine")) {
												q = this._msg.t + "文件后缀名必须为：" + h.get("filetype")
											} else {
												if (!t.contains("customFunction")) {
													q = this._msg.t + this._msg[t]
												}
											}
										}
									}
								}
							}
						}
					}
					if (r == 0) {
						k += q
					} else {
						k += ($defined(q)) ? (this._msg[c] + q) : ""
					}
					if (t == "date") {
						var l = h.get("dataformat");
						if (!$chk(l)) {
							l = "yyyy-MM-dd"
						}
						k += l
					}
				}
					.bind(this))
			} else {
				h = (h.hasClass("swordform_item_oprate")) ? h : h.getParent("div.swordform_item_oprate");
				re = this.Group(h, k);
				d = re.state;
				k = re.msg
			}
			return {
				state : d,
				msg : $chk(h.get("msg")) ? h.get("msg") : k
			}
		},
		Group : function (d, f) {
			var b = d.getElements("input:checked").length;
			var c = d.get("rule");
			var a = [];
			a = c.split("_");
			if (a.length > 2) {
				var f = "请您选择至少" + a[1].toInt() + "项,最多不超过" + a[2].toInt() + "项";
				if (a[1] == a[2]) {
					f = "请您至少选择" + a[1].toInt() + "项"
				}
				return {
					state : (a[1].toInt() <= b && b <= a[2].toInt()),
					msg : f
				}
			} else {
				if (a.length == 2) {
					a[0] = a[1]
				}
				return {
					state : (a[0].toInt() <= b),
					msg : "请您至少选择" + a[0].toInt() + "项"
				}
			}
		},
		_msg : {
			t : "",
			number : i18n.num,
			numberInt : i18n.numInt,
			numberFloat : i18n.numFloat,
			numberScience : i18n.numScience,
			character : i18n.character,
			chinese : i18n.chinese,
			twoBytes : i18n.twoBytes,
			english : i18n.english,
			date : i18n.date,
			"number$character" : i18n.numChar,
			"number$english" : i18n.numEnglish,
			qq : i18n.qq,
			telephone : i18n.telephone,
			cellphone : i18n.cellphone,
			idcard : i18n.idcard,
			nidcard : i18n.nidcard,
			postal : i18n.postal,
			currency : i18n.currency,
			email : i18n.email,
			url : i18n.url,
			and : i18n.and1,
			or : i18n.or,
			solo : "",
			must : i18n.must,
			contrast : i18n.contrast,
			range : i18n.range,
			customCheckStyle : i18n.customCheckStyle,
			length : i18n.length1,
			customFunction : i18n.customFunction
		},
		reg : {
			number : /^[-]?\d+(\.\d+)?([Ee][-+]?[1-9]+)?$/i,
			numberInt : /^[-]?\d+$/i,
			numberFloat : /^[-]?\d+\.\d+$/i,
			numberScience : /^[+|-]?\d+\.?\d*[E|e]{1}[+]{1}\d+$/,
			character : /^[\u4e00-\u9fa5A-Za-z]+$/i,
			chinese : /^[\u4e00-\u9fa5]+$/i,
			twoBytes : /^[^\x00-\xff]+$/i,
			english : /^[A-Za-z]+[A-Za-z\s]*$/i,
			number$character : /^[\u4e00-\u9fa5A-Za-z0-9]+$/i,
			number$english : /^[\w]+$/i,
			qq : /^[1-9]\d{4,8}$/i,
			telephone : /^((\(0\d{2,3}\))|(0\d{2,3}-))?[1-9]\d{6,7}(-\d{1,4})?$/i,
			cellphone : /^0?1\d{10}$/i,
			postal : /^\d{6}$/i,
			currency : /^\$[-+]?\d+(\.\d+)?([Ee][-+]?[1-9]+)?$/i,
			email : /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/i,
			url : /^(http|https|ftp):\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/i
		},
		getElValue : function (c) {
			var b;
			if (c.get("tag") == "div") {
				if ($defined(c.get("realvalue"))) {
					b = c.get("realvalue")
				} else {
					b = c.get("text")
				}
			} else {
				b = c.get("realvalue") || c.get("value")
			}
			var a = c.getElement("input");
			if (b == "" && $chk(a)) {
				b = a.get("value")
			}
			if (b == undefined) {
				b = ""
			}
			return b
		},
		testRegexp : function (c, b) {
			if ($type(b) != "regexp") {
				if (b.test("\\/\\^")) {
					b = b.substring(1, b.length)
				}
				if (b.test("\\/\\i")) {
					b = b.substring(0, b.length - 2)
				}
				b = new RegExp(b)
			}
			var a = this.getElValue(c);
			if (a == "") {
				return true
			}
			return b.test(a)
		},
		must : function (b) {
			var a = b.retrieve("upManager");
			if (a) {
				return a.fileList.length > 0
			}
			if (b.get("tag") == "div") {
				return ($defined(b.get("text")) && (b.get("text").trim() != "") || $defined(b.get("value")) && (b.get("value").trim() != ""))
			} else {
				if ($defined(b.get("swordType")) && (b.get("swordType") == "tree")) {
					return ($defined(b.get("realvalue")) && (b.get("realvalue").trim() != ""))
				} else {
					return ($defined(b.get("value")) && (b.get("value").trim() != ""))
				}
			}
		},
		contrast : function (e) {
			var value = this.getElValue(e);
			if (value == "") {
				return true
			}
			if (this.reg.number.test(value)) {
				var flag = eval(value + e.get("contrastValue1"));
				if ($chk(e.get("contrastValue2"))) {
					flag = flag ? eval(value + e.get("contrastValue2")) : false
				}
				return flag
			} else {
				return false
			}
		},
		range : function (b) {
			var a = this.getElValue(b);
			if (a == "") {
				return true
			}
			if (this.reg.number.test(a)) {
				return (a > b.get("begin") && a < b.get("end"))
			} else {
				return false
			}
		},
		customCheckStyle : function (d) {
			var f = this.getElValue(d);
			var a = d.get("customCheckStyle");
			for (var b = 0; b < f.length; b++) {
				var g = f.charAt(b);
				if (a.indexOf(g) >= 0) {
					return false
				}
			}
			return true
		},
		length : function (c) {
			var b = this.getElValue(c);
			if (b == "") {
				return true
			}
			var a = this.getLen(b);
			if (c.get("rule").contains(",")) {
				return (a >= c.get("begin") && a <= c.get("end"))
			} else {
				if ($defined(c.get("end"))) {
					return (a > c.get("begin") && a < c.get("end"))
				} else {
					return a == c.get("begin")
				}
			}
		},
		getLen : function (f) {
			var a = 0;
			for (var b = 0; b < f.length; b++) {
				var d = f.charCodeAt(b);
				var c = f.charAt(b);
				if ((d > 65248) || (d == 12288) || this.reg.chinese.test(c)) {
					a = a + 2
				} else {
					a = a + 1
				}
			}
			return a
		},
		idcard : function (b) {
			var a = this.getElValue(b);
			if (a == "") {
				return true
			}
			return this.checkIdcard(a)
		},
		nidcard : function (b) {
			var a = this.getElValue(b);
			if (a == "") {
				return true
			}
			return this.checkIdcard(a, 18)
		},
		checkIdcard : function (f, m) {
			f = f.toUpperCase();
			var g = f.length,
			p;
			if (m == 18 && g < 18) {
				return false
			}
			if (!(/(^\d{15}$)|(^\d{17}([0-9]|X)$)/.test(f))) {
				return false
			}
			if (g == 15) {
				p = new RegExp(/^(\d{6})(\d{2})(\d{2})(\d{2})(\d{3})$/);
				var n = f.match(p);
				var c = new Date("19" + n[2] + "/" + n[3] + "/" + n[4]);
				var b;
				b = (c.getYear() == Number(n[2])) && ((c.getMonth() + 1) == Number(n[3])) && (c.getDate() == Number(n[4]));
				if (!b) {
					return false
				} else {
					var k = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);
					var l = new Array("1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2");
					var h = 0,
					d;
					f = f.substr(0, 6) + "19" + f.substr(6, f.length - 6);
					for (d = 0; d < 17; d++) {
						h += f.substr(d, 1) * k[d]
					}
					f += l[h % 11];
					return true
				}
			}
			if (g == 18) {
				p = new RegExp(/^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$/);
				var n = f.match(p);
				var c = new Date(n[2] + "/" + n[3] + "/" + n[4]);
				var b;
				b = (c.getFullYear() == Number(n[2])) && ((c.getMonth() + 1) == Number(n[3])) && (c.getDate() == Number(n[4]));
				if (!b) {
					return false
				} else {
					var a;
					var k = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);
					var l = new Array("1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2");
					var h = 0,
					d;
					for (d = 0; d < 17; d++) {
						h += f.substr(d, 1) * k[d]
					}
					a = l[h % 11];
					if (a != f.substr(17, 1)) {
						return "invalid"
					}
					return true
				}
			}
			return false
		},
		numberDefine : function (d) {
			var c = this.getElValue(d);
			if (c == "") {
				return true
			}
			if (!this.reg.number.test(c)) {
				return false
			}
			var g = c.split(".");
			var f = d.get("zl");
			if (g.length == 2) {
				var a = g[0].split(",");
				var h = 0;
				for (var b = 0; b < a.length; b++) {
					h = h + a[b].length
				}
				return h <= f && g[1].length <= d.get("xl")
			} else {
				return g[0].length <= f
			}
		},
		numberCustom : function (d) {
			var c = this.getElValue(d);
			if (c == "") {
				return true
			}
			var f = c.split(".");
			var b = c;
			if (f.length > 2) {
				return false
			} else {
				if (f[0] == "") {
					c = 0 + "." + f[1];
					if (d.get("tag") == "input") {
						d.set("value", c);
						d.set("realvalue", c)
					} else {
						var a = d.getElement("input");
						if ($chk(a)) {
							a.set("value", c);
							a.set("realvalue", c)
						}
					}
				}
				if (!this.reg.number.test(c)) {
					return false
				}
			}
			return true
		},
		fileDefine : function (f) {
			var d = this.getElValue(f);
			if (d == "") {
				return true
			}
			var a = d.lastIndexOf(".");
			var b = d.substring(a + 1, d.length);
			var c = f.get("filetype");
			if (c.contains(",")) {
				var g = c.split(",");
				if (g.contains(b)) {
					return true
				} else {
					return false
				}
			} else {
				if (c == b) {
					return true
				} else {
					return false
				}
			}
		},
		date : function (b) {
			var c;
			if (b.get("widget") == "calendar") {
				c = b.get("value")
			} else {
				c = this.getElValue(b)
			}
			if (c == "") {
				return true
			}
			var a = b.get("dataformat") || "yyyy-MM-dd";
			if (c.split(".").length == 2) {
				c = c.split(".")[0]
			}
			c = SwordDataFormat.formatStringToString(c, "yyyy-MM-dd HH:mm:ss", a);
			if (!SwordDataFormat.isDate(c, a)) {
				return false
			} else {
				return true
			}
		},
		userDefineFunction : null,
		elafter : function (d, c, f) {
			var b = d.getNext("div.swordform_field_valiwrap") || d.valWrapDiv;
			if (!b) {
				return
			}
			var g = b.getElement("div.swordform_fieldimg_nomal");
			var a = b.getElement("div[name='msgText']");
			if ($defined(d.get("ruleType"))) {
				g = d.getNext("div").getElement(".swordform_fieldimg_nomal")
			}
			if (g && a) {
				a.set("text", f);
				if (c) {
					g.removeClass("swordform_fieldimg_failed");
					g.removeEvents("mouseenter");
					this.elAfterHide(b)
				} else {
					g.addClass("swordform_fieldimg_failed");
					this.elAfterShow(b)
				}
			}
		},
		fldiv : function (c, b, d) {
			this.tooltips.createTip(c, d);
			var a = c.get("invaltag");
			if (b && a != "true") {
				c.removeClass("invalid");
				this.tooltips.hide()
			} else {
				c.addClass("invalid")
			}
		},
		showAlert : function (b, a, c) {
			if (a == true) {
				c = $defined(b.get("success")) ? b.get("success") : this.options.msg.success
			} else {
				c = $defined(b.get("error")) ? b.get("error") : this.options.msg.error
			}
			alert(c)
		},
		showIntimeMes : function (a, b) {
			this.tooltips.createTip(a, b)
		},
		showIntimeError : function (a, b) {
			a.addClass("invalid");
			this.tooltips.createTip(a, b)
		},
		showIntimeCorrect : function (a, b) {
			a.removeClass("invalid");
			this.tooltips.hide()
		},
		intime : function (a, b, c) {
			this.fldiv(a, b, c)
		},
		intimeValidate : function (a) {
			var c = this.doValidate(a);
			var b = c.state;
			var d = c.msg;
			this.showIntimeMes(a, d);
			if (!b) {
				this.showIntimeError(a, d)
			} else {
				this.showIntimeCorrect(a, d)
			}
		},
		intimeValidate_Biz : function (a, c, b) {
			this.showIntimeMes(a, c);
			if (!b) {
				this.showIntimeError(a, c)
			} else {
				this.showIntimeCorrect(a, c)
			}
		},
		clearElTip : function (a) {
			this.tooltips.hide()
		},
		elAfterShow : function (a) {
			a.setStyle("display", "")
		},
		elAfterHide : function (a) {
			a.setStyle("display", "none")
		}
	});
if (typeof(TrimPath) == "undefined") {
	TrimPath = {}

}
(function () {
	var theEval = eval;
	var theString = String;
	var theArray = Array;
	if (TrimPath == null) {
		TrimPath = new Object()
	}
	if (TrimPath.TEST == null) {
		TrimPath.TEST = new Object()
	}
	var arrayUniq = function (arr) {
		var result = [];
		for (var i = 0; i < arr.length; i++) {
			if (arrayInclude(result, arr[i]) == false) {
				result.push(arr[i])
			}
		}
		return result
	};
	var arrayInclude = function (arr, val) {
		for (var j = 0; j < arr.length; j++) {
			if (arr[j] == val) {
				return true
			}
		}
		return false
	};
	var arrayCompact = function (arr) {
		var result = [];
		for (var i = 0; i < arr.length; i++) {
			if (arr[i] != null) {
				result.push(arr[i])
			}
		}
		return result
	};
	var simpleJson = function (fields, values) {
		var json = ["{"];
		for (var i = 0; i < fields.length; i++) {
			if (i > 0) {
				json.push(",")
			}
			json.push(fields[i]);
			json.push(":");
			if (values[i]) {
				json.push('"');
				json.push(values[i].replace(/(["\\])/g, "\\$1").replace(/\r/g, "").replace(/\n/g, "\\n"));
				json.push('"')
			} else {
				json.push(null)
			}
		}
		json.push("}");
		return json.join("")
	};
	var hashKeys = function (object) {
		var keys = [];
		for (var property in object) {
			keys.push(property)
		}
		return keys
	};
	var hashValues = function (object) {
		var values = [];
		for (var property in object) {
			values.push(object[property])
		}
		return values
	};
	var strip = function (str) {
		return str.replace(/^\s+/, "").replace(/\s+$/, "")
	};
	TrimPath.makeQueryLang_etc = {};
	TrimPath.makeQueryLang_etc.Error = function (message, stmt) {
		this.message = message;
		this.stmt = stmt
	};
	TrimPath.makeQueryLang_etc.Error.prototype.toString = function () {
		return ("TrimPath query Error in " + (this.stmt != null ? this.stmt : "[unknown]") + ": " + this.message)
	};
	var TODO = function () {
		throw "currently unsupported"
	};
	var USAGE = function () {
		throw "incorrect keyword usage"
	};
	var QueryLang = function () {};
	TrimPath.makeQueryLang = function (tableInfos, etc) {
		if (etc == null) {
			etc = TrimPath.makeQueryLang_etc
		}
		var aliasArr = [];
		var aliasReg = function (aliasKey, scope, obj) {
			if (scope[aliasKey] != null) {
				throw new etc.Error("alias redefinition: " + aliasKey)
			}
			aliasArr.push({
				aliasKey : aliasKey,
				scope : scope,
				orig : scope[aliasKey]
			});
			scope[aliasKey] = obj;
			return obj
		};
		var queryLang = new QueryLang();
		var checkArgs = function (args, minLength, maxLength, name, typeCheck) {
			args = cleanArray(args);
			if (minLength == null) {
				minLength = 1
			}
			if (args == null || args.length < minLength) {
				throw new etc.Error("not enough arguments for " + name)
			}
			if (maxLength != null && args.length > maxLength) {
				throw new etc.Error("too many arguments for " + name)
			}
			if (typeCheck != null && typeCheck != "undefined") {
				for (var k in args) {
					if ($type(args[k]) != "function" && ($type(args[k]) == $type(typeCheck))) {
						throw new etc.Error("wrong type for " + args[k] + " to " + name)
					}
				}
			}
			return args
		};
		var sql_date_to_js_date = function (data) {
			if (typeof data == "string" && data.match(/\d{4}-\d{1,2}-\d{1,2}/)) {
				var dateArr = data.match(/\d{4}-\d{1,2}-\d{1,2}/)[0].split("-");
				var date = new Date(parseInt(dateArr[0], 10), (parseInt(dateArr[1], 10) - 1), parseInt(dateArr[2], 10));
				return date
			}
			return data
		};
		var data_insertion = function (table_info, field_name, data, column_ref) {
			if (table_info[field_name]) {
				var data = eval(data);
				if (table_info[field_name].type && table_info[field_name].type == "Number") {
					data = Number(data, 10)
				} else {
					if (table_info[field_name].type && table_info[field_name].type == "Date") {
						data = sql_date_to_js_date(data)
					}
				}
				column_ref[field_name] = data
			}
		};
		var NodeType = {
			select : function (args) {
				var columns = [];
				var nodes = {
					from : null,
					where : null,
					groupBy : null,
					having : null,
					orderBy : null,
					limit : null
				};
				for (var i = 0; i < args.length; i++) {
					var arg = args[i];
					var argIsNode = false;
					for (var nodeTypeName in nodes) {
						if (arg instanceof NodeType[nodeTypeName]) {
							if (nodes[nodeTypeName] != null) {
								throw new etc.Error("too many " + nodeTypeName.toUpperCase() + " clauses")
							}
							nodes[nodeTypeName] = arg;
							argIsNode = true;
							break
						}
					}
					if (argIsNode == false) {
						columns.push(arg)
					}
				}
				columns = checkArgs(columns, 1, null, "COLUMNS");
				if (nodes.from == null) {
					throw new etc.Error("missing FROM clause")
				}
				var joinDriver = null;
				var joinFilter = null;
				var whereFilter = null;
				var columnConvertor = null;
				var orderByComparator = null;
				var groupByCalcValues = null;
				var havingFilter = null;
				var typeConverter = function (results) {
					for (var i = 0; i < results.length; i++) {
						var result = results[i];
						for (var attr in result) {
							var value = result[attr];
							if (value instanceof Date) {
								results[i][attr] = dateToString(value)
							}
						}
					}
				};
				this.prepareFilter = function () {
					if (joinDriver == null) {
						joinDriver = compileJoinDriver(nodes.from.tables)
					}
					if (joinFilter == null) {
						joinFilter = compileFilter(compileFilterForJoin, nodes.from.tables)
					}
					if (whereFilter == null) {
						whereFilter = compileFilter(compileFilterForWhere, nodes.from.tables, nodes.where != null ? nodes.where.exprs : null)
					}
					if (groupByCalcValues == null && nodes.groupBy != null) {
						groupByCalcValues = compileGroupByCalcValues(nodes.from.tables, nodes.groupBy.exprs)
					}
					if (havingFilter == null && nodes.having != null) {
						havingFilter = compileFilter(compileFilterForWhere, [], nodes.having.exprs, {
								aliasOnly : true
							})
					}
					if (columnConvertor == null) {
						columnConvertor = compileColumnConvertor(nodes.from.tables, columns)
					}
					if (orderByComparator == null && nodes.orderBy != null) {
						orderByComparator = compileOrderByComparator(nodes.orderBy.exprs)
					}
				};
				this.filter = function (dataTables, bindings, params) {
					this.prepareFilter();
					if (bindings == null) {
						bindings = {}

					}
					if (params == null) {
						params = {}

					}
					var resultOfFromWhere = joinDriver(dataTables, joinFilter, whereFilter, bindings);
					if (groupByCalcValues != null) {
						for (var i = 0; i < resultOfFromWhere.length; i++) {
							resultOfFromWhere[i].groupByValues = groupByCalcValues.apply(null, resultOfFromWhere[i])
						}
						resultOfFromWhere.sort(groupByComparator)
					}
					if (params.return_reference) {
						return resultOfFromWhere
					}
					var groupByAccum = {};
					var groupByFuncs = {
						SUM : function (key, val) {
							groupByAccum[key] = zeroDefault(groupByAccum[key]) + zeroDefault(val);
							return groupByAccum[key]
						},
						COUNT : function (key) {
							groupByAccum[key] = zeroDefault(groupByAccum[key]) + 1;
							return groupByAccum[key]
						},
						AVG : function (key, val) {
							return groupByFuncs.SUM(key, val) / groupByFuncs.COUNT("_COUNT" + key)
						}
					};
					var result = [],
					prevItem = null,
					currItem;
					for (var i = 0; i < resultOfFromWhere.length; i++) {
						currItem = resultOfFromWhere[i];
						currItem[0] = groupByFuncs;
						if (prevItem != null && groupByComparator(prevItem, currItem) != 0) {
							if (havingFilter == null || havingFilter(prevItem.record) == true) {
								result.push(prevItem.record)
							}
							groupByAccum = {}

						}
						currItem.record = columnConvertor.apply(null, currItem.concat([params.with_table]));
						prevItem = currItem
					}
					if (prevItem != null && (havingFilter == null || havingFilter(prevItem.record) == true)) {
						result.push(prevItem.record)
					}
					if (orderByComparator != null) {
						result.sort(orderByComparator)
					}
					if (nodes.limit != null) {
						if (nodes.limit.total == 0) {
							return []
						}
						var start = (nodes.limit.offset != null ? nodes.limit.offset : 0);
						result = result.slice(start, start + (nodes.limit.total > 0 ? nodes.limit.total : result.length))
					}
					return result
				};
				setSSFunc(this, function () {
					var sqlArr = ["SELECT", map(columns, toSqlWithAlias).join(", "), nodes.from.toSql()];
					if (nodes.where != null) {
						sqlArr.push(nodes.where.toSql())
					}
					if (nodes.groupBy != null) {
						sqlArr.push(nodes.groupBy.toSql())
					}
					if (nodes.having != null) {
						sqlArr.push(nodes.having.toSql())
					}
					if (nodes.orderBy != null) {
						sqlArr.push(nodes.orderBy.toSql())
					}
					if (nodes.limit != null) {
						sqlArr.push(nodes.limit.toSql())
					}
					return sqlArr.join(" ")
				});
				for (var i = 0; i < aliasArr.length; i++) {
					var aliasItem = aliasArr[i];
					aliasItem.scope[aliasItem.aliasKey] = aliasItem.orig
				}
				aliasArr = []
			},
			insert : function (args) {
				var table_info = args[0];
				var object = args[1];
				this.filter = function (dataTables, bindings) {
					var table_name = table_info[".name"];
					if (!dataTables[table_name]) {
						dataTables[table_name] = []
					}
					dataTables[table_name].push({});
					for (var field_name in object) {
						data_insertion(table_info, field_name, object[field_name], dataTables[table_name][dataTables[table_name].length - 1])
					}
					return true
				};
				setSSFunc(this, function () {
					var sqlArr = ["INSERT INTO", table_info.toSql(), "(" + hashKeys(object).join(", ") + ")", "VALUES", "(" + hashValues(object).join(", ") + ")"];
					return sqlArr.join(" ")
				})
			},
			update : function (args) {
				var from_node = args[0];
				var assignments = args[1];
				var where_node = args[2];
				this.filter = function (dataTables, bindings) {
					var table_info = from_node.tables[0];
					var resultOfFromWhere = queryLang.SELECT(from_node, where_node, 1).filter(dataTables, null, {
							return_reference : true
						});
					for (var i = 0; i < resultOfFromWhere.length; i++) {
						var object = resultOfFromWhere[i][1];
						for (var field in assignments) {
							var fieldSplit = field.split(".");
							var field_name = field;
							if (fieldSplit.length == 2) {
								field_name = fieldSplit[1]
							}
							data_insertion(table_info, field_name, assignments[field], object)
						}
					}
					return true
				};
				setSSFunc(this, function () {
					var sqlArr = ["UPDATE", from_node.toSql()];
					var assignmentsArr = [];
					for (var attr in assignments) {
						assignmentsArr.push(attr + "=" + assignments[attr])
					}
					sqlArr.push(assignmentsArr.join(", "));
					if (where_node != null) {
						sqlArr.push(where_node.toSql())
					}
					return sqlArr.join(" ")
				})
			},
			destroy : function (args) {
				var select_node = args[0];
				this.filter = function (dataTables, bindings) {
					var resultOfFromWhere = select_node.filter(dataTables, null, {
							return_reference : true
						});
					for (var i = 0; i < resultOfFromWhere.length; i++) {
						var record = resultOfFromWhere[i];
						for (var j = 1; j < record.length; j++) {
							var object = record[j];
							for (var attr in object) {
								delete object[attr]
							}
						}
					}
					for (var table_name in dataTables) {
						var table = dataTables[table_name];
						for (var i = 0; i < table.length; i++) {
							if (hashKeys(table[i]).length == 0) {
								delete table[i]
							}
						}
					}
					for (var table_name in dataTables) {
						dataTables[table_name] = arrayCompact(dataTables[table_name])
					}
					return true
				};
				setSSFunc(this, function () {
					var sqlArr = ["DELETE", select_node.toSql()];
					return sqlArr.join(" ").replace(/SELECT\s/, "")
				})
			},
			from : function (tables) {
				this.tables = checkArgs(tables, 1, null, "FROM", NodeType.tableDef)
			},
			where : function (exprs) {
				this.exprs = checkArgs(exprs, 1, null, "WHERE", NodeType.expression)
			},
			groupBy : function (exprs) {
				this.exprs = checkArgs(exprs, 1, null, "GROUP_BY")
			},
			having : function (exprs) {
				this.exprs = checkArgs(exprs, 1, null, "HAVING", NodeType.expression)
			},
			orderBy : function (exprs) {
				this.exprs = checkArgs(exprs, 1, null, "ORDER_BY")
			},
			expression : function (args, name, opFix, sqlText, minArgs, maxArgs, jsText, alias) {
				var theExpr = this;
				this.args = checkArgs(args, minArgs, maxArgs, name);
				this[".name"] = name;
				this[".alias"] = alias != null ? alias : name;
				this.opFix = opFix;
				this.sqlText = sqlText != null ? sqlText : this[".name"];
				this.jsText = jsText != null ? jsText : this.sqlText;
				this.AS = function (aliasArg) {
					this[".alias"] = this.ASC[".alias"] = this.DESC[".alias"] = aliasArg;
					return aliasReg(aliasArg, queryLang, this)
				};
				this.ASC = setSSFunc({
						".name" : name,
						".alias" : theExpr[".alias"],
						order : "ASC"
					}, function () {
						return theExpr[".alias"] + " ASC"
					});
				this.DESC = setSSFunc({
						".name" : name,
						".alias" : theExpr[".alias"],
						order : "DESC"
					}, function () {
						return theExpr[".alias"] + " DESC"
					});
				this.COLLATE = TODO
			},
			aggregate : function () {
				NodeType.expression.apply(this, arguments)
			},
			limit : function (offset, total) {
				if (total == null) {
					this.total = cleanString(offset)
				} else {
					this.total = cleanString(total);
					this.offset = cleanString(offset)
				}
			},
			tableDef : function (name, columnInfos, alias) {
				var mootoolsHashObj = $H();
				this[".name"] = name;
				this[".alias"] = alias != null ? alias : name;
				this[".allColumns"] = [];
				for (var columnName in columnInfos) {
					if (!$chk(mootoolsHashObj[columnName])) {
						this[columnName] = new NodeType.columnDef(columnName, columnInfos[columnName], this);
						this[".allColumns"].push(this[columnName])
					}
				}
				setSSFunc(this, function () {
					return name
				});
				this.AS = function (alias) {
					return aliasReg(alias, queryLang, new NodeType.tableDef(name, columnInfos, alias))
				};
				this.ALL = new NodeType.columnDef("*", null, this);
				this.ALL.AS = null
			},
			columnDef : function (name, columnInfo, tableDef, alias) {
				var theColumnDef = this;
				this[".name"] = name;
				this[".alias"] = alias != null ? alias : name;
				this.tableDef = tableDef;
				setSSFunc(this, function (flags) {
					if (flags != null && flags.aliasOnly == true) {
						return this[".alias"]
					}
					return tableDef != null ? ((tableDef[".alias"]) + "." + name) : name
				});
				this.AS = function (aliasArg) {
					return aliasReg(aliasArg, queryLang, new NodeType.columnDef(name, columnInfo, tableDef, aliasArg))
				};
				if (columnInfo && columnInfo.type) {
					this.type = columnInfo.type
				} else {
					this.type = "String"
				}
				this.ASC = setSSFunc({
						".name" : name,
						".alias" : theColumnDef[".alias"],
						tableDef : tableDef,
						order : "ASC"
					}, function () {
						return theColumnDef.toSql() + " ASC"
					});
				this.DESC = setSSFunc({
						".name" : name,
						".alias" : theColumnDef[".alias"],
						tableDef : tableDef,
						order : "DESC"
					}, function () {
						return theColumnDef.toSql() + " DESC"
					});
				this.COLLATE = TODO
			},
			join : function (joinType, tableDef) {
				var theJoin = this;
				this.joinType = joinType;
				this.fromSeparator = " " + joinType + " JOIN ";
				for (var k in tableDef) {
					this[k] = tableDef[k]
				}
				this.ON = function () {
					theJoin.ON_exprs = checkArgs(arguments, 1, null, "ON");
					return theJoin
				};
				this.USING = function () {
					theJoin.USING_exprs = cleanArray(arguments, false);
					return theJoin
				};
				this.fromSuffix = function () {
					if (theJoin.ON_exprs != null) {
						return (" ON " + map(theJoin.ON_exprs, toSql).join(" AND "))
					}
					if (theJoin.USING_exprs != null) {
						return (" USING (" + theJoin.USING_exprs.join(", ") + ")")
					}
					return ""
				}
			}
		};
		var setSSFunc = function (obj, func) {
			obj.toSql = obj.toJs = obj.toString = func;
			return obj
		};
		setSSFunc(NodeType.from.prototype, function () {
			var sqlArr = ["FROM "];
			for (var i = 0; i < this.tables.length; i++) {
				if (i > 0) {
					var sep = this.tables[i].fromSeparator;
					if (sep == null) {
						sep = ", "
					}
					sqlArr.push(sep)
				}
				sqlArr.push(toSqlWithAlias(this.tables[i]));
				if (this.tables[i].fromSuffix != null) {
					sqlArr.push(this.tables[i].fromSuffix())
				}
			}
			return sqlArr.join("")
		});
		setSSFunc(NodeType.where.prototype, function () {
			return "WHERE " + map(this.exprs, toSql).join(" AND ")
		});
		setSSFunc(NodeType.orderBy.prototype, function () {
			return "ORDER BY " + map(this.exprs, toSql).join(", ")
		});
		setSSFunc(NodeType.groupBy.prototype, function () {
			return "GROUP BY " + map(this.exprs, toSql).join(", ")
		});
		setSSFunc(NodeType.having.prototype, function () {
			return "HAVING " + map(this.exprs, toSql, {
				aliasOnly : true
			}).join(" AND ")
		});
		setSSFunc(NodeType.limit.prototype, function () {
			return "LIMIT " + (this.total < 0 ? "ALL" : this.total) + (this.offset != null ? (" OFFSET " + this.offset) : "")
		});
		var makeToFunc = function (toFunc, opText) {
			return function (flags) {
				if (flags != null && flags.aliasOnly == true && this[".alias"] != this[".name"]) {
					return this[".alias"]
				}
				if (this.opFix < 0) {
					return this[opText] + " (" + map(this.args, toFunc, flags).join(") " + this[opText] + " (") + ")"
				}
				if (this.opFix > 0) {
					return "(" + map(this.args, toFunc, flags).join(") " + this[opText] + " (") + ") " + this[opText]
				}
				return "(" + map(this.args, toFunc, flags).join(") " + this[opText] + " (") + ")"
			}
		};
		NodeType.expression.prototype.toSql = makeToFunc(toSql, "sqlText");
		NodeType.expression.prototype.toJs = makeToFunc(toJs, "jsText");
		NodeType.aggregate.prototype = new NodeType.expression([], null, null, null, 0);
		NodeType.aggregate.prototype.toJs = function (flags) {
			if (flags != null && flags.aliasOnly == true && this[".alias"] != this[".name"]) {
				return this[".alias"]
			}
			return this.jsText + " ('" + this[".alias"] + "', (" + map(this.args, toJs).join("), (") + "))"
		};
		NodeType.join.prototype = new NodeType.tableDef();
		NodeType.whereSql = function (sql) {
			this.exprs = [new NodeType.rawSql(sql)]
		};
		NodeType.whereSql.prototype = new NodeType.where([new NodeType.expression([0], null, 0, null, 0, null, null, null)]);
		NodeType.havingSql = function (sql) {
			this.exprs = [new NodeType.rawSql(sql)]
		};
		NodeType.havingSql.prototype = new NodeType.having([new NodeType.expression([0], null, 0, null, 0, null, null, null)]);
		NodeType.rawSql = function (sql) {
			this.sql = sql
		};
		NodeType.rawSql.prototype.toSql = function (flags) {
			return this.sql
		};
		NodeType.rawSql.prototype.toJs = function (flags) {
			var js = this.sql;
			js = js.replace(/ AND /g, " && ");
			js = js.replace(/ OR /g, " || ");
			js = js.replace(/ = /g, " == ");
			js = js.replace(/ IS NULL/g, " == null");
			js = js.replace(/ IS NOT NULL/g, " != null");
			js = js.replace(/ NOT /g, " ! ");
			var LIKE_regex = /(\S+)\sLIKE\s'(\S+)'/g;
			var matchArr;
			while (matchArr = LIKE_regex.exec(js)) {
				matchArr[2] = matchArr[2].replace(/%/, ".*");
				js = js.replace(LIKE_regex, "$1.match(/" + matchArr[2] + "/)")
			}
			var DATE_regex = /'(\d{4})-(\d{1,2})-(\d{1,2})'/g;
			while (matchArr = DATE_regex.exec(js)) {
				var dateArr = [parseInt(matchArr[1], 10).toString(), (parseInt(matchArr[2], 10) - 1).toString(), parseInt(matchArr[3], 10).toString()];
				var replacement = "(new Date(" + dateArr.join(", ") + ").valueOf())";
				js = js.replace(matchArr[0], replacement)
			}
			return js
		};
		var keywords = {
			SELECT_ALL : function () {
				return new NodeType.select(arguments)
			},
			SELECT_DISTINCT : TODO,
			FROM : function () {
				return new NodeType.from(arguments)
			},
			WHERE : function () {
				return new NodeType.where(arguments)
			},
			AND : function () {
				return new NodeType.expression(arguments, "AND", 0, null, 1, null, "&&")
			},
			OR : function () {
				return new NodeType.expression(arguments, "OR", 0, null, 1, null, "||")
			},
			NOT : function () {
				return new NodeType.expression(arguments, "NOT", -1, null, 1, 1, "!")
			},
			EQ : function () {
				return new NodeType.expression(arguments, "EQ", 0, "=", 2, 2, "==")
			},
			NEQ : function () {
				return new NodeType.expression(arguments, "NEQ", 0, "!=", 2, 2)
			},
			LT : function () {
				return new NodeType.expression(arguments, "LT", 0, "<", 2, 2)
			},
			GT : function () {
				return new NodeType.expression(arguments, "GT", 0, ">", 2, 2)
			},
			LTE : function () {
				return new NodeType.expression(arguments, "LTE", 0, "<=", 2, 2)
			},
			GTE : function () {
				return new NodeType.expression(arguments, "GTE", 0, ">=", 2, 2)
			},
			IS_NULL : function () {
				return new NodeType.expression(arguments, "IS_NULL", 1, "IS NULL", 1, 1, "== null")
			},
			IS_NOT_NULL : function () {
				return new NodeType.expression(arguments, "IS_NOT_NULL", 1, "IS NOT NULL", 1, 1, "!= null")
			},
			ADD : function () {
				return new NodeType.expression(arguments, "ADD", 0, "+", 2, null)
			},
			LIKE : function () {
				return new NodeType.expression(arguments, "LIKE", 0, "LIKE", 2, 2, "match")
			},
			BETWEEN : TODO,
			AS : USAGE,
			IN : TODO,
			ON : USAGE,
			GROUP_BY : function () {
				return new NodeType.groupBy(arguments)
			},
			ORDER_BY : function () {
				return new NodeType.orderBy(arguments)
			},
			WHERE_SQL : function (sql) {
				return new NodeType.whereSql(sql)
			}
		};
		keywords.SELECT = keywords.SELECT_ALL;
		for (var k in keywords) {
			queryLang[k] = keywords[k]
		}
		tableInfos.forEach(function (v, k) {
			queryLang[k] = new NodeType.tableDef(k, v)
		});
		return queryLang
	};
	var compileJoinDriver = function (tables) {
		var funcText = ["var TrimPath_query_tmpJD = function(dataTables, joinFilter, whereFilter, bindings) {", "var result = [], filterArgs = [ bindings ];"];
		for (var i = 0; i < tables.length; i++) {
			funcText.push("var T" + i + " = dataTables['" + tables[i][".name"] + "'] || [];")
		}
		for (var i = 0; i < tables.length; i++) {
			funcText.push("for (var t" + i + " = 0; t" + i + " < T" + i + ".length; t" + i + "++) {");
			funcText.push("var resultLength" + i + " = result.length;");
			funcText.push("filterArgs[" + (i + 1) + "] = T" + i + "[t" + i + "];")
		}
		funcText.push("if ((joinFilter == null || joinFilter.apply(null, filterArgs) == true) && ");
		funcText.push("    (whereFilter == null || whereFilter.apply(null, filterArgs) == true))");
		funcText.push("result.push(filterArgs.slice(0));");
		for (var i = tables.length - 1; i >= 0; i--) {
			funcText.push("}");
			if (i >= 1 && tables[i].joinType == "LEFT OUTER") {
				funcText.push("if (resultLength" + (i - 1) + " == result.length) {");
				for (var j = i; j < tables.length; j++) {
					funcText.push("filterArgs[" + (j + 1) + "] = ")
				}
				funcText.push("{}; if (whereFilter == null || whereFilter.apply(null, filterArgs) == true) result.push(filterArgs.slice(0)); }")
			}
		}
		funcText.push("return result; }; TrimPath_query_tmpJD");
		return theEval(funcText.join(""))
	};
	var compileFilter = function (bodyFunc, tables, whereExpressions, flags) {
		var funcText = ["var TrimPath_query_tmpWF = function(_BINDINGS"];
		for (var i = 0; i < tables.length; i++) {
			funcText.push(", " + tables[i][".alias"])
		}
		funcText.push("){ with(_BINDINGS) {");
		bodyFunc(funcText, tables, whereExpressions, flags);
		funcText.push("return true; }}; TrimPath_query_tmpWF");
		return theEval(funcText.join(""))
	};
	var compileFilterForJoin = function (funcText, tables, whereExpressions, flags) {
		for (var i = 0; i < tables.length; i++) {
			if (tables[i].joinType != null) {
				if (tables[i].ON_exprs != null || tables[i].USING_exprs != null) {
					funcText.push("if (!(");
					if (tables[i].ON_exprs != null && tables[i].ON_exprs[0].exprs != null) {
						funcText.push(tables[i].ON_exprs[0].exprs[0].toJs())
					} else {
						if (tables[i].ON_exprs != null) {
							funcText.push(map(tables[i].ON_exprs, toJs).join(" && "))
						}
					}
					if (tables[i].USING_exprs != null) {
						funcText.push(map(tables[i].USING_exprs, function (col) {
								return "(" + tables[i - 1][".alias"] + "." + col + " == " + tables[i][".alias"] + "." + col + ")"
							}).join(" && "))
					}
					funcText.push(")) return false;")
				}
			}
		}
	};
	var compileFilterForWhere = function (funcText, tables, whereExpressions, flags) {
		if (whereExpressions != null) {
			funcText.push("if (!((");
			for (var i = 0; i < whereExpressions.length; i++) {
				if (i > 0) {
					funcText.push(") && (")
				}
				funcText.push(toJs(whereExpressions[i], flags))
			}
			funcText.push("))) return false;")
		}
	};
	var compileColumnConvertor = function (tables, columnExpressions) {
		var funcText = ["var TrimPath_query_tmpCC = function(_BINDINGS, "];
		var table_aliases = [];
		for (var i = 0; i < tables.length; i++) {
			table_aliases.push(tables[i][".alias"])
		}
		funcText.push(arrayUniq(table_aliases).join(", "));
		funcText.push(", with_table){ with(_BINDINGS) {");
		funcText.push("var _RESULT = {};");
		funcText.push("if(with_table) {");
		compileColumnConvertorHelper(funcText, columnExpressions, true);
		funcText.push("} else {");
		compileColumnConvertorHelper(funcText, columnExpressions, false);
		funcText.push("}");
		funcText.push("return _RESULT; }}; TrimPath_query_tmpCC");
		return theEval(funcText.join(""))
	};
	var test = function (stuff) {
		var i
	};
	var compileColumnConvertorHelper = function (funcText, columnExpressions, with_table) {
		for (var i = 0; i < columnExpressions.length; i++) {
			var columnExpression = columnExpressions[i];
			if (columnExpression[".name"] == "*") {
				compileColumnConvertorHelper(funcText, columnExpression.tableDef[".allColumns"], with_table)
			} else {
				funcText.push("_RESULT['");
				if (with_table == true) {
					funcText.push(columnExpression.toString())
				} else {
					funcText.push(columnExpression[".alias"])
				}
				funcText.push("'] = (");
				funcText.push(toJs(columnExpression));
				funcText.push(");")
			}
		}
	};
	var dateToString = function (date) {
		if (typeof date == "object") {
			return [date.getFullYear(), "-", (date.getMonth() + 1), "-", date.getDate()].join("")
		}
		if (date == null) {
			return null
		}
	};
	var compileOrderByComparator = function (orderByExpressions) {
		var funcText = ["var TrimPath_query_tmpOC = function(A, B) { var a, b; "];
		for (var i = 0; i < orderByExpressions.length; i++) {
			var orderByExpression = orderByExpressions[i];
			if (orderByExpression.tableDef) {
				funcText.push("a = A['" + orderByExpression[".alias"] + "'] || A['" + orderByExpression.tableDef[".alias"] + "." + orderByExpression[".alias"] + "'] || '';");
				funcText.push("b = B['" + orderByExpression[".alias"] + "'] || B['" + orderByExpression.tableDef[".alias"] + "." + orderByExpression[".alias"] + "'] || '';")
			} else {
				funcText.push("a = A['" + orderByExpression[".alias"] + "'] || '';");
				funcText.push("b = B['" + orderByExpression[".alias"] + "'] || '';")
			}
			var sign = (orderByExpression.order == "DESC" ? -1 : 1);
			funcText.push("if (a.valueOf() < b.valueOf()) return " + (sign * -1) + ";");
			funcText.push("if (a.valueOf() > b.valueOf()) return " + (sign * 1) + ";")
		}
		funcText.push("return 0; }; TrimPath_query_tmpOC");
		return theEval(funcText.join(""))
	};
	var compileGroupByCalcValues = function (tables, groupByExpressions) {
		var funcText = ["var TrimPath_query_tmpGC = function(_BINDINGS"];
		for (var i = 0; i < tables.length; i++) {
			funcText.push(", " + tables[i][".alias"])
		}
		funcText.push("){ var _RESULT = [];");
		for (var i = 0; i < groupByExpressions.length; i++) {
			funcText.push("_RESULT.push(");
			funcText.push(toJs(groupByExpressions[i]));
			funcText.push(");")
		}
		funcText.push("return _RESULT; }; TrimPath_query_tmpGC");
		return theEval(funcText.join(""))
	};
	var groupByComparator = function (a, b) {
		return arrayCompare(a.groupByValues, b.groupByValues)
	};
	var arrayCompare = function (x, y) {
		if (x == null || y == null) {
			return -1
		}
		for (var i = 0; i < x.length && i < y.length; i++) {
			if (x[i] < y[i]) {
				return -1
			}
			if (x[i] > y[i]) {
				return 1
			}
		}
		return 0
	};
	var toSqlWithAlias = function (obj, flags) {
		var res = toSql(obj, flags);
		if (obj[".alias"] != null && obj[".alias"] != obj[".name"]) {
			return res + " AS " + obj[".alias"]
		}
		return res
	};
	var toSql = function (obj, flags) {
		return toX(obj, "toSql", flags)
	};
	var toJs = function (obj, flags) {
		return toX(obj, "toJs", flags)
	};
	var toX = function (obj, funcName, flags) {
		if (typeof(obj) == "object" && obj[funcName] != null) {
			return obj[funcName].call(obj, flags)
		}
		return theString(obj)
	};
	var zeroDefault = function (x) {
		return (x != null ? x : 0)
	};
	var map = function (arr, func, arg2) {
		for (var result = [], i = 0; i < arr.length; i++) {
			result.push(func(arr[i], arg2))
		}
		return result
	};
	var cleanArray = function (src, quotes) {
		for (var result = [], i = 0; i < src.length; i++) {
			result.push(cleanString(src[i], quotes))
		}
		return result
	};
	var cleanString = TrimPath.TEST.cleanString = function (src, quotes) {
		if (src instanceof theString || typeof(src) == "string") {
			src = theString(src).replace(/\\/g, "\\\\").replace(/'/g, "\\'");
			if (quotes != false) {
				src = "'" + src + "'"
			}
		}
		return src
	};
	var findClause = function (str, regexp) {
		var clauseEnd = str.search(regexp);
		if (clauseEnd < 0) {
			clauseEnd = str.length
		}
		return str.substring(0, clauseEnd)
	};
	QueryLang.prototype.parseSQL = function (sqlQueryIn, paramsArr) {
		var sqlQuery = sqlQueryIn.replace(/\n/g, " ").replace(/\r/g, "");
		if (paramsArr != null) {
			if (paramsArr instanceof theArray == false) {
				paramsArr = [paramsArr]
			}
			var sqlParts = sqlQuery.split(" ?");
			for (var i = 0; i < sqlParts.length - 1; i++) {
				sqlParts[i] = sqlParts[i] + " " + cleanString(paramsArr[i], true)
			}
			sqlQuery = sqlParts.join("")
		}
		sqlQuery = sqlQuery.replace(/ AS ([_a-zA-z0-9]+)/g, ".AS('$1')");
		var err = function (errMsg) {
			throw ("[ERROR: " + errMsg + " in query: " + sqlQueryIn + "]")
		};
		var query_type = sqlQuery.split(/\s+/)[0];
		if (query_type == "DELETE") {
			query_type = "DESTROY"
		}
		if (!arrayInclude(["SELECT", "DESTROY", "UPDATE", "INSERT"], query_type)) {
			err("not a valid query type")
		}
		var strip_whitespace = function (str) {
			return str.replace(/\s+/g, "")
		};
		if (query_type == "SELECT" || query_type == "DESTROY") {
			var fromSplit = sqlQuery.substring(7).split(" FROM ");
			if (fromSplit.length != 2) {
				err("missing a FROM clause")
			}
			var columnsClause = fromSplit[0].replace(/\.\*/g, ".ALL");
			var remaining = fromSplit[1];
			var fromClause = findClause(remaining, /\sWHERE\s|\sGROUP BY\s|\sHAVING\s|\sORDER BY\s|\sLIMIT/);
			var fromTableClause = findClause(fromClause, /\sLEFT OUTER JOIN\s/);
			var fromTables = strip_whitespace(fromTableClause).split(",");
			remaining = remaining.substring(fromClause.length);
			var fromClauseSplit = fromClause.split(" LEFT OUTER JOIN ");
			var fromClauseParts = [fromClauseSplit[0]];
			var leftJoinComponents;
			for (var i = 1; i < fromClauseSplit.length; i++) {
				leftJoinComponents = /(\w+)\sON\s(.+)/.exec(fromClauseSplit[i]);
				fromTables.push(leftJoinComponents[1]);
				fromClauseParts.push("(" + leftJoinComponents[1] + ').ON(WHERE_SQL("' + leftJoinComponents[2] + '"))')
			}
			fromClause = fromClauseParts.join(", LEFT_OUTER_JOIN");
			if (strip_whitespace(columnsClause) == "*") {
				var new_columns = [];
				for (var i = 0; i < fromTables.length; i++) {
					new_columns.push(fromTables[i] + ".ALL")
				}
				columnsClause = columnsClause.replace(/\*/, new_columns.join(", "))
			}
			var whereClause = findClause(remaining, /\sGROUP BY\s|\sHAVING\s|\sORDER BY\s|\sLIMIT/);
			remaining = remaining.substring(whereClause.length);
			var groupByClause = findClause(remaining, /\sHAVING\s|\sORDER BY\s|\sLIMIT /);
			remaining = remaining.substring(groupByClause.length);
			var havingClause = findClause(remaining, /\sORDER BY\s|\sLIMIT /);
			remaining = remaining.substring(havingClause.length);
			var orderByClause = findClause(remaining, /\sLIMIT /).replace(/\sASC/g, ".ASC").replace(/\sDESC/g, ".DESC");
			remaining = remaining.substring(orderByClause.length);
			var limitClause = remaining;
			var tql = ["SELECT(FROM(", fromClause, "), ", columnsClause];
			if (whereClause.length > 0) {
				tql.push(', WHERE_SQL("' + whereClause.substring(7) + '")')
			}
			if (groupByClause.length > 0) {
				tql.push(", GROUP_BY(" + groupByClause.substring(10) + ")")
			}
			if (havingClause.length > 0) {
				tql.push(', HAVING_SQL("' + havingClause.substring(8) + '")')
			}
			if (orderByClause.length > 0) {
				tql.push(", ORDER_BY(" + orderByClause.substring(10) + ")")
			}
			if (limitClause.length > 0) {
				tql.push(", LIMIT(" + limitClause.substring(7) + ")")
			}
			tql.push(")")
		} else {
			if (query_type == "INSERT") {
				var intoSplit = sqlQuery.substring(6).split(" INTO ");
				if (intoSplit.length != 2) {
					err("missing an INTO clause")
				}
				var insertion_regex = /^\s*(\w+)\s*\((.+)\)\s+VALUES\s+\((.+)\)/;
				var parsed_sql = intoSplit[1].match(insertion_regex);
				var table_name = parsed_sql[1];
				var fields = strip_whitespace(parsed_sql[2]).split(",");
				var values = parsed_sql[3].split(",");
				if (fields.length != values.length) {
					err("values and fields must have same number of elements")
				}
				tql = ["INSERT(", table_name, ",", simpleJson(fields, values), ")"]
			} else {
				if (query_type == "UPDATE") {
					var setSplit = sqlQuery.substring(7).split(" SET ");
					if (setSplit.length != 2) {
						err("missing a SET clause")
					}
					var fromClause = setSplit[0];
					var remaining = setSplit[1];
					var assignmentClause = findClause(remaining, /\sWHERE\s/);
					remaining = remaining.substring(assignmentClause.length);
					var whereClause = remaining;
					var assignmentArray = assignmentClause.split(",");
					var fields = [];
					var values = [];
					for (var i = 0; i < assignmentArray.length; i++) {
						var components = assignmentArray[i].split("=");
						fields.push(strip(components[0]));
						values.push(strip(components[1]))
					}
					var update_regex = /^UPDATE\s+(\w+)\s+SET\s+(\w+\s*=\s*\w+)/;
					var parsed_sql = sqlQuery.match(update_regex);
					var tql = ["UPDATE(FROM(", fromClause, "), ", simpleJson(fields, values)];
					tql.push(', WHERE_SQL("' + whereClause.substring(7) + '")');
					tql.push(")")
				}
			}
		}
		if (query_type == "DESTROY") {
			tql.unshift("DESTROY(");
			tql.push(")")
		}
		with (this) {
			return eval(tql.join(""))
		}
	}
})();
var $cache = {
	tableVersion : "",
	swfpath : jsR.rootPath + "swordweb/widgets/SwordClientCache",
	currentCacheObj : null,
	callback_func : function () {},
	tableName : "",
	querySql : "",
	isReady : false,
	QueueList : $H(),
	swordcacheInstance : null,
	cacheHash : $H(),
	cacheSqlHash : $H(),
	cacheFunc : $H(),
	batchget : function (l, k, g) {
		var c = [];
		var f = [];
		var d = $H();
		if ($cache.currentCacheObj == null) {
			$cache.currentCacheObj = top.$swfcacheobject
		}
		if ($cache.currentCacheObj) {
			l.each(function (p) {
				var m = p.T;
				var n = p.WN || "";
				var r = "";
				if ($chk(p.W)) {
					r = "SELECT T.* FROM " + m + " AS T WHERE " + p.W;
					$cache.cacheSqlHash.set(m, r)
				}
				$cache.currentCacheObj.get(m + "_version", function (t, s) {
					var q = $cache.currentCacheObj.getServerCache(m);
					if ($chk(q)) {
						if (parseInt(s) != parseInt(q)) {
							if (g == "tree") {
								f.push(m + "|" + p.DM + "|" + p.MC + "|" + p.PDM + "|" + n)
							} else {
								c.push(m)
							}
						} else {
							var u;
							if (g != "tree" && top.pc.swordCacheDataContainer) {
								u = top.pc.swordCacheDataContainer.get(m)
							}
							if (!$chk(u)) {
								if (g == "tree") {
									$cache.currentCacheObj.get(m + "_TREE", function (w, v) {
										if (w) {
											if ($chk(p.W)) {
												u = $cache.query(v, r, m)
											} else {
												u = JSON.decode(v)
											}
											d.set(m + (n ? "^" + n : ""), u)
										} else {
											f.push(m + "|" + p.DM + "|" + p.MC + "|" + p.PDM + "|" + n)
										}
									})
								} else {
									$cache.currentCacheObj.get(m, function (w, v) {
										if (w) {
											u = JSON.decode(v);
											d.set(m, u)
										} else {
											c.push(m)
										}
									})
								}
							} else {
								d.set(m, u.data)
							}
						}
					} else {
						if (g == "tree") {
							f.push(m + "|" + p.DM + "|" + p.MC + "|" + p.PDM + "|" + n)
						} else {
							c.push(m)
						}
					}
				})
			})
		}
		if (c.length != 0 || f.length != 0) {
			var a;
			var h;
			if (g == "tree") {
				a = "CacheCtrl_batchGetCacheDataForTree";
				h = f.join("#")
			} else {
				a = "CacheCtrl_batchGetCacheData";
				h = c.join("#")
			}
			var b = "ajax.sword?FromSwordLoading=true&ctrl=" + a + "&sName=" + a + "&rUUID=" + pc.getRandomUUID();
			if (jsR.config.SwordClientTiming || swordWebMonitor.getMonitorEnable()) {
				b = b + "&sDate=" + new Date().getTime()
			}
			$cache.swordajax({
				url : b,
				data : "tableNameList=" + h,
				onSuccess : function (p) {
					var n = JSON.decode(p);
					if (!$defined(n.getAttr)) {
						n.getAttr = pc.getAttrFunc
					}
					_pcSwordClientAJAXTiming("31", b, n.getAttr("sessionID"), "", a);
					if (n.exception) {
						if (n.ajaxErrorPage) {
							if (!n.exceptionMes) {
								n.exceptionMes = ""
							}
							var m = JSON.decode(n.ajaxErrorPopupParam.replace(/&apos;/g, "'")) || {
								titleName : "出错了！",
								width : 412,
								height : 450
							};
							var r = window.document;
							var q = 0;
							if (r.body && r.body.scrollTop) {
								q = r.body.scrollTop
							} else {
								if (r.documentElement && r.documentElement.scrollTop) {
									q = r.documentElement.scrollTop
								}
							}
							m.top = m.top + q;
							m.param = {
								win : window,
								data : n
							};
							swordAlertIframe(jsR.rootPath + "sword?ctrl=SwordPage_redirect&pagename=" + n.ajaxErrorPage, m, null)
						} else {
							this.alertError('<b><font color="red">出错了！</font></b><br><font color="blue" >错误名称</font> : ' + n.exceptionName + '  <br><font color="blue" >错误信息</font> : ' + n.exceptionMes + '<br><font color="blue" >调试信息</font> : ' + n.debugMes)
						}
					} else {
						n.data.each(function (w) {
							var v = w.name.split("^");
							var u = v[0];
							if (u == "sessionID") {
								return
							}
							var s = v[1];
							if (g != "tree") {
								var t = $cache.currentCacheObj.uncompress(w.value);
								if ($chk(t)) {
									var x = JSON.decode(t);
									$cache.currentCacheObj.set(u, t);
									d.set(u, x)
								}
							} else {
								x = w.data;
								$cache.currentCacheObj.set(u + "_TREE", JSON.encode(x));
								var y = $cache.cacheSqlHash.get(u);
								if ($chk(y)) {
									x = $cache.query(x, y, u)
								}
								d.set(u + "^" + v[2], x)
							}
							$cache.currentCacheObj.set(u + "_version", s);
							$cache.currentCacheObj.setServerCache(u, s)
						})
					}
					_pcSwordClientAJAXTiming("32", b, n.getAttr("sessionID"), "", a)
				},
				onFailure : function (m) {}

			})
		}
		k.call(this, d)
	},
	get : function (g, d, b) {
		var c = /FROM (\w+)\s*(WHERE)?/ig;
		if (g.indexOf("FROM") == -1) {
			g = "SELECT * FROM " + g
		}
		var a = g.match(c);
		this.tableName = RegExp.$1;
		this.callback_func = d;
		this.querySql = g;
		this.cacheSqlHash.set(this.tableName, g);
		this.cacheFunc.set(this.tableName, d);
		this.initCacheContainer(this.tableName);
		var f = this.cacheHash.get(this.tableName + "_version");
		if (f) {
			f.get(this.tableName + "_version", function (n, h, m) {
				if (n) {
					if ($chk(h)) {
						var l = f.getServerCache(m);
						if ($chk(l)) {
							if (parseInt(h) != l) {
								$cache.requestCacheData(m)
							} else {
								var k = $cache.cacheHash.get(m);
								k.get((b == "tree" ? m + "_TREE" : m), function (p, r) {
									var q = $cache.cacheFunc.get(m);
									if (p) {
										r = $cache.query(r, g, m);
										q(r, m)
									} else {
										$cache.requestCacheData(m)
									}
								})
							}
						} else {
							$cache.requestCacheData(m)
						}
					}
				} else {
					$cache.requestCacheData(m)
				}
			})
		}
	},
	swordajax : function (c) {
		var b = {
			url : null,
			method : "post",
			async : false,
			data : "",
			onSuccess : $empty,
			onFailure : $empty
		};
		var a = $extend(b, c);
		new Request(a).send(a.data)
	},
	requestCacheTableVersion : function (a) {
		var b = "tableName=" + a;
		$cache.swordajax({
			url : "ajax.sword?FromSwordLoading=true&ctrl=CacheCtrl_getCacheTableVersion",
			data : b,
			onSuccess : this.getVersionSuccess,
			onFailure : this.getVersionFail
		})
	},
	getVersionSuccess : function (a) {
		$cache.tableVersion = JSON.decode(a).data[0].value
	},
	getVersionFail : function (a) {
		alert("获取服务端缓存表版本信息失败!具体原因:" + a)
	},
	requestCacheData : function (a) {
		var b = "ajax.sword?FromSwordLoading=true&ctrl=CacheCtrl_getCacheData&sName=CacheCtrl_getCacheData&rUUID=" + pc.getRandomUUID();
		if (jsR.config.SwordClientTiming || swordWebMonitor.getMonitorEnable()) {
			b = b + "&sDate=" + new Date().getTime()
		}
		var c = "tableName=" + a;
		$cache.swordajax({
			url : b,
			data : c,
			onSuccess : function (h) {
				var f = JSON.decode(h);
				if (!$defined(f.getAttr)) {
					f.getAttr = pc.getAttrFunc
				}
				_pcSwordClientAJAXTiming("31", b, f.getAttr("sessionID"), "", "CacheCtrl_getCacheData");
				if (f.exception) {
					if (f.ajaxErrorPage) {
						if (!f.exceptionMes) {
							f.exceptionMes = ""
						}
						var d = JSON.decode(f.ajaxErrorPopupParam.replace(/&apos;/g, "'")) || {
							titleName : "出错了！",
							width : 412,
							height : 450
						};
						var n = window.document;
						var l = 0;
						if (n.body && n.body.scrollTop) {
							l = n.body.scrollTop
						} else {
							if (n.documentElement && n.documentElement.scrollTop) {
								l = n.documentElement.scrollTop
							}
						}
						d.top = d.top + l;
						d.param = {
							win : window,
							data : f
						};
						swordAlertIframe(jsR.rootPath + "sword?ctrl=SwordPage_redirect&pagename=" + f.ajaxErrorPage, d, null)
					} else {
						this.alertError('<b><font color="red">出错了！</font></b><br><font color="blue" >错误名称</font> : ' + f.exceptionName + '  <br><font color="blue" >错误信息</font> : ' + f.exceptionMes + '<br><font color="blue" >调试信息</font> : ' + f.debugMes)
					}
				} else {
					var g = f.data[0].name;
					var m = $cache.cacheSqlHash.get(g);
					var k = $cache.cacheFunc.get(g);
					k($cache.query($cache.init(h), m, g), g)
				}
				_pcSwordClientAJAXTiming("32", b, f.getAttr("sessionID"), "", "CacheCtrl_getCacheData")
			},
			onFailure : this.fail
		})
	},
	success : function (b) {
		var a = JSON.decode(b).data[0].name;
		var d = $cache.cacheSqlHash.get(a);
		var c = $cache.cacheFunc.get(a);
		c($cache.query($cache.init(b), d, a), a)
	},
	fail : function (a) {
		alert("请求缓存表出现错误,具体原因:" + a)
	},
	init : function (g, f) {
		var k = JSON.decode(g);
		var c = k.data[0].value;
		var a = this.uncompress(c);
		if (a != null) {
			var f = k.data[0].name;
			var b = k.data[1].value;
			var d = $cache.cacheHash.get(f + "_version");
			if (d) {
				d.set(f + "_version", b);
				$cache.currentCacheObj.setServerCache(f, b)
			}
			var h = $cache.cacheHash.get(f);
			if (h && a != null) {
				h.set(f, a, function (m, l, n) {})
			}
		}
		return a
	},
	initCacheContainer : function (a) {
		if (this.currentCacheObj == null) {
			var b = top.$swfcacheobject;
			this.currentCacheObj = b
		}
		this.cacheHash.set(a, this.currentCacheObj);
		this.cacheHash.set(a + "_version", this.currentCacheObj)
	},
	uncompress : function (a) {
		return this.currentCacheObj.uncompress(a)
	},
	query : function (f, p, k) {
		if (f != null) {
			var b = $H();
			var g = $H();
			var h = $H();
			var m;
			if ($type(f) == "array") {
				m = f
			} else {
				m = JSON.decode(f)
			}
			if (m.length > 0) {
				for (var n in m[0]) {
					g.set(n, {
						type : "String"
					})
				}
			}
			b.set(k, g);
			h.set(k, m);
			$cache.QueueList.erase(k);
			$cache.QueueList.erase(k + "_schema");
			$cache.QueueList.set(k, h);
			$cache.QueueList.set(k + "_schema", b);
			var a = TrimPath.makeQueryLang(b).parseSQL(p);
			var c = a.filter(h);
			var l = [];
			if (c) {
				c.each(function (q) {
					var s = {};
					for (var t in q) {
						if (t != "children") {
							s[t] = q[t]
						} else {
							if ($chk(q[t])) {
								s.children = []
							}
						}
					}
					if ($chk(q.children)) {
						var r = $H();
						r.set(k, q.children);
						s.children = a.filter(r)
					}
					l.include(s)
				})
			}
			try {
				return l
			} catch (d) {
				return d
			}
		} else {
			return null
		}
	},
	code2name : function (b) {
		var a = "";
		if (b.PDM) {
			a = "SELECT T.{MC}  FROM {T} AS T WHERE T.{DM} == '{V}' AND T.{PDM}=='{PV}'".substitute(b)
		} else {
			a = "SELECT T.{MC}  FROM {T} AS T WHERE T.{DM} == '{V}'".substitute(b)
		}
		if ($chk(b.func)) {
			return this.get(a, function (c) {
				c = JSON.decode(c);
				if ($chk(c) && c.length > 0) {
					c = c[0][b.MC]
				} else {
					c = ""
				}
				b.func.call($cache, c)
			})
		} else {
			return this.getResultBySql(a, true, b.MC)
		}
	},
	getResultBySql : function (p, q, m) {
		var d = /FROM (\w+)\s*(WHERE)?/ig;
		var f = /SELECT (.*) FROM/ig;
		var r = p.match(d);
		var n = RegExp.$1;
		var h = p.match(f);
		var g = RegExp.$1;
		var b = $cache.currentCacheObj.get(n);
		var l = $cache.query(b, p, n);
		if (l.length > 0) {
			return l[0][m]
		}
		if ($chk($cache.QueueList.get(n))) {
			var k = $cache.QueueList.get(n + "_schema");
			var a = $cache.QueueList.get(n);
			if ($defined(q)) {
				var c = TrimPath.makeQueryLang(k).parseSQL(p).filter(a);
				if ($chk(c) && c.length > 0) {
					return c[0][m]
				} else {
					return ""
				}
			} else {
				return TrimPath.makeQueryLang(k).parseSQL(p).filter(a)
			}
		} else {
			return []
		}
	},
	getswordcacheInstance : function () {
		if (this.swordcacheInstance == null) {
			this.swordcacheInstance = new Persist.Store("SWORDCACHE", {
					swf_path : this.swfpath + "/swordcache.swf"
				})
		}
		return this.swordcacheInstance
	},
	put : function (b, d) {
		var c = this.getswordcacheInstance();
		var a = 1;
		(function () {
			a++;
			try {
				if (c.el.ready()) {
					c.el.set(c.name, "PS" + b.replace(/_/g, "__").replace(/ /g, "_s"), d);
					return
				} else {
					if (a > 5) {
						return
					}
					setTimeout(arguments.callee, 20)
				}
			} catch (f) {
				if (a > 5) {
					return
				}
				setTimeout(arguments.callee, 20)
			}
		})()
	},
	load : function (b, c) {
		var d = this.getswordcacheInstance();
		var a = 1;
		(function () {
			a++;
			try {
				if (d.el.ready()) {
					val = d.el.get(d.name, "PS" + b.replace(/_/g, "__").replace(/ /g, "_s"));
					if (c) {
						c.call(d, val !== null, val)
					}
					return
				} else {
					if (a > 5) {
						return
					}
					setTimeout(arguments.callee, 20)
				}
			} catch (f) {
				if (a > 5) {
					return
				}
				setTimeout(arguments.callee, 20)
			}
		})()
	},
	remove : function (b, c) {
		var d = this.getswordcacheInstance();
		var a = 1;
		(function () {
			a++;
			try {
				if (d.el.ready()) {
					val = d.el.remove(d.name, "PS" + b.replace(/_/g, "__").replace(/ /g, "_s"));
					if (c) {
						c.call(this, true, val)
					}
					return
				} else {
					if (a > 5) {
						return
					}
					setTimeout(arguments.callee, 20)
				}
			} catch (f) {
				alert(f);
				if (a > 5) {
					return
				}
				setTimeout(arguments.callee, 20)
			}
		})()
	},
	getRDataForTName : function (tableName, Type, code) {
		var ct = $("SwordCacheData");
		var zdm = "";
		if (ct) {
			var querystr = null;
			Type == "tree" ? querystr = ct.get("queryTree") : querystr = ct.get("query");
			var queryObj = JSON.decode(querystr);
			queryObj.each(function (item, index) {
				if (item.T == tableName && item.DM) {
					zdm = item.DM
				}
			});
			if (zdm == "") {
				zdm = tableName.substring(tableName.lastIndexOf("_") + 1) + "_DM"
			}
		}
		var onRowObj = null;
		this.get(tableName, function (result, table) {
			if (result) {
				var res = eval(result);
				res.each(function (item, index) {
					if (item[zdm] == code) {
						onRowObj = item
					}
				})
			}
		}, (Type == "tree" ? "tree" : "select"));
		return onRowObj
	}
};
var SwordPageCache = new Class({
		$family : {
			name : "SwordPageCache"
		},
		Implements : [Events, Options],
		name : "SwordPageCache",
		collectInfoKey : "sword_page_cache_collect_info",
		uuid : null,
		cacheObj : null,
		jsVariableScope : ["gt3"],
		uuidSign : ["tid", "ctrl"],
		constant : {
			cache : "cache",
			sword : "sword",
			js : "js"
		},
		options : {
			timeOut : "2880",
			refreshTime : "5",
			delayTime : "1000",
			isAutoRestore : "false",
			isStoreLocal : "true",
			maxCapacity : "100",
			uuid : "",
			onGenUUID : null,
			onInit : null,
			onAfter : null,
			stop : null,
			onStore : null
		},
		initialize : function () {
			if (arguments.length > 0) {}

		},
		initParam : function (a) {
			this.htmlOptions(a);
			$extend(this.options, jsR.config.swordPageCache || {});
			this.build();
			this.initTimeOut()
		},
		initData : function (a) {},
		initTimeOut : function () {
			if (this.options.isStoreLocal === "true") {
				setTimeout(this.doStore.bind(this), (this.options.refreshTime / 1) * 1000)
			}
		},
		build : function () {
			this.initCacheObj();
			if (this.cacheObj) {
				this.doGenUUID();
				if ($chk(this.uuid)) {
					$SwordPageCache = function () {
						return this
					}
					.bind(this)();
					this.initCollectInfoCache();
					this.fireEvent("onInit");
					pc.getPageInit().addEvent("onAfter", this.doPageInitAfter.bind(this))
				}
			}
		},
		getUUID : function () {
			return this.uuid
		},
		doStore : function () {
			if (this.options.stop != true) {
				try {
					var b = this.getPageData();
					this.set(this.constant.cache, b);
					this.fireEvent("onStore", b)
				} catch (a) {}

				this.initTimeOut()
			}
		},
		doPageInitAfter : function () {
			this.delayPageInitAfter.delay(this.options.delayTime / 1, this)
		},
		delayPageInitAfter : function () {
			var a = this.get(this.constant.cache);
			if (this.options.isAutoRestore === "true") {
				if (a) {
					this.loadCacheData(a)
				}
			} else {
				this.fireEvent("onAfter", a)
			}
		},
		loadCacheData : function (b) {
			if (b) {
				var c = b[this.constant.sword];
				if (c) {
					var f = {
						dataObj : c
					};
					pc.loadData(f)
				}
				var a = b[this.constant.js];
				if (a) {
					var d = $H(a);
					d.each(function (h, g) {
						window[g] = h
					})
				}
			}
		},
		getCacheData : function () {
			return this.get(this.constant.cache)
		},
		getPageData : function () {
			var b = this.getSwordPageData();
			var a = this.getJsVariable();
			var c = {};
			c[this.constant.sword] = b;
			c[this.constant.js] = a;
			return c
		},
		initCacheObj : function () {
			this.cacheObj = this.getTopWin().$swfcacheobject
		},
		initCollectInfoCache : function () {
			var a = this.cacheObj.get(this.collectInfoKey);
			if (!a) {
				this.cacheObj.set(this.collectInfoKey, "{}")
			}
		},
		getJsVariable : function () {
			var a = {};
			for (var c = 0; c < this.jsVariableScope.length; c++) {
				var b = this.jsVariableScope[c];
				var d = window[b];
				if (d) {
					a[b] = d
				}
			}
			return a
		},
		getSwordPageData : function () {
			var b = [];
			var a = {};
			pc.widgets.each(function (f, c) {
				var h = f.name;
				var g;
				if ($chk(h)) {
					var d = f.options.name;
					if (h == "SwordForm") {
						g = $w(d).getSubmitData()
					} else {
						if (h == "SwordGrid") {
							g = $w(d).getAllGridData()
						}
					}
					if ($chk(g)) {
						b.push(g)
					}
				}
			});
			a = {
				data : b
			};
			return a
		},
		set : function (d, f) {
			if (this.cacheObj) {
				var b = this.cacheObj.get(this.uuid);
				var h;
				try {
					if (b && b != "null") {
						h = JSON.decode(b)
					} else {
						h = {}

					}
					h[d] = f;
					b = JSON.encode(h);
					var c = b.length;
					var a = JSON.decode(this.cacheObj.get(this.collectInfoKey));
					if (!a) {
						a = {}

					}
					a[this.uuid] = {
						size : c
					};
					this.cacheObj.set(this.collectInfoKey, JSON.encode(a));
					this.cacheObj.set(this.uuid, b)
				} catch (g) {}

			}
		},
		get : function (c) {
			var b;
			if (this.cacheObj) {
				var a = this.uuid.indexOf("_");
				var d = this.uuid.substring(0, a);
				var f;
				if (d == top.getSwryDm()) {
					f = this.cacheObj.get(this.uuid)
				}
				if (f && f != "null") {
					b = JSON.decode(f)[c]
				}
			}
			return b
		},
		remove : function (b) {
			if (this.cacheObj) {
				var a = this.uuid.indexOf("_");
				var c = this.uuid.substring(0, a);
				if (c == top.getSwryDm()) {
					var d = this.uuid;
					this.options.stop = true;
					if (b) {
						d = b
					}
					this.cacheObj.remove(d)
				}
			}
		},
		doGenUUID : function () {
			var a = window.location.href.replace(/:/g, "").replace(/\//g, "");
			var h = a.indexOf("?");
			var f;
			var g = this.options.uuid.replace(/:/g, "").replace(/\//g, "");
			if (h > 0) {
				f = a.substring(0, h);
				var k = a.substring(h + 1, a.length).split("&");
				var c = k.length;
				if (c > 0) {
					for (var b = 0; b < k.length; b++) {
						var d = k[b].split("=");
						if (d.length > 1 && this.uuidSign.indexOf(d[0]) > -1) {
							f += "_" + d[0] + "_" + d[1]
						}
					}
				}
			} else {
				f = a
			}
			var l = "";
			if ($chk(this.options.onGenUUID)) {
				l = this.$events.genUUID[0].create({
						bind : this
					})()
			}
			this.uuid = top.getSwryDm() + "_" + f + "_" + g + l
		},
		genUUIDTemplate : null,
		clear : function () {
			if (this.cacheObj) {
				this.cacheObj.remove(this.uuid);
				var a = JSON.decode(this.cacheObj.get(this.collectInfoKey));
				if (a) {
					delete a[this.uuid]
				}
			}
		},
		getTopWin : function () {
			var a;
			a = window.top;
			return a
		}
	});
SwordToolBar.implement({
	alarm : false,
	items : {},
	buttonEvents : {},
	gridMuiltCheck : function (a) {
		this.muiltCheckClick(this, a)
	},
	rowClick : function (d, a, b, f, c) {
		d.defaultGridCheckAction(a, d)
	},
	allCheckClick : function (d, c, a, b) {
		if (!$chk(b)) {
			b = $w(c).getHeaderCheckboxByName(d.associate.SwordGrid[c].muiltCheckName)
		}
		if (b.checked) {
			d.setEnabled("delete")
		} else {
			d.setDisabled("delete")
		}
		d.setDisabled("edit");
		d.setDisabled("open")
	},
	muiltCheckClick : function (b, a) {
		if (a.checked) {
			this.defaultGridMuiltCheckAction(b)
		} else {
			if (!a.checked) {
				b.setDisabled("delete")
			}
		}
	},
	defaultGridMuiltCheckAction : function (a) {
		a.setDisabled("open");
		a.setDisabled("edit");
		a.setEnabled("delete")
	},
	defaultGridCheckAction : function (c, d) {
		var f = d.associate.SwordGrid[c].muiltCheckName;
		var a = $w(c);
		if ($chk(a)) {
			var b = a.getCheckedRowData(f);
			if (b.length < 1) {
				d.setDisabled("open");
				d.setDisabled("edit");
				d.setDisabled("delete")
			} else {
				if (b.length == 1) {
					d.setEnabled("open");
					d.setEnabled("delete");
					d.setEnabled("edit")
				} else {
					if (b.length > 1) {
						d.setDisabled("open");
						d.setDisabled("edit");
						d.setEnabled("delete")
					}
				}
			}
		}
	}
});
SwordValidator.implement({
	length : function (c) {
		var b = this.getElValue(c);
		if (b == "") {
			return true
		}
		var a = this.getLen(b);
		if (c.get("rule").contains(",")) {
			return (a >= c.get("begin") && a <= c.get("end"))
		} else {
			if ($defined(c.get("end"))) {
				return (a > c.get("begin") && a < c.get("end"))
			} else {
				return a == c.get("begin")
			}
		}
	},
	getLen : function (f) {
		var a = 0;
		for (var b = 0; b < f.length; b++) {
			var d = f.charCodeAt(b);
			var c = f.charAt(b);
			if ((d > 65248) || (d == 12288) || this.reg.chinese.test(c) || this.reg.twoBytes.test(c)) {
				a = a + 3
			} else {
				a = a + 1
			}
		}
		return a
	}
});
SwordBigTree.implement({
	getTreeData : function (d) {
		var f = this.getAllNode();
		var c = [];
		var a = $defined(d.length) ? d.length : 0;
		var b = 0;
		f.each(function (k, g) {
			c[b] = {};
			for (var h = 0; h < a; h++) {
				c[b][d[h]] = k.get(d[h])
			}
			b++
		});
		return c
	},
	setSelectNode : function (b) {
		this.select.selDiv.fireEvent("click");
		var a = this.getTreeNode(new Hash({
					code : b
				}));
		this.setSelectedNode(a)
	}
});
function pageAfter() {
	if (window.$init_gs_caculate) {
		$init_gs_caculate()
	}
}
function jsDelegate(f) {
	var g = JSON.encode(f.data);
	if (g == '"{}"') {
		g = ""
	}
	var c = pc.getReq({
			tid : $defined(f.tid) ? f.tid : "",
			ctrl : $defined(f.ctrl) ? f.ctrl : "",
			widgets : [{
					sword : "attr",
					name : "jsdelegate",
					value : g
				}
			]
		});
	if (f.widgetDatas) {
		for (var b = 0; b < f.widgetDatas.length; b++) {
			var h = f.widgetDatas[b].name;
			if (h && $defined($w(h).validate)) {
				if (!$w(h).validate()) {
					return
				}
			}
		}
		c.data.extend(f.widgetDatas)
	}
	if (f.isAutoFill == "false") {
		f,
		loaddata = "widget";
		c.data.push({
			sword : "attr",
			name : "s5_widgetloaddata",
			value : "true"
		});
		var a = f.onSuccess;
		if (a) {
			f.onSuccess = function (k) {
				var d = JSON.decode(k.getAttr("s5_datamap"));
				a(d)
			}
		}
	}
	f.req = c;
	pc.postReq(f)
}
function AddBizCode2URL(c, b) {
	if (!$chk(c) || !$defined(c)) {
		return ""
	}
	c = pageContainer.AddBaseCode2URL(c);
	var f = _getBizCode_(b);
	for (var d in f) {
		var a = f[d];
		if ($chk(a)) {
			c = (c + ((c.indexOf("?") == -1) ? "?" : "&") + d + "=" + a)
		}
	}
	return c
}
function _getBizCode_(f) {
	var k = _GetParameter_("gwxh", f);
	var a = _GetParameter_("gndm", f);
	var h = _GetParameter_("zndm", f);
	var g = _GetParameter_("gnjdm", f);
	var c = _GetParameter_("jsdm", f);
	var d = _GetParameter_("gwssswjg", f);
	var b = _GetParameter_("cxbj", f);
	return {
		gwxh : k,
		gndm : a,
		zndm : h,
		gnjdm : g,
		jsdm : c,
		gwssswjg : d,
		cxbj : b
	}
}
function _GetParameter_from_Res(b, a) {
	return ($defined(a) ? a : pc).getInitData().getAttr(b) || ""
}
function _GetParameter_(g, f) {
	var d = window.location.search;
	var a = g.length;
	var c = d.indexOf(g);
	if (c == -1) {
		return _GetParameter_from_Res(g, f)
	}
	c += a + 1;
	var b = d.indexOf("&", c);
	if (b == -1) {
		return d.substring(c)
	} else {
		return d.substring(c, b)
	}
}
var _PR_, _FUC_, _POPALI_, _WF_, _STS_;
function _OverWritePostReq() {
	_PR_ = PageContainer.prototype.postReq;
	PageContainer.implement({
		postReq : function (b) {
			var a = {
				ctrl : AddBizCode2URL(b.req.ctrl),
				tid : AddBizCode2URL(b.req.tid),
				bindParam : true
			};
			$extend(b.req, a);
			_PR_.bind(this)(b)
		},
		getUploadCommit : function () {
			if (!$defined(this.uploadCommit)) {
				this.uploadCommit = this.widgetFactory.create("SwordFileUpload");
				_OverWriteUploadCommit()
			}
			return this.uploadCommit
		}
	});
	_POPALI_ = SwordPopUpBox.prototype.alertIframe;
	SwordPopUpBox.implement({
		alertIframe : function (d, c, b) {
			var a = {
				message : AddBizCode2URL(d.message, b)
			};
			_POPALI_.bind(this)($extend(d, a), c)
		}
	});
	_WF_ = WidgetFactory.prototype.create;
	WidgetFactory.implement({
		create : function (b) {
			var a = _WF_.bind(this)(b);
			if ($type(b) != "string" && b.get("sword") == "SwordTab" && !$defined(_STS_)) {
				_STS_ = SwordTab.prototype.selectIndex;
				SwordTab.implement({
					selectIndex : function (c) {
						if (this.options.tabType != "div") {
							this.options.tabIframes.each(function (f, d) {
								this.options.tabIframes[d] = AddBizCode2URL(f)
							}
								.bind(this))
						}
						_STS_.bind(this)(c)
					}
				})
			}
			return a
		}
	});
	pageContainer.widgetFactory = new WidgetFactory()
}
function _OverWriteUploadCommit() {
	_FUC_ = SwordFileUpload.prototype.commit;
	SwordFileUpload.implement({
		commit : function (a, b) {
			this.options.postData.ctrl = AddBizCode2URL(this.options.postData.ctrl);
			_FUC_.bind(this)(a, b)
		}
	})
}
function setCacheData(a, b) {
	if ($cache) {
		$cache.initCacheContainer(a);
		var c = $cache.cacheHash.get(a);
		c.set(a, b)
	}
}
function getCacheData(a, d, b) {
	if (!b) {
		b = "select"
	}
	if (!$cache.cacheHash.get(a)) {
		$cache.initCacheContainer(a)
	}
	var c = $H({
			data : []
		});
	$cache.cacheHash.get(a).get(a, function (g, h) {
		if (g) {
			var f = JSON.decode(h);
			if (b == "select") {
				c.data[0] = {
					data : f,
					dataName : d,
					sword : "SwordSelect"
				};
				pc.reloadSel(d, c)
			} else {
				if (b == "tree") {
					c.data[0] = {
						data : f,
						name : d,
						sword : "SwordTree"
					}
				} else {
					if (b == "form") {
						c.data[0] = {
							data : f,
							name : d,
							sword : "SwordForm"
						}
					}
				}
			}
		}
	});
	return c.data[0]
}
function pullTreeBefore(a) {
	var b = [];
	b = $(document.body).getElements("div[pulltreetype]");
	b.each(function (g, d) {
		var c = g.get("name");
		var h = {};
		g.setProperty("rootPcode", "null");
		var f = g.getProperty("pulltreetype").toUpperCase();
		if (f == "XZQH") {
			h.T = "DM_GY_XZQH";
			h.PDM = "SJXZQHSZ_DM";
			h.DM = "XZQHSZ_DM";
			h.MC = "XZQHMC";
			h.WN = c;
			a.push(h)
		} else {
			if (f == "HYDM") {
				h.T = "DM_GY_HY";
				h.PDM = "SJHY_DM";
				h.DM = "HY_DM";
				h.MC = "HYMC";
				h.WN = c;
				a.push(h)
			}
		}
	});
	$cache.batchget(a, function (c) {
		c.forEach(function (h, d) {
			var f = d.split("^")[1];
			var g = {
				data : h,
				name : f,
				datafrom : "cache",
				sword : "SwordTree"
			};
			if (pc.initData == null) {
				pc.initData = {}

			}
			if (pc.initData.data == null) {
				pc.initData.data = []
			}
			pc.initData.data.include(g)
		})
	}, "tree")
}
function cacheResult(f, c, b, a) {
	var d = null;
	$cache.get(f, function (g, k) {
		if (a) {
			var h = g,
			p = [];
			for (var m = 0; h && m < h.length; m++) {
				var l = h[m];
				var n = (a)(l);
				if (!isEmptyObj(n)) {
					p.include(n)
				}
			}
		} else {
			p = g
		}
		d = {
			data : p,
			name : c,
			sword : "SwordTree",
			dataType : "json"
		};
		if (pc.initData == null) {
			pc.initData = {}

		}
		if (pc.initData.data == null) {
			pc.initData.data = []
		}
		pc.initData.data.include(d);
		if (b) {
			if (b == "false") {
				$w(c).reloadTree(d)
			} else {
				$w(b).getWidget(c).reloadTree(d)
			}
		}
	}, "tree");
	return d
}
function _$tree_buildSql$_(b, a) {
	var d = "";
	var c = null;
	if (!b.MC) {
		if (!c) {
			c = b.T.substring(b.T.lastIndexOf("_") + 1)
		}
		b.MC = c + "MC"
	}
	if (!b.DM) {
		if (!c) {
			c = b.T.substring(b.T.lastIndexOf("_") + 1)
		}
		b.DM = c + "_DM"
	}
	if (!$defined(b.PDM)) {
		if (!c) {
			c = b.T.substring(b.T.lastIndexOf("_") + 1)
		}
		b.PDM = "SJ" + c + "_DM"
	}
	d = "SELECT T.{DM} AS code,T.{PDM} AS pcode, T.{MC} AS caption,T.* FROM {T} AS T";
	if (b.PDM == "") {
		d = "SELECT T.{DM} AS code, T.{MC} AS caption,T.* FROM {T} AS T"
	}
	d = d.substitute(b);
	if (b.W && !a) {
		d += " WHERE " + b.W
	}
	d += " ORDER BY  code";
	return d
}
function cacheTreeNode(a, b) {}

function filterBxjTree(k, a, d, n, h, c) {
	var m = $splat(a);
	var l = [];
	var b = null;
	if (d == "xzqh") {
		m.each(function (p) {
			if (p.endWith("0000")) {
				l.include(p.substring(0, 2))
			} else {
				if (p.endWith("00")) {
					l.include(p.substring(0, 1) + "," + p.substring(0, 4))
				}
			}
		});
		b = {
			T : c || "T_DM_GY_XZQH",
			PDM : "SJXZQHSZ_DM",
			DM : "XZQHSZ_DM",
			MC : "XZQHMC",
			WN : k
		}
	} else {
		if (d == "hy") {
			m.each(function (p) {
				if (p.endWith("    ")) {
					l.include(p.substring(0, 2))
				} else {
					if (p.endWith("00")) {
						l.include(p.substring(0, 1) + "," + p.substring(0, 4))
					}
				}
			});
			b = {
				T : c || "T_DM_GY_HY",
				PDM : "SJHY_DM",
				DM : "HY_DM",
				MC : "HYMC",
				WN : k
			}
		} else {
			if (d == "djzclx") {
				m.each(function (p) {
					if (p.endWith("00")) {
						l.include(p.substring(0, 1))
					} else {
						if (p.endWith("0")) {
							l.include(p.substring(0, 1) + "," + p.substring(0, 2))
						}
					}
				});
				b = {
					T : c || "T_DM_DJ_DJZCLX",
					PDM : "SJDJZCLX_DM",
					DM : "DJZCLX_DM",
					MC : "DJZCLXMC",
					WN : k
				}
			}
		}
	}
	if (b) {
		var g = queryTreeCallback(b, function (p) {
				return _$dealCondition$_(p, l, h)
			});
		var f = null;
		if ($chk(n)) {
			f = $w(n).getWidget(k)
		} else {
			f = $w(k)
		}
		if (f) {
			f.reloadTree(g)
		} else {
			alert("请检查设置的formName或者treeName是否正确")
		}
	} else {
		alert("树的类型定义错误，请检查是否为以下三种[xzqh,hy,djzclx]")
	}
}
function _$dealCondition$_(h, c, g) {
	var f = h.code + "";
	var a = true;
	var b = {};
	if (g) {
		c.each(function (l) {
			if (l.contains(",")) {
				var d = l.split(",");
				a = a && !f.startWith(d[0])
			} else {
				a = a && !f.startWith(l)
			}
		});
		if (!a && isEmptyObj(b)) {
			c.each(function (m) {
				if (m.contains(",")) {
					var d = m.split(",");
					a = f.startWith(d[0]);
					if (a && isEmptyObj(b)) {
						for (var l in h) {
							if (l != "children") {
								b[l] = h[l]
							} else {
								b.children = []
							}
						}
						h.children.each(function (n) {
							var p = n.code + "";
							if (!p.startWith(d[1])) {
								b.children.include(n)
							}
						})
					}
				}
			})
		} else {
			if (a && isEmptyObj(b)) {
				for (var k in h) {
					b[k] = h[k]
				}
			}
		}
	} else {
		a = false;
		c.each(function (m) {
			if (m.contains(",")) {
				var d = m.split(",");
				a = a || f.startWith(d[0]);
				if (a && isEmptyObj(b)) {
					for (var l in h) {
						if (l != "children") {
							b[l] = h[l]
						} else {
							if ($chk(h[l])) {
								b.children = []
							}
						}
					}
					h.children.each(function (n) {
						var p = n.code + "";
						if (p.startWith(d[1])) {
							b.children.push(n)
						}
					})
				}
			} else {
				a = a || f.startWith(m);
				if (a && isEmptyObj(b)) {
					for (var l in h) {
						b[l] = h[l]
					}
				}
			}
		})
	}
	return b
}
function isEmptyObj(a) {
	for (var b in a) {
		return false
	}
	return true
}
function queryTreeCallback(a, b, d, c) {
	if ($chk(a)) {
		var f = _$tree_buildSql$_(a);
		if (d) {
			if (d == "false") {
				$w(a.WN).options.rootPcode = $chk(c) ? c : undefined
			} else {
				$w(d).getWidget(a.WN).options.rootPcode = $chk(c) ? c : undefined
			}
		}
		return cacheResult(f, a.WN, d, b)
	}
}
function queryTreeData(a, d, c, g) {
	if ($chk(a)) {
		var f = "SELECT T.* FROM " + a.T + " AS T";
		var b = "";
		b = f;
		if (a.W) {
			b += " WHERE " + a.W
		}
		if (d) {
			if (d == "false") {
				$w(a.WN).options.rootPcode = $chk(c) ? c : undefined
			} else {
				$w(d).getWidget(a.WN).options.rootPcode = $chk(c) ? c : undefined
			}
		}
		if (!$chk(g)) {
			cacheResult(b, a.WN, d)
		} else {
			cacheBxjResult(f, a.WN, d, g)
		}
	}
}
function cacheBxjResult(c, b, a, d) {
	$cache.get(c, function (f, h) {
		var n = f;
		var m = [];
		var p = new Array();
		var k = new Array();
		for (var l = 0; l < n.length; l++) {
			var g = n[l];
			if (d == g.code) {
				m.include(g);
				p.include(g.code)
			}
		}
		var l = 0;
		while (l < 6) {
			l++;
			if (p.length == 0 && k.length == 0) {
				break
			}
			if (p.length != 0) {
				p.each(function (q) {
					n.each(function (r) {
						if (r.pcode == q) {
							m.include(r);
							k.include(r.code)
						}
					})
				});
				p.empty()
			} else {
				k.each(function (q) {
					n.each(function (r) {
						if (r.pcode == q) {
							m.include(r);
							p.include(r.code)
						}
					})
				});
				k.empty()
			}
		}
		data = {
			data : m,
			name : b,
			sword : "SwordTree"
		};
		if (pc.initData == null) {
			pc.initData = {}

		}
		if (pc.initData.data == null) {
			pc.initData.data = []
		}
		pc.initData.data.include(data);
		if (a) {
			if (a == "false") {
				$w(b).reloadSelectData(data)
			} else {
				$w(a).getWidget(b).reloadSelectData(data)
			}
		}
	})
}
function selectBefore(a) {
	$cache.batchget(a, function (b) {
		b.forEach(function (g, d) {
			if (top.pc.swordCacheDataContainer) {
				var f = {
					data : g
				};
				top.pc.swordCacheDataContainer.set(d, f)
			} else {
				var c = $H({
						data : [{
								data : g,
								dataName : d,
								sword : "SwordSelect"
							}
						]
					});
				if (!$chk(pc.initData)) {
					pc.initData = c
				} else {
					pc.initData.data.extend(c.data)
				}
			}
		})
	})
}
function selectDataFalter(c, f) {
	var h = top.pc.swordCacheDataContainer.get(c);
	if (h) {
		var g = h.data;
		if (f) {
			var b = h.data,
			g = [];
			for (var d = 0; b && d < b.length; d++) {
				if ((f)(b[d])) {
					g[g.length] = b[d]
				}
			}
		}
		var a = $H({
				data : [{
						data : g,
						dataName : c,
						sword : "SwordSelect"
					}
				]
			});
		if (!$chk(pc.initData)) {
			pc.initData = a
		} else {
			pc.initData.data.extend(a.data)
		}
	}
}
var SwordWorkflow = new Class({
		Implements : [Events, Options],
		name : "SwordWorkflow",
		rootPath : "/workflow/component/images/",
		toolBarName : "workflowToolBar",
		toolBarShowType : "mini",
		dataContainer : [],
		wfdata : {
			packageId : "",
			lcdyid : "",
			actDefId : "",
			processInsId : "",
			parentProcessInsId : "",
			parentLcslid : "",
			actInsId : "",
			parentActInsId : "",
			bizProcId : "",
			bizActId : "",
			bizPreActId : "",
			wfWsh : "",
			workflowFlag : "",
			workItemId : "",
			parentWorkItemId : "",
			isStarted : "0",
			isTsxtr : "0",
			isInvokeTid : false,
			userList : [],
			orgList : [],
			conditionList : [],
			bizBtnList : [],
			operatorOrgCode : "",
			nextActDefId : "",
			btnStatus : "12202222211",
			isFinalTask : "false",
			SWJG_DM : "",
			jsdm : "",
			zndm : "",
			message : "",
			isShowSpForm : false,
			isZs : false,
			returnCode : "0",
			oneOfMultiTaskTag : "0",
			sjgzid : "",
			sjmc : "",
			sjlx : "",
			sjbl : "",
			sjslid : "",
			sjType : "",
			isMultiEventStartPro : false,
			canSend : "true",
			sednMessage : "",
			sjState : "0",
			gllcsfxs : "0",
			wfPerformerSelector : "",
			wfDepartSelector : "",
			wfPostSelector : "",
			wfRoleSelector : "",
			isTaskMerger : "0",
			batchMainWidget : null,
			subSendFlag : null,
			glLcswsxDm : null,
			wfTaskOrigin : "",
			wfTaskState : "",
			wfTaxItemID : "",
			wfDjxh : "",
			wfSlswsxDm : "",
			wfNsrsbh : "",
			htly : "",
			isShowApproveHistory : false,
			boxClosingEventFlag : "",
			isPermitContinue : true,
			isProcessClosed : false,
			isSychronizedSubflowStarted : false,
			isConfigedSubflow : false,
			isReadOnly : false,
			isxh : false,
			nextWorkitemId : "",
			isClickNext : "0",
			xhlcdyid : "",
			xhhddyid : "",
			xhfhddyid : "",
			xhflcdyid : "",
			xhmodelid : "",
			queryCode : "",
			rwbldz : "",
			isFromPlsl : "0",
			isFromManage : "false",
			gzxid : "",
			lcBatchNumber : "",
			dzzlSwryDm : "",
			dzzlSwjgDm : "",
			isNeedDzzlCaiji : "N"
		},
		dataname : "WFDATA",
		ctrls : {
			start : "WorkFlowCTRL_startProcess",
			assign : "WorkFlowCTRL_assignTask",
			back : "WorkFlowCTRL_backProcess",
			signin : "WorkFlowCTRL_signinTask",
			predict : "WorkFlowCTRL_completePredict",
			send : "WorkFlowCTRL_completeWorkItem",
			flowNextPredict : "WorkFlowCTRL_flowNextPredict",
			flowNext : "WorkFlowCTRL_flowNext",
			flowNextTaskPredict : "WorkFlowCTRL_flowNextTaskPredict",
			suspend : "WorkFlowCTRL_suspendProcess",
			activation : "WorkFlowCTRL_activateProcess",
			stop : "WorkFlowCTRL_terminateProcess",
			subProcsubmit : "WorkFlowCTRL_getStartSubProcSelector",
			end : "WorkFlowCTRL_endProcess",
			moreEvents : "WorkFlowCTRL_dealMoreEvents"
		},
		options : {
			sword : null,
			name : null,
			pNode : null,
			btnlist : ["saveNew", "signin", "send", "flowNext", "assign", "fallback", "stop", "startSubProc", "end", "viewprocess", "nextTask", "caiji", "chaxun"],
			btncaptions : ["保存", "签收", "推送", "下一步", "委派", "回退", "作废", "关联流程", "结束", "查看流程", "下一任务", "电子资料采集", "电子资料查询"],
			pclass : ["save", "receive", "push", "nextPage", "investigation", "previousPage", "revoke", "gl", "over", "viewResult", "endPage", "save", "viewResult"],
			btnclickparam : ["savesubmit", "signinsubmit", "sendsubmit", "flowNextsubmit", "assignsubmit", "backsubmit", "stopsubmit", "subProcsubmit", "endsubmit", "viewprocesssubmit", "nextTasksubmit", "caiJisubmit", "chaXunsubmit"],
			tidinvokeparam : ["savetidIsinvoke", "signintidIsinvoke", "sendtidIsinvoke", "flowNexttidIsinvoke", "assigntidIsinvoke", "backtidIsinvoke", "stoptidIsinvoke", "subProctidIsinvoke", "endtidIsinvoke", "viewprocesstidIsinvoke", "nextTasktidIsinvoke", "caiJitidIsinvoke", "chaXuntidIsinvoke"],
			quickKeys : ["CTRL+S", "", "CTRL+T", "CTRL+N", "", "CTRL+B", "CTRL+G", "CTRL+R", "CTRL+E", "CTRL+L", "CTRL+F", "", ""],
			btnStatus : "1220222221100",
			btnNames : null,
			startType : "1",
			saveButtonIsShow : false,
			defaltBtnStatus : "1220222221100",
			isShowSpForm : false,
			isShowApproveHistory : false,
			spCaption : "审批",
			saveclicksubmit : null,
			sendPredictSubmit : null,
			sendclicksubmit : null,
			backclicksubmit : null,
			isShowSelector : "true",
			batchMainWidget : null
		},
		getFunction : function (a) {
			switch (a) {
			case 0:
				return function (b) {
					this.flowStart(b)
				};
			case 1:
				return function (b) {
					this.flowSignin(b)
				};
			case 2:
				return function (b) {
					this.flowSend(b)
				};
			case 3:
				return function (b) {
					this.flowNextPredict()
				};
			case 4:
				return function (b) {
					this.flowAssign(b)
				};
			case 5:
				return function (b) {
					this.flowBack(b)
				};
			case 6:
				return function (b) {
					this.flowStop(b)
				};
			case 7:
				return function (b) {
					this.flowSubStart(b)
				};
			case 8:
				return function (b) {
					this.flowEnd(b)
				};
			case 9:
				return function (b) {
					this.flowViewprocess(b)
				};
			case 10:
				return function (b) {
					this.flowNextTaskRulePredict(b)
				};
			case 11:
				return function (b) {
					this.flowCaiji(b)
				};
			case 12:
				return function (b) {
					this.flowChaxun(b)
				}
			}
		},
		pNode : function () {
			return this.options.pNode
		},
		initParam : function (a) {
			this.htmlOptions(a);
			this.toolBarName = this.options.name + "toolbar";
			this.initData();
			this.initSPForm();
			if (this.wfdata.oneOfMultiTaskTag == "1") {
				this.options.saveButtonIsShow = true;
				this.options.btnStatus = "000000000000";
				this.initSwordWorkflow();
				if (this.wfdata.isReadOnly) {
					$w(this.toolBarName).options.pNode.setStyle("display", "none");
					if (this.wfdata.isShowSpForm) {
						$w("opinionForm").options.pNode.setStyle("display", "none")
					}
				}
				this.setBtnStatusByName("startSubProc", this.wfdata.gllcsfxs)
			} else {
				if (this.wfdata.workflowFlag == "1") {
					this.initSwordWorkflow();
					if (this.wfdata.isReadOnly) {
						$w(this.toolBarName).options.pNode.setStyle("display", "none");
						if (this.wfdata.isShowSpForm) {
							$w("opinionForm").options.pNode.setStyle("display", "none")
						}
					} else {
						this.initSubmitComponent()
					}
					if ($chk(this.wfdata.workItemId)) {
						this.setFlowNextTaskEnable()
					} else {
						this.setFlowNextTaskDisable()
					}
					if ($chk(this.wfdata.subSendFlag)) {
						this.initSendSubShow(this.wfdata.subSendFlag)
					}
				}
			}
		},
		initSwordWorkflow : function () {
			$SwordLoader.writeCSS($SwordLoader.rootPath + "workflow/component/" + (this.toolBarShowType == "mini" ? "SwordWorkflow_mini.css" : "SwordWorkflow.css"));
			this.initSwordToolBar()
		},
		initMoreEvents : function (b) {
			this.wfdata.isInvokeTid = true;
			var a = b.getFunc(b.options.onSuccess);
			b.removeEvents("onSuccess");
			b.addEvent("onSuccess", function (f, d) {
				this.setWfData(d);
				parent.loadTree();
				for (var c = 0; c < a.length; c++) {
					a[c].run([f, d])
				}
			}
				.bind(this))
		},
		setEnabledStatus : function () {
			if (this.wfdata.isStarted == "0") {
				var a = "";
				for (var b = 1; b < this.options.btnStatus.length; ) {
					if (b < this.options.btnStatus.length - 2) {
						if (this.options.btnStatus.substring(b, b + 1) == "1") {
							a = a + "2"
						} else {
							a = a + this.options.btnStatus.substring(b, b + 1)
						}
					} else {
						a = a + this.options.btnStatus.substring(b, b + 1)
					}
					b = b + 1
				}
				this.options.btnStatus = "1" + a
			}
			if (this.options.saveButtonIsShow == true || this.options.saveButtonIsShow == "true") {
				this.options.btnStatus = this.options.btnStatus.substr(1, this.options.btnlist.length);
				this.options.btnStatus = "1" + this.options.btnStatus
			}
			this.wfdata.bizBtnList.each(function (d, c) {
				if (this.wfdata.oneOfMultiTaskTag == "1") {
					d.isshow = "0"
				} else {
					if (!this.isProcStarted()) {
						d.isshow = "2"
					}
				}
			}
				.bind(this))
		},
		setBtnStatusByName : function (b, a) {
			if (a == "0") {
				$w(this.toolBarName).setDisabled(b);
				$w(this.toolBarName).setHide(b)
			} else {
				if (a == "2") {
					$w(this.toolBarName).setDisabled(b)
				} else {
					$w(this.toolBarName).setEnabled(b);
					$w(this.toolBarName).setDisplay(b)
				}
			}
		},
		setButtonListStatus : function (b, a) {
			b.each(function (d, c) {
				this.setBtnStatusByName(d, a)
			}
				.bind(this))
		},
		setBtnStatusByIndex : function (b, a) {
			var c = this.options.btnlist[b];
			if (a == "0") {
				$w(this.toolBarName).setDisabled(c);
				$w(this.toolBarName).setHide(c)
			} else {
				if (a == "2") {
					$w(this.toolBarName).setDisabled(c)
				} else {
					$w(this.toolBarName).setEnabled(c);
					$w(this.toolBarName).setDisplay(c)
				}
			}
		},
		setBizButtonsEnabled : function () {
			if (this.wfdata.oneOfMultiTaskTag != "1") {
				this.wfdata.bizBtnList.each(function (b, a) {
					if (b.isshow == "1") {
						$w(this.toolBarName).setEnabled("biz_" + b.serviceName)
					}
				}
					.bind(this))
			}
		},
		setSaveEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("saveNew", "1")
			}
		},
		setSaveDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("saveNew", "2")
			}
		},
		setStartEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				if (this.wfdata.isPermitContinue) {
					if (this.wfdata.isStarted == "0") {
						this.setBtnStatusByName("saveNew", "1")
					}
				}
			}
		},
		setStartDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("saveNew", "2")
			}
		},
		setSendEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				if (this.wfdata.isPermitContinue) {
					this.setBtnStatusByName("send", "1");
					this.setFlowNextEnable()
				}
			}
		},
		setSendDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("send", "2");
				this.setFlowNextDisable()
			}
		},
		setFlowNextEnable : function () {
			var b = $w(this.toolBarName);
			if (typeof b != "undefined" && b != null) {
				var a = this.wfdata.btnStatus;
				if (this.wfdata.isPermitContinue && a.substring(3, 4) == "1") {
					this.setBtnStatusByName("flowNext", "1")
				}
			}
		},
		setFlowNextDisable : function () {
			var b = $w(this.toolBarName);
			if (typeof b != "undefined" && b != null) {
				var a = this.wfdata.btnStatus;
				if (a.substring(3, 4) == "1") {
					this.setBtnStatusByName("flowNext", "2")
				}
			}
		},
		setFlowNextTaskEnable : function () {
			var b = $w(this.toolBarName);
			if (typeof b != "undefined" && b != null) {
				var a = this.wfdata.btnStatus;
				if (this.wfdata.isPermitContinue && a.substring(10, 11) == "1") {
					this.setBtnStatusByName("nextTask", "1")
				}
			}
		},
		setFlowNextTaskDisable : function () {
			var b = $w(this.toolBarName);
			if (typeof b != "undefined" && b != null) {
				var a = this.wfdata.btnStatus;
				if (a.substring(10, 11) == "1") {
					this.setBtnStatusByName("nextTask", "0")
				}
			}
		},
		setBackEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				if (this.wfdata.isPermitContinue) {
					this.setBtnStatusByName("fallback", "1")
				}
			}
		},
		setBackDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("fallback", "2")
			}
		},
		setAssignEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				if (this.wfdata.isPermitContinue) {
					this.setBtnStatusByName("assign", "1")
				}
			}
		},
		setAssignDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("assign", "2")
			}
		},
		setSigninEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("signin", "1")
			}
		},
		setSigninDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("signin", "2")
			}
		},
		setSuspendEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("suspend", "1")
			}
		},
		setSuspendDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("suspend", "2")
			}
		},
		setActivationEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("activation", "1")
			}
		},
		setActivationDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("activation", "2")
			}
		},
		setStopEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				if (!(this.wfdata.isSychronizedSubflowStarted || this.wfdata.isProcessClosed)) {
					this.setBtnStatusByName("stop", "1")
				}
			}
		},
		setStopDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("stop", "2")
			}
		},
		setEndEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				if (!(this.wfdata.isSychronizedSubflowStarted || this.wfdata.isProcessClosed)) {
					this.setBtnStatusByName("end", "1")
				}
			}
		},
		setEndDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("end", "2")
			}
		},
		setViewProcessHidden : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("viewprocess", "0")
			}
		},
		setStartSubProcHidden : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("startSubProc", "0")
			}
		},
		setStartSubProcDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				$w(this.toolBarName).setDisplay("startSubProc");
				$w(this.toolBarName).setDisabled("startSubProc")
			}
		},
		setStartSubProcEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				if (this.wfdata.isPermitContinue && this.wfdata.isConfigedSubflow) {
					this.setBtnStatusByName("startSubProc", "1")
				}
			}
		},
		initSwordToolBar : function () {
			var k = $(document.body).getElements("div[class=wrapper]")[0];
			var f = new Element("div", {
					sword : "SwordToolBar",
					showType : this.toolBarShowType,
					name : this.toolBarName,
					id : "SwordToolBar"
				});
			if ($chk(k)) {
				$(k).grab(f, "top")
			} else {
				f.inject($$("body")[0], "top")
			}
			if (this.wfdata.isReadOnly) {
				this.wfdata.btnStatus = "000000000000";
				this.options.btnStatus = "000000000000"
			} else {
				this.setEnabledStatus()
			}
			this.options.btnlist.each(function (m, l) {
				this.createButton(l).inject(f, "bottom")
			}
				.bind(this));
			var h = [];
			this.wfdata.bizBtnList.each(function (n, l) {
				var m = new Element("div", {
						name : "biz_" + n.serviceName,
						pclass : "find",
						caption : n.buttonName,
						enabled : n.isshow == "2" ? "false" : "true",
						isShow : n.isshow == "0" ? "false" : "true"
					});
				h.include("biz_" + n.serviceName);
				m.inject(f, "bottom")
			}
				.bind(this));
			var c = this.createXtButton();
			if ($chk(c)) {
				c.inject(f, "bottom")
			}
			var b = new SwordToolBar();
			f.pNode = f;
			b.initParam(f);
			pc.widgets.set(this.toolBarName, b);
			var a = b.pNode().getElement("div[name='container']");
			var d = a.getElement("div[name='box']");
			if (this.wfdata.isFromPlsl == "1") {
				d.getElement("div[name='send']").getElements("div[name='caption']")[0].set("html", "放入推送队列")
			}
			d.getChildren().each(function (n, m) {
				var l = null;
				if ($chk(l) && l == n.get("name")) {}
				else {
					if (h.contains(n.get("name"))) {
						n.addEvent("click", function () {
							if (n.get("enabled") == "true") {
								var p = {
									titleName : "",
									width : 700,
									height : 450,
									top : 50,
									isMin : "false",
									isNormal : "true",
									isMax : "true"
								};
								p.param = {
									win : window
								};
								var q = h.indexOf(n.get("name"));
								swordAlertIframe("/sword?ctrl=" + this.wfdata.bizBtnList[q].serviceName + "&bizProcId=" + this.wfdata.bizProcId + "&bizActId=" + this.wfdata.bizActId, p, null)
							}
						}
							.bind(this))
					}
				}
			}
				.bind(this));
			if ($chk(this.wfdata.htly)) {
				var g = {
					name : "viewBackReasonBtn",
					pclass : "viewResult",
					caption : "查看回退理由",
					enabled : "true",
					onclick : "flowViewBackReason()"
				};
				this.addButton(g)
			}
		},
		createXtButton : function () {
			return null
		},
		createButton : function (c) {
			var b = this.options.btncaptions[c];
			var a = this.options.btnStatus.substring(c, c + 1);
			if ($chk(this.options.btnNames)) {
				if ($chk(this.options.btnNames[c]) && this.options.btnNames[c] != "null" && this.options.btnNames[c] != "" && this.options.btnNames[c] != null) {
					b = this.options.btnNames[c]
				}
			}
			return new Element("div", {
				name : this.options.btnlist[c],
				pclass : this.options.pclass[c],
				caption : b,
				enabled : a == "1" ? "true" : "false",
				isShow : a == "0" ? "false" : "true",
				quickKey : this.options.quickKeys[c],
				onclick : "invokeFunction(" + c + ")"
			})
		},
		addButton : function (d) {
			if ($chk(d)) {
				if (!$chk(d.name)) {
					swordAlert("添加按钮的name属性不能为空");
					return
				}
				if (this.isBizButtonExist(d.name)) {
					return
				}
				var g = new Element("div", {
						name : "biz_" + d.name,
						pclass : $chk(d.pclass) ? d.pclass : "save",
						caption : $chk(d.caption) ? d.caption : "保存",
						enabled : $chk(d.enabled) ? d.enabled : "true",
						quickKey : $chk(d.quickKey) ? d.quickKey : "",
						onclick : d.onclick
					});
				var b = $w(this.toolBarName).pNode().getElement("div[name='container']");
				var f = b.getElement("div[name='box']");
				var c = $w(this.toolBarName).creatDefualtButton(g, g.get("name"), null, g.get("pclass"), g.get("caption"), g.get("enabled"), "true");
				f.adopt(c);
				var a = $w(this.toolBarName).pNode().getChildren("div[style]");
				if (a) {
					a.setStyle("height", f.getSize().y)
				}
			}
		},
		invokeBizTid : function (b, f, d, g) {
			if (g == "false") {
				var c = {
					ctrl : "WorkFlowCTRL_bizButtonInvokeTid",
					tid : f,
					data : this.wfdata,
					onSuccess : function (h) {}

				};
				jsDelegate(c)
			} else {
				var a = "/sword?tid=Pre_CommProxy_bizButtonInvokeTid&RES_KEY_SERVICENAME=" + f + "&bizProcId=" + this.wfdata.bizProcId;
				pc.getWidget("bizUnitsTab").addTabItem({
					id : b,
					title : d,
					tabContentType : "iframe",
					src : AddBizCode2URL(a),
					isCloseBtn : "true"
				})
			}
		},
		isBizButtonExist : function (b) {
			var a = $w(this.toolBarName).pNode().getElement("div[name='container']");
			if ($chk(a.getElement("div[name='box']").getElement("div[name='biz_" + b + "']"))) {
				return true
			} else {
				return false
			}
		},
		setBizButtonEnable : function (a) {
			$w(this.toolBarName).setEnabled("biz_" + a);
			$w(this.toolBarName).setDisplay("biz_" + a)
		},
		setBizButtonDisable : function (a) {
			$w(this.toolBarName).setDisabled("biz_" + a)
		},
		setBizButtonHide : function (a) {
			$w(this.toolBarName).setHide("biz_" + a)
		},
		setBizButtonDisplay : function (a) {
			$w(this.toolBarName).setDisplay("biz_" + a)
		},
		initData : function () {
			var a = pc.getResData(this.dataname, pc.initData);
			var b = pc.getResData("bizBtnList", pc.initData);
			if ($chk(a) && $chk(a.data)) {
				var d = a.data;
				if ($chk(d.workflowFlag)) {
					this.wfdata.workflowFlag = d.workflowFlag.value
				}
				if ($chk(d.djxh)) {
					this.wfdata.wfDjxh = d.djxh.value
				}
				if ($chk(d.nsrsbh)) {
					this.wfdata.wfNsrsbh = d.nsrsbh.value
				}
				if ($chk(d.slswsxDm)) {
					this.wfdata.wfSlswsxDm = d.slswsxDm.value
				}
				if ($chk(d.btnStatus) && $chk(d.btnStatus.value)) {
					this.options.btnStatus = d.btnStatus.value;
					this.wfdata.btnStatus = d.btnStatus.value
				}
				if ($chk(d.btnNames) && $chk(d.btnNames.value)) {
					var c;
					c = d.btnNames.value.replace("[", "");
					c = d.btnNames.value.replace("]", "");
					this.options.btnNames = c.split(",")
				}
				if ($chk(b) && $chk(b.value)) {
					this.wfdata.bizBtnList = JSON.decode(b.value)
				}
				if ($chk(d.rwbldz)) {
					this.wfdata.rwbldz = d.rwbldz.value
				}
				if ($chk(d.bizProcId)) {
					this.wfdata.bizProcId = d.bizProcId.value
				}
				if ($chk(d.bizActId)) {
					this.wfdata.bizActId = d.bizActId.value
				}
				if ($chk(d.bizPreActId)) {
					this.wfdata.bizPreActId = d.bizPreActId.value
				}
				if ($chk(d.wfWsh)) {
					this.wfdata.wfWsh = d.wfWsh.value
				}
				if ($chk(d.wfTaxItemID)) {
					this.wfdata.wfTaxItemID = d.wfTaxItemID.value
				}
				if ($chk(d.isShowSpForm)) {
					this.wfdata.isShowSpForm = d.isShowSpForm.value
				}
				if ($chk(d.oneOfMultiTaskTag)) {
					this.wfdata.oneOfMultiTaskTag = d.oneOfMultiTaskTag.value
				}
				if ($chk(d.wfTaskOrigin)) {
					this.wfdata.wfTaskOrigin = d.wfTaskOrigin.value
				}
				if ($chk(d.wfTaskState)) {
					this.wfdata.wfTaskState = d.wfTaskState.value
				}
				if ($chk(d.subSendFlag)) {
					this.wfdata.subSendFlag = d.subSendFlag.value
				}
				if ($chk(d.glLcswsxDm)) {
					this.wfdata.glLcswsxDm = d.glLcswsxDm.value
				}
				if ($chk(d.gllcsfxs)) {
					this.wfdata.gllcsfxs = d.gllcsfxs.value
				}
				this.wfdata.batchMainWidget = this.options.batchMainWidget;
				if ($chk(this.wfdata.batchMainWidget)) {
					this.wfdata.isTaskMerger = "1"
				}
				if ($chk(d.isShowApproveHistory)) {
					if (d.isShowApproveHistory.value == "true" || d.isShowApproveHistory.value == true) {
						this.wfdata.isShowApproveHistory = true
					}
				}
				if (this.options.isShowApproveHistory == true || this.options.isShowApproveHistory == "true") {
					this.wfdata.isShowApproveHistory = true
				}
				if ($chk(d.isConfigedSubflow)) {
					if (d.isConfigedSubflow.value == "true" || d.isConfigedSubflow.value == true) {
						this.wfdata.isConfigedSubflow = true
					}
				}
				if ($chk(d.isReadOnly)) {
					if (d.isReadOnly.value == "true" || d.isReadOnly.value == true) {
						this.wfdata.isReadOnly = true
					}
				}
				if ($chk(d.isxh)) {
					if (d.isxh.value == "true" || d.isxh.value == true) {
						this.wfdata.isxh = true
					}
				}
				if ($chk(d.isZs)) {
					if (d.isZs.value == "true" || d.isZs.value == true) {
						this.wfdata.isZs = true
					}
				}
				if ($chk(d.parentLcslid)) {
					this.wfdata.parentLcslid = d.parentLcslid.value
				}
				if ($chk(d.htly)) {
					this.wfdata.htly = d.htly.value
				}
				if ($chk(d.isFromPlsl)) {
					this.wfdata.isFromPlsl = d.isFromPlsl.value;
					if (this.wfdata.isFromPlsl == "1") {
						this.options.btnStatus = "10100000010";
						this.wfdata.btnStatus = "10100000010"
					}
				}
				if ($chk(d.gzxid)) {
					this.wfdata.gzxid = d.gzxid.value
				}
				if ($chk(d.lcBatchNumber)) {
					this.wfdata.lcBatchNumber = d.lcBatchNumber.value
				}
				if ($chk(d.dzzlSwryDm)) {
					this.wfdata.dzzlSwryDm = d.dzzlSwryDm.value
				}
				if ($chk(d.dzzlSwjgDm)) {
					this.wfdata.dzzlSwjgDm = d.dzzlSwjgDm.value
				}
				if ($chk(d.isNeedDzzlCaiji)) {
					this.wfdata.isNeedDzzlCaiji = d.isNeedDzzlCaiji.value
				}
				this.copyResData2Wfdata(d)
			}
		},
		setWfData : function (b) {
			this.wfdata.message = "";
			var a = pc.getResData(this.dataname, b);
			if ($chk(a) && $chk(a.data)) {
				var c = a.data;
				this.copyResData2Wfdata(c);
				if ($chk(c.wfPerformerSelector)) {
					this.wfdata.wfPerformerSelector = c.wfPerformerSelector.value
				}
				if ($chk(c.wfDepartSelector)) {
					this.wfdata.wfDepartSelector = c.wfDepartSelector.value
				}
				if ($chk(c.wfPostSelector)) {
					this.wfdata.wfPostSelector = c.wfPostSelector.value
				}
				if ($chk(c.glLcswsxDm)) {
					this.wfdata.glLcswsxDm = c.glLcswsxDm.value
				}
				if ($chk(c.xhlcdyid)) {
					this.wfdata.xhlcdyid = c.xhlcdyid.value
				}
				if ($chk(c.xhhddyid)) {
					this.wfdata.xhhddyid = c.xhhddyid.value
				}
				if ($chk(c.xhfhddyid)) {
					this.wfdata.xhfhddyid = c.xhfhddyid.value
				}
				if ($chk(c.xhflcdyid)) {
					this.wfdata.xhflcdyid = c.xhflcdyid.value
				}
				if ($chk(c.xhmodelid)) {
					this.wfdata.xhmodelid = c.xhmodelid.value
				}
			}
		},
		copyResData2Wfdata : function (a) {
			if ($chk(a.isShowSpForm) && $chk(a.isShowSpForm.value)) {
				if (a.isShowSpForm.value == "true" || a.isShowSpForm.value == true) {
					this.wfdata.isShowSpForm = true
				} else {
					this.wfdata.isShowSpForm = false
				}
			}
			if ($chk(a.processInsId) && $chk(a.processInsId.value)) {
				this.wfdata.processInsId = a.processInsId.value;
				this.wfdata.isStarted = "1"
			}
			if ($chk(a.actInsId)) {
				this.wfdata.actInsId = a.actInsId.value
			}
			if ($chk(a.subSendFlag)) {
				this.wfdata.subSendFlag = a.subSendFlag.value
			}
			if ($chk(a.rwbldz)) {
				this.wfdata.rwbldz = a.rwbldz.value
			}
			if ($chk(a.parentProcessInsId)) {
				this.wfdata.parentProcessInsId = a.parentProcessInsId.value
			}
			if ($chk(a.parentActInsId)) {
				this.wfdata.parentActInsId = a.parentActInsId.value
			}
			if ($chk(a.lcdyid)) {
				this.wfdata.lcdyid = a.lcdyid.value
			}
			if ($chk(a.actDefId)) {
				this.wfdata.actDefId = a.actDefId.value
			}
			if ($chk(a.workItemId)) {
				this.wfdata.workItemId = a.workItemId.value
			}
			if ($chk(a.bizProcId) && $chk(a.bizProcId.value)) {
				this.wfdata.bizProcId = a.bizProcId.value
			}
			if ($chk(a.bizActId) && $chk(a.bizActId.value)) {
				this.wfdata.bizActId = a.bizActId.value
			}
			if ($chk(a.parentWorkItemId)) {
				this.wfdata.parentWorkItemId = a.parentWorkItemId.value
			}
			if ($chk(a.message)) {
				this.wfdata.message = a.message.value
			}
			if ($chk(a.operatorOrgCode)) {
				this.wfdata.operatorOrgCode = a.operatorOrgCode.value
			}
			if ($chk(a.nextActDefId)) {
				this.wfdata.nextActDefId = a.nextActDefId.value
			}
			if ($chk(a.isFinalTask) && $chk(a.isFinalTask.value)) {
				if (a.isFinalTask.value == "true" || a.isFinalTask.value == true) {
					this.wfdata.isFinalTask = "true"
				} else {
					this.wfdata.isFinalTask = "false"
				}
			}
			if ($chk(a.SWJG_DM)) {
				this.wfdata.SWJG_DM = a.SWJG_DM.value
			}
			if ($chk(a.returnCode)) {
				this.wfdata.returnCode = a.returnCode.value
			}
			if ($chk(a.sjmc)) {
				this.wfdata.sjmc = a.sjmc.value
			}
			if ($chk(a.sjlx)) {
				this.wfdata.sjlx = a.sjlx.value
			}
			if ($chk(a.sjbl)) {
				this.wfdata.sjbl = a.sjbl.value
			}
			if ($chk(a.sjslid)) {
				this.wfdata.sjslid = a.sjslid.value
			}
			if ($chk(a.isMultiEventStartPro)) {
				if (a.isMultiEventStartPro.value == "true" || a.isMultiEventStartPro.value == true) {
					this.wfdata.isMultiEventStartPro = true
				} else {
					this.wfdata.isMultiEventStartPro = false
				}
			}
			if ($chk(a.canSend)) {
				this.wfdata.canSend = a.canSend.value
			}
			if ($chk(a.sednMessage)) {
				this.wfdata.sednMessage = a.sednMessage.value
			}
			if ($chk(a.sjState)) {
				this.wfdata.sjState = a.sjState.value
			}
			if ($chk(a.sjgzid)) {
				this.wfdata.sjgzid = a.sjgzid.value
			}
			if ($chk(a.sjType)) {
				this.wfdata.sjType = a.sjType.value
			}
			if ($chk(a.isTaskMerger) && a.isTaskMerger.value == "1") {
				this.wfdata.isTaskMerger = a.isTaskMerger.value;
				this.wfdata.isStarted = "1"
			}
			if ($chk(a.zndm)) {
				this.wfdata.zndm = a.zndm.value
			}
			if ($chk(a.jsdm)) {
				this.wfdata.jsdm = a.jsdm.value
			}
			if ($chk(a.isConfigedSubflow) && $chk(a.isConfigedSubflow.value)) {
				if (a.isConfigedSubflow.value == "true" || a.isConfigedSubflow.value == true) {
					this.wfdata.isConfigedSubflow = true
				} else {
					this.wfdata.isConfigedSubflow = false
				}
			}
			if ($chk(a.nextWorkitemId)) {
				this.wfdata.nextWorkitemId = a.nextWorkitemId.value
			}
		},
		initSubmitComponent : function () {
			var a = this.options.btnlist.indexOf("saveNew");
			var b = this.options.pNode.get(this.options.btnclickparam[a]);
			if (this.options.startType == "2") {
				if (!$chk(b)) {
					swordAlert("请配置流程启动要提交的组件");
					return
				}
				var c = $w(b);
				if (!$chk(c)) {
					swordAlert("未找到流程启动要提交的组件" + b);
					return
				}
				this.wfdata.isInvokeTid = true;
				c.setCtrl(this.ctrls.start);
				c.pushData(this.dataname, JSON.encode(this.wfdata));
				c.addEvent("onSuccess", function (f, d) {
					this.setWfData(d);
					this.resumeEvents(c, "onSuccess");
					if (this.wfdata.isStarted) {
						c.setCtrl(null)
					}
				}
					.bind(this))
			}
		},
		startWithoutSave : function (a) {
			if (!$chk(a)) {
				swordAlert("请配置流程启动要提交的组件");
				return
			}
			var b = $w(a);
			if (!$chk(b)) {
				swordAlert("未找到流程启动要提交的组件" + a);
				return
			}
			this.setBtnStatusByName("start", "2");
			this.wfdata.isInvokeTid = false;
			b.setCtrl(this.ctrls.start);
			b.pushData(this.dataname, JSON.encode(this.wfdata));
			b.removeEvents("onSubmitBefore");
			b.removeEvents("onSubmitAfter");
			b.removeEvents("onSuccess");
			b.addEvent("onSuccess", function (d, c) {
				this.setWfData(c);
				if (this.wfdata.returnCode == "1") {
					this.setBtnStatusByName("start", "2");
					this.setSendEnable();
					this.setBtnStatusByName("viewprocess", "1");
					if ($chk(this.wfdata.subSendFlag)) {
						this.initSendSubShow(this.wfdata.subSendFlag)
					}
					this.setBizButtonsEnabled()
				}
			}
				.bind(this));
			b.submit();
			if (b.isContinue == false) {
				this.setBtnStatusByName("start", "1")
			}
			this.resumeEvents(b, "onSuccess");
			this.resumeEvents(b, "onSubmitAfter");
			this.resumeEvents(b, "onSubmitBefore");
			b.setCtrl(null)
		},
		saveAndStart : function (a) {
			if (!$chk(a)) {
				swordAlert("请配置流程启动要提交的组件");
				return
			}
			var b = $w(a);
			if (!$chk(b)) {
				swordAlert("未找到流程启动要提交的组件" + a);
				return
			}
			b.submit()
		},
		startAndSave : function (c) {
			var d;
			if (typeof getStartSubmit != "undefined" && getStartSubmit instanceof Function) {
				d = getStartSubmit()
			} else {
				if (typeof getSaveSubmit != "undefined" && getSaveSubmit instanceof Function) {
					d = getSaveSubmit()
				} else {
					swordAlert("请重写getStartSubmit方法或getSaveSubmit方法");
					return
				}
			}
			if (!$chk(d)) {
				return
			}
			d.pushData(this.dataname, JSON.encode(this.wfdata));
			if (this.wfdata.isShowSpForm) {
				d.pushData($w("opinionForm").getSubmitData())
			}
			var b = d.getFunc(d.options.onSubmitBefore);
			var a = d.getFunc(d.options.onSuccess);
			d.removeEvents("onSubmitBefore");
			d.addEvent("onSubmitBefore", function (h, g) {
				this.setBtnStatusByName("saveNew", "2");
				for (var f = 0; f < b.length; f++) {
					b[f].run([h, g])
				}
				if (d.isContinue == false) {
					this.setBtnStatusByName("saveNew", "1")
				}
			}
				.bind(this));
			d.removeEvents("onSuccess");
			d.addEvent("onSuccess", function (h, g) {
				this.setWfData(g);
				this.wfdata.message = "";
				if (this.wfdata.returnCode == "1") {
					this.setBtnStatusByName("fallback", "2");
					this.setBtnStatusByName("saveNew", "1");
					this.setBtnStatusByName("stop", this.wfdata.btnStatus.substring(6, 7));
					this.setSendEnable();
					this.setBtnStatusByName("viewprocess", "1");
					this.setBizButtonsEnabled();
					if ($chk(this.wfdata.subSendFlag)) {
						this.initSendSubShow(this.wfdata.subSendFlag)
					}
					for (var f = 0; f < a.length; f++) {
						a[f].run([h, g])
					}
					if (typeof getBizAlertMessage != "undefined" && getBizAlertMessage instanceof Function) {
						getBizAlertMessage()
					} else {
						swordAlertRight("保存成功!")
					}
					if (this.wfdata.isFromPlsl == "1") {
						parent.reloadTree()
					}
				}
			}
				.bind(this));
			d.submit()
		},
		startAndSaveAndSend : function (a) {
			if (!$chk(a)) {
				swordAlert("请配置流程启动要提交的组件");
				return
			}
			var b = $w(a);
			if (!$chk(b)) {
				swordAlert("未找到流程启动要提交的组件" + a);
				return
			}
			this.wfdata.isInvokeTid = false;
			b.setCtrl(this.ctrls.start);
			b.pushData(this.dataname, JSON.encode(this.wfdata));
			b.removeEvents("onSubmitAfter");
			b.removeEvents("onSuccess");
			b.addEvent("onSuccess", function (f, d) {
				this.setWfData(d);
				if (this.wfdata.returnCode == "1") {
					this.setBtnStatusByName("start", "2");
					this.setBtnStatusByName("viewprocess", "1");
					b.removeEvents("onSubmitBefore");
					var c = this.options.btnlist.indexOf("start");
					this.pNode().set(this.options.tidinvokeparam[c], false);
					this.flowPredictWithSubmit(b);
					b.removeEvents("onSubmitAfter")
				}
			}
				.bind(this));
			b.submit();
			this.resumeEvents(b, "onSubmitBefore");
			this.resumeEvents(b, "onSubmitAfter");
			this.resumeEvents(b, "onSuccess");
			b.setCtrl(null)
		},
		flowSave : function (c) {
			var d;
			if (typeof getSaveSubmit != "undefined" && getSaveSubmit instanceof Function) {
				d = getSaveSubmit()
			} else {
				if (typeof getStartSubmit != "undefined" && getStartSubmit instanceof Function) {
					d = getStartSubmit()
				} else {
					swordAlert("请重写getSaveSubmit或getStartSubmit方法");
					return
				}
			}
			if (!$chk(d)) {
				return
			}
			d.pushData(this.dataname, JSON.encode(this.wfdata));
			if (this.wfdata.isShowSpForm) {
				d.pushData($w("opinionForm").getSubmitData())
			}
			if (this.wfdata.oneOfMultiTaskTag != "1") {
				var b = d.getFunc(d.options.onSubmitBefore);
				var a = d.getFunc(d.options.onSuccess);
				d.removeEvents("onSubmitBefore");
				d.removeEvents("onSuccess");
				d.addEvent("onSubmitBefore", function (h, g) {
					this.setBtnStatusByName("saveNew", "2");
					for (var f = 0; f < b.length; f++) {
						b[f].run([h, g])
					}
					if (d.isContinue == false) {
						this.setBtnStatusByName("saveNew", "1")
					}
				}
					.bind(this));
				d.addEvent("onSuccess", function (h, g) {
					this.setWfData(g);
					this.wfdata.message = "";
					this.setSaveEnable();
					for (var f = 0; f < a.length; f++) {
						a[f].run([h, g])
					}
					if (typeof getBizAlertMessage != "undefined" && getBizAlertMessage instanceof Function) {
						getBizAlertMessage()
					}
				}
					.bind(this))
			} else {
				this.initMoreEvents(d)
			}
			d.submit()
		},
		flowStart : function (b) {
			if (this.wfdata.isShowSpForm) {
				if ($w("opinionForm").getValue("result") == "0") {
					var a = $w("opinionForm").getValue("opinion").replace(/(^\s*)|(\s*$)/g, "");
					if (a == "") {
						swordAlert('审批结果为"不同意"时，审批意见不能为空!');
						return
					}
				}
			}
			if (this.wfdata.isStarted == "0") {
				if (typeof checkBeforeStart != "undefined" && checkBeforeStart instanceof Function) {
					checkBeforeStart()
				} else {
					this.startAndSave(b)
				}
			} else {
				if (typeof checkBeforeSave != "undefined" && checkBeforeSave instanceof Function) {
					checkBeforeSave()
				} else {
					this.flowSave(b)
				}
			}
		},
		flowAssign : function (d) {
			var b = this.options.btnlist.indexOf("assign");
			var a = this.pNode().get(this.options.tidinvokeparam[b]);
			if ($chk(a)) {
				if (a == true || a == "true") {
					this.wfdata.isInvokeTid = true
				} else {
					this.wfdata.isInvokeTid = false
				}
			} else {
				this.wfdata.isInvokeTid = false
			}
			var c = window.showModalDialog("/workflow/htmls/wfAssignSelect.html", this.wfdata, "dialogHeight: 410px; dialogWidth: 410px; dialogTop: 120px; dialogLeft: " + (window.screen.availWidth / 2 - 200) + "px; edge: Raised; center: yes; help: yes; resizable: yes; status: yes;");
			if ($chk(c)) {
				this.wfdata.userList = JSON.decode(c);
				this.submit(d, this.ctrls.assign)
			}
		},
		flowBack : function (a) {
			if (typeof checkBeforeBack != "undefined" && checkBeforeBack instanceof Function) {
				checkBeforeBack()
			} else {
				this.flowBackConfirm()
			}
		},
		flowBackConfirm : function () {
			var b = {
				titleName : "回退确认",
				width : 500,
				height : 270,
				isMin : "false",
				isNormal : "false",
				isMax : "false"
			};
			b.param = {
				win : window,
				swordWorkflowName : this.options.name,
				submitName : this.pNode().get("backsubmit")
			};
			var a = this.wfdata.workItemId;
			swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initFlowbackConfirmPage&workitemId=" + a), b, null)
		},
		flowBackCommand : function (f, b) {
			if ($chk(b)) {
				this.wfdata.htly = b
			}
			if (typeof getBackSubmit != "undefined" && getBackSubmit instanceof Function) {
				var c = getBackSubmit();
				if (!$chk(c)) {
					return
				}
				var a = c.getFunc(c.options.onSuccess);
				var d = c.getFunc(c.options.onSubmitAfter);
				c.removeEvents("onSubmitAfter");
				c.removeEvents("onSuccess");
				c.addEvent("onSuccess", function (k, h) {
					this.setWfData(h);
					this.showMessage();
					if (this.wfdata.returnCode == "1") {
						this.options.btnlist.each(function (m, l) {
							if (m != "viewprocess" && m != "nextTask") {
								this.setBtnStatusByName(m, "2")
							}
						}
							.bind(this));
						this.wfdata.isPermitContinue = false
					}
					for (var g = 0; g < a.length; g++) {
						a[g].run([k, h])
					}
					for (var g = 0; g < d.length; g++) {
						d[g].run([k, h])
					}
					if ($chk(window.top.refreshDbsy)) {
						window.top.refreshDbsy()
					} else {
						window.returnValue = "refresh"
					}
				}
					.bind(this));
				c.pushData(this.dataname, JSON.encode(this.wfdata));
				c.submit()
			} else {
				var c = new SwordSubmit();
				c.setCtrl(this.ctrls.back);
				c.addEvent("onSuccess", function (h, g) {
					this.setWfData(g);
					this.showMessage();
					if (this.wfdata.returnCode == "1") {
						this.options.btnlist.each(function (l, k) {
							if (l != "viewprocess" && l != "nextTask") {
								this.setBtnStatusByName(l, "2")
							}
						}
							.bind(this));
						this.wfdata.isPermitContinue = false
					}
					if ($chk(window.top.refreshDbsy)) {
						window.top.refreshDbsy()
					} else {
						window.returnValue = "refresh"
					}
				}
					.bind(this));
				c.pushData(this.dataname, JSON.encode(this.wfdata));
				c.submit()
			}
		},
		flowSignin : function (a) {
			this.submit(a, this.ctrls.signin)
		},
		resumeEvents : function (d, b) {
			d.removeEvents(b);
			var a = d.getFunc(d.options[b]);
			for (var c = 0; c < a.length; c++) {
				d.addEvent(b, a[c])
			}
		},
		flowPredictWithSubmit : function (b) {
			if ("1" == this.wfdata.isFromPlsl) {
				this.setSendDisable();
				this.setBtnStatusByName("saveNew", "2");
				parent.workitemIds.include(this.wfdata.workItemId);
				parent.checkCanSend();
				return
			}
			b.setCtrl(this.ctrls.predict);
			b.pushData(this.dataname, JSON.encode(this.wfdata));
			if (this.wfdata.isShowSpForm) {
				b.pushData($w("opinionForm").getSubmitData())
			}
			var a = b.getFunc(b.options.onSubmitBefore);
			b.removeEvents("onSubmitBefore");
			b.addEvent("onSubmitBefore", function (f, d) {
				this.setSendDisable();
				for (var c = 0; c < a.length; c++) {
					a[c].run([f, d])
				}
				if (b.isContinue == false) {
					this.setSendEnable()
				}
			}
				.bind(this));
			b.removeEvents("onSuccess");
			b.removeEvents("onSubmitAfter");
			b.addEvent("onSuccess", function (c, y) {
				this.dataContainer.combine(b.dataContainer);
				this.setWfData(y);
				if ($chk(pc.getResData("istsxtr", y))) {
					this.wfdata.isTsxtr = "1";
					this.options.isShowSelector = "false"
				}
				if (this.options.isShowSelector == "false") {
					var h = "";
					if ($chk(pc.getResData("defaultNextActDefId", y))) {
						h = pc.getResData("defaultNextActDefId", y).value
					}
					this.wfdata.nextActDefId = h;
					if ("END" != h) {
						var x = pc.getResData("allNextActUser", y).data.data.value;
						var r = JSON.decode(x);
						var p = null;
						for (var u = 0; u < r.length; u++) {
							if (h == r[u].nextActDefID) {
								p = r[u];
								break
							}
						}
						var t = p.orgcode;
						var l = pc.getResData(h + t, y).trs;
						var n = [];
						l.each(function (B, A) {
							var C = B.tds;
							var z = new Hash();
							z.set("userId", C.swryDm.value);
							try {
								z.set("swjgDm", C.swjgDm.value);
								z.set("gwDm", C.gwDm.value);
								z.set("swrysfDm", C.swrysfDm.value);
								if ($chk(C.actDefId) && $chk(C.actDefId.value)) {
									z.set("actDefId", C.actDefId.value)
								}
							} catch (D) {}

							n.include(z)
						});
						this.wfdata.userList = n
					}
					this.flowSendWithSubmit(b)
				} else {
					var k = pc.getResData("sfgd", y);
					if ($chk(k)) {
						this.setSendEnable();
						var f = pc.getResData("servicename", y);
						var d = "/sword?tid=" + f.value;
						var s = pc.getResData("bizProcId", y);
						d = d + "&bizProcId=" + s.value;
						var q = pc.getResData("wfTaxItemID", y);
						d = d + "&wfTaxItemID=" + q.value;
						var w = pc.getResData("slTaxItemID", y);
						d = d + "&slTaxItemID=" + w.value;
						var g = {
							titleName : "选择归档办理人",
							width : 700,
							height : 450,
							isMin : "false",
							isNormal : "false",
							isMax : "false"
						};
						g.param = {
							win : window,
							data : y,
							swordWorkflowName : this.options.name
						};
						swordAlertIframe(AddBizCode2URL(d), g, null)
					} else {
						var m = pc.getResData("isOpen", y);
						if ($chk(m)) {
							var g = {
								titleName : "选择子流程第一环节办理人",
								width : 700,
								height : 450,
								isMin : "false",
								isNormal : "false",
								isMax : "false"
							};
							g.param = {
								win : window,
								data : y,
								swordWorkflowName : this.options.name
							};
							swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initSubProcSelectPage"), g, null)
						} else {
							var v = pc.getResData("nextActDefList", y, "dataName").data;
							var g = {
								titleName : "选择下一环节办理人",
								width : 700,
								height : 450,
								isMin : "false",
								isNormal : "true",
								isMax : "true",
								onClose : function () {
									this.onBoxClosing()
								}
								.bind(this)
							};
							g.param = {
								win : window,
								data : y,
								swordWorkflowName : this.options.name,
								submitName : this.pNode().get("sendsubmit")
							};
							if ($chk(pc.getResData("manualSelect", y))) {
								swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initManualParticipantSelectPage"), g, null)
							} else {
								if (v.length > 1) {
									swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initMulitParticipantSelectPage"), g, null)
								} else {
									swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initParticipantSelectPage"), g, null)
								}
							}
						}
					}
				}
			}
				.bind(this));
			b.submit()
		},
		flowPredictWithoutSubmitOnSuccess : function (a, w) {
			this.setWfData(w);
			var g = pc.getResData("sfgd", w);
			if ($chk(pc.getResData("istsxtr", w))) {
				this.wfdata.isTsxtr = "1";
				this.options.isShowSelector = "false"
			}
			if (this.options.isShowSelector == "false") {
				var f = "";
				if ($chk(pc.getResData("defaultNextActDefId", w))) {
					f = pc.getResData("defaultNextActDefId", w).value
				}
				this.wfdata.nextActDefId = f;
				if ("END" != f) {
					var v = pc.getResData("allNextActUser", w).data.data.value;
					var p = JSON.decode(v);
					var m = null;
					for (var r = 0; r < p.length; r++) {
						if (f == p[r].nextActDefID) {
							m = p[r];
							break
						}
					}
					var s = m.orgcode;
					var h = pc.getResData(f + s, w).trs;
					var l = [];
					h.each(function (z, y) {
						var A = z.tds;
						var x = new Hash();
						x.set("userId", A.swryDm.value);
						try {
							x.set("swjgDm", A.swjgDm.value);
							x.set("gwDm", A.gwDm.value);
							x.set("swrysfDm", A.swrysfDm.value);
							if ($chk(A.actDefId) && $chk(A.actDefId.value)) {
								x.set("actDefId", A.actDefId.value)
							}
						} catch (B) {}

						l.include(x)
					});
					this.wfdata.userList = l
				}
				this.flowSendWithoutSubmit()
			} else {
				if ($chk(g)) {
					this.setSendEnable();
					var c = pc.getResData("servicename", w);
					var b = "/sword?tid=" + c.value;
					var q = pc.getResData("bizProcId", w);
					b = b + "&bizProcId=" + q.value;
					var n = pc.getResData("wfTaxItemID", w);
					b = b + "&wfTaxItemID=" + n.value;
					var u = pc.getResData("slTaxItemID", w);
					b = b + "&slTaxItemID=" + u.value;
					var d = {
						titleName : "选择归档办理人",
						width : 700,
						height : 450,
						isMin : "false",
						isNormal : "false",
						isMax : "false"
					};
					d.param = {
						win : window,
						data : w,
						swordWorkflowName : this.options.name
					};
					swordAlertIframe(AddBizCode2URL(b), d, null)
				} else {
					var k = pc.getResData("isOpen", w);
					if ($chk(k)) {
						var d = {
							titleName : "选择子流程第一环节办理人",
							width : 700,
							height : 450,
							isMin : "false",
							isNormal : "false",
							isMax : "false"
						};
						d.param = {
							win : window,
							data : w,
							swordWorkflowName : this.options.name
						};
						swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initSubProcSelectPage"), d, null)
					} else {
						if ($chk(this.wfdata.wfPerformerSelector) || $chk(this.wfdata.wfRoleSelector)) {
							this.flowSendWithoutSubmit()
						} else {
							var t = pc.getResData("nextActDefList", w, "dataName").data;
							var d = {
								titleName : "选择下一环节办理人",
								width : 700,
								height : 450,
								isMin : "false",
								isNormal : "false",
								isMax : "false",
								onClose : function () {
									this.onBoxClosing()
								}
								.bind(this)
							};
							d.param = {
								win : window,
								data : w,
								swordWorkflowName : this.options.name,
								submitName : this.pNode().get("sendsubmit")
							};
							if (t.lenght > 1) {
								swordAlertIframe(("/sword?tid=Pre_WorkflowInitPageProxy_initMulitParticipantSelectPage"), d, null)
							} else {
								swordAlertIframe(("/sword?tid=Pre_WorkflowInitPageProxy_initParticipantSelectPage"), d, null)
							}
						}
					}
				}
			}
		},
		flowPredictWithoutSubmit : function () {
			if ("1" == this.wfdata.isFromPlsl) {
				this.setSendDisable();
				this.setBtnStatusByName("saveNew", "2");
				parent.workitemIds.include(this.wfdata.workItemId);
				parent.checkCanSend();
				return
			}
			this.setSendDisable();
			if (typeof getSendSubmit != "undefined" && getSendSubmit instanceof Function) {
				if ($chk(getSendSubmit())) {
					this.flowPredictWithSubmit(getSendSubmit())
				} else {
					var a = new SwordSubmit();
					a.setCtrl(this.ctrls.predict);
					a.addEvent("onSuccess", function (c, b) {
						this.flowPredictWithoutSubmitOnSuccess(c, b)
					}
						.bind(this));
					a.pushData(this.dataname, JSON.encode(this.wfdata));
					if (this.wfdata.isShowSpForm) {
						a.pushData($w("opinionForm").getSubmitData())
					}
					a.submit()
				}
			} else {
				var a = new SwordSubmit();
				a.setCtrl(this.ctrls.predict);
				a.addEvent("onSuccess", function (c, b) {
					this.flowPredictWithoutSubmitOnSuccess(c, b)
				}
					.bind(this));
				a.pushData(this.dataname, JSON.encode(this.wfdata));
				if (this.wfdata.isShowSpForm) {
					a.pushData($w("opinionForm").getSubmitData())
				}
				a.submit()
			}
		},
		flowSendWithSubmit : function (d) {
			d = getSendSubmit();
			d.options.submitConfirm = "false";
			var a = d.getFunc(d.options.onSuccess);
			var c = d.getFunc(d.options.onSubmitAfter);
			d.removeEvents("onSubmitBefore");
			d.removeEvents("onSuccess");
			var b = this.wfdata.isClickNext;
			d.addEvent("onSuccess", function (h, g) {
				this.setWfData(g);
				if (this.wfdata.returnCode == "1") {
					this.options.btnlist.each(function (l, k) {
						if (l != "viewprocess" && l != "nextTask") {
							this.setBtnStatusByName(l, "2")
						}
					}
						.bind(this));
					this.wfdata.isPermitContinue = false;
					if (this.wfdata.subSendFlag == "resumeAndSubmit") {
						this.wfdata.subSendFlag = "";
						this.wfdata.isFinalTask = "false";
						this.flowPredictWithoutSubmit()
					}
				}
				for (var f = 0; f < a.length; f++) {
					a[f].run([h, g])
				}
				for (var f = 0; f < c.length; f++) {
					c[f].run([h, g])
				}
				this.clear();
				if ($chk(window.top.refreshDbsy)) {
					window.top.refreshDbsy()
				} else {
					window.returnValue = "refresh"
				}
				if (b == "1") {
					this.flowNext()
				}
				if (b != "1") {
					swordAlertRight("推送成功！")
				}
			}
				.bind(this));
			d.dataContainer.combine(this.dataContainer);
			if (this.wfdata.isShowSpForm) {
				d.pushData($w("opinionForm").getSubmitData())
			}
			if ($chk(this.wfdata.fjxx)) {
				d.pushData(this.wfdata.fjxx)
			}
			d.pushData(this.dataname, JSON.encode(this.wfdata));
			d.submit()
		},
		flowStartSubFlowSubmit : function () {
			var a = {
				ctrl : "WorkFlowCTRL_startSubProcess",
				data : {
					WFDATA : this.wfdata
				},
				onSuccess : function (b) {
					this.setWfData(b);
					var c = pc.getResData(this.dataname, b);
					if (this.wfdata.returnCode == "1") {
						this.setStartSubProcDisable();
						this.setSendEnable();
						if ($chk(c) && $chk(c.data)) {
							if ($chk(c.data.zxfs) && c.data.zxfs.value == "0") {
								this.wfdata.isPermitContinue = false;
								this.wfdata.isSychronizedSubflowStarted = true;
								this.options.btnlist.each(function (f, d) {
									if (f != "viewprocess" && f != "nextTask") {
										this.setBtnStatusByName(f, "2")
									}
								}
									.bind(this))
							}
						}
					}
					if (typeof subProcSuccessFun != "undefined" && subProcSuccessFun instanceof Function) {
						subProcSuccessFun()
					}
					this.showMessage()
				}
				.bind(this)
			};
			jsDelegate(a)
		},
		flowSendWithoutSubmit : function () {
			var a = new SwordSubmit();
			a.setCtrl(this.ctrls.send);
			a.addEvent("onSuccess", function (c, b) {
				this.flowSendWithoutSubmitSuccess(c, b)
			}
				.bind(this));
			a.pushData(this.dataname, JSON.encode(this.wfdata));
			if (this.wfdata.isShowSpForm) {
				a.pushData($w("opinionForm").getSubmitData())
			}
			a.submit()
		},
		flowSendWithoutSubmitSuccess : function (c, b) {
			this.setWfData(b);
			this.setBtnStatusByName("send", "2");
			var a = this.wfdata.isClickNext;
			if (this.wfdata.returnCode == "1") {
				this.options.btnlist.each(function (f, d) {
					if (f != "viewprocess" && f != "nextTask") {
						this.setBtnStatusByName(f, "2")
					}
				}
					.bind(this));
				this.wfdata.isPermitContinue = false
			}
			if (this.wfdata.subSendFlag == "resumeAndSubmit") {
				this.wfdata.subSendFlag = "";
				this.wfdata.isFinalTask = "false";
				this.flowPredictWithoutSubmit()
			}
			if (a != "1") {
				this.showMessage()
			}
			if ($chk(window.top.refreshDbsy)) {
				window.top.refreshDbsy()
			} else {
				window.returnValue = "refresh"
			}
			if (a == "1") {
				this.flowNext()
			}
		},
		flowSend : function (c) {
			if (this.wfdata.canSend == "false") {
				swordAlert(this.wfdata.sendMessage);
				return
			}
			if (this.wfdata.isShowSpForm) {
				if ($w("opinionForm").getValue("result") == "0") {
					var b = $w("opinionForm").getValue("opinion").replace(/(^\s*)|(\s*$)/g, "");
					if (b == "") {
						swordAlert('审批结果为"不同意"时，审批意见不能为空!');
						return
					}
				}
			}
			if ("Y" == this.wfdata.isNeedDzzlCaiji) {
				this.flowDzzlPredict()
			} else {
				if (typeof checkBeforeSend != "undefined" && checkBeforeSend instanceof Function) {
					checkBeforeSend()
				} else {
					if (typeof getSendSubmit != "undefined" && getSendSubmit instanceof Function) {
						var a = getSendSubmit();
						if (!$chk(a)) {
							return
						}
						this.flowPredictWithSubmit(a)
					} else {
						this.flowPredictWithoutSubmit()
					}
				}
			}
		},
		flowNextPredict : function () {
			if (this.wfdata.canSend == "false") {
				swordAlert(this.wfdata.sendMessage);
				return
			}
			if (this.wfdata.isShowSpForm) {
				if ($w("opinionForm").getValue("result") == "0") {
					var a = $w("opinionForm").getValue("opinion").replace(/(^\s*)|(\s*$)/g, "");
					if (a == "") {
						swordAlert('审批结果为"不同意"时，审批意见不能为空!');
						return
					}
				}
			}
			if (typeof checkBeforeNext != "undefined" && checkBeforeNext instanceof Function) {
				checkBeforeNext()
			} else {
				if (typeof checkBeforeSend != "undefined" && checkBeforeSend instanceof Function) {
					swordAlert("该业务有推送前校验,请使用推送功能!");
					return
				} else {
					if (typeof getSendSubmit != "undefined" && getSendSubmit instanceof Function) {
						if ($chk(getSendSubmit())) {
							var b = getSendSubmit();
							this.flowNextPredictWithSubmit(b)
						} else {
							this.flowNextPredictWithoutSubmit()
						}
					} else {
						this.flowNextPredictWithoutSubmit()
					}
				}
			}
		},
		flowNextPredictWithSubmit_bak : function (d) {
			this.setSendDisable();
			var b = this.options.btnlist.indexOf("send");
			var a = this.pNode().get(this.options.tidinvokeparam[b]);
			if ($chk(a)) {
				if (a == true || a == "true") {
					this.wfdata.isInvokeTid = true
				} else {
					this.wfdata.isInvokeTid = false
				}
			} else {
				this.wfdata.isInvokeTid = false
			}
			var c = {
				ctrl : this.ctrls.flowNextPredict,
				data : this.wfdata,
				onSuccess : function (n) {
					this.dataContainer.combine(d.dataContainer);
					var q = pc.getResData("result", n).value;
					if (q == "1") {
						this.wfdata.isClickNext = "1";
						var m = pc.getResData("gwDm", n).value;
						var f = pc.getResData("swryDm", n).value;
						var g = pc.getResData("swjgDm", n).value;
						var p = [];
						var h = new Hash();
						h.set("userId", f);
						h.set("swjgDm", g);
						h.set("gwDm", m);
						p.include(h);
						this.wfdata.userList = p;
						var k = this.wfdata;
						this.flowSendWithSubmit(d)
					} else {
						var l = pc.getResData("errMsg", n).value;
						swordAlert(l);
						this.setSendEnable();
						this.wfdata.isClickNext = "0"
					}
				}
				.bind(this)
			};
			wfDelegate(c)
		},
		flowNextPredictWithSubmit : function (f) {
			var d = f.options.ctrl;
			var c = this.options.btnlist.indexOf("send");
			var a = this.pNode().get(this.options.tidinvokeparam[c]);
			if ($chk(a)) {
				if (a == true || a == "true") {
					this.wfdata.isInvokeTid = true
				} else {
					this.wfdata.isInvokeTid = false
				}
			} else {
				this.wfdata.isInvokeTid = false
			}
			f.setCtrl(this.ctrls.flowNextPredict);
			f.pushData(this.dataname, JSON.encode(this.wfdata));
			if (this.wfdata.isShowSpForm) {
				f.pushData($w("opinionForm").getSubmitData())
			}
			var b = f.getFunc(f.options.onSubmitBefore);
			f.removeEvents("onSubmitBefore");
			f.addEvent("onSubmitBefore", function (k, h) {
				this.setSendDisable();
				for (var g = 0; g < b.length; g++) {
					b[g].run([k, h])
				}
				if (f.isContinue == false) {
					this.setSendEnable()
				}
			}
				.bind(this));
			f.removeEvents("onSuccess");
			f.removeEvents("onSubmitAfter");
			f.addEvent("onSuccess", function (r, q) {
				this.dataContainer.combine(f.dataContainer);
				var t = pc.getResData("result", q).value;
				if (t == "1") {
					this.wfdata.isClickNext = "1";
					var p = pc.getResData("gwDm", q).value;
					var k = pc.getResData("swrysfDm", q).value;
					var g = pc.getResData("swryDm", q).value;
					var h = pc.getResData("swjgDm", q).value;
					var s = [];
					var l = new Hash();
					l.set("userId", g);
					l.set("swrysfDm", k);
					l.set("swjgDm", h);
					l.set("gwDm", p);
					s.include(l);
					this.wfdata.userList = s;
					var m = this.wfdata;
					f.setCtrl(d);
					if (typeof getSendSubmit != "undefined" && getSendSubmit instanceof Function) {
						if ($chk(getSendSubmit())) {
							this.flowSendWithSubmit()
						} else {
							this.flowSendWithoutSubmit()
						}
					} else {
						this.flowSendWithoutSubmit()
					}
				} else {
					var n = pc.getResData("errMsg", q).value;
					swordAlert(n);
					this.setSendEnable();
					this.wfdata.isClickNext = "0"
				}
			}
				.bind(this));
			f.submit()
		},
		flowNextPredictWithoutSubmit : function () {
			this.setSendDisable();
			this.wfdata.isInvokeTid = false;
			var a = {
				ctrl : this.ctrls.flowNextPredict,
				data : this.wfdata,
				onSuccess : function (k) {
					var m = pc.getResData("result", k).value;
					if (m == "1") {
						this.wfdata.isClickNext = "1";
						var h = pc.getResData("gwDm", k).value;
						var d = pc.getResData("swrysfDm", k).value;
						var b = pc.getResData("swryDm", k).value;
						var c = pc.getResData("swjgDm", k).value;
						var l = [];
						var f = new Hash();
						f.set("userId", b);
						f.set("swrysfDm", d);
						f.set("swjgDm", c);
						f.set("gwDm", h);
						l.include(f);
						this.wfdata.userList = l;
						if (typeof getSendSubmit != "undefined" && getSendSubmit instanceof Function) {
							if ($chk(getSendSubmit())) {
								this.flowSendWithSubmit()
							} else {
								this.flowSendWithoutSubmit()
							}
						} else {
							this.flowSendWithoutSubmit()
						}
					} else {
						var g = pc.getResData("errMsg", k).value;
						swordAlert(g);
						this.setSendEnable();
						this.wfdata.isClickNext = "0"
					}
				}
				.bind(this)
			};
			wfDelegate(a)
		},
		flowNext : function () {
			if (this.wfdata.nextWorkitemId == undefined || this.wfdata.nextWorkitemId == "") {
				swordAlertRight("推送成功！下一个环节是分支汇聚节点，需要所有分支都完成后才能办理，暂时无法进入下一个环节办理界面！");
				return
			}
			this.wfdata.isClickNext = "0";
			var a = new SwordSubmit();
			a.pushData("workitemId", this.wfdata.nextWorkitemId);
			a.setCtrl("WorkFlowCTRL_queryNextRwbldz");
			a.addEvent("onSuccess", function (d, c) {
				var b = c.getAttr("rwbldz");
				b = b.replace(/\#/g, "%23");
				window.location.href = AddBizCode2URL(b)
			});
			a.submit()
		},
		flowSuspend : function (a) {
			this.submit(a, this.ctrls.suspend)
		},
		flowActivation : function (a) {
			this.submit(a, this.ctrls.activation)
		},
		flowSubStart : function (b) {
			var a = {
				ctrl : this.ctrls.subProcsubmit,
				data : {
					WFDATA : this.wfdata
				},
				onSuccess : function (d) {
					this.setWfData(d);
					var c = {
						titleName : "选择下一环节办理人",
						width : 700,
						height : 450,
						isMin : "false",
						isNormal : "false",
						isMax : "false"
					};
					c.param = {
						win : window,
						data : d,
						swordWorkflowName : this.options.name
					};
					swordAlertIframe(AddBizCode2URL("/sword?tid=Pre_WorkflowInitPageProxy_initSubProcSelectPage"), c, null)
				}
				.bind(this)
			};
			jsDelegate(a)
		},
		flowNextTaskRulePredict : function () {
			var a = getCookie("functionNextTaskQueryCode");
			var d = getCookie("functionNextTaskRuleCode");
			if ((!$chk(a) && (a == null || a == "")) || d == "false") {
				var b = window.showModalDialog("workflow/htmls/wf_nextTaskRule.html", window, "dialogHeight:240px;dialogWidth:430px;status:no;");
				if ($chk(b)) {
					var c = b.split(";");
					setCookie("functionNextTaskQueryCode", c[0]);
					setCookie("functionNextTaskRuleCode", c[1]);
					this.flowNextTaskPredict()
				}
			} else {
				this.flowNextTaskPredict()
			}
		},
		flowNextTaskPredict : function () {
			var a = getCookie("functionNextTaskQueryCode");
			if (a != null && a != "") {
				this.flowNextTaskPredictWithoutSubmit()
			}
		},
		flowNextTaskPredictWithSubmit : function (f) {
			var d = this.options.btnlist.indexOf("nextTask");
			var a = this.pNode().get(this.options.tidinvokeparam[d]);
			if ($chk(a)) {
				if (a == true || a == "true") {
					this.wfdata.isInvokeTid = true
				} else {
					this.wfdata.isInvokeTid = false
				}
			} else {
				this.wfdata.isInvokeTid = false
			}
			var b = getCookie("functionNextTaskQueryCode");
			if ($chk(b)) {
				this.wfdata.queryCode = b
			}
			f.setCtrl(this.ctrls.flowNextTaskPredict);
			f.pushData(this.dataname, JSON.encode(this.wfdata));
			var c = f.getFunc(f.options.onSubmitBefore);
			f.removeEvents("onSubmitBefore");
			f.addEvent("onSubmitBefore", function (k, h) {
				this.setSendDisable();
				for (var g = 0; g < c.length; g++) {
					c[g].run([k, h])
				}
				if (f.isContinue == false) {
					this.setSendEnable()
				}
			}
				.bind(this));
			f.removeEvents("onSuccess");
			f.removeEvents("onSubmitAfter");
			f.addEvent("onSuccess", function (m, k) {
				this.dataContainer.combine(f.dataContainer);
				var g = pc.getResData("result", k).value;
				if (g == "1") {
					var h = pc.getResData("url", k).value;
					this.flowNextTask(h)
				} else {
					var l = pc.getResData("errMsg", k).value;
					swordAlert(l);
					this.setFlowNextEnable()
				}
			}
				.bind(this));
			f.submit()
		},
		flowNextTaskPredictWithoutSubmit : function () {
			this.setFlowNextTaskDisable();
			this.wfdata.isInvokeTid = false;
			var a = getCookie("functionNextTaskQueryCode");
			if ($chk(a)) {
				this.wfdata.queryCode = a
			}
			var b = {
				ctrl : this.ctrls.flowNextTaskPredict,
				data : this.wfdata,
				onSuccess : function (f) {
					var c = pc.getResData("result", f).value;
					if (c == "1") {
						var d = pc.getResData("url", f).value;
						this.flowNextTask(d)
					} else {
						var g = pc.getResData("errMsg", f).value;
						swordAlert(g);
						this.setFlowNextTaskEnable()
					}
				}
				.bind(this)
			};
			wfDelegate(b)
		},
		flowNextTask : function (a) {
			a = a.replace(/\#/g, "%23");
			window.location.href = AddBizCode2URL(a)
		},
		flowStop : function (f) {
			var a = $w(this.toolBarName).pNode().getElement("div[name='container']");
			var d = a.getElement("div[name='box']");
			var b = d.getElement("div[name='stop']").getElements("div[name='caption']")[0].get("html");
			var c = b.indexOf("(");
			if (c != -1) {
				b = b.substring(0, c)
			}
			swordConfirm("请确认是否需要" + b + "此流程，点击确认该流程将被" + b + "！", {
				onOk : function () {
					var h = {
						bizProcId : this.wfdata.bizProcId,
						workItemId : this.wfdata.workItemId,
						isTaskMerger : this.wfdata.isTaskMerger,
						opertType : "terminated",
						from : "toolbar"
					};
					var g = {
						tid : "Core_ProcessService_getAllProcInfoTreeByBizlcslId",
						data : h,
						onSuccess : function (k) {},
						onAfterLoadData : function (l) {
							if ($chk(pc.getResData("subProcPage", l))) {
								var m = pc.getResData("subProcPage", l).value;
								this.setWfData(l);
								swordAlertIframe(AddBizCode2URL(m), {
									titleName : "流程树信息",
									param : {
										win : window,
										swordWorkflowName : this.options.name
									},
									data : pageContainer.getResData("allProcInfoTreeList", l),
									width : 760,
									height : 450,
									isNormal : false,
									isMin : false,
									isMax : false
								})
							} else {
								if (typeof getAbortSubmit != "undefined" && getAbortSubmit instanceof Function) {
									var p = getAbortSubmit();
									if (!$chk(p)) {
										return
									}
									var k = p.getFunc(p.options.onSuccess);
									var n = p.getFunc(p.options.onSubmitAfter);
									p.removeEvents("onSubmitAfter");
									p.removeEvents("onSuccess");
									p.addEvent("onSuccess", function (s, r) {
										this.setWfData(r);
										this.wfdata.message = "";
										swordAlertRight("流程已成功" + b + "!");
										if (this.wfdata.returnCode == "1") {
											this.options.btnlist.each(function (u, t) {
												if (u != "viewprocess" && u != "nextTask") {
													this.setBtnStatusByName(u, "2")
												}
											}
												.bind(this));
											this.wfdata.isPermitContinue = false;
											this.wfdata.isProcessClosed = true
										}
										for (var q = 0; q < k.length; q++) {
											k[q].run([s, r])
										}
										for (var q = 0; q < n.length; q++) {
											n[q].run([s, r])
										}
									}
										.bind(this));
									p.pushData(this.dataname, JSON.encode(this.wfdata));
									p.submit()
								} else {
									var p = new SwordSubmit();
									p.setCtrl(this.ctrls.stop);
									p.addEvent("onSuccess", function (r, q) {
										this.setWfData(q);
										this.wfdata.message = "";
										swordAlertRight("流程已成功" + b + "!");
										if (this.wfdata.returnCode == "1") {
											this.options.btnlist.each(function (t, s) {
												if (t != "viewprocess" && t != "nextTask") {
													this.setBtnStatusByName(t, "2")
												}
											}
												.bind(this));
											this.wfdata.isPermitContinue = false;
											this.wfdata.isProcessClosed = true
										}
									}
										.bind(this));
									p.pushData(this.dataname, JSON.encode(this.wfdata));
									p.submit()
								}
							}
						}
						.bind(this)
					};
					jsDelegate(g)
				}
				.bind(this)
			})
		},
		flowEnd : function (a) {
			swordConfirm("请确实是否需要结束此流程，点击确认，该流程将被结束！", {
				onOk : function () {
					if ($chk(a)) {
						var d = pc.getWidget(a);
						if (!$chk(d)) {
							swordAlert("未找到流程回退要提交的组件" + a);
							return
						}
						var b = d.getFunc(d.options.onSuccess);
						var h = d.getFunc(d.options.onSubmitAfter);
						d.removeEvents("onSubmitAfter");
						d.removeEvents("onSuccess");
						var c = this.options.btnlist.indexOf("end");
						var f = this.pNode().get(this.options.tidinvokeparam[c]);
						if ($chk(f)) {
							if (f == true || f == "true") {
								this.wfdata.isInvokeTid = true
							} else {
								this.wfdata.isInvokeTid = false
							}
						} else {
							this.wfdata.isInvokeTid = false
						}
						d.addEvent("onSuccess", function (m, l) {
							this.setWfData(l);
							this.showMessage();
							if (this.wfdata.returnCode == "1") {
								this.options.btnlist.each(function (p, n) {
									if (p != "viewprocess" && p != "nextTask") {
										this.setBtnStatusByName(p, "2")
									}
								}
									.bind(this));
								this.wfdata.isPermitContinue = false;
								this.wfdata.isProcessClosed = true
							}
							for (var k = 0; k < b.length; k++) {
								b[k].run([m, l])
							}
							for (var k = 0; k < h.length; k++) {
								h[k].run([m, l])
							}
						}
							.bind(this));
						d.setCtrl(this.ctrls.end);
						d.pushData(this.dataname, JSON.encode(this.wfdata));
						d.submit()
					} else {
						var g = {
							ctrl : this.ctrls.end,
							data : this.wfdata,
							onSuccess : function (k) {
								this.setWfData(k);
								if (this.wfdata.returnCode == "1") {
									this.options.btnlist.each(function (m, l) {
										if (m != "viewprocess" && m != "nextTask") {
											this.setBtnStatusByName(m, "2")
										}
									}
										.bind(this));
									this.wfdata.isPermitContinue = false;
									this.wfdata.isProcessClosed = true
								}
								this.showMessage()
							}
							.bind(this)
						};
						wfDelegate(g)
					}
				}
				.bind(this)
			})
		},
		flowViewprocess : function (b) {
			if (this.wfdata.processInsId == "") {
				swordAlert("流程还未启动!");
				return
			}
			var a = {
				titleName : "查看流程图",
				width : 700,
				height : 450,
				isMin : "false",
				isNormal : "true",
				isMax : "true"
			};
			a.param = {
				data : this.wfdata
			};
			swordAlertIframe(("/sword?ctrl=WorkFlowCTRL_initProcInsfImg&processInsId=" + this.wfdata.processInsId + "&isHistory=" + this.wfdata.isFinalTask), a, null)
		},
		submit : function (c, b) {
			if ($chk(c)) {
				var d = $w(c);
				if (!$chk(d)) {
					swordAlert("未找到流程回退要提交的组件" + c);
					return
				}
				d.setCtrl(b);
				d.pushData(this.dataname, JSON.encode(this.wfdata));
				d.addEvent("onSuccess", function (g, f) {
					this.setWfData(f);
					this.showMessage()
				}
					.bind(this));
				d.submit()
			} else {
				var a = {
					ctrl : b,
					data : this.wfdata,
					onSuccess : function (f) {
						this.setWfData(f);
						this.showMessage()
					}
					.bind(this)
				};
				wfDelegate(a)
			}
		},
		showMessage : function () {
			if (this.wfdata.message != "") {
				swordAlertRight(this.wfdata.message);
				this.wfdata.message = ""
			}
		},
		pushWfData : function (a) {
			$w(a).pushData(this.dataname, JSON.encode(this.wfdata))
		},
		resetWfData : function () {
			this.wfdata.parentProcessInsId = "";
			this.wfdata.parentLcslid = "";
			this.wfdata.actInsId = "";
			this.wfdata.parentActInsId = "",
			this.wfdata.bizProcId = "";
			this.wfdata.bizActId = "";
			this.wfdata.bizPreActId = "";
			this.wfdata.workItemId = "";
			this.wfdata.parentWorkItemId = "";
			this.wfdata.nextWorkitemId = "";
			this.wfdata.isClickNext = "0";
			this.wfdata.isStarted = "0";
			this.wfdata.processInsId = "";
			this.wfdata.userList.empty();
			this.initData();
			this.setEnabledStatus();
			this.options.btnlist.each(function (b, a) {
				this.setBtnStatusByIndex(a, this.options.btnStatus.substring(a, a + 1))
			}
				.bind(this));
			this.wfdata.bizBtnList.each(function (b, a) {
				this.setBtnStatusByName(b.name, b.isshow)
			}
				.bind(this));
			if (this.wfdata.workflowFlag == "1") {
				if (this.wfdata.isReadOnly) {
					$w(this.toolBarName).options.pNode.setStyle("display", "none");
					if (this.wfdata.isShowSpForm) {
						$w("opinionForm").options.pNode.setStyle("display", "none")
					}
				} else {
					this.initSubmitComponent()
				}
				if ($chk(this.wfdata.workItemId)) {
					this.setFlowNextTaskEnable()
				} else {
					this.setFlowNextTaskDisable()
				}
				if ($chk(this.wfdata.subSendFlag)) {
					this.initSendSubShow(this.wfdata.subSendFlag)
				}
			}
		},
		clear : function () {
			this.dataContainer.empty()
		},
		isProcStarted : function () {
			if (this.wfdata.isStarted == "0") {
				return false
			} else {
				return true
			}
		},
		onBoxClosing : function () {
			if (this.wfdata.boxClosingEventFlag != "ok") {
				this.setSendEnable()
			}
			this.wfdata.boxClosingEventFlag = ""
		},
		initSPForm : function () {
			if (this.options.isShowSpForm == true || this.wfdata.isShowSpForm == true || this.wfdata.isShowSpForm == "true") {
				this.wfdata.isShowSpForm = true;
				this.createOpinionForm();
				this.createDiplomaHistory();
				this.initDiplomaHistory(this.wfdata.bizProcId)
			} else {
				if (this.wfdata.isShowApproveHistory == true) {
					if (this.wfdata.isStarted == "1") {
						this.createDiplomaHistory();
						this.initDiplomaHistory(this.wfdata.bizProcId)
					}
				}
			}
		},
		createDiplomaHistory : function () {
			var f = new Element("div", {
					sword : "SwordGrid",
					name : "diplomaHistoryGrid",
					caption : "文书审批流转历史",
					dataX : "100%",
					autoHeight : "false",
					showConsole : "false",
					dragWidth : "false"
				});
			this.pNode().adopt(f);
			var p = new Element("div", {
					name : "hdmc",
					caption : "审批环节",
					type : "",
					x : "15%",
					sort : "false"
				}).inject(f, "bottom");
			var n = new Element("div", {
					name : "spr",
					caption : "审批人",
					type : "",
					x : "15%",
					sort : "false"
				}).inject(f, "bottom");
			var l = new Element("div", {
					name : "spjg",
					caption : "审批意见",
					type : "select",
					x : "10%",
					sort : "false",
					disable : "true"
				}).inject(f, "bottom");
			var q = new Element("div", {
					code : "1",
					caption : "同意"
				}).inject(l, "bottom");
			var g = new Element("div", {
					code : "0",
					caption : "不同意"
				}).inject(l, "bottom");
			var k = new Element("div", {
					name : "spyj",
					caption : "审批意见说明",
					type : "",
					x : "40%",
					sort : "false"
				}).inject(f, "bottom");
			var h = new Element("div", {
					name : "spsj",
					caption : "审批日期",
					type : "",
					x : "15%",
					sort : "false"
				}).inject(f, "bottom");
			var m = new SwordGrid();
			f.pNode = f;
			m.initParam(f);
			pc.widgets.set("diplomaHistoryGrid", m)
		},
		initSendSubShow : function (a) {
			if (a == "6") {
				this.setSendEnable();
				this.setStartSubProcDisable()
			} else {
				if (a == "5") {
					this.setSendDisable();
					this.setStartSubProcDisable()
				} else {
					if (a == "4") {
						this.setStartSubProcHidden()
					} else {
						if (a == "3") {
							this.setStartSubProcEnable()
						} else {
							if (a == "2") {
								this.setStartSubProcHidden()
							} else {
								if (a == "1") {
									this.setSendDisable();
									this.setStartSubProcEnable()
								} else {
									this.setStartSubProcHidden()
								}
							}
						}
					}
				}
			}
		},
		getIsZs : function () {
			var a = false;
			if ($chk(this.wfdata.isZs)) {
				a = this.wfdata.isZs
			}
			return a
		},
		initDiplomaHistory : function (c) {
			var b = {
				bizProcId : c,
				workItemId : this.wfdata.workItemId,
				isTaskMerger : this.wfdata.isTaskMerger
			};
			var a = {
				tid : "Core_TyslService_initSpFormAndGrid",
				data : b,
				onAfterLoadData : function (d) {
					if (typeof alterOpinionForm != "undefined" && alterOpinionForm instanceof Function) {
						alterOpinionForm()
					}
				}
			};
			jsDelegate(a)
		},
		createOpinionForm : function () {
			var g = "opinionForm";
			var b = this.options.spCaption + "意见";
			var f = new Element("div", {
					sword : "SwordForm",
					name : g,
					caption : b,
					layout : "layer0",
					panel : "true",
					userdefine : "true",
					size : "{'TdWidth':'600px'}"
				});
			this.pNode().adopt(f);
			var d = [];
			d.push('<div name="spy" type="hidden" caption="审批人" ></div>');
			d.push('<div name="spjg" type="hidden" caption="审批结果" defValue="1" ></div>');
			d.push('<div name="spswjg" type="hidden" caption="审批税务机关" ></div>');
			d.push('<table class="tab_form" cellpadding="0" cellspacing="0" border="0"><COLGROUP><COL width="20%" /><col width="80%" /></COLGROUP>');
			d.push("<tr>");
			d.push("<th>" + this.options.spCaption + '意见</th><td><div name="result" type="radio" col="-1" defValue="1,1" onClickBefore="checkIsAgree()" ><div code="1" caption="同意" ></div><div code="0" caption="不同意" ></div></div></td>');
			d.push("</tr>");
			d.push("<tr>");
			d.push("<th>" + this.options.spCaption + '意见说明</th><td><div name="opinion" type="textarea" defValue="同意" style="width:600px" ></div></td>');
			d.push("</tr>");
			d.push("<tr>");
			d.push("<th>" + this.options.spCaption + '人</th><td style="align:left;text-align:left;"><div name="spymc" type="text" disable="true"></div></td>');
			d.push("</tr>");
			d.push("<tr>");
			d.push("<th>" + this.options.spCaption + '日期</th><td style="align:left;text-align:left;"><div name="spsj" type="text" disable="true"></div></td>');
			d.push("</tr>");
			d.push("<tr>");
			d.push("<th>" + this.options.spCaption + '税务机关</th style="align:left;text-align:left;"><td><div name="spswjgmc" type="text" disable="true"></div></td>');
			d.push("</tr>");
			d.push('<tr style="display:none">');
			d.push('<th>流程实例ID</th><td><div name="lcslid" type="label" show="false" caption="流程实例ID" defValue="' + this.wfdata.bizProcId + '" ></div></td>');
			d.push("</tr>");
			d.push('<tr style="display:none">');
			d.push('<th>>活动实例ID</th><td><div name="hdslid" type="label" show="false" caption="活动实例ID" defValue="' + this.wfdata.bizActId + '" ></div></td>');
			d.push("</tr>");
			d.push("</table>");
			f.set("html", d.join(""));
			pc.initWidgetParam(f);
			var c = $w(g),
			a = c.options.pNode;
			if (a.get("userdefine") == "true") {
				c.renderForm(a, pc.getInitData(g))
			}
		},
		creatFlzlGrid : function () {
			var k = new Element("div", {
					sword : "SwordGrid",
					name : "flzlGrid",
					caption : "附送资料",
					dataX : "100%",
					autoHeight : "false",
					showConsole : "false"
				}).inject($$("body")[0], "bottom");
			var g = new Element("div", {
					name : "name",
					caption : "资料名称",
					type : "",
					x : "30%",
					sort : "false"
				}).inject(k, "bottom");
			var f = new Element("div", {
					name : "fs",
					caption : "份数",
					type : "",
					x : "15%",
					sort : "false"
				}).inject(k, "bottom");
			var m = new Element("div", {
					name : "cllx",
					caption : "处理类型",
					type : "",
					x : "15%",
					sort : "false"
				}).inject(k, "bottom");
			var l = new Element("div", {
					name : "bz",
					caption : "备注",
					type : "",
					x : "40%",
					sort : "false"
				}).inject(k, "bottom");
			var h = new SwordGrid();
			k.pNode = k;
			h.initParam(k);
			pc.widgets.set("flzlGrid", h)
		},
		flowCaiji : function () {
			var a = {
				lcslid : this.wfdata.bizProcId,
				swry_dm : this.wfdata.dzzlSwryDm,
				swjg_dm : this.wfdata.dzzlSwjgDm,
				lcswsx_dm : this.wfdata.wfTaxItemID,
				slswsx_dm : this.wfdata.wfSlswsxDm
			};
			top.xcallserv(a, "R_HXZG_DZDA_001")
		},
		flowChaxun : function () {
			var a = {
				lcslid : this.wfdata.bizProcId,
				swry_dm : this.wfdata.dzzlSwryDm,
				swjg_dm : this.wfdata.dzzlSwjgDm,
				userID : this.wfdata.dzzlSwryDm,
				swjgdm : this.wfdata.dzzlSwjgDm,
				swrysfdm : ""
			};
			top.xcallserv(a, "R_HXZG_DZDA_003")
		},
		setCaijiEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("caiji", "1")
			}
		},
		setCaijiDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("caiji", "2")
			}
		},
		setChaxunEnable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("chaxun", "1")
			}
		},
		setChaxunDisable : function () {
			var a = $w(this.toolBarName);
			if (typeof a != "undefined" && a != null) {
				this.setBtnStatusByName("chaxun", "2")
			}
		},
		flowDzzlPredict : function () {
			var a = new SwordSubmit();
			a.pushData("bizProcId", this.wfdata.bizProcId);
			a.pushData("lcdyid", this.wfdata.lcdyid);
			a.pushData("actDefId", this.wfdata.actDefId);
			a.setTid("SWZJ.ZGGZL.GGFW.JYDZZLSFCJWZ");
			a.addEvent("onSuccess", function (f, d) {
				var b = d.getAttr("reCode");
				if ("N" == b) {
					swordAlertWrong("电子资料尚未采集完整，请采集完整后再进行推送操作！")
				} else {
					if ("C" == b) {
						swordConfirm("电子资料采集完整校验参数开关已关闭，确定推送吗?", {
							onOk : function () {
								if (typeof checkBeforeSend != "undefined" && checkBeforeSend instanceof Function) {
									checkBeforeSend()
								} else {
									if (typeof getSendSubmit != "undefined" && getSendSubmit instanceof Function) {
										var g = getSendSubmit();
										if (!$chk(g)) {
											return
										}
										this.flowPredictWithSubmit(g)
									} else {
										this.flowPredictWithoutSubmit()
									}
								}
							}
							.bind(this)
						}).bind(this)
					} else {
						if ("null" == b || null == b) {
							swordAlertWrong("电子资料采集完整校验传入参数错误！")
						} else {
							if ("DBNOT" == b) {
								swordAlertWrong("电子资料采集完整校验时数据源异常，请检查数据源！")
							} else {
								if (typeof checkBeforeSend != "undefined" && checkBeforeSend instanceof Function) {
									checkBeforeSend()
								} else {
									if (typeof getSendSubmit != "undefined" && getSendSubmit instanceof Function) {
										var c = getSendSubmit();
										if (!$chk(c)) {
											return
										}
										this.flowPredictWithSubmit(c)
									} else {
										this.flowPredictWithoutSubmit()
									}
								}
							}
						}
					}
				}
			}
				.bind(this));
			a.submit()
		}
	});
function checkIsAgree(b, a) {
	if (b == "1") {
		$w("opinionForm").setValue("opinion", a)
	} else {
		$w("opinionForm").setValue("opinion", "")
	}
	$w("opinionForm").setValue("spjg", b);
	if (typeof agreeExtFun != "undefined" && agreeExtFun instanceof Function) {
		agreeExtFun()
	}
}
function wfDelegate(b) {
	var a = pc.getReq({
			tid : $chk(b.tid) ? b.tid : "",
			ctrl : $chk(b.ctrl) ? b.ctrl : "",
			async : false,
			widgets : [{
					sword : "attr",
					name : "WFDATA",
					value : JSON.encode(b.data)
				}
			]
		});
	if (b.widgetDatas) {
		b.widgetDatas.each(function (c) {
			var f = c.name;
			if (f) {
				if (!$w(f).validate()) {
					return
				}
			}
		});
		a.data.extend(b.widgetDatas)
	}
	b.req = a;
	pc.postReq(b)
}
function wfConfirmSelectedUsers(g, b, f) {
	$w(b).wfdata.boxClosingEventFlag = "ok";
	if ($chk(g)) {
		var a = JSON.decode(g);
		var d = a.isFinal;
		if ($chk(a.isFromManage)) {
			var c = a.isFromManage;
			if ("true" == c) {
				$w(b).wfdata.isFromManage = a.isFromManage
			}
		}
		$w(b).wfdata.nextActDefId = a.nextActDefId;
		if ($chk(a.conditionList)) {
			$w(b).wfdata.conditionList = a.conditionList
		}
		if ($chk(a.fjxx)) {
			$w(b).wfdata.fjxx = a.fjxx
		}
		if ("true" != d) {
			$w(b).wfdata.userList = a.hostUsers
		}
		if (typeof getSendSubmit != "undefined" && getSendSubmit instanceof Function) {
			if ($chk(getSendSubmit())) {
				$w(b).flowSendWithSubmit()
			} else {
				$w(b).flowSendWithoutSubmit()
			}
		} else {
			$w(b).flowSendWithoutSubmit()
		}
	}
}
function wfConfirmSubProcSelectedUsers(b, a) {
	if ($chk(b)) {
		$w(a).wfdata.userList = JSON.decode(b).hostUsers;
		$w(a).flowStartSubFlowSubmit()
	}
}
function wfCancelSelectedUsers(a) {
	$w(a).wfdata.boxClosingEventFlag = "cancel";
	$w(a).clear()
}
function wfConfirmFlowback(b, c, a) {
	$w(b).flowBackCommand(c, a)
}
function wfInvalidProcessOnSuccess(a) {
	$w(a).options.btnlist.each(function (c, b) {
		if (c != "viewprocess" && c != "nextTask") {
			$w(a).setBtnStatusByName(c, "2")
		}
	});
	swordAlertRight("作废成功!")
}
function getSpjg() {
	if ($chk($w("opinionForm"))) {
		return $w("opinionForm").getValue("result")
	} else {
		swordAlert("此页面没有审批表单，此方法不能使用！")
	}
}
function isExistsSubProcess() {}

function setCookie(a, c) {
	var b = 30;
	var d = new Date();
	d.setTime(d.getTime() + b * 24 * 60 * 60 * 1000);
	document.cookie = a + "=" + escape(c) + ";expires=" + d.toGMTString()
}
function getCookie(b) {
	var a,
	c = new RegExp("(^| )" + b + "=([^;]*)(;|$)");
	if (a = document.cookie.match(c)) {
		return unescape(a[2])
	} else {
		return null
	}
}
function invokeFunction(c) {
	var b = pc.getWidgetsByType("SwordWorkflow").getKeys()[0];
	var a = $w(b).getFunction(c);
	a.run("", $w(b))
}
function flowViewBackReason() {
	var f = pc.getWidgetsByType("SwordWorkflow").getKeys()[0];
	var a = $w(f).wfdata.htly;
	var c = $w(f).wfdata.workItemId;
	var b = {
		titleName : "回退信息",
		width : 600,
		height : 300,
		top : 50,
		isMin : "false",
		isNormal : "false",
		isMax : "false"
	};
	var d = AddBizCode2URL("/sword?ctrl=WorkFlowCTRL_viewBackReason&workItemId=" + c);
	swordAlertIframe(d, b, null)
};
